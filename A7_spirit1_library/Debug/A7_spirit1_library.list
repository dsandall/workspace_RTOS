
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000711c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ec  080072a4  080072a4  000172a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007490  08007490  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007490  08007490  00017490  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007498  08007498  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800749c  0800749c  0001749c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080074a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000014  080074b4  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  080074b4  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001514a  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038aa  00000000  00000000  000351d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014a0  00000000  00000000  00038a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f92  00000000  00000000  00039f20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029b10  00000000  00000000  0003aeb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017ab3  00000000  00000000  000649c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f987c  00000000  00000000  0007c475  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053ec  00000000  00000000  00175cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  0017b0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800728c 	.word	0x0800728c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	0800728c 	.word	0x0800728c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2uiz>:
 8000974:	004a      	lsls	r2, r1, #1
 8000976:	d211      	bcs.n	800099c <__aeabi_d2uiz+0x28>
 8000978:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800097c:	d211      	bcs.n	80009a2 <__aeabi_d2uiz+0x2e>
 800097e:	d50d      	bpl.n	800099c <__aeabi_d2uiz+0x28>
 8000980:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000984:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000988:	d40e      	bmi.n	80009a8 <__aeabi_d2uiz+0x34>
 800098a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800098e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000992:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000996:	fa23 f002 	lsr.w	r0, r3, r2
 800099a:	4770      	bx	lr
 800099c:	f04f 0000 	mov.w	r0, #0
 80009a0:	4770      	bx	lr
 80009a2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009a6:	d102      	bne.n	80009ae <__aeabi_d2uiz+0x3a>
 80009a8:	f04f 30ff 	mov.w	r0, #4294967295
 80009ac:	4770      	bx	lr
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	4770      	bx	lr

080009b4 <__aeabi_uldivmod>:
 80009b4:	b953      	cbnz	r3, 80009cc <__aeabi_uldivmod+0x18>
 80009b6:	b94a      	cbnz	r2, 80009cc <__aeabi_uldivmod+0x18>
 80009b8:	2900      	cmp	r1, #0
 80009ba:	bf08      	it	eq
 80009bc:	2800      	cmpeq	r0, #0
 80009be:	bf1c      	itt	ne
 80009c0:	f04f 31ff 	movne.w	r1, #4294967295
 80009c4:	f04f 30ff 	movne.w	r0, #4294967295
 80009c8:	f000 b970 	b.w	8000cac <__aeabi_idiv0>
 80009cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009d4:	f000 f806 	bl	80009e4 <__udivmoddi4>
 80009d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e0:	b004      	add	sp, #16
 80009e2:	4770      	bx	lr

080009e4 <__udivmoddi4>:
 80009e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e8:	9e08      	ldr	r6, [sp, #32]
 80009ea:	460d      	mov	r5, r1
 80009ec:	4604      	mov	r4, r0
 80009ee:	460f      	mov	r7, r1
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d14a      	bne.n	8000a8a <__udivmoddi4+0xa6>
 80009f4:	428a      	cmp	r2, r1
 80009f6:	4694      	mov	ip, r2
 80009f8:	d965      	bls.n	8000ac6 <__udivmoddi4+0xe2>
 80009fa:	fab2 f382 	clz	r3, r2
 80009fe:	b143      	cbz	r3, 8000a12 <__udivmoddi4+0x2e>
 8000a00:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a04:	f1c3 0220 	rsb	r2, r3, #32
 8000a08:	409f      	lsls	r7, r3
 8000a0a:	fa20 f202 	lsr.w	r2, r0, r2
 8000a0e:	4317      	orrs	r7, r2
 8000a10:	409c      	lsls	r4, r3
 8000a12:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a16:	fa1f f58c 	uxth.w	r5, ip
 8000a1a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a1e:	0c22      	lsrs	r2, r4, #16
 8000a20:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a24:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a28:	fb01 f005 	mul.w	r0, r1, r5
 8000a2c:	4290      	cmp	r0, r2
 8000a2e:	d90a      	bls.n	8000a46 <__udivmoddi4+0x62>
 8000a30:	eb1c 0202 	adds.w	r2, ip, r2
 8000a34:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a38:	f080 811c 	bcs.w	8000c74 <__udivmoddi4+0x290>
 8000a3c:	4290      	cmp	r0, r2
 8000a3e:	f240 8119 	bls.w	8000c74 <__udivmoddi4+0x290>
 8000a42:	3902      	subs	r1, #2
 8000a44:	4462      	add	r2, ip
 8000a46:	1a12      	subs	r2, r2, r0
 8000a48:	b2a4      	uxth	r4, r4
 8000a4a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a4e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a52:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a56:	fb00 f505 	mul.w	r5, r0, r5
 8000a5a:	42a5      	cmp	r5, r4
 8000a5c:	d90a      	bls.n	8000a74 <__udivmoddi4+0x90>
 8000a5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000a62:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a66:	f080 8107 	bcs.w	8000c78 <__udivmoddi4+0x294>
 8000a6a:	42a5      	cmp	r5, r4
 8000a6c:	f240 8104 	bls.w	8000c78 <__udivmoddi4+0x294>
 8000a70:	4464      	add	r4, ip
 8000a72:	3802      	subs	r0, #2
 8000a74:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a78:	1b64      	subs	r4, r4, r5
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	b11e      	cbz	r6, 8000a86 <__udivmoddi4+0xa2>
 8000a7e:	40dc      	lsrs	r4, r3
 8000a80:	2300      	movs	r3, #0
 8000a82:	e9c6 4300 	strd	r4, r3, [r6]
 8000a86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d908      	bls.n	8000aa0 <__udivmoddi4+0xbc>
 8000a8e:	2e00      	cmp	r6, #0
 8000a90:	f000 80ed 	beq.w	8000c6e <__udivmoddi4+0x28a>
 8000a94:	2100      	movs	r1, #0
 8000a96:	e9c6 0500 	strd	r0, r5, [r6]
 8000a9a:	4608      	mov	r0, r1
 8000a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa0:	fab3 f183 	clz	r1, r3
 8000aa4:	2900      	cmp	r1, #0
 8000aa6:	d149      	bne.n	8000b3c <__udivmoddi4+0x158>
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d302      	bcc.n	8000ab2 <__udivmoddi4+0xce>
 8000aac:	4282      	cmp	r2, r0
 8000aae:	f200 80f8 	bhi.w	8000ca2 <__udivmoddi4+0x2be>
 8000ab2:	1a84      	subs	r4, r0, r2
 8000ab4:	eb65 0203 	sbc.w	r2, r5, r3
 8000ab8:	2001      	movs	r0, #1
 8000aba:	4617      	mov	r7, r2
 8000abc:	2e00      	cmp	r6, #0
 8000abe:	d0e2      	beq.n	8000a86 <__udivmoddi4+0xa2>
 8000ac0:	e9c6 4700 	strd	r4, r7, [r6]
 8000ac4:	e7df      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000ac6:	b902      	cbnz	r2, 8000aca <__udivmoddi4+0xe6>
 8000ac8:	deff      	udf	#255	; 0xff
 8000aca:	fab2 f382 	clz	r3, r2
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	f040 8090 	bne.w	8000bf4 <__udivmoddi4+0x210>
 8000ad4:	1a8a      	subs	r2, r1, r2
 8000ad6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ada:	fa1f fe8c 	uxth.w	lr, ip
 8000ade:	2101      	movs	r1, #1
 8000ae0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ae4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ae8:	0c22      	lsrs	r2, r4, #16
 8000aea:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000aee:	fb0e f005 	mul.w	r0, lr, r5
 8000af2:	4290      	cmp	r0, r2
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x124>
 8000af6:	eb1c 0202 	adds.w	r2, ip, r2
 8000afa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x122>
 8000b00:	4290      	cmp	r0, r2
 8000b02:	f200 80cb 	bhi.w	8000c9c <__udivmoddi4+0x2b8>
 8000b06:	4645      	mov	r5, r8
 8000b08:	1a12      	subs	r2, r2, r0
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b10:	fb07 2210 	mls	r2, r7, r0, r2
 8000b14:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b18:	fb0e fe00 	mul.w	lr, lr, r0
 8000b1c:	45a6      	cmp	lr, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x14e>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b28:	d202      	bcs.n	8000b30 <__udivmoddi4+0x14c>
 8000b2a:	45a6      	cmp	lr, r4
 8000b2c:	f200 80bb 	bhi.w	8000ca6 <__udivmoddi4+0x2c2>
 8000b30:	4610      	mov	r0, r2
 8000b32:	eba4 040e 	sub.w	r4, r4, lr
 8000b36:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b3a:	e79f      	b.n	8000a7c <__udivmoddi4+0x98>
 8000b3c:	f1c1 0720 	rsb	r7, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b4a:	fa05 f401 	lsl.w	r4, r5, r1
 8000b4e:	fa20 f307 	lsr.w	r3, r0, r7
 8000b52:	40fd      	lsrs	r5, r7
 8000b54:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b5e:	fa1f fe8c 	uxth.w	lr, ip
 8000b62:	fb09 5518 	mls	r5, r9, r8, r5
 8000b66:	0c1c      	lsrs	r4, r3, #16
 8000b68:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b6c:	fb08 f50e 	mul.w	r5, r8, lr
 8000b70:	42a5      	cmp	r5, r4
 8000b72:	fa02 f201 	lsl.w	r2, r2, r1
 8000b76:	fa00 f001 	lsl.w	r0, r0, r1
 8000b7a:	d90b      	bls.n	8000b94 <__udivmoddi4+0x1b0>
 8000b7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b84:	f080 8088 	bcs.w	8000c98 <__udivmoddi4+0x2b4>
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	f240 8085 	bls.w	8000c98 <__udivmoddi4+0x2b4>
 8000b8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000b92:	4464      	add	r4, ip
 8000b94:	1b64      	subs	r4, r4, r5
 8000b96:	b29d      	uxth	r5, r3
 8000b98:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b9c:	fb09 4413 	mls	r4, r9, r3, r4
 8000ba0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ba4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ba8:	45a6      	cmp	lr, r4
 8000baa:	d908      	bls.n	8000bbe <__udivmoddi4+0x1da>
 8000bac:	eb1c 0404 	adds.w	r4, ip, r4
 8000bb0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bb4:	d26c      	bcs.n	8000c90 <__udivmoddi4+0x2ac>
 8000bb6:	45a6      	cmp	lr, r4
 8000bb8:	d96a      	bls.n	8000c90 <__udivmoddi4+0x2ac>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	4464      	add	r4, ip
 8000bbe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bc2:	fba3 9502 	umull	r9, r5, r3, r2
 8000bc6:	eba4 040e 	sub.w	r4, r4, lr
 8000bca:	42ac      	cmp	r4, r5
 8000bcc:	46c8      	mov	r8, r9
 8000bce:	46ae      	mov	lr, r5
 8000bd0:	d356      	bcc.n	8000c80 <__udivmoddi4+0x29c>
 8000bd2:	d053      	beq.n	8000c7c <__udivmoddi4+0x298>
 8000bd4:	b156      	cbz	r6, 8000bec <__udivmoddi4+0x208>
 8000bd6:	ebb0 0208 	subs.w	r2, r0, r8
 8000bda:	eb64 040e 	sbc.w	r4, r4, lr
 8000bde:	fa04 f707 	lsl.w	r7, r4, r7
 8000be2:	40ca      	lsrs	r2, r1
 8000be4:	40cc      	lsrs	r4, r1
 8000be6:	4317      	orrs	r7, r2
 8000be8:	e9c6 7400 	strd	r7, r4, [r6]
 8000bec:	4618      	mov	r0, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf4:	f1c3 0120 	rsb	r1, r3, #32
 8000bf8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bfc:	fa20 f201 	lsr.w	r2, r0, r1
 8000c00:	fa25 f101 	lsr.w	r1, r5, r1
 8000c04:	409d      	lsls	r5, r3
 8000c06:	432a      	orrs	r2, r5
 8000c08:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0c:	fa1f fe8c 	uxth.w	lr, ip
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1510 	mls	r5, r7, r0, r1
 8000c18:	0c11      	lsrs	r1, r2, #16
 8000c1a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c1e:	fb00 f50e 	mul.w	r5, r0, lr
 8000c22:	428d      	cmp	r5, r1
 8000c24:	fa04 f403 	lsl.w	r4, r4, r3
 8000c28:	d908      	bls.n	8000c3c <__udivmoddi4+0x258>
 8000c2a:	eb1c 0101 	adds.w	r1, ip, r1
 8000c2e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c32:	d22f      	bcs.n	8000c94 <__udivmoddi4+0x2b0>
 8000c34:	428d      	cmp	r5, r1
 8000c36:	d92d      	bls.n	8000c94 <__udivmoddi4+0x2b0>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	4461      	add	r1, ip
 8000c3c:	1b49      	subs	r1, r1, r5
 8000c3e:	b292      	uxth	r2, r2
 8000c40:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c44:	fb07 1115 	mls	r1, r7, r5, r1
 8000c48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c4c:	fb05 f10e 	mul.w	r1, r5, lr
 8000c50:	4291      	cmp	r1, r2
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x282>
 8000c54:	eb1c 0202 	adds.w	r2, ip, r2
 8000c58:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c5c:	d216      	bcs.n	8000c8c <__udivmoddi4+0x2a8>
 8000c5e:	4291      	cmp	r1, r2
 8000c60:	d914      	bls.n	8000c8c <__udivmoddi4+0x2a8>
 8000c62:	3d02      	subs	r5, #2
 8000c64:	4462      	add	r2, ip
 8000c66:	1a52      	subs	r2, r2, r1
 8000c68:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c6c:	e738      	b.n	8000ae0 <__udivmoddi4+0xfc>
 8000c6e:	4631      	mov	r1, r6
 8000c70:	4630      	mov	r0, r6
 8000c72:	e708      	b.n	8000a86 <__udivmoddi4+0xa2>
 8000c74:	4639      	mov	r1, r7
 8000c76:	e6e6      	b.n	8000a46 <__udivmoddi4+0x62>
 8000c78:	4610      	mov	r0, r2
 8000c7a:	e6fb      	b.n	8000a74 <__udivmoddi4+0x90>
 8000c7c:	4548      	cmp	r0, r9
 8000c7e:	d2a9      	bcs.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c80:	ebb9 0802 	subs.w	r8, r9, r2
 8000c84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000c88:	3b01      	subs	r3, #1
 8000c8a:	e7a3      	b.n	8000bd4 <__udivmoddi4+0x1f0>
 8000c8c:	4645      	mov	r5, r8
 8000c8e:	e7ea      	b.n	8000c66 <__udivmoddi4+0x282>
 8000c90:	462b      	mov	r3, r5
 8000c92:	e794      	b.n	8000bbe <__udivmoddi4+0x1da>
 8000c94:	4640      	mov	r0, r8
 8000c96:	e7d1      	b.n	8000c3c <__udivmoddi4+0x258>
 8000c98:	46d0      	mov	r8, sl
 8000c9a:	e77b      	b.n	8000b94 <__udivmoddi4+0x1b0>
 8000c9c:	3d02      	subs	r5, #2
 8000c9e:	4462      	add	r2, ip
 8000ca0:	e732      	b.n	8000b08 <__udivmoddi4+0x124>
 8000ca2:	4608      	mov	r0, r1
 8000ca4:	e70a      	b.n	8000abc <__udivmoddi4+0xd8>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	e742      	b.n	8000b32 <__udivmoddi4+0x14e>

08000cac <__aeabi_idiv0>:
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop

08000cb0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb6:	f107 030c 	add.w	r3, r7, #12
 8000cba:	2200      	movs	r2, #0
 8000cbc:	601a      	str	r2, [r3, #0]
 8000cbe:	605a      	str	r2, [r3, #4]
 8000cc0:	609a      	str	r2, [r3, #8]
 8000cc2:	60da      	str	r2, [r3, #12]
 8000cc4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc6:	4b3e      	ldr	r3, [pc, #248]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000ccc:	f043 0304 	orr.w	r3, r3, #4
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b3b      	ldr	r3, [pc, #236]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0304 	and.w	r3, r3, #4
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cde:	4b38      	ldr	r3, [pc, #224]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a37      	ldr	r2, [pc, #220]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b35      	ldr	r3, [pc, #212]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cf6:	4b32      	ldr	r3, [pc, #200]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	4a31      	ldr	r2, [pc, #196]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000cfc:	f043 0302 	orr.w	r3, r3, #2
 8000d00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d02:	4b2f      	ldr	r3, [pc, #188]	; (8000dc0 <MX_GPIO_Init+0x110>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	f003 0302 	and.w	r3, r3, #2
 8000d0a:	603b      	str	r3, [r7, #0]
 8000d0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000d14:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d18:	f003 fa20 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	2140      	movs	r1, #64	; 0x40
 8000d20:	4828      	ldr	r0, [pc, #160]	; (8000dc4 <MX_GPIO_Init+0x114>)
 8000d22:	f003 fa1b 	bl	800415c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d2c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d36:	f107 030c 	add.w	r3, r7, #12
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4822      	ldr	r0, [pc, #136]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d3e:	f003 f863 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000d42:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000d46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d54:	f107 030c 	add.w	r3, r7, #12
 8000d58:	4619      	mov	r1, r3
 8000d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d5e:	f003 f853 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000d62:	2380      	movs	r3, #128	; 0x80
 8000d64:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d66:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000d70:	f107 030c 	add.w	r3, r7, #12
 8000d74:	4619      	mov	r1, r3
 8000d76:	4814      	ldr	r0, [pc, #80]	; (8000dc8 <MX_GPIO_Init+0x118>)
 8000d78:	f003 f846 	bl	8003e08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000d7c:	2340      	movs	r3, #64	; 0x40
 8000d7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000d8c:	f107 030c 	add.w	r3, r7, #12
 8000d90:	4619      	mov	r1, r3
 8000d92:	480c      	ldr	r0, [pc, #48]	; (8000dc4 <MX_GPIO_Init+0x114>)
 8000d94:	f003 f838 	bl	8003e08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000d98:	2200      	movs	r2, #0
 8000d9a:	2106      	movs	r1, #6
 8000d9c:	2017      	movs	r0, #23
 8000d9e:	f002 ffee 	bl	8003d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000da2:	2017      	movs	r0, #23
 8000da4:	f003 f807 	bl	8003db6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000da8:	2200      	movs	r2, #0
 8000daa:	2107      	movs	r1, #7
 8000dac:	2028      	movs	r0, #40	; 0x28
 8000dae:	f002 ffe6 	bl	8003d7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000db2:	2028      	movs	r0, #40	; 0x28
 8000db4:	f002 ffff 	bl	8003db6 <HAL_NVIC_EnableIRQ>

}
 8000db8:	bf00      	nop
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40021000 	.word	0x40021000
 8000dc4:	48000400 	.word	0x48000400
 8000dc8:	48000800 	.word	0x48000800

08000dcc <HAL_GPIO_EXTI_Callback>:

volatile SpiritFlagStatus xTxDoneFlag;
volatile SpiritFlagStatus xRxDoneFlag;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b084      	sub	sp, #16
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8000dd6:	88fb      	ldrh	r3, [r7, #6]
 8000dd8:	2b80      	cmp	r3, #128	; 0x80
 8000dda:	d12a      	bne.n	8000e32 <HAL_GPIO_EXTI_Callback+0x66>

  SpiritIrqGetStatus(&xIrqStatus);
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fd2d 	bl	8001840 <SpiritIrqGetStatus>
  if (xIrqStatus.IRQ_TX_DATA_SENT)
 8000de6:	7b3b      	ldrb	r3, [r7, #12]
 8000de8:	f003 0304 	and.w	r3, r3, #4
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d002      	beq.n	8000df8 <HAL_GPIO_EXTI_Callback+0x2c>
  {
    xTxDoneFlag = S_SET;
 8000df2:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <HAL_GPIO_EXTI_Callback+0x70>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
  }
  if (xIrqStatus.IRQ_RX_DATA_READY)
 8000df8:	7b3b      	ldrb	r3, [r7, #12]
 8000dfa:	f003 0301 	and.w	r3, r3, #1
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d002      	beq.n	8000e0a <HAL_GPIO_EXTI_Callback+0x3e>
  {
    xRxDoneFlag = S_SET;
 8000e04:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_GPIO_EXTI_Callback+0x74>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
  }
  if (xIrqStatus.IRQ_RX_DATA_DISC || xIrqStatus.IRQ_RX_TIMEOUT)
 8000e0a:	7b3b      	ldrb	r3, [r7, #12]
 8000e0c:	f003 0302 	and.w	r3, r3, #2
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d105      	bne.n	8000e22 <HAL_GPIO_EXTI_Callback+0x56>
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f003 0320 	and.w	r3, r3, #32
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d008      	beq.n	8000e34 <HAL_GPIO_EXTI_Callback+0x68>
  {
    SpiritCmdStrobeRx();
 8000e22:	f000 ff51 	bl	8001cc8 <SpiritManagementWaCmdStrobeRx>
 8000e26:	2061      	movs	r0, #97	; 0x61
 8000e28:	f000 fc3c 	bl	80016a4 <SpiritCmdStrobeCommand>
    SpiritIrqClearStatus();
 8000e2c:	f000 fd3a 	bl	80018a4 <SpiritIrqClearStatus>
 8000e30:	e000      	b.n	8000e34 <HAL_GPIO_EXTI_Callback+0x68>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 8000e32:	bf00      	nop
  }
}
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	20000030 	.word	0x20000030
 8000e40:	20000031 	.word	0x20000031

08000e44 <transmit>:
	  HAL_UART_Transmit(&huart2, "Received: ", 10, HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, payload, rxLen, HAL_MAX_DELAY);
}


void transmit(){
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
	char payload[] = "UwU *nuzzles*\r\n";
 8000e4a:	4b18      	ldr	r3, [pc, #96]	; (8000eac <transmit+0x68>)
 8000e4c:	f107 0410 	add.w	r4, r7, #16
 8000e50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000e52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	uint8_t rxLen;
	char clear[] = "\x1B[2J\x1B[0m"; // clear
 8000e56:	4a16      	ldr	r2, [pc, #88]	; (8000eb0 <transmit+0x6c>)
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000e5c:	c303      	stmia	r3!, {r0, r1}
 8000e5e:	701a      	strb	r2, [r3, #0]

	// Send the payload
    xTxDoneFlag = S_RESET;
 8000e60:	4b14      	ldr	r3, [pc, #80]	; (8000eb4 <transmit+0x70>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	701a      	strb	r2, [r3, #0]
    SPSGRF_StartTx(payload, strlen(payload));
 8000e66:	f107 0310 	add.w	r3, r7, #16
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff f9ac 	bl	80001c8 <strlen>
 8000e70:	4603      	mov	r3, r0
 8000e72:	b2da      	uxtb	r2, r3
 8000e74:	f107 0310 	add.w	r3, r7, #16
 8000e78:	4611      	mov	r1, r2
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f000 f9e4 	bl	8001248 <SPSGRF_StartTx>
    while(!xTxDoneFlag);
 8000e80:	bf00      	nop
 8000e82:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <transmit+0x70>)
 8000e84:	781b      	ldrb	r3, [r3, #0]
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d0fa      	beq.n	8000e82 <transmit+0x3e>

    HAL_UART_Transmit(&huart2, "Payload Sent\r\n", 14, HAL_MAX_DELAY);
 8000e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e90:	220e      	movs	r2, #14
 8000e92:	4909      	ldr	r1, [pc, #36]	; (8000eb8 <transmit+0x74>)
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <transmit+0x78>)
 8000e96:	f005 fc2d 	bl	80066f4 <HAL_UART_Transmit>

    HAL_Delay(30000); // Block for 2000 ms
 8000e9a:	f247 5030 	movw	r0, #30000	; 0x7530
 8000e9e:	f002 fe4b 	bl	8003b38 <HAL_Delay>
}
 8000ea2:	bf00      	nop
 8000ea4:	3724      	adds	r7, #36	; 0x24
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd90      	pop	{r4, r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	080072dc 	.word	0x080072dc
 8000eb0:	080072c0 	.word	0x080072c0
 8000eb4:	20000030 	.word	0x20000030
 8000eb8:	080072cc 	.word	0x080072cc
 8000ebc:	20000098 	.word	0x20000098

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec4:	f002 fdc3 	bl	8003a4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f80e 	bl	8000ee8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f7ff fef0 	bl	8000cb0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ed0:	f000 f862 	bl	8000f98 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000ed4:	f000 fa4a 	bl	800136c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  SPSGRF_Init();
 8000ed8:	f000 f8fc 	bl	80010d4 <SPSGRF_Init>

  SpiritPktBasicSetDestinationAddress(0xFF);
 8000edc:	20ff      	movs	r0, #255	; 0xff
 8000ede:	f000 fff5 	bl	8001ecc <SpiritPktCommonSetDestinationAddress>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  transmit();
 8000ee2:	f7ff ffaf 	bl	8000e44 <transmit>
 8000ee6:	e7fc      	b.n	8000ee2 <main+0x22>

08000ee8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b096      	sub	sp, #88	; 0x58
 8000eec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	2244      	movs	r2, #68	; 0x44
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	f006 f953 	bl	80071a2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000efc:	463b      	mov	r3, r7
 8000efe:	2200      	movs	r2, #0
 8000f00:	601a      	str	r2, [r3, #0]
 8000f02:	605a      	str	r2, [r3, #4]
 8000f04:	609a      	str	r2, [r3, #8]
 8000f06:	60da      	str	r2, [r3, #12]
 8000f08:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f0a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f0e:	f003 f963 	bl	80041d8 <HAL_PWREx_ControlVoltageScaling>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f18:	f000 f838 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f1c:	2310      	movs	r3, #16
 8000f1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f24:	2300      	movs	r3, #0
 8000f26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f28:	2360      	movs	r3, #96	; 0x60
 8000f2a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f30:	2301      	movs	r3, #1
 8000f32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f34:	2301      	movs	r3, #1
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000f38:	2328      	movs	r3, #40	; 0x28
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f3c:	2307      	movs	r3, #7
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f40:	2302      	movs	r3, #2
 8000f42:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f44:	2302      	movs	r3, #2
 8000f46:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f48:	f107 0314 	add.w	r3, r7, #20
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f003 f999 	bl	8004284 <HAL_RCC_OscConfig>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000f58:	f000 f818 	bl	8000f8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5c:	230f      	movs	r3, #15
 8000f5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f60:	2303      	movs	r3, #3
 8000f62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f70:	463b      	mov	r3, r7
 8000f72:	2104      	movs	r1, #4
 8000f74:	4618      	mov	r0, r3
 8000f76:	f003 fd61 	bl	8004a3c <HAL_RCC_ClockConfig>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000f80:	f000 f804 	bl	8000f8c <Error_Handler>
  }
}
 8000f84:	bf00      	nop
 8000f86:	3758      	adds	r7, #88	; 0x58
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f90:	b672      	cpsid	i
}
 8000f92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <Error_Handler+0x8>
	...

08000f98 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f9c:	4b1b      	ldr	r3, [pc, #108]	; (800100c <MX_SPI1_Init+0x74>)
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <MX_SPI1_Init+0x78>)
 8000fa0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000fa2:	4b1a      	ldr	r3, [pc, #104]	; (800100c <MX_SPI1_Init+0x74>)
 8000fa4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fa8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000faa:	4b18      	ldr	r3, [pc, #96]	; (800100c <MX_SPI1_Init+0x74>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <MX_SPI1_Init+0x74>)
 8000fb2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000fb6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fb8:	4b14      	ldr	r3, [pc, #80]	; (800100c <MX_SPI1_Init+0x74>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fbe:	4b13      	ldr	r3, [pc, #76]	; (800100c <MX_SPI1_Init+0x74>)
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000fc4:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_SPI1_Init+0x74>)
 8000fc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fca:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_SPI1_Init+0x74>)
 8000fce:	2210      	movs	r2, #16
 8000fd0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_SPI1_Init+0x74>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fd8:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_SPI1_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fde:	4b0b      	ldr	r3, [pc, #44]	; (800100c <MX_SPI1_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000fe4:	4b09      	ldr	r3, [pc, #36]	; (800100c <MX_SPI1_Init+0x74>)
 8000fe6:	2207      	movs	r2, #7
 8000fe8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000fea:	4b08      	ldr	r3, [pc, #32]	; (800100c <MX_SPI1_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ff0:	4b06      	ldr	r3, [pc, #24]	; (800100c <MX_SPI1_Init+0x74>)
 8000ff2:	2208      	movs	r2, #8
 8000ff4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ff6:	4805      	ldr	r0, [pc, #20]	; (800100c <MX_SPI1_Init+0x74>)
 8000ff8:	f004 fc00 	bl	80057fc <HAL_SPI_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001002:	f7ff ffc3 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}
 800100a:	bf00      	nop
 800100c:	20000034 	.word	0x20000034
 8001010:	40013000 	.word	0x40013000

08001014 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a25      	ldr	r2, [pc, #148]	; (80010c8 <HAL_SPI_MspInit+0xb4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d144      	bne.n	80010c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001036:	4b25      	ldr	r3, [pc, #148]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103a:	4a24      	ldr	r2, [pc, #144]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 800103c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001040:	6613      	str	r3, [r2, #96]	; 0x60
 8001042:	4b22      	ldr	r3, [pc, #136]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800104a:	613b      	str	r3, [r7, #16]
 800104c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800104e:	4b1f      	ldr	r3, [pc, #124]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001054:	f043 0301 	orr.w	r3, r3, #1
 8001058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800105a:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 800105c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105e:	f003 0301 	and.w	r3, r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001066:	4b19      	ldr	r3, [pc, #100]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800106a:	4a18      	ldr	r2, [pc, #96]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_SPI_MspInit+0xb8>)
 8001074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60bb      	str	r3, [r7, #8]
 800107c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23c0      	movs	r3, #192	; 0xc0
 8001080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001082:	2302      	movs	r3, #2
 8001084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108a:	2303      	movs	r3, #3
 800108c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800108e:	2305      	movs	r3, #5
 8001090:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001092:	f107 0314 	add.w	r3, r7, #20
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f002 feb4 	bl	8003e08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010a0:	2308      	movs	r3, #8
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a8:	2300      	movs	r3, #0
 80010aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010ac:	2303      	movs	r3, #3
 80010ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010b0:	2305      	movs	r3, #5
 80010b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	4619      	mov	r1, r3
 80010ba:	4805      	ldr	r0, [pc, #20]	; (80010d0 <HAL_SPI_MspInit+0xbc>)
 80010bc:	f002 fea4 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80010c0:	bf00      	nop
 80010c2:	3728      	adds	r7, #40	; 0x28
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40013000 	.word	0x40013000
 80010cc:	40021000 	.word	0x40021000
 80010d0:	48000400 	.word	0x48000400

080010d4 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b096      	sub	sp, #88	; 0x58
 80010d8:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80010da:	f002 fb6f 	bl	80037bc <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80010de:	f002 fc9d 	bl	8003a1c <RadioEnterShutdown>
  SpiritExitShutdown();
 80010e2:	f002 fca6 	bl	8003a32 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80010e6:	f000 fe1f 	bl	8001d28 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 80010ea:	2300      	movs	r3, #0
 80010ec:	70fb      	strb	r3, [r7, #3]
 80010ee:	e004      	b.n	80010fa <SPSGRF_Init+0x26>
 80010f0:	78fb      	ldrb	r3, [r7, #3]
 80010f2:	b2db      	uxtb	r3, r3
 80010f4:	3301      	adds	r3, #1
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	70fb      	strb	r3, [r7, #3]
 80010fa:	78fb      	ldrb	r3, [r7, #3]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	2bff      	cmp	r3, #255	; 0xff
 8001100:	d1f6      	bne.n	80010f0 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 8001102:	f002 fb39 	bl	8003778 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 8001106:	4b4b      	ldr	r3, [pc, #300]	; (8001234 <SPSGRF_Init+0x160>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b03      	cmp	r3, #3
 8001112:	d1ea      	bne.n	80010ea <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 8001114:	2300      	movs	r3, #0
 8001116:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 8001118:	4b47      	ldr	r3, [pc, #284]	; (8001238 <SPSGRF_Init+0x164>)
 800111a:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 800111c:	4b47      	ldr	r3, [pc, #284]	; (800123c <SPSGRF_Init+0x168>)
 800111e:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001126:	2300      	movs	r3, #0
 8001128:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 800112c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001130:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001132:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001136:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 8001138:	4b40      	ldr	r3, [pc, #256]	; (800123c <SPSGRF_Init+0x168>)
 800113a:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800113c:	4840      	ldr	r0, [pc, #256]	; (8001240 <SPSGRF_Init+0x16c>)
 800113e:	f002 faa9 	bl	8003694 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001142:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001146:	4618      	mov	r0, r3
 8001148:	f001 f8f6 	bl	8002338 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800114c:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8001244 <SPSGRF_Init+0x170>
 8001150:	2007      	movs	r0, #7
 8001152:	f002 f93b 	bl	80033cc <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001156:	2007      	movs	r0, #7
 8001158:	f002 f98e 	bl	8003478 <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 800115c:	2318      	movs	r3, #24
 800115e:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001160:	2306      	movs	r3, #6
 8001162:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001164:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001168:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 800116a:	2301      	movs	r3, #1
 800116c:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 800116e:	2307      	movs	r3, #7
 8001170:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001172:	2320      	movs	r3, #32
 8001174:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001176:	2300      	movs	r3, #0
 8001178:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 800117a:	2300      	movs	r3, #0
 800117c:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 800117e:	2301      	movs	r3, #1
 8001180:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001182:	f107 0310 	add.w	r3, r7, #16
 8001186:	4618      	mov	r0, r3
 8001188:	f000 feba 	bl	8001f00 <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800118c:	2301      	movs	r3, #1
 800118e:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001190:	23b0      	movs	r3, #176	; 0xb0
 8001192:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001194:	2301      	movs	r3, #1
 8001196:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001198:	23ee      	movs	r3, #238	; 0xee
 800119a:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800119c:	2301      	movs	r3, #1
 800119e:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 80011a0:	23ff      	movs	r3, #255	; 0xff
 80011a2:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 80011a4:	f107 0308 	add.w	r3, r7, #8
 80011a8:	4618      	mov	r0, r3
 80011aa:	f000 ff79 	bl	80020a0 <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 80011ae:	2300      	movs	r3, #0
 80011b0:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 80011b2:	2301      	movs	r3, #1
 80011b4:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 80011b6:	2300      	movs	r3, #0
 80011b8:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 80011ba:	1d3b      	adds	r3, r7, #4
 80011bc:	4618      	mov	r0, r3
 80011be:	f000 ffdd 	bl	800217c <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 80011c2:	2302      	movs	r3, #2
 80011c4:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fa7b 	bl	80016d4 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80011de:	2000      	movs	r0, #0
 80011e0:	f000 fa9c 	bl	800171c <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80011e4:	2101      	movs	r1, #1
 80011e6:	2004      	movs	r0, #4
 80011e8:	f000 fac4 	bl	8001774 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80011ec:	2101      	movs	r1, #1
 80011ee:	2001      	movs	r0, #1
 80011f0:	f000 fac0 	bl	8001774 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80011f4:	2101      	movs	r1, #1
 80011f6:	2002      	movs	r0, #2
 80011f8:	f000 fabc 	bl	8001774 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80011fc:	2101      	movs	r1, #1
 80011fe:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8001202:	f000 fab7 	bl	8001774 <SpiritIrq>
  SpiritIrqClearStatus();
 8001206:	f000 fb4d 	bl	80018a4 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 800120a:	2000      	movs	r0, #0
 800120c:	f001 f840 	bl	8002290 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 8001210:	2001      	movs	r0, #1
 8001212:	f001 f805 	bl	8002220 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 8001216:	f06f 0077 	mvn.w	r0, #119	; 0x77
 800121a:	f001 f86d 	bl	80022f8 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(2000.0);
#else
  SET_INFINITE_RX_TIMEOUT();
 800121e:	2000      	movs	r0, #0
 8001220:	f002 fa48 	bl	80036b4 <SpiritTimerSetRxTimeoutCounter>
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 8001224:	2002      	movs	r0, #2
 8001226:	f002 fa5f 	bl	80036e8 <SpiritTimerSetRxTimeoutStopCondition>
}
 800122a:	bf00      	nop
 800122c:	3758      	adds	r7, #88	; 0x58
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000128 	.word	0x20000128
 8001238:	3689cac0 	.word	0x3689cac0
 800123c:	000186a0 	.word	0x000186a0
 8001240:	02faf080 	.word	0x02faf080
 8001244:	4139999a 	.word	0x4139999a

08001248 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	460b      	mov	r3, r1
 8001252:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 8001254:	2072      	movs	r0, #114	; 0x72
 8001256:	f000 fa25 	bl	80016a4 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 800125a:	78fb      	ldrb	r3, [r7, #3]
 800125c:	2b60      	cmp	r3, #96	; 0x60
 800125e:	bf28      	it	cs
 8001260:	2360      	movcs	r3, #96	; 0x60
 8001262:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001264:	78fb      	ldrb	r3, [r7, #3]
 8001266:	6879      	ldr	r1, [r7, #4]
 8001268:	4618      	mov	r0, r3
 800126a:	f002 fb8f 	bl	800398c <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800126e:	78fb      	ldrb	r3, [r7, #3]
 8001270:	b29b      	uxth	r3, r3
 8001272:	4618      	mov	r0, r3
 8001274:	f000 fd9e 	bl	8001db4 <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 8001278:	f000 fcee 	bl	8001c58 <SpiritManagementWaCmdStrobeTx>
 800127c:	2060      	movs	r0, #96	; 0x60
 800127e:	f000 fa11 	bl	80016a4 <SpiritCmdStrobeCommand>
}
 8001282:	bf00      	nop
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b0f      	ldr	r3, [pc, #60]	; (80012d0 <HAL_MspInit+0x44>)
 8001294:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001296:	4a0e      	ldr	r2, [pc, #56]	; (80012d0 <HAL_MspInit+0x44>)
 8001298:	f043 0301 	orr.w	r3, r3, #1
 800129c:	6613      	str	r3, [r2, #96]	; 0x60
 800129e:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <HAL_MspInit+0x44>)
 80012a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a2:	f003 0301 	and.w	r3, r3, #1
 80012a6:	607b      	str	r3, [r7, #4]
 80012a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012aa:	4b09      	ldr	r3, [pc, #36]	; (80012d0 <HAL_MspInit+0x44>)
 80012ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_MspInit+0x44>)
 80012b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b4:	6593      	str	r3, [r2, #88]	; 0x58
 80012b6:	4b06      	ldr	r3, [pc, #24]	; (80012d0 <HAL_MspInit+0x44>)
 80012b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
 80012ce:	bf00      	nop
 80012d0:	40021000 	.word	0x40021000

080012d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012d8:	e7fe      	b.n	80012d8 <NMI_Handler+0x4>

080012da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012de:	e7fe      	b.n	80012de <HardFault_Handler+0x4>

080012e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012e4:	e7fe      	b.n	80012e4 <MemManage_Handler+0x4>

080012e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012e6:	b480      	push	{r7}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <BusFault_Handler+0x4>

080012ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012ec:	b480      	push	{r7}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <UsageFault_Handler+0x4>

080012f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001300:	b480      	push	{r7}
 8001302:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001304:	bf00      	nop
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800130e:	b480      	push	{r7}
 8001310:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001312:	bf00      	nop
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr

0800131c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001320:	f002 fbea 	bl	8003af8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 800132c:	2080      	movs	r0, #128	; 0x80
 800132e:	f002 ff2d 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}

08001336 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800133a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800133e:	f002 ff25 	bl	800418c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001370:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001372:	4a15      	ldr	r2, [pc, #84]	; (80013c8 <MX_USART2_UART_Init+0x5c>)
 8001374:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001376:	4b13      	ldr	r3, [pc, #76]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001378:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800137c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800137e:	4b11      	ldr	r3, [pc, #68]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001384:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800138a:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001390:	4b0c      	ldr	r3, [pc, #48]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001392:	220c      	movs	r2, #12
 8001394:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001396:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 8001398:	2200      	movs	r2, #0
 800139a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800139c:	4b09      	ldr	r3, [pc, #36]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 800139e:	2200      	movs	r2, #0
 80013a0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a8:	4b06      	ldr	r3, [pc, #24]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013ae:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_USART2_UART_Init+0x58>)
 80013b0:	f005 f952 	bl	8006658 <HAL_UART_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80013ba:	f7ff fde7 	bl	8000f8c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013be:	bf00      	nop
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000098 	.word	0x20000098
 80013c8:	40004400 	.word	0x40004400

080013cc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b0ac      	sub	sp, #176	; 0xb0
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	2288      	movs	r2, #136	; 0x88
 80013ea:	2100      	movs	r1, #0
 80013ec:	4618      	mov	r0, r3
 80013ee:	f005 fed8 	bl	80071a2 <memset>
  if(uartHandle->Instance==USART2)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a21      	ldr	r2, [pc, #132]	; (800147c <HAL_UART_MspInit+0xb0>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d13b      	bne.n	8001474 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001400:	2300      	movs	r3, #0
 8001402:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f003 fd3b 	bl	8004e84 <HAL_RCCEx_PeriphCLKConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001414:	f7ff fdba 	bl	8000f8c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_UART_MspInit+0xb4>)
 800141a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800141c:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_UART_MspInit+0xb4>)
 800141e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001422:	6593      	str	r3, [r2, #88]	; 0x58
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_UART_MspInit+0xb4>)
 8001426:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <HAL_UART_MspInit+0xb4>)
 8001432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001434:	4a12      	ldr	r2, [pc, #72]	; (8001480 <HAL_UART_MspInit+0xb4>)
 8001436:	f043 0301 	orr.w	r3, r3, #1
 800143a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800143c:	4b10      	ldr	r3, [pc, #64]	; (8001480 <HAL_UART_MspInit+0xb4>)
 800143e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001440:	f003 0301 	and.w	r3, r3, #1
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001448:	230c      	movs	r3, #12
 800144a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145a:	2303      	movs	r3, #3
 800145c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001460:	2307      	movs	r3, #7
 8001462:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001466:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800146a:	4619      	mov	r1, r3
 800146c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001470:	f002 fcca 	bl	8003e08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001474:	bf00      	nop
 8001476:	37b0      	adds	r7, #176	; 0xb0
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40004400 	.word	0x40004400
 8001480:	40021000 	.word	0x40021000

08001484 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001484:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001488:	f7ff ff5e 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800148c:	480c      	ldr	r0, [pc, #48]	; (80014c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800148e:	490d      	ldr	r1, [pc, #52]	; (80014c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001490:	4a0d      	ldr	r2, [pc, #52]	; (80014c8 <LoopForever+0xe>)
  movs r3, #0
 8001492:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001494:	e002      	b.n	800149c <LoopCopyDataInit>

08001496 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001496:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001498:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800149a:	3304      	adds	r3, #4

0800149c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800149c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800149e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014a0:	d3f9      	bcc.n	8001496 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014a2:	4a0a      	ldr	r2, [pc, #40]	; (80014cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014a4:	4c0a      	ldr	r4, [pc, #40]	; (80014d0 <LoopForever+0x16>)
  movs r3, #0
 80014a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014a8:	e001      	b.n	80014ae <LoopFillZerobss>

080014aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ac:	3204      	adds	r2, #4

080014ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014b0:	d3fb      	bcc.n	80014aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014b2:	f005 fe7f 	bl	80071b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014b6:	f7ff fd03 	bl	8000ec0 <main>

080014ba <LoopForever>:

LoopForever:
    b LoopForever
 80014ba:	e7fe      	b.n	80014ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014bc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014c4:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80014c8:	080074a0 	.word	0x080074a0
  ldr r2, =_sbss
 80014cc:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80014d0:	20000130 	.word	0x20000130

080014d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014d4:	e7fe      	b.n	80014d4 <ADC1_2_IRQHandler>
	...

080014d8 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 80014e2:	f107 030f 	add.w	r3, r7, #15
 80014e6:	461a      	mov	r2, r3
 80014e8:	2101      	movs	r1, #1
 80014ea:	2050      	movs	r0, #80	; 0x50
 80014ec:	f002 f9c2 	bl	8003874 <RadioSpiReadRegisters>
 80014f0:	4602      	mov	r2, r0
 80014f2:	4b14      	ldr	r3, [pc, #80]	; (8001544 <SpiritCalibrationVco+0x6c>)
 80014f4:	b212      	sxth	r2, r2
 80014f6:	4611      	mov	r1, r2
 80014f8:	7019      	strb	r1, [r3, #0]
 80014fa:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80014fe:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d105      	bne.n	8001512 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	f043 0302 	orr.w	r3, r3, #2
 800150c:	b2db      	uxtb	r3, r3
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e004      	b.n	800151c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	f023 0302 	bic.w	r3, r3, #2
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 800151c:	f107 030f 	add.w	r3, r7, #15
 8001520:	461a      	mov	r2, r3
 8001522:	2101      	movs	r1, #1
 8001524:	2050      	movs	r0, #80	; 0x50
 8001526:	f002 f959 	bl	80037dc <RadioSpiWriteRegisters>
 800152a:	4602      	mov	r2, r0
 800152c:	4b05      	ldr	r3, [pc, #20]	; (8001544 <SpiritCalibrationVco+0x6c>)
 800152e:	b212      	sxth	r2, r2
 8001530:	4611      	mov	r1, r2
 8001532:	7019      	strb	r1, [r3, #0]
 8001534:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001538:	705a      	strb	r2, [r3, #1]

}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000128 	.word	0x20000128

08001548 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 800154e:	1dfb      	adds	r3, r7, #7
 8001550:	461a      	mov	r2, r3
 8001552:	2101      	movs	r1, #1
 8001554:	20e5      	movs	r0, #229	; 0xe5
 8001556:	f002 f98d 	bl	8003874 <RadioSpiReadRegisters>
 800155a:	4602      	mov	r2, r0
 800155c:	4b07      	ldr	r3, [pc, #28]	; (800157c <SpiritCalibrationGetVcoCalData+0x34>)
 800155e:	b212      	sxth	r2, r2
 8001560:	4611      	mov	r1, r2
 8001562:	7019      	strb	r1, [r3, #0]
 8001564:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001568:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001570:	b2db      	uxtb	r3, r3

}
 8001572:	4618      	mov	r0, r3
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000128 	.word	0x20000128

08001580 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b084      	sub	sp, #16
 8001584:	af00      	add	r7, sp, #0
 8001586:	4603      	mov	r3, r0
 8001588:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 800158a:	f107 030f 	add.w	r3, r7, #15
 800158e:	461a      	mov	r2, r3
 8001590:	2101      	movs	r1, #1
 8001592:	206e      	movs	r0, #110	; 0x6e
 8001594:	f002 f96e 	bl	8003874 <RadioSpiReadRegisters>
 8001598:	4602      	mov	r2, r0
 800159a:	4b12      	ldr	r3, [pc, #72]	; (80015e4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 800159c:	b212      	sxth	r2, r2
 800159e:	4611      	mov	r1, r2
 80015a0:	7019      	strb	r1, [r3, #0]
 80015a2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80015a6:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 80015b2:	7bfa      	ldrb	r2, [r7, #15]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	4313      	orrs	r3, r2
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 80015bc:	f107 030f 	add.w	r3, r7, #15
 80015c0:	461a      	mov	r2, r3
 80015c2:	2101      	movs	r1, #1
 80015c4:	206e      	movs	r0, #110	; 0x6e
 80015c6:	f002 f909 	bl	80037dc <RadioSpiWriteRegisters>
 80015ca:	4602      	mov	r2, r0
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 80015ce:	b212      	sxth	r2, r2
 80015d0:	4611      	mov	r1, r2
 80015d2:	7019      	strb	r1, [r3, #0]
 80015d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80015d8:	705a      	strb	r2, [r3, #1]

}
 80015da:	bf00      	nop
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000128 	.word	0x20000128

080015e8 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 80015f2:	f107 030f 	add.w	r3, r7, #15
 80015f6:	461a      	mov	r2, r3
 80015f8:	2101      	movs	r1, #1
 80015fa:	206f      	movs	r0, #111	; 0x6f
 80015fc:	f002 f93a 	bl	8003874 <RadioSpiReadRegisters>
 8001600:	4602      	mov	r2, r0
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001604:	b212      	sxth	r2, r2
 8001606:	4611      	mov	r1, r2
 8001608:	7019      	strb	r1, [r3, #0]
 800160a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800160e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001610:	7bfb      	ldrb	r3, [r7, #15]
 8001612:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001616:	b2db      	uxtb	r3, r3
 8001618:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 800161a:	7bfa      	ldrb	r2, [r7, #15]
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	4313      	orrs	r3, r2
 8001620:	b2db      	uxtb	r3, r3
 8001622:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001624:	f107 030f 	add.w	r3, r7, #15
 8001628:	461a      	mov	r2, r3
 800162a:	2101      	movs	r1, #1
 800162c:	206f      	movs	r0, #111	; 0x6f
 800162e:	f002 f8d5 	bl	80037dc <RadioSpiWriteRegisters>
 8001632:	4602      	mov	r2, r0
 8001634:	4b05      	ldr	r3, [pc, #20]	; (800164c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001636:	b212      	sxth	r2, r2
 8001638:	4611      	mov	r1, r2
 800163a:	7019      	strb	r1, [r3, #0]
 800163c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001640:	705a      	strb	r2, [r3, #1]

}
 8001642:	bf00      	nop
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000128 	.word	0x20000128

08001650 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800165a:	f107 030f 	add.w	r3, r7, #15
 800165e:	461a      	mov	r2, r3
 8001660:	2101      	movs	r1, #1
 8001662:	209e      	movs	r0, #158	; 0x9e
 8001664:	f002 f906 	bl	8003874 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001668:	7bfb      	ldrb	r3, [r7, #15]
 800166a:	f023 0306 	bic.w	r3, r3, #6
 800166e:	b2db      	uxtb	r3, r3
 8001670:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001678:	7bfb      	ldrb	r3, [r7, #15]
 800167a:	f043 0302 	orr.w	r3, r3, #2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	73fb      	strb	r3, [r7, #15]
 8001682:	e004      	b.n	800168e <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	f043 0304 	orr.w	r3, r3, #4
 800168a:	b2db      	uxtb	r3, r3
 800168c:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 800168e:	f107 030f 	add.w	r3, r7, #15
 8001692:	461a      	mov	r2, r3
 8001694:	2101      	movs	r1, #1
 8001696:	209e      	movs	r0, #158	; 0x9e
 8001698:	f002 f8a0 	bl	80037dc <RadioSpiWriteRegisters>
  
}
 800169c:	bf00      	nop
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	4603      	mov	r3, r0
 80016ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 80016ae:	79fb      	ldrb	r3, [r7, #7]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f002 f92b 	bl	800390c <RadioSpiCommandStrobes>
 80016b6:	4602      	mov	r2, r0
 80016b8:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <SpiritCmdStrobeCommand+0x2c>)
 80016ba:	b212      	sxth	r2, r2
 80016bc:	4611      	mov	r1, r2
 80016be:	7019      	strb	r1, [r3, #0]
 80016c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80016c4:	705a      	strb	r2, [r3, #1]
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	20000128 	.word	0x20000128

080016d4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 80016dc:	2300      	movs	r3, #0
 80016de:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	785a      	ldrb	r2, [r3, #1]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	789b      	ldrb	r3, [r3, #2]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	f107 020f 	add.w	r2, r7, #15
 80016f6:	2101      	movs	r1, #1
 80016f8:	4618      	mov	r0, r3
 80016fa:	f002 f86f 	bl	80037dc <RadioSpiWriteRegisters>
 80016fe:	4602      	mov	r2, r0
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SpiritGpioInit+0x44>)
 8001702:	b212      	sxth	r2, r2
 8001704:	4611      	mov	r1, r2
 8001706:	7019      	strb	r1, [r3, #0]
 8001708:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800170c:	705a      	strb	r2, [r3, #1]

}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000128 	.word	0x20000128

0800171c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d00c      	beq.n	8001748 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 800172e:	f107 0308 	add.w	r3, r7, #8
 8001732:	2204      	movs	r2, #4
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f005 fd33 	bl	80071a2 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	461a      	mov	r2, r3
 8001740:	f107 0308 	add.w	r3, r7, #8
 8001744:	6818      	ldr	r0, [r3, #0]
 8001746:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	461a      	mov	r2, r3
 800174e:	2104      	movs	r1, #4
 8001750:	2090      	movs	r0, #144	; 0x90
 8001752:	f002 f843 	bl	80037dc <RadioSpiWriteRegisters>
 8001756:	4602      	mov	r2, r0
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SpiritIrqDeInit+0x54>)
 800175a:	b212      	sxth	r2, r2
 800175c:	4611      	mov	r1, r2
 800175e:	7019      	strb	r1, [r3, #0]
 8001760:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001764:	705a      	strb	r2, [r3, #1]
}
 8001766:	bf00      	nop
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	20000128 	.word	0x20000128

08001774 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	460b      	mov	r3, r1
 800177e:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	461a      	mov	r2, r3
 800178a:	2104      	movs	r1, #4
 800178c:	2090      	movs	r0, #144	; 0x90
 800178e:	f002 f871 	bl	8003874 <RadioSpiReadRegisters>
 8001792:	4602      	mov	r2, r0
 8001794:	4b29      	ldr	r3, [pc, #164]	; (800183c <SpiritIrq+0xc8>)
 8001796:	b212      	sxth	r2, r2
 8001798:	4611      	mov	r1, r2
 800179a:	7019      	strb	r1, [r3, #0]
 800179c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80017a0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 80017a2:	2300      	movs	r3, #0
 80017a4:	74fb      	strb	r3, [r7, #19]
 80017a6:	e011      	b.n	80017cc <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 80017a8:	7cfb      	ldrb	r3, [r7, #19]
 80017aa:	3318      	adds	r3, #24
 80017ac:	443b      	add	r3, r7
 80017ae:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 80017b2:	461a      	mov	r2, r3
 80017b4:	7cfb      	ldrb	r3, [r7, #19]
 80017b6:	f1c3 0303 	rsb	r3, r3, #3
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 80017c6:	7cfb      	ldrb	r3, [r7, #19]
 80017c8:	3301      	adds	r3, #1
 80017ca:	74fb      	strb	r3, [r7, #19]
 80017cc:	7cfb      	ldrb	r3, [r7, #19]
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d9ea      	bls.n	80017a8 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d105      	bne.n	80017e4 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	43db      	mvns	r3, r3
 80017dc:	697a      	ldr	r2, [r7, #20]
 80017de:	4013      	ands	r3, r2
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e003      	b.n	80017ec <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 80017ec:	2300      	movs	r3, #0
 80017ee:	74bb      	strb	r3, [r7, #18]
 80017f0:	e00e      	b.n	8001810 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 80017f2:	7cbb      	ldrb	r3, [r7, #18]
 80017f4:	f1c3 0303 	rsb	r3, r3, #3
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	697a      	ldr	r2, [r7, #20]
 80017fc:	40da      	lsrs	r2, r3
 80017fe:	7cbb      	ldrb	r3, [r7, #18]
 8001800:	b2d2      	uxtb	r2, r2
 8001802:	3318      	adds	r3, #24
 8001804:	443b      	add	r3, r7
 8001806:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 800180a:	7cbb      	ldrb	r3, [r7, #18]
 800180c:	3301      	adds	r3, #1
 800180e:	74bb      	strb	r3, [r7, #18]
 8001810:	7cbb      	ldrb	r3, [r7, #18]
 8001812:	2b03      	cmp	r3, #3
 8001814:	d9ed      	bls.n	80017f2 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001816:	f107 030c 	add.w	r3, r7, #12
 800181a:	461a      	mov	r2, r3
 800181c:	2104      	movs	r1, #4
 800181e:	2090      	movs	r0, #144	; 0x90
 8001820:	f001 ffdc 	bl	80037dc <RadioSpiWriteRegisters>
 8001824:	4602      	mov	r2, r0
 8001826:	4b05      	ldr	r3, [pc, #20]	; (800183c <SpiritIrq+0xc8>)
 8001828:	b212      	sxth	r2, r2
 800182a:	4611      	mov	r1, r2
 800182c:	7019      	strb	r1, [r3, #0]
 800182e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001832:	705a      	strb	r2, [r3, #1]

}
 8001834:	bf00      	nop
 8001836:	3718      	adds	r7, #24
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	20000128 	.word	0x20000128

08001840 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	461a      	mov	r2, r3
 8001852:	2104      	movs	r1, #4
 8001854:	20fa      	movs	r0, #250	; 0xfa
 8001856:	f002 f80d 	bl	8003874 <RadioSpiReadRegisters>
 800185a:	4602      	mov	r2, r0
 800185c:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <SpiritIrqGetStatus+0x60>)
 800185e:	b212      	sxth	r2, r2
 8001860:	4611      	mov	r1, r2
 8001862:	7019      	strb	r1, [r3, #0]
 8001864:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001868:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 800186a:	2300      	movs	r3, #0
 800186c:	74fb      	strb	r3, [r7, #19]
 800186e:	e00e      	b.n	800188e <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001870:	7cfb      	ldrb	r3, [r7, #19]
 8001872:	f1c3 0303 	rsb	r3, r3, #3
 8001876:	3318      	adds	r3, #24
 8001878:	443b      	add	r3, r7
 800187a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001888:	7cfb      	ldrb	r3, [r7, #19]
 800188a:	3301      	adds	r3, #1
 800188c:	74fb      	strb	r3, [r7, #19]
 800188e:	7cfb      	ldrb	r3, [r7, #19]
 8001890:	2b03      	cmp	r3, #3
 8001892:	d9ed      	bls.n	8001870 <SpiritIrqGetStatus+0x30>
  }
}
 8001894:	bf00      	nop
 8001896:	bf00      	nop
 8001898:	3718      	adds	r7, #24
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20000128 	.word	0x20000128

080018a4 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	461a      	mov	r2, r3
 80018ae:	2104      	movs	r1, #4
 80018b0:	20fa      	movs	r0, #250	; 0xfa
 80018b2:	f001 ffdf 	bl	8003874 <RadioSpiReadRegisters>
 80018b6:	4602      	mov	r2, r0
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <SpiritIrqClearStatus+0x2c>)
 80018ba:	b212      	sxth	r2, r2
 80018bc:	4611      	mov	r1, r2
 80018be:	7019      	strb	r1, [r3, #0]
 80018c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80018c4:	705a      	strb	r2, [r3, #1]

}
 80018c6:	bf00      	nop
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	20000128 	.word	0x20000128

080018d4 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 80018d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018d8:	b08a      	sub	sp, #40	; 0x28
 80018da:	af00      	add	r7, sp, #0
 80018dc:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a70      	ldr	r2, [pc, #448]	; (8001aa4 <SpiritManagementSetFrequencyBase+0x1d0>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d307      	bcc.n	80018f6 <SpiritManagementSetFrequencyBase+0x22>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a6f      	ldr	r2, [pc, #444]	; (8001aa8 <SpiritManagementSetFrequencyBase+0x1d4>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d803      	bhi.n	80018f6 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 80018ee:	2300      	movs	r3, #0
 80018f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80018f4:	e01a      	b.n	800192c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a6c      	ldr	r2, [pc, #432]	; (8001aac <SpiritManagementSetFrequencyBase+0x1d8>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d907      	bls.n	800190e <SpiritManagementSetFrequencyBase+0x3a>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a6b      	ldr	r2, [pc, #428]	; (8001ab0 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d803      	bhi.n	800190e <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001906:	2301      	movs	r3, #1
 8001908:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800190c:	e00e      	b.n	800192c <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	4a68      	ldr	r2, [pc, #416]	; (8001ab4 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d907      	bls.n	8001926 <SpiritManagementSetFrequencyBase+0x52>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a67      	ldr	r2, [pc, #412]	; (8001ab8 <SpiritManagementSetFrequencyBase+0x1e4>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d803      	bhi.n	8001926 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 800191e:	2302      	movs	r3, #2
 8001920:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001924:	e002      	b.n	800192c <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001926:	2303      	movs	r3, #3
 8001928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 800192c:	f001 f842 	bl	80029b4 <SpiritRadioGetFrequencyOffset>
 8001930:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001932:	f001 f81f 	bl	8002974 <SpiritRadioGetChannelSpace>
 8001936:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001938:	f001 f804 	bl	8002944 <SpiritRadioGetChannel>
 800193c:	4603      	mov	r3, r0
 800193e:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001940:	6a3a      	ldr	r2, [r7, #32]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	441a      	add	r2, r3
 8001946:	7efb      	ldrb	r3, [r7, #27]
 8001948:	69f9      	ldr	r1, [r7, #28]
 800194a:	fb01 f303 	mul.w	r3, r1, r3
 800194e:	4413      	add	r3, r2
 8001950:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001952:	f001 fe1f 	bl	8003594 <SpiritRadioGetRefDiv>
 8001956:	4603      	mov	r3, r0
 8001958:	3301      	adds	r3, #1
 800195a:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 800195c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001960:	2b03      	cmp	r3, #3
 8001962:	d83a      	bhi.n	80019da <SpiritManagementSetFrequencyBase+0x106>
 8001964:	a201      	add	r2, pc, #4	; (adr r2, 800196c <SpiritManagementSetFrequencyBase+0x98>)
 8001966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800196a:	bf00      	nop
 800196c:	080019c5 	.word	0x080019c5
 8001970:	080019ad 	.word	0x080019ad
 8001974:	08001995 	.word	0x08001995
 8001978:	0800197d 	.word	0x0800197d
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	4a4f      	ldr	r2, [pc, #316]	; (8001abc <SpiritManagementSetFrequencyBase+0x1e8>)
 8001980:	4293      	cmp	r3, r2
 8001982:	d803      	bhi.n	800198c <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fe63 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800198a:	e026      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 800198c:	2001      	movs	r0, #1
 800198e:	f7ff fe5f 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 8001992:	e022      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	4a4a      	ldr	r2, [pc, #296]	; (8001ac0 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d803      	bhi.n	80019a4 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 800199c:	2000      	movs	r0, #0
 800199e:	f7ff fe57 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80019a2:	e01a      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80019a4:	2001      	movs	r0, #1
 80019a6:	f7ff fe53 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 80019aa:	e016      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	4a45      	ldr	r2, [pc, #276]	; (8001ac4 <SpiritManagementSetFrequencyBase+0x1f0>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d803      	bhi.n	80019bc <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80019b4:	2000      	movs	r0, #0
 80019b6:	f7ff fe4b 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80019ba:	e00e      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 80019bc:	2001      	movs	r0, #1
 80019be:	f7ff fe47 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 80019c2:	e00a      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	4a40      	ldr	r2, [pc, #256]	; (8001ac8 <SpiritManagementSetFrequencyBase+0x1f4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d803      	bhi.n	80019d4 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fe3f 	bl	8001650 <SpiritCalibrationSelectVco>
 80019d2:	e002      	b.n	80019da <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80019d4:	2001      	movs	r0, #1
 80019d6:	f7ff fe3b 	bl	8001650 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80019da:	6978      	ldr	r0, [r7, #20]
 80019dc:	f000 feca 	bl	8002774 <SpiritRadioSearchWCP>
 80019e0:	4603      	mov	r3, r0
 80019e2:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7fe fd39 	bl	800045c <__aeabi_ui2d>
 80019ea:	4604      	mov	r4, r0
 80019ec:	460d      	mov	r5, r1
 80019ee:	7cfb      	ldrb	r3, [r7, #19]
 80019f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80019f4:	4935      	ldr	r1, [pc, #212]	; (8001acc <SpiritManagementSetFrequencyBase+0x1f8>)
 80019f6:	5c8a      	ldrb	r2, [r1, r2]
 80019f8:	fb02 f303 	mul.w	r3, r2, r3
 80019fc:	049b      	lsls	r3, r3, #18
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fd3c 	bl	800047c <__aeabi_i2d>
 8001a04:	4680      	mov	r8, r0
 8001a06:	4689      	mov	r9, r1
 8001a08:	f001 fe38 	bl	800367c <SpiritRadioGetXtalFrequency>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f7fe fd24 	bl	800045c <__aeabi_ui2d>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4640      	mov	r0, r8
 8001a1a:	4649      	mov	r1, r9
 8001a1c:	f7fe fec2 	bl	80007a4 <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	4620      	mov	r0, r4
 8001a26:	4629      	mov	r1, r5
 8001a28:	f7fe fd92 	bl	8000550 <__aeabi_dmul>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4610      	mov	r0, r2
 8001a32:	4619      	mov	r1, r3
 8001a34:	f7fe ff9e 	bl	8000974 <__aeabi_d2uiz>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	0d5b      	lsrs	r3, r3, #21
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	b2da      	uxtb	r2, r3
 8001a48:	7cbb      	ldrb	r3, [r7, #18]
 8001a4a:	015b      	lsls	r3, r3, #5
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	0b5b      	lsrs	r3, r3, #13
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	095b      	lsrs	r3, r3, #5
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001a70:	4917      	ldr	r1, [pc, #92]	; (8001ad0 <SpiritManagementSetFrequencyBase+0x1fc>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8001a7a:	f107 0308 	add.w	r3, r7, #8
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2104      	movs	r1, #4
 8001a82:	2008      	movs	r0, #8
 8001a84:	f001 feaa 	bl	80037dc <RadioSpiWriteRegisters>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	4b12      	ldr	r3, [pc, #72]	; (8001ad4 <SpiritManagementSetFrequencyBase+0x200>)
 8001a8c:	b212      	sxth	r2, r2
 8001a8e:	4611      	mov	r1, r2
 8001a90:	7019      	strb	r1, [r3, #0]
 8001a92:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001a96:	705a      	strb	r2, [r3, #1]
}
 8001a98:	bf00      	nop
 8001a9a:	3728      	adds	r7, #40	; 0x28
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001aa2:	bf00      	nop
 8001aa4:	2e5f5680 	.word	0x2e5f5680
 8001aa8:	390c2fe0 	.word	0x390c2fe0
 8001aac:	1701e47f 	.word	0x1701e47f
 8001ab0:	1c146a60 	.word	0x1c146a60
 8001ab4:	11d260bf 	.word	0x11d260bf
 8001ab8:	14ced7e0 	.word	0x14ced7e0
 8001abc:	099cf4e1 	.word	0x099cf4e1
 8001ac0:	1339e9c3 	.word	0x1339e9c3
 8001ac4:	19a28d05 	.word	0x19a28d05
 8001ac8:	33451a0a 	.word	0x33451a0a
 8001acc:	08007338 	.word	0x08007338
 8001ad0:	08007334 	.word	0x08007334
 8001ad4:	20000128 	.word	0x20000128

08001ad8 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8001ae6:	f001 fdc9 	bl	800367c <SpiritRadioGetXtalFrequency>
 8001aea:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	4a57      	ldr	r2, [pc, #348]	; (8001c50 <SpiritManagementWaVcoCalibration+0x178>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d90f      	bls.n	8001b18 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8001af8:	f001 fd4c 	bl	8003594 <SpiritRadioGetRefDiv>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 8001b02:	2301      	movs	r3, #1
 8001b04:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8001b06:	f001 f8b7 	bl	8002c78 <SpiritRadioGetFrequencyBase>
 8001b0a:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8001b0c:	2001      	movs	r0, #1
 8001b0e:	f001 fd11 	bl	8003534 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f7ff fede 	bl	80018d4 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8001b18:	f001 f8ae 	bl	8002c78 <SpiritRadioGetFrequencyBase>
 8001b1c:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8001b1e:	2325      	movs	r3, #37	; 0x25
 8001b20:	707b      	strb	r3, [r7, #1]
 8001b22:	1c7b      	adds	r3, r7, #1
 8001b24:	461a      	mov	r2, r3
 8001b26:	2101      	movs	r1, #1
 8001b28:	20a1      	movs	r0, #161	; 0xa1
 8001b2a:	f001 fe57 	bl	80037dc <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8001b2e:	2001      	movs	r0, #1
 8001b30:	f7ff fcd2 	bl	80014d8 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8001b34:	f001 fe20 	bl	8003778 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8001b38:	4b46      	ldr	r3, [pc, #280]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b40      	cmp	r3, #64	; 0x40
 8001b44:	d10d      	bne.n	8001b62 <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8001b4a:	2062      	movs	r0, #98	; 0x62
 8001b4c:	f7ff fdaa 	bl	80016a4 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8001b50:	f001 fe12 	bl	8003778 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8001b54:	4b3f      	ldr	r3, [pc, #252]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d1f6      	bne.n	8001b50 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 8001b62:	2066      	movs	r0, #102	; 0x66
 8001b64:	f7ff fd9e 	bl	80016a4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8001b6c:	f001 fe04 	bl	8003778 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8001b70:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001b72:	781b      	ldrb	r3, [r3, #0]
 8001b74:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	2b13      	cmp	r3, #19
 8001b7c:	d106      	bne.n	8001b8c <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 8001b7e:	7b7b      	ldrb	r3, [r7, #13]
 8001b80:	1c5a      	adds	r2, r3, #1
 8001b82:	737a      	strb	r2, [r7, #13]
 8001b84:	2b05      	cmp	r3, #5
 8001b86:	d101      	bne.n	8001b8c <SpiritManagementWaVcoCalibration+0xb4>
 8001b88:	2301      	movs	r3, #1
 8001b8a:	e05d      	b.n	8001c48 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8001b8c:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d1e8      	bne.n	8001b6c <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 8001b9a:	f7ff fcd5 	bl	8001548 <SpiritCalibrationGetVcoCalData>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 8001ba2:	2062      	movs	r0, #98	; 0x62
 8001ba4:	f7ff fd7e 	bl	80016a4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8001ba8:	f001 fde6 	bl	8003778 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d1f6      	bne.n	8001ba8 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8001bba:	2065      	movs	r0, #101	; 0x65
 8001bbc:	f7ff fd72 	bl	80016a4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8001bc4:	f001 fdd8 	bl	8003778 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8001bc8:	4b22      	ldr	r3, [pc, #136]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b13      	cmp	r3, #19
 8001bd4:	d106      	bne.n	8001be4 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8001bd6:	7b7b      	ldrb	r3, [r7, #13]
 8001bd8:	1c5a      	adds	r2, r3, #1
 8001bda:	737a      	strb	r2, [r7, #13]
 8001bdc:	2b05      	cmp	r3, #5
 8001bde:	d101      	bne.n	8001be4 <SpiritManagementWaVcoCalibration+0x10c>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e031      	b.n	8001c48 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8001be4:	4b1b      	ldr	r3, [pc, #108]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	2b0f      	cmp	r3, #15
 8001bf0:	d1e8      	bne.n	8001bc4 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 8001bf2:	f7ff fca9 	bl	8001548 <SpiritCalibrationGetVcoCalData>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8001bfa:	2062      	movs	r0, #98	; 0x62
 8001bfc:	f7ff fd52 	bl	80016a4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8001c00:	f001 fdba 	bl	8003778 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8001c04:	4b13      	ldr	r3, [pc, #76]	; (8001c54 <SpiritManagementWaVcoCalibration+0x17c>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	2b03      	cmp	r3, #3
 8001c10:	d1f6      	bne.n	8001c00 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d102      	bne.n	8001c1e <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8001c18:	2063      	movs	r0, #99	; 0x63
 8001c1a:	f7ff fd43 	bl	80016a4 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8001c1e:	2000      	movs	r0, #0
 8001c20:	f7ff fc5a 	bl	80014d8 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8001c24:	7bfb      	ldrb	r3, [r7, #15]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8001c2a:	2000      	movs	r0, #0
 8001c2c:	f001 fc82 	bl	8003534 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fe4f 	bl	80018d4 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8001c36:	78fb      	ldrb	r3, [r7, #3]
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f7ff fca1 	bl	8001580 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8001c3e:	78bb      	ldrb	r3, [r7, #2]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff fcd1 	bl	80015e8 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	01c9c380 	.word	0x01c9c380
 8001c54:	20000128 	.word	0x20000128

08001c58 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 8001c5e:	4b16      	ldr	r3, [pc, #88]	; (8001cb8 <SpiritManagementWaCmdStrobeTx+0x60>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d023      	beq.n	8001cb0 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <SpiritManagementWaCmdStrobeTx+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a14      	ldr	r2, [pc, #80]	; (8001cc0 <SpiritManagementWaCmdStrobeTx+0x68>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d908      	bls.n	8001c84 <SpiritManagementWaCmdStrobeTx+0x2c>
 8001c72:	4b12      	ldr	r3, [pc, #72]	; (8001cbc <SpiritManagementWaCmdStrobeTx+0x64>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a13      	ldr	r2, [pc, #76]	; (8001cc4 <SpiritManagementWaCmdStrobeTx+0x6c>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d803      	bhi.n	8001c84 <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 8001c7c:	20c0      	movs	r0, #192	; 0xc0
 8001c7e:	f001 fbcf 	bl	8003420 <SpiritRadioSetPACwc>
 8001c82:	e002      	b.n	8001c8a <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 8001c84:	2000      	movs	r0, #0
 8001c86:	f001 fbcb 	bl	8003420 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 8001c8a:	2311      	movs	r3, #17
 8001c8c:	71fb      	strb	r3, [r7, #7]
 8001c8e:	1dfb      	adds	r3, r7, #7
 8001c90:	461a      	mov	r2, r3
 8001c92:	2101      	movs	r1, #1
 8001c94:	20a9      	movs	r0, #169	; 0xa9
 8001c96:	f001 fda1 	bl	80037dc <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 8001c9a:	2320      	movs	r3, #32
 8001c9c:	71fb      	strb	r3, [r7, #7]
 8001c9e:	1dfb      	adds	r3, r7, #7
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	20a5      	movs	r0, #165	; 0xa5
 8001ca6:	f001 fd99 	bl	80037dc <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 8001caa:	4b03      	ldr	r3, [pc, #12]	; (8001cb8 <SpiritManagementWaCmdStrobeTx+0x60>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
  }
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	20000004 	.word	0x20000004
 8001cbc:	20000120 	.word	0x20000120
 8001cc0:	08f0d17f 	.word	0x08f0d17f
 8001cc4:	1c03a180 	.word	0x1c03a180

08001cc8 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8001cce:	4b0b      	ldr	r3, [pc, #44]	; (8001cfc <SpiritManagementWaCmdStrobeRx+0x34>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d00d      	beq.n	8001cf4 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8001cd8:	2398      	movs	r3, #152	; 0x98
 8001cda:	71fb      	strb	r3, [r7, #7]
 8001cdc:	1dfb      	adds	r3, r7, #7
 8001cde:	461a      	mov	r2, r3
 8001ce0:	2101      	movs	r1, #1
 8001ce2:	20a5      	movs	r0, #165	; 0xa5
 8001ce4:	f001 fd7a 	bl	80037dc <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f001 fb99 	bl	8003420 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8001cee:	4b03      	ldr	r3, [pc, #12]	; (8001cfc <SpiritManagementWaCmdStrobeRx+0x34>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	701a      	strb	r2, [r3, #0]
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3708      	adds	r7, #8
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	20000004 	.word	0x20000004

08001d00 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8001d08:	4b05      	ldr	r3, [pc, #20]	; (8001d20 <SpiritManagementWaTRxFcMem+0x20>)
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8001d0e:	4a05      	ldr	r2, [pc, #20]	; (8001d24 <SpiritManagementWaTRxFcMem+0x24>)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6013      	str	r3, [r2, #0]
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr
 8001d20:	20000004 	.word	0x20000004
 8001d24:	20000120 	.word	0x20000120

08001d28 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8001d2e:	23ca      	movs	r3, #202	; 0xca
 8001d30:	71fb      	strb	r3, [r7, #7]
 8001d32:	1dfb      	adds	r3, r7, #7
 8001d34:	461a      	mov	r2, r3
 8001d36:	2101      	movs	r1, #1
 8001d38:	20b2      	movs	r0, #178	; 0xb2
 8001d3a:	f001 fd4f 	bl	80037dc <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8001d3e:	2304      	movs	r3, #4
 8001d40:	71fb      	strb	r3, [r7, #7]
 8001d42:	1dfb      	adds	r3, r7, #7
 8001d44:	461a      	mov	r2, r3
 8001d46:	2101      	movs	r1, #1
 8001d48:	20a8      	movs	r0, #168	; 0xa8
 8001d4a:	f001 fd47 	bl	80037dc <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8001d4e:	1dfb      	adds	r3, r7, #7
 8001d50:	461a      	mov	r2, r3
 8001d52:	2101      	movs	r1, #1
 8001d54:	20a8      	movs	r0, #168	; 0xa8
 8001d56:	f001 fd8d 	bl	8003874 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	71fb      	strb	r3, [r7, #7]
 8001d5e:	1dfb      	adds	r3, r7, #7
 8001d60:	461a      	mov	r2, r3
 8001d62:	2101      	movs	r1, #1
 8001d64:	20a8      	movs	r0, #168	; 0xa8
 8001d66:	f001 fd39 	bl	80037dc <RadioSpiWriteRegisters>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b082      	sub	sp, #8
 8001d78:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8001d7a:	1dfb      	adds	r3, r7, #7
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	2101      	movs	r1, #1
 8001d80:	2030      	movs	r0, #48	; 0x30
 8001d82:	f001 fd77 	bl	8003874 <RadioSpiReadRegisters>
 8001d86:	4602      	mov	r2, r0
 8001d88:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <SpiritPktBasicGetAddressField+0x3c>)
 8001d8a:	b212      	sxth	r2, r2
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	7019      	strb	r1, [r3, #0]
 8001d90:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d94:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 8001d96:	79fb      	ldrb	r3, [r7, #7]
 8001d98:	f003 0318 	and.w	r3, r3, #24
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 8001da4:	2300      	movs	r3, #0
  }

}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	20000128 	.word	0x20000128

08001db4 <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 8001dc2:	f7ff ffd7 	bl	8001d74 <SpiritPktBasicGetAddressField>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d001      	beq.n	8001dd0 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8001dd0:	f000 f828 	bl	8001e24 <SpiritPktCommonGetControlLength>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	b29a      	uxth	r2, r3
 8001dd8:	89fb      	ldrh	r3, [r7, #14]
 8001dda:	4413      	add	r3, r2
 8001ddc:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	89fb      	ldrh	r3, [r7, #14]
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8001dec:	88fa      	ldrh	r2, [r7, #6]
 8001dee:	89fb      	ldrh	r3, [r7, #14]
 8001df0:	4413      	add	r3, r2
 8001df2:	121b      	asrs	r3, r3, #8
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8001df8:	f107 030c 	add.w	r3, r7, #12
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	2102      	movs	r1, #2
 8001e00:	2034      	movs	r0, #52	; 0x34
 8001e02:	f001 fceb 	bl	80037dc <RadioSpiWriteRegisters>
 8001e06:	4602      	mov	r2, r0
 8001e08:	4b05      	ldr	r3, [pc, #20]	; (8001e20 <SpiritPktBasicSetPayloadLength+0x6c>)
 8001e0a:	b212      	sxth	r2, r2
 8001e0c:	4611      	mov	r1, r2
 8001e0e:	7019      	strb	r1, [r3, #0]
 8001e10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e14:	705a      	strb	r2, [r3, #1]

}
 8001e16:	bf00      	nop
 8001e18:	3710      	adds	r7, #16
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000128 	.word	0x20000128

08001e24 <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8001e2a:	1dfb      	adds	r3, r7, #7
 8001e2c:	461a      	mov	r2, r3
 8001e2e:	2101      	movs	r1, #1
 8001e30:	2030      	movs	r0, #48	; 0x30
 8001e32:	f001 fd1f 	bl	8003874 <RadioSpiReadRegisters>
 8001e36:	4602      	mov	r2, r0
 8001e38:	4b07      	ldr	r3, [pc, #28]	; (8001e58 <SpiritPktCommonGetControlLength+0x34>)
 8001e3a:	b212      	sxth	r2, r2
 8001e3c:	4611      	mov	r1, r2
 8001e3e:	7019      	strb	r1, [r3, #0]
 8001e40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e44:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 8001e46:	79fb      	ldrb	r3, [r7, #7]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	b2db      	uxtb	r3, r3

}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000128 	.word	0x20000128

08001e5c <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	4603      	mov	r3, r0
 8001e64:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8001e66:	f107 030f 	add.w	r3, r7, #15
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	204f      	movs	r0, #79	; 0x4f
 8001e70:	f001 fd00 	bl	8003874 <RadioSpiReadRegisters>
 8001e74:	4602      	mov	r2, r0
 8001e76:	4b14      	ldr	r3, [pc, #80]	; (8001ec8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8001e78:	b212      	sxth	r2, r2
 8001e7a:	4611      	mov	r1, r2
 8001e7c:	7019      	strb	r1, [r3, #0]
 8001e7e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e82:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8001e8a:	7bfb      	ldrb	r3, [r7, #15]
 8001e8c:	f043 0301 	orr.w	r3, r3, #1
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	73fb      	strb	r3, [r7, #15]
 8001e94:	e004      	b.n	8001ea0 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	f023 0301 	bic.w	r3, r3, #1
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 8001ea0:	f107 030f 	add.w	r3, r7, #15
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	2101      	movs	r1, #1
 8001ea8:	204f      	movs	r0, #79	; 0x4f
 8001eaa:	f001 fc97 	bl	80037dc <RadioSpiWriteRegisters>
 8001eae:	4602      	mov	r2, r0
 8001eb0:	4b05      	ldr	r3, [pc, #20]	; (8001ec8 <SpiritPktCommonFilterOnCrc+0x6c>)
 8001eb2:	b212      	sxth	r2, r2
 8001eb4:	4611      	mov	r1, r2
 8001eb6:	7019      	strb	r1, [r3, #0]
 8001eb8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ebc:	705a      	strb	r2, [r3, #1]

}
 8001ebe:	bf00      	nop
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	20000128 	.word	0x20000128

08001ecc <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8001ed6:	1dfb      	adds	r3, r7, #7
 8001ed8:	461a      	mov	r2, r3
 8001eda:	2101      	movs	r1, #1
 8001edc:	204b      	movs	r0, #75	; 0x4b
 8001ede:	f001 fc7d 	bl	80037dc <RadioSpiWriteRegisters>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	4b05      	ldr	r3, [pc, #20]	; (8001efc <SpiritPktCommonSetDestinationAddress+0x30>)
 8001ee6:	b212      	sxth	r2, r2
 8001ee8:	4611      	mov	r1, r2
 8001eea:	7019      	strb	r1, [r3, #0]
 8001eec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ef0:	705a      	strb	r2, [r3, #1]

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000128 	.word	0x20000128

08001f00 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8001f08:	f107 0308 	add.w	r3, r7, #8
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2101      	movs	r1, #1
 8001f10:	2051      	movs	r0, #81	; 0x51
 8001f12:	f001 fcaf 	bl	8003874 <RadioSpiReadRegisters>
 8001f16:	4602      	mov	r2, r0
 8001f18:	4b60      	ldr	r3, [pc, #384]	; (800209c <SpiritPktStackInit+0x19c>)
 8001f1a:	b212      	sxth	r2, r2
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	7019      	strb	r1, [r3, #0]
 8001f20:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f24:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8001f26:	7a3b      	ldrb	r3, [r7, #8]
 8001f28:	f023 0320 	bic.w	r3, r3, #32
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8001f30:	7a3b      	ldrb	r3, [r7, #8]
 8001f32:	f043 0301 	orr.w	r3, r3, #1
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	461a      	mov	r2, r3
 8001f40:	2101      	movs	r1, #1
 8001f42:	2051      	movs	r0, #81	; 0x51
 8001f44:	f001 fc4a 	bl	80037dc <RadioSpiWriteRegisters>
 8001f48:	4602      	mov	r2, r0
 8001f4a:	4b54      	ldr	r3, [pc, #336]	; (800209c <SpiritPktStackInit+0x19c>)
 8001f4c:	b212      	sxth	r2, r2
 8001f4e:	4611      	mov	r1, r2
 8001f50:	7019      	strb	r1, [r3, #0]
 8001f52:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f56:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8001f58:	f107 0308 	add.w	r3, r7, #8
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	2101      	movs	r1, #1
 8001f60:	204f      	movs	r0, #79	; 0x4f
 8001f62:	f001 fc87 	bl	8003874 <RadioSpiReadRegisters>
 8001f66:	4602      	mov	r2, r0
 8001f68:	4b4c      	ldr	r3, [pc, #304]	; (800209c <SpiritPktStackInit+0x19c>)
 8001f6a:	b212      	sxth	r2, r2
 8001f6c:	4611      	mov	r1, r2
 8001f6e:	7019      	strb	r1, [r3, #0]
 8001f70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f74:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 8001f76:	7a3b      	ldrb	r3, [r7, #8]
 8001f78:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8001f80:	f107 0308 	add.w	r3, r7, #8
 8001f84:	461a      	mov	r2, r3
 8001f86:	2101      	movs	r1, #1
 8001f88:	204f      	movs	r0, #79	; 0x4f
 8001f8a:	f001 fc27 	bl	80037dc <RadioSpiWriteRegisters>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	4b42      	ldr	r3, [pc, #264]	; (800209c <SpiritPktStackInit+0x19c>)
 8001f92:	b212      	sxth	r2, r2
 8001f94:	4611      	mov	r1, r2
 8001f96:	7019      	strb	r1, [r3, #0]
 8001f98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f9c:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7adb      	ldrb	r3, [r3, #11]
 8001fa2:	f043 0310 	orr.w	r3, r3, #16
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7a5b      	ldrb	r3, [r3, #9]
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d102      	bne.n	8001fb8 <SpiritPktStackInit+0xb8>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	7a5b      	ldrb	r3, [r3, #9]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781a      	ldrb	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	785b      	ldrb	r3, [r3, #1]
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	7a9b      	ldrb	r3, [r3, #10]
 8001fe2:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7b5b      	ldrb	r3, [r3, #13]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d104      	bne.n	8001ff6 <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	f043 0310 	orr.w	r3, r3, #16
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	7b1b      	ldrb	r3, [r3, #12]
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d104      	bne.n	8002008 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8001ffe:	7afb      	ldrb	r3, [r7, #11]
 8002000:	f043 0301 	orr.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002008:	f107 0308 	add.w	r3, r7, #8
 800200c:	461a      	mov	r2, r3
 800200e:	2104      	movs	r1, #4
 8002010:	2030      	movs	r0, #48	; 0x30
 8002012:	f001 fbe3 	bl	80037dc <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002016:	2300      	movs	r3, #0
 8002018:	73fb      	strb	r3, [r7, #15]
 800201a:	e01d      	b.n	8002058 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 800201c:	7bfa      	ldrb	r2, [r7, #15]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	785b      	ldrb	r3, [r3, #1]
 8002022:	085b      	lsrs	r3, r3, #1
 8002024:	b2db      	uxtb	r3, r3
 8002026:	f1c3 0303 	rsb	r3, r3, #3
 800202a:	429a      	cmp	r2, r3
 800202c:	da06      	bge.n	800203c <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 800202e:	7bfb      	ldrb	r3, [r7, #15]
 8002030:	3310      	adds	r3, #16
 8002032:	443b      	add	r3, r7
 8002034:	2200      	movs	r2, #0
 8002036:	f803 2c08 	strb.w	r2, [r3, #-8]
 800203a:	e00a      	b.n	8002052 <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685a      	ldr	r2, [r3, #4]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	40da      	lsrs	r2, r3
 8002046:	7bfb      	ldrb	r3, [r7, #15]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	3310      	adds	r3, #16
 800204c:	443b      	add	r3, r7
 800204e:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 8002052:	7bfb      	ldrb	r3, [r7, #15]
 8002054:	3301      	adds	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b03      	cmp	r3, #3
 800205c:	d9de      	bls.n	800201c <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	7a9b      	ldrb	r3, [r3, #10]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d103      	bne.n	800206e <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 8002066:	2000      	movs	r0, #0
 8002068:	f7ff fef8 	bl	8001e5c <SpiritPktCommonFilterOnCrc>
 800206c:	e002      	b.n	8002074 <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 800206e:	2001      	movs	r0, #1
 8002070:	f7ff fef4 	bl	8001e5c <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 8002074:	f107 0308 	add.w	r3, r7, #8
 8002078:	461a      	mov	r2, r3
 800207a:	2104      	movs	r1, #4
 800207c:	2036      	movs	r0, #54	; 0x36
 800207e:	f001 fbad 	bl	80037dc <RadioSpiWriteRegisters>
 8002082:	4602      	mov	r2, r0
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <SpiritPktStackInit+0x19c>)
 8002086:	b212      	sxth	r2, r2
 8002088:	4611      	mov	r1, r2
 800208a:	7019      	strb	r1, [r3, #0]
 800208c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002090:	705a      	strb	r2, [r3, #1]

}
 8002092:	bf00      	nop
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000128 	.word	0x20000128

080020a0 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	461a      	mov	r2, r3
 80020ae:	2101      	movs	r1, #1
 80020b0:	204f      	movs	r0, #79	; 0x4f
 80020b2:	f001 fbdf 	bl	8003874 <RadioSpiReadRegisters>
 80020b6:	4602      	mov	r2, r0
 80020b8:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <SpiritPktStackAddressesInit+0xd8>)
 80020ba:	b212      	sxth	r2, r2
 80020bc:	4611      	mov	r1, r2
 80020be:	7019      	strb	r1, [r3, #0]
 80020c0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020c4:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d105      	bne.n	80020da <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80020ce:	7b3b      	ldrb	r3, [r7, #12]
 80020d0:	f043 0308 	orr.w	r3, r3, #8
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	733b      	strb	r3, [r7, #12]
 80020d8:	e004      	b.n	80020e4 <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 80020da:	7b3b      	ldrb	r3, [r7, #12]
 80020dc:	f023 0308 	bic.w	r3, r3, #8
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	789b      	ldrb	r3, [r3, #2]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d105      	bne.n	80020f8 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80020ec:	7b3b      	ldrb	r3, [r7, #12]
 80020ee:	f043 0304 	orr.w	r3, r3, #4
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	733b      	strb	r3, [r7, #12]
 80020f6:	e004      	b.n	8002102 <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 80020f8:	7b3b      	ldrb	r3, [r7, #12]
 80020fa:	f023 0304 	bic.w	r3, r3, #4
 80020fe:	b2db      	uxtb	r3, r3
 8002100:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	791b      	ldrb	r3, [r3, #4]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800210a:	7b3b      	ldrb	r3, [r7, #12]
 800210c:	f043 0302 	orr.w	r3, r3, #2
 8002110:	b2db      	uxtb	r3, r3
 8002112:	733b      	strb	r3, [r7, #12]
 8002114:	e004      	b.n	8002120 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002116:	7b3b      	ldrb	r3, [r7, #12]
 8002118:	f023 0302 	bic.w	r3, r3, #2
 800211c:	b2db      	uxtb	r3, r3
 800211e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	461a      	mov	r2, r3
 8002126:	2101      	movs	r1, #1
 8002128:	204f      	movs	r0, #79	; 0x4f
 800212a:	f001 fb57 	bl	80037dc <RadioSpiWriteRegisters>
 800212e:	4602      	mov	r2, r0
 8002130:	4b11      	ldr	r3, [pc, #68]	; (8002178 <SpiritPktStackAddressesInit+0xd8>)
 8002132:	b212      	sxth	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	7019      	strb	r1, [r3, #0]
 8002138:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800213c:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	795b      	ldrb	r3, [r3, #5]
 8002142:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	78db      	ldrb	r3, [r3, #3]
 8002148:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	785b      	ldrb	r3, [r3, #1]
 800214e:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 8002150:	f107 030c 	add.w	r3, r7, #12
 8002154:	461a      	mov	r2, r3
 8002156:	2103      	movs	r1, #3
 8002158:	204c      	movs	r0, #76	; 0x4c
 800215a:	f001 fb3f 	bl	80037dc <RadioSpiWriteRegisters>
 800215e:	4602      	mov	r2, r0
 8002160:	4b05      	ldr	r3, [pc, #20]	; (8002178 <SpiritPktStackAddressesInit+0xd8>)
 8002162:	b212      	sxth	r2, r2
 8002164:	4611      	mov	r1, r2
 8002166:	7019      	strb	r1, [r3, #0]
 8002168:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800216c:	705a      	strb	r2, [r3, #1]
  
}
 800216e:	bf00      	nop
 8002170:	3710      	adds	r7, #16
 8002172:	46bd      	mov	sp, r7
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000128 	.word	0x20000128

0800217c <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b084      	sub	sp, #16
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 8002184:	f107 030c 	add.w	r3, r7, #12
 8002188:	461a      	mov	r2, r3
 800218a:	2102      	movs	r1, #2
 800218c:	2051      	movs	r0, #81	; 0x51
 800218e:	f001 fb71 	bl	8003874 <RadioSpiReadRegisters>
 8002192:	4602      	mov	r2, r0
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <SpiritPktStackLlpInit+0xa0>)
 8002196:	b212      	sxth	r2, r2
 8002198:	4611      	mov	r1, r2
 800219a:	7019      	strb	r1, [r3, #0]
 800219c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80021a0:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d105      	bne.n	80021b6 <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 80021aa:	7b3b      	ldrb	r3, [r7, #12]
 80021ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	733b      	strb	r3, [r7, #12]
 80021b4:	e004      	b.n	80021c0 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 80021b6:	7b3b      	ldrb	r3, [r7, #12]
 80021b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d105      	bne.n	80021d4 <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 80021c8:	7b7b      	ldrb	r3, [r7, #13]
 80021ca:	f043 0304 	orr.w	r3, r3, #4
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	737b      	strb	r3, [r7, #13]
 80021d2:	e004      	b.n	80021de <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 80021d4:	7b7b      	ldrb	r3, [r7, #13]
 80021d6:	f023 0304 	bic.w	r3, r3, #4
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 80021de:	7b7b      	ldrb	r3, [r7, #13]
 80021e0:	f003 030f 	and.w	r3, r3, #15
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 80021e8:	7b7a      	ldrb	r2, [r7, #13]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	789b      	ldrb	r3, [r3, #2]
 80021ee:	4313      	orrs	r3, r2
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	461a      	mov	r2, r3
 80021fa:	2102      	movs	r1, #2
 80021fc:	2051      	movs	r0, #81	; 0x51
 80021fe:	f001 faed 	bl	80037dc <RadioSpiWriteRegisters>
 8002202:	4602      	mov	r2, r0
 8002204:	4b05      	ldr	r3, [pc, #20]	; (800221c <SpiritPktStackLlpInit+0xa0>)
 8002206:	b212      	sxth	r2, r2
 8002208:	4611      	mov	r1, r2
 800220a:	7019      	strb	r1, [r3, #0]
 800220c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002210:	705a      	strb	r2, [r3, #1]

}
 8002212:	bf00      	nop
 8002214:	3710      	adds	r7, #16
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	20000128 	.word	0x20000128

08002220 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	4603      	mov	r3, r0
 8002228:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800222a:	f107 030f 	add.w	r3, r7, #15
 800222e:	461a      	mov	r2, r3
 8002230:	2101      	movs	r1, #1
 8002232:	203a      	movs	r0, #58	; 0x3a
 8002234:	f001 fb1e 	bl	8003874 <RadioSpiReadRegisters>
 8002238:	4602      	mov	r2, r0
 800223a:	4b14      	ldr	r3, [pc, #80]	; (800228c <SpiritQiSqiCheck+0x6c>)
 800223c:	b212      	sxth	r2, r2
 800223e:	4611      	mov	r1, r2
 8002240:	7019      	strb	r1, [r3, #0]
 8002242:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002246:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002248:	79fb      	ldrb	r3, [r7, #7]
 800224a:	2b01      	cmp	r3, #1
 800224c:	d105      	bne.n	800225a <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800224e:	7bfb      	ldrb	r3, [r7, #15]
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73fb      	strb	r3, [r7, #15]
 8002258:	e004      	b.n	8002264 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 800225a:	7bfb      	ldrb	r3, [r7, #15]
 800225c:	f023 0302 	bic.w	r3, r3, #2
 8002260:	b2db      	uxtb	r3, r3
 8002262:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002264:	f107 030f 	add.w	r3, r7, #15
 8002268:	461a      	mov	r2, r3
 800226a:	2101      	movs	r1, #1
 800226c:	203a      	movs	r0, #58	; 0x3a
 800226e:	f001 fab5 	bl	80037dc <RadioSpiWriteRegisters>
 8002272:	4602      	mov	r2, r0
 8002274:	4b05      	ldr	r3, [pc, #20]	; (800228c <SpiritQiSqiCheck+0x6c>)
 8002276:	b212      	sxth	r2, r2
 8002278:	4611      	mov	r1, r2
 800227a:	7019      	strb	r1, [r3, #0]
 800227c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002280:	705a      	strb	r2, [r3, #1]

}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000128 	.word	0x20000128

08002290 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	4603      	mov	r3, r0
 8002298:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 800229a:	f107 030f 	add.w	r3, r7, #15
 800229e:	461a      	mov	r2, r3
 80022a0:	2101      	movs	r1, #1
 80022a2:	203a      	movs	r0, #58	; 0x3a
 80022a4:	f001 fae6 	bl	8003874 <RadioSpiReadRegisters>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b12      	ldr	r3, [pc, #72]	; (80022f4 <SpiritQiSetSqiThreshold+0x64>)
 80022ac:	b212      	sxth	r2, r2
 80022ae:	4611      	mov	r1, r2
 80022b0:	7019      	strb	r1, [r3, #0]
 80022b2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022b6:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 80022b8:	7bfb      	ldrb	r3, [r7, #15]
 80022ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80022cc:	f107 030f 	add.w	r3, r7, #15
 80022d0:	461a      	mov	r2, r3
 80022d2:	2101      	movs	r1, #1
 80022d4:	203a      	movs	r0, #58	; 0x3a
 80022d6:	f001 fa81 	bl	80037dc <RadioSpiWriteRegisters>
 80022da:	4602      	mov	r2, r0
 80022dc:	4b05      	ldr	r3, [pc, #20]	; (80022f4 <SpiritQiSetSqiThreshold+0x64>)
 80022de:	b212      	sxth	r2, r2
 80022e0:	4611      	mov	r1, r2
 80022e2:	7019      	strb	r1, [r3, #0]
 80022e4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80022e8:	705a      	strb	r2, [r3, #1]

}
 80022ea:	bf00      	nop
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000128 	.word	0x20000128

080022f8 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3382      	adds	r3, #130	; 0x82
 8002304:	b2db      	uxtb	r3, r3
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	b2db      	uxtb	r3, r3
 800230a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 800230c:	f107 030f 	add.w	r3, r7, #15
 8002310:	461a      	mov	r2, r3
 8002312:	2101      	movs	r1, #1
 8002314:	2022      	movs	r0, #34	; 0x22
 8002316:	f001 fa61 	bl	80037dc <RadioSpiWriteRegisters>
 800231a:	4602      	mov	r2, r0
 800231c:	4b05      	ldr	r3, [pc, #20]	; (8002334 <SpiritQiSetRssiThresholddBm+0x3c>)
 800231e:	b212      	sxth	r2, r2
 8002320:	4611      	mov	r1, r2
 8002322:	7019      	strb	r1, [r3, #0]
 8002324:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002328:	705a      	strb	r2, [r3, #1]

}
 800232a:	bf00      	nop
 800232c:	3710      	adds	r7, #16
 800232e:	46bd      	mov	sp, r7
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20000128 	.word	0x20000128

08002338 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b08c      	sub	sp, #48	; 0x30
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 8002340:	23a0      	movs	r3, #160	; 0xa0
 8002342:	747b      	strb	r3, [r7, #17]
 8002344:	f107 0311 	add.w	r3, r7, #17
 8002348:	461a      	mov	r2, r3
 800234a:	2101      	movs	r1, #1
 800234c:	209f      	movs	r0, #159	; 0x9f
 800234e:	f001 fa45 	bl	80037dc <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002358:	ee07 3a90 	vmov	s15, r3
 800235c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	ee07 3a90 	vmov	s15, r3
 8002368:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800236c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002370:	eddf 6aae 	vldr	s13, [pc, #696]	; 800262c <SpiritRadioInit+0x2f4>
 8002374:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002378:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237c:	ee17 3a90 	vmov	r3, s15
 8002380:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 8002382:	2063      	movs	r0, #99	; 0x63
 8002384:	f001 fac2 	bl	800390c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002388:	2300      	movs	r3, #0
 800238a:	73bb      	strb	r3, [r7, #14]
 800238c:	e004      	b.n	8002398 <SpiritRadioInit+0x60>
 800238e:	7bbb      	ldrb	r3, [r7, #14]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	3301      	adds	r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	73bb      	strb	r3, [r7, #14]
 8002398:	7bbb      	ldrb	r3, [r7, #14]
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2bff      	cmp	r3, #255	; 0xff
 800239e:	d1f6      	bne.n	800238e <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80023a0:	f001 f9ea 	bl	8003778 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 80023a4:	4ba2      	ldr	r3, [pc, #648]	; (8002630 <SpiritRadioInit+0x2f8>)
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b40      	cmp	r3, #64	; 0x40
 80023b0:	d1ea      	bne.n	8002388 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80023b2:	4ba0      	ldr	r3, [pc, #640]	; (8002634 <SpiritRadioInit+0x2fc>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4aa0      	ldr	r2, [pc, #640]	; (8002638 <SpiritRadioInit+0x300>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d803      	bhi.n	80023c4 <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 80023bc:	2000      	movs	r0, #0
 80023be:	f001 f90b 	bl	80035d8 <SpiritRadioSetDigDiv>
 80023c2:	e002      	b.n	80023ca <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 80023c4:	2001      	movs	r0, #1
 80023c6:	f001 f907 	bl	80035d8 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 80023ca:	2062      	movs	r0, #98	; 0x62
 80023cc:	f001 fa9e 	bl	800390c <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80023d0:	2300      	movs	r3, #0
 80023d2:	737b      	strb	r3, [r7, #13]
 80023d4:	e004      	b.n	80023e0 <SpiritRadioInit+0xa8>
 80023d6:	7b7b      	ldrb	r3, [r7, #13]
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	3301      	adds	r3, #1
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	737b      	strb	r3, [r7, #13]
 80023e0:	7b7b      	ldrb	r3, [r7, #13]
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2bff      	cmp	r3, #255	; 0xff
 80023e6:	d1f6      	bne.n	80023d6 <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80023e8:	f001 f9c6 	bl	8003778 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 80023ec:	4b90      	ldr	r3, [pc, #576]	; (8002630 <SpiritRadioInit+0x2f8>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d1ea      	bne.n	80023d0 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 80023fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002404:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800263c <SpiritRadioInit+0x304>
 8002408:	ee67 6a87 	vmul.f32	s13, s15, s14
 800240c:	4b89      	ldr	r3, [pc, #548]	; (8002634 <SpiritRadioInit+0x2fc>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	ee07 3a90 	vmov	s15, r3
 8002414:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800241c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002420:	ee17 3a90 	vmov	r3, s15
 8002424:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002426:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	b29b      	uxth	r3, r3
 800242c:	b2db      	uxtb	r3, r3
 800242e:	f003 030f 	and.w	r3, r3, #15
 8002432:	b2db      	uxtb	r3, r3
 8002434:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002436:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002438:	b2db      	uxtb	r3, r3
 800243a:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	025a      	lsls	r2, r3, #9
 8002442:	4b7c      	ldr	r3, [pc, #496]	; (8002634 <SpiritRadioInit+0x2fc>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	099b      	lsrs	r3, r3, #6
 8002448:	fbb2 f3f3 	udiv	r3, r2, r3
 800244c:	b2db      	uxtb	r3, r3
 800244e:	3301      	adds	r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fc51 	bl	8001d00 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 800245e:	f107 0310 	add.w	r3, r7, #16
 8002462:	461a      	mov	r2, r3
 8002464:	2101      	movs	r1, #1
 8002466:	20a3      	movs	r0, #163	; 0xa3
 8002468:	f001 fa04 	bl	8003874 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 800246c:	7c3b      	ldrb	r3, [r7, #16]
 800246e:	f023 0302 	bic.w	r3, r3, #2
 8002472:	b2db      	uxtb	r3, r3
 8002474:	743b      	strb	r3, [r7, #16]
 8002476:	f107 0310 	add.w	r3, r7, #16
 800247a:	461a      	mov	r2, r3
 800247c:	2101      	movs	r1, #1
 800247e:	20a3      	movs	r0, #163	; 0xa3
 8002480:	f001 f9ac 	bl	80037dc <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	f107 0216 	add.w	r2, r7, #22
 800248c:	f107 0117 	add.w	r1, r7, #23
 8002490:	4618      	mov	r0, r3
 8002492:	f000 fc3d 	bl	8002d10 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002496:	7dfb      	ldrb	r3, [r7, #23]
 8002498:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	7b5a      	ldrb	r2, [r3, #13]
 800249e:	7dbb      	ldrb	r3, [r7, #22]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	b2db      	uxtb	r3, r3
 80024a4:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 80024a6:	f107 0310 	add.w	r3, r7, #16
 80024aa:	461a      	mov	r2, r3
 80024ac:	2101      	movs	r1, #1
 80024ae:	201c      	movs	r0, #28
 80024b0:	f001 f9e0 	bl	8003874 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	f107 0214 	add.w	r2, r7, #20
 80024bc:	f107 0115 	add.w	r1, r7, #21
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fdbd 	bl	8003040 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 80024c6:	7d3b      	ldrb	r3, [r7, #20]
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	b25a      	sxtb	r2, r3
 80024cc:	7c3b      	ldrb	r3, [r7, #16]
 80024ce:	b25b      	sxtb	r3, r3
 80024d0:	f003 0308 	and.w	r3, r3, #8
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	4313      	orrs	r3, r2
 80024d8:	b25a      	sxtb	r2, r3
 80024da:	7d7b      	ldrb	r3, [r7, #21]
 80024dc:	b25b      	sxtb	r3, r3
 80024de:	4313      	orrs	r3, r2
 80024e0:	b25b      	sxtb	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	699b      	ldr	r3, [r3, #24]
 80024ea:	f107 0212 	add.w	r2, r7, #18
 80024ee:	f107 0113 	add.w	r1, r7, #19
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fcbe 	bl	8002e74 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 80024f8:	7cfb      	ldrb	r3, [r7, #19]
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	b25a      	sxtb	r2, r3
 80024fe:	7cbb      	ldrb	r3, [r7, #18]
 8002500:	b25b      	sxtb	r3, r3
 8002502:	4313      	orrs	r3, r2
 8002504:	b25b      	sxtb	r3, r3
 8002506:	b2db      	uxtb	r3, r3
 8002508:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 800250a:	4b4a      	ldr	r3, [pc, #296]	; (8002634 <SpiritRadioInit+0x2fc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	0b1b      	lsrs	r3, r3, #12
 8002510:	ee07 3a90 	vmov	s15, r3
 8002514:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002518:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002640 <SpiritRadioInit+0x308>
 800251c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002520:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002644 <SpiritRadioInit+0x30c>
 8002524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002528:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800252c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002530:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002534:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002538:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800253c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002540:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002544:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002548:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800254c:	dd09      	ble.n	8002562 <SpiritRadioInit+0x22a>
 800254e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002552:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002556:	edc7 7a00 	vstr	s15, [r7]
 800255a:	783b      	ldrb	r3, [r7, #0]
 800255c:	3301      	adds	r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	e006      	b.n	8002570 <SpiritRadioInit+0x238>
 8002562:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002566:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800256a:	edc7 7a00 	vstr	s15, [r7]
 800256e:	783b      	ldrb	r3, [r7, #0]
 8002570:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002572:	4b30      	ldr	r3, [pc, #192]	; (8002634 <SpiritRadioInit+0x2fc>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	4a30      	ldr	r2, [pc, #192]	; (8002638 <SpiritRadioInit+0x300>)
 8002578:	4293      	cmp	r3, r2
 800257a:	d802      	bhi.n	8002582 <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 800257c:	7bfb      	ldrb	r3, [r7, #15]
 800257e:	777b      	strb	r3, [r7, #29]
 8002580:	e033      	b.n	80025ea <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002582:	4b2c      	ldr	r3, [pc, #176]	; (8002634 <SpiritRadioInit+0x2fc>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	0b5b      	lsrs	r3, r3, #13
 8002588:	ee07 3a90 	vmov	s15, r3
 800258c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002590:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002640 <SpiritRadioInit+0x308>
 8002594:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002598:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002644 <SpiritRadioInit+0x30c>
 800259c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 80025a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025b0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80025b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	dd09      	ble.n	80025da <SpiritRadioInit+0x2a2>
 80025c6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ce:	edc7 7a00 	vstr	s15, [r7]
 80025d2:	783b      	ldrb	r3, [r7, #0]
 80025d4:	3301      	adds	r3, #1
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	e006      	b.n	80025e8 <SpiritRadioInit+0x2b0>
 80025da:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025e2:	edc7 7a00 	vstr	s15, [r7]
 80025e6:	783b      	ldrb	r3, [r7, #0]
 80025e8:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 80025ea:	f107 030f 	add.w	r3, r7, #15
 80025ee:	461a      	mov	r2, r3
 80025f0:	2101      	movs	r1, #1
 80025f2:	2007      	movs	r0, #7
 80025f4:	f001 f8f2 	bl	80037dc <RadioSpiWriteRegisters>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b0d      	ldr	r3, [pc, #52]	; (8002630 <SpiritRadioInit+0x2f8>)
 80025fc:	b212      	sxth	r2, r2
 80025fe:	4611      	mov	r1, r2
 8002600:	7019      	strb	r1, [r3, #0]
 8002602:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002606:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002608:	4b0a      	ldr	r3, [pc, #40]	; (8002634 <SpiritRadioInit+0x2fc>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a0e      	ldr	r2, [pc, #56]	; (8002648 <SpiritRadioInit+0x310>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d91e      	bls.n	8002650 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002612:	4b08      	ldr	r3, [pc, #32]	; (8002634 <SpiritRadioInit+0x2fc>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a0d      	ldr	r2, [pc, #52]	; (800264c <SpiritRadioInit+0x314>)
 8002618:	4293      	cmp	r3, r2
 800261a:	bf8c      	ite	hi
 800261c:	2301      	movhi	r3, #1
 800261e:	2300      	movls	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f000 f86c 	bl	8002700 <SpiritRadioSetXtalFlag>
 8002628:	e01d      	b.n	8002666 <SpiritRadioInit+0x32e>
 800262a:	bf00      	nop
 800262c:	49742400 	.word	0x49742400
 8002630:	20000128 	.word	0x20000128
 8002634:	20000124 	.word	0x20000124
 8002638:	01c9c37f 	.word	0x01c9c37f
 800263c:	48800000 	.word	0x48800000
 8002640:	49afd520 	.word	0x49afd520
 8002644:	42800000 	.word	0x42800000
 8002648:	01c9c380 	.word	0x01c9c380
 800264c:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002650:	4b28      	ldr	r3, [pc, #160]	; (80026f4 <SpiritRadioInit+0x3bc>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a28      	ldr	r2, [pc, #160]	; (80026f8 <SpiritRadioInit+0x3c0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	bf8c      	ite	hi
 800265a:	2301      	movhi	r3, #1
 800265c:	2300      	movls	r3, #0
 800265e:	b2db      	uxtb	r3, r3
 8002660:	4618      	mov	r0, r3
 8002662:	f000 f84d 	bl	8002700 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	330c      	adds	r3, #12
 800266a:	461a      	mov	r2, r3
 800266c:	2101      	movs	r1, #1
 800266e:	206c      	movs	r0, #108	; 0x6c
 8002670:	f001 f8b4 	bl	80037dc <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002674:	f107 031c 	add.w	r3, r7, #28
 8002678:	461a      	mov	r2, r3
 800267a:	2104      	movs	r1, #4
 800267c:	200c      	movs	r0, #12
 800267e:	f001 f8ad 	bl	80037dc <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002682:	f107 0318 	add.w	r3, r7, #24
 8002686:	461a      	mov	r2, r3
 8002688:	2104      	movs	r1, #4
 800268a:	201a      	movs	r0, #26
 800268c:	f001 f8a6 	bl	80037dc <RadioSpiWriteRegisters>
 8002690:	4602      	mov	r2, r0
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <SpiritRadioInit+0x3c4>)
 8002694:	b212      	sxth	r2, r2
 8002696:	4611      	mov	r1, r2
 8002698:	7019      	strb	r1, [r3, #0]
 800269a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800269e:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 80026a0:	2001      	movs	r0, #1
 80026a2:	f000 ff15 	bl	80034d0 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 80026a6:	2380      	movs	r3, #128	; 0x80
 80026a8:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 80026aa:	23e3      	movs	r3, #227	; 0xe3
 80026ac:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 80026ae:	f107 031c 	add.w	r3, r7, #28
 80026b2:	461a      	mov	r2, r3
 80026b4:	2102      	movs	r1, #2
 80026b6:	2099      	movs	r0, #153	; 0x99
 80026b8:	f001 f890 	bl	80037dc <RadioSpiWriteRegisters>
 80026bc:	4602      	mov	r2, r0
 80026be:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <SpiritRadioInit+0x3c4>)
 80026c0:	b212      	sxth	r2, r2
 80026c2:	4611      	mov	r1, r2
 80026c4:	7019      	strb	r1, [r3, #0]
 80026c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026ca:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 80026cc:	2322      	movs	r3, #34	; 0x22
 80026ce:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 80026d0:	f107 031c 	add.w	r3, r7, #28
 80026d4:	461a      	mov	r2, r3
 80026d6:	2101      	movs	r1, #1
 80026d8:	20bc      	movs	r0, #188	; 0xbc
 80026da:	f001 f87f 	bl	80037dc <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f000 f9aa 	bl	8002a3c <SpiritRadioSetFrequencyBase>
 80026e8:	4603      	mov	r3, r0
  
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3730      	adds	r7, #48	; 0x30
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000124 	.word	0x20000124
 80026f8:	017d783f 	.word	0x017d783f
 80026fc:	20000128 	.word	0x20000128

08002700 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	4603      	mov	r3, r0
 8002708:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800270a:	2300      	movs	r3, #0
 800270c:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 800270e:	f107 030f 	add.w	r3, r7, #15
 8002712:	461a      	mov	r2, r3
 8002714:	2101      	movs	r1, #1
 8002716:	2001      	movs	r0, #1
 8002718:	f001 f8ac 	bl	8003874 <RadioSpiReadRegisters>
 800271c:	4602      	mov	r2, r0
 800271e:	4b14      	ldr	r3, [pc, #80]	; (8002770 <SpiritRadioSetXtalFlag+0x70>)
 8002720:	b212      	sxth	r2, r2
 8002722:	4611      	mov	r1, r2
 8002724:	7019      	strb	r1, [r3, #0]
 8002726:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800272a:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 800272c:	79fb      	ldrb	r3, [r7, #7]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d105      	bne.n	800273e <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002732:	7bfb      	ldrb	r3, [r7, #15]
 8002734:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002738:	b2db      	uxtb	r3, r3
 800273a:	73fb      	strb	r3, [r7, #15]
 800273c:	e004      	b.n	8002748 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002744:	b2db      	uxtb	r3, r3
 8002746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002748:	f107 030f 	add.w	r3, r7, #15
 800274c:	461a      	mov	r2, r3
 800274e:	2101      	movs	r1, #1
 8002750:	2001      	movs	r0, #1
 8002752:	f001 f843 	bl	80037dc <RadioSpiWriteRegisters>
 8002756:	4602      	mov	r2, r0
 8002758:	4b05      	ldr	r3, [pc, #20]	; (8002770 <SpiritRadioSetXtalFlag+0x70>)
 800275a:	b212      	sxth	r2, r2
 800275c:	4611      	mov	r1, r2
 800275e:	7019      	strb	r1, [r3, #0]
 8002760:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002764:	705a      	strb	r2, [r3, #1]
  
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
 800276e:	bf00      	nop
 8002770:	20000128 	.word	0x20000128

08002774 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 800277c:	2300      	movs	r3, #0
 800277e:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002780:	2300      	movs	r3, #0
 8002782:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002784:	2300      	movs	r3, #0
 8002786:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a3a      	ldr	r2, [pc, #232]	; (8002874 <SpiritRadioSearchWCP+0x100>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d306      	bcc.n	800279e <SpiritRadioSearchWCP+0x2a>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a39      	ldr	r2, [pc, #228]	; (8002878 <SpiritRadioSearchWCP+0x104>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d802      	bhi.n	800279e <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002798:	2306      	movs	r3, #6
 800279a:	73bb      	strb	r3, [r7, #14]
 800279c:	e01f      	b.n	80027de <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a36      	ldr	r2, [pc, #216]	; (800287c <SpiritRadioSearchWCP+0x108>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d906      	bls.n	80027b4 <SpiritRadioSearchWCP+0x40>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a35      	ldr	r2, [pc, #212]	; (8002880 <SpiritRadioSearchWCP+0x10c>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d802      	bhi.n	80027b4 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 80027ae:	230c      	movs	r3, #12
 80027b0:	73bb      	strb	r3, [r7, #14]
 80027b2:	e014      	b.n	80027de <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a33      	ldr	r2, [pc, #204]	; (8002884 <SpiritRadioSearchWCP+0x110>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d906      	bls.n	80027ca <SpiritRadioSearchWCP+0x56>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a32      	ldr	r2, [pc, #200]	; (8002888 <SpiritRadioSearchWCP+0x114>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d802      	bhi.n	80027ca <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 80027c4:	2310      	movs	r3, #16
 80027c6:	73bb      	strb	r3, [r7, #14]
 80027c8:	e009      	b.n	80027de <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a2f      	ldr	r2, [pc, #188]	; (800288c <SpiritRadioSearchWCP+0x118>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d905      	bls.n	80027de <SpiritRadioSearchWCP+0x6a>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a2e      	ldr	r2, [pc, #184]	; (8002890 <SpiritRadioSearchWCP+0x11c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d801      	bhi.n	80027de <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 80027da:	2320      	movs	r3, #32
 80027dc:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a2c      	ldr	r2, [pc, #176]	; (8002894 <SpiritRadioSearchWCP+0x120>)
 80027e2:	fba2 2303 	umull	r2, r3, r2, r3
 80027e6:	099b      	lsrs	r3, r3, #6
 80027e8:	7bba      	ldrb	r2, [r7, #14]
 80027ea:	fb02 f303 	mul.w	r3, r2, r3
 80027ee:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 80027f0:	f241 631f 	movw	r3, #5663	; 0x161f
 80027f4:	461a      	mov	r2, r3
 80027f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027fa:	fb02 f303 	mul.w	r3, r2, r3
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	429a      	cmp	r2, r3
 8002802:	d302      	bcc.n	800280a <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002804:	230f      	movs	r3, #15
 8002806:	73fb      	strb	r3, [r7, #15]
 8002808:	e023      	b.n	8002852 <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e005      	b.n	800281c <SpiritRadioSearchWCP+0xa8>
 8002810:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002814:	b2db      	uxtb	r3, r3
 8002816:	3301      	adds	r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	73fb      	strb	r3, [r7, #15]
 800281c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002820:	2b0e      	cmp	r3, #14
 8002822:	dc0c      	bgt.n	800283e <SpiritRadioSearchWCP+0xca>
 8002824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002828:	4a1b      	ldr	r2, [pc, #108]	; (8002898 <SpiritRadioSearchWCP+0x124>)
 800282a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800282e:	461a      	mov	r2, r3
 8002830:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002834:	fb02 f303 	mul.w	r3, r2, r3
 8002838:	68ba      	ldr	r2, [r7, #8]
 800283a:	429a      	cmp	r2, r3
 800283c:	d8e8      	bhi.n	8002810 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 800283e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <SpiritRadioSearchWCP+0xde>
      i--;
 8002846:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	3b01      	subs	r3, #1
 800284e:	b2db      	uxtb	r3, r3
 8002850:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002852:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002856:	425a      	negs	r2, r3
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	f002 0207 	and.w	r2, r2, #7
 8002860:	bf58      	it	pl
 8002862:	4253      	negpl	r3, r2
 8002864:	b25b      	sxtb	r3, r3
 8002866:	b2db      	uxtb	r3, r3
  
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr
 8002874:	2e5f5680 	.word	0x2e5f5680
 8002878:	390c2fe0 	.word	0x390c2fe0
 800287c:	1701e47f 	.word	0x1701e47f
 8002880:	1c146a60 	.word	0x1c146a60
 8002884:	11d260bf 	.word	0x11d260bf
 8002888:	14ced7e0 	.word	0x14ced7e0
 800288c:	08e18f3f 	.word	0x08e18f3f
 8002890:	0a6fd060 	.word	0x0a6fd060
 8002894:	10624dd3 	.word	0x10624dd3
 8002898:	080073f8 	.word	0x080073f8

0800289c <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 80028a2:	1d3b      	adds	r3, r7, #4
 80028a4:	461a      	mov	r2, r3
 80028a6:	2104      	movs	r1, #4
 80028a8:	2008      	movs	r0, #8
 80028aa:	f000 ffe3 	bl	8003874 <RadioSpiReadRegisters>
 80028ae:	4602      	mov	r2, r0
 80028b0:	4b0c      	ldr	r3, [pc, #48]	; (80028e4 <SpiritRadioGetSynthWord+0x48>)
 80028b2:	b212      	sxth	r2, r2
 80028b4:	4611      	mov	r1, r2
 80028b6:	7019      	strb	r1, [r3, #0]
 80028b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028bc:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80028be:	793b      	ldrb	r3, [r7, #4]
 80028c0:	055b      	lsls	r3, r3, #21
 80028c2:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 80028c6:	797b      	ldrb	r3, [r7, #5]
 80028c8:	035b      	lsls	r3, r3, #13
 80028ca:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80028cc:	79bb      	ldrb	r3, [r7, #6]
 80028ce:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 80028d0:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 80028d2:	79fa      	ldrb	r2, [r7, #7]
 80028d4:	08d2      	lsrs	r2, r2, #3
 80028d6:	b2d2      	uxtb	r2, r2
 80028d8:	4413      	add	r3, r2
  
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3708      	adds	r7, #8
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000128 	.word	0x20000128

080028e8 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 80028ee:	1dfb      	adds	r3, r7, #7
 80028f0:	461a      	mov	r2, r3
 80028f2:	2101      	movs	r1, #1
 80028f4:	200b      	movs	r0, #11
 80028f6:	f000 ffbd 	bl	8003874 <RadioSpiReadRegisters>
 80028fa:	4602      	mov	r2, r0
 80028fc:	4b10      	ldr	r3, [pc, #64]	; (8002940 <SpiritRadioGetBand+0x58>)
 80028fe:	b212      	sxth	r2, r2
 8002900:	4611      	mov	r1, r2
 8002902:	7019      	strb	r1, [r3, #0]
 8002904:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002908:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	f003 0307 	and.w	r3, r3, #7
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002914:	2300      	movs	r3, #0
 8002916:	e00e      	b.n	8002936 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002918:	79fb      	ldrb	r3, [r7, #7]
 800291a:	f003 0307 	and.w	r3, r3, #7
 800291e:	2b03      	cmp	r3, #3
 8002920:	d101      	bne.n	8002926 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002922:	2301      	movs	r3, #1
 8002924:	e007      	b.n	8002936 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002926:	79fb      	ldrb	r3, [r7, #7]
 8002928:	f003 0307 	and.w	r3, r3, #7
 800292c:	2b04      	cmp	r3, #4
 800292e:	d101      	bne.n	8002934 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002930:	2302      	movs	r3, #2
 8002932:	e000      	b.n	8002936 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002934:	2303      	movs	r3, #3
  }
  
}
 8002936:	4618      	mov	r0, r3
 8002938:	3708      	adds	r7, #8
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	20000128 	.word	0x20000128

08002944 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 800294a:	1dfb      	adds	r3, r7, #7
 800294c:	461a      	mov	r2, r3
 800294e:	2101      	movs	r1, #1
 8002950:	206c      	movs	r0, #108	; 0x6c
 8002952:	f000 ff8f 	bl	8003874 <RadioSpiReadRegisters>
 8002956:	4602      	mov	r2, r0
 8002958:	4b05      	ldr	r3, [pc, #20]	; (8002970 <SpiritRadioGetChannel+0x2c>)
 800295a:	b212      	sxth	r2, r2
 800295c:	4611      	mov	r1, r2
 800295e:	7019      	strb	r1, [r3, #0]
 8002960:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002964:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002966:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002968:	4618      	mov	r0, r3
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000128 	.word	0x20000128

08002974 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 800297a:	1dfb      	adds	r3, r7, #7
 800297c:	461a      	mov	r2, r3
 800297e:	2101      	movs	r1, #1
 8002980:	200c      	movs	r0, #12
 8002982:	f000 ff77 	bl	8003874 <RadioSpiReadRegisters>
 8002986:	4602      	mov	r2, r0
 8002988:	4b08      	ldr	r3, [pc, #32]	; (80029ac <SpiritRadioGetChannelSpace+0x38>)
 800298a:	b212      	sxth	r2, r2
 800298c:	4611      	mov	r1, r2
 800298e:	7019      	strb	r1, [r3, #0]
 8002990:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002994:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	461a      	mov	r2, r3
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <SpiritRadioGetChannelSpace+0x3c>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	fb02 f303 	mul.w	r3, r2, r3
 80029a2:	0bdb      	lsrs	r3, r3, #15
  
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20000128 	.word	0x20000128
 80029b0:	20000124 	.word	0x20000124

080029b4 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 80029ba:	1d3b      	adds	r3, r7, #4
 80029bc:	461a      	mov	r2, r3
 80029be:	2102      	movs	r1, #2
 80029c0:	200e      	movs	r0, #14
 80029c2:	f000 ff57 	bl	8003874 <RadioSpiReadRegisters>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <SpiritRadioGetFrequencyOffset+0x80>)
 80029ca:	b212      	sxth	r2, r2
 80029cc:	4611      	mov	r1, r2
 80029ce:	7019      	strb	r1, [r3, #0]
 80029d0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029d4:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 80029d6:	793b      	ldrb	r3, [r7, #4]
 80029d8:	b29b      	uxth	r3, r3
 80029da:	021b      	lsls	r3, r3, #8
 80029dc:	b29a      	uxth	r2, r3
 80029de:	797b      	ldrb	r3, [r7, #5]
 80029e0:	b29b      	uxth	r3, r3
 80029e2:	4413      	add	r3, r2
 80029e4:	b29b      	uxth	r3, r3
 80029e6:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 80029e8:	887b      	ldrh	r3, [r7, #2]
 80029ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 80029f2:	887b      	ldrh	r3, [r7, #2]
 80029f4:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 80029f8:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	807b      	strh	r3, [r7, #2]
 8002a00:	e004      	b.n	8002a0c <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002a02:	887b      	ldrh	r3, [r7, #2]
 8002a04:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002a0c:	1cbb      	adds	r3, r7, #2
 8002a0e:	881b      	ldrh	r3, [r3, #0]
 8002a10:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002a12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002a16:	4a08      	ldr	r2, [pc, #32]	; (8002a38 <SpiritRadioGetFrequencyOffset+0x84>)
 8002a18:	6812      	ldr	r2, [r2, #0]
 8002a1a:	fb02 f303 	mul.w	r3, r2, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	da03      	bge.n	8002a2a <SpiritRadioGetFrequencyOffset+0x76>
 8002a22:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8002a26:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002a2a:	149b      	asrs	r3, r3, #18
  
}
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	3708      	adds	r7, #8
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}
 8002a34:	20000128 	.word	0x20000128
 8002a38:	20000124 	.word	0x20000124

08002a3c <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002a3c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a40:	b08a      	sub	sp, #40	; 0x28
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a79      	ldr	r2, [pc, #484]	; (8002c34 <SpiritRadioSetFrequencyBase+0x1f8>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d307      	bcc.n	8002a64 <SpiritRadioSetFrequencyBase+0x28>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	4a78      	ldr	r2, [pc, #480]	; (8002c38 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d803      	bhi.n	8002a64 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a62:	e022      	b.n	8002aaa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <SpiritRadioSetFrequencyBase+0x200>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d907      	bls.n	8002a7c <SpiritRadioSetFrequencyBase+0x40>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a74      	ldr	r2, [pc, #464]	; (8002c40 <SpiritRadioSetFrequencyBase+0x204>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d803      	bhi.n	8002a7c <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002a74:	2301      	movs	r3, #1
 8002a76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a7a:	e016      	b.n	8002aaa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a71      	ldr	r2, [pc, #452]	; (8002c44 <SpiritRadioSetFrequencyBase+0x208>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d907      	bls.n	8002a94 <SpiritRadioSetFrequencyBase+0x58>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <SpiritRadioSetFrequencyBase+0x20c>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d803      	bhi.n	8002a94 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002a92:	e00a      	b.n	8002aaa <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a6d      	ldr	r2, [pc, #436]	; (8002c4c <SpiritRadioSetFrequencyBase+0x210>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d906      	bls.n	8002aaa <SpiritRadioSetFrequencyBase+0x6e>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a6c      	ldr	r2, [pc, #432]	; (8002c50 <SpiritRadioSetFrequencyBase+0x214>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d802      	bhi.n	8002aaa <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002aa4:	2303      	movs	r3, #3
 8002aa6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002aaa:	f7ff ff83 	bl	80029b4 <SpiritRadioGetFrequencyOffset>
 8002aae:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002ab0:	f7ff ff60 	bl	8002974 <SpiritRadioGetChannelSpace>
 8002ab4:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002ab6:	f7ff ff45 	bl	8002944 <SpiritRadioGetChannel>
 8002aba:	4603      	mov	r3, r0
 8002abc:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002abe:	6a3a      	ldr	r2, [r7, #32]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	441a      	add	r2, r3
 8002ac4:	7efb      	ldrb	r3, [r7, #27]
 8002ac6:	69f9      	ldr	r1, [r7, #28]
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002ad0:	f000 fd60 	bl	8003594 <SpiritRadioGetRefDiv>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8002ada:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d839      	bhi.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
 8002ae2:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <SpiritRadioSetFrequencyBase+0xac>)
 8002ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae8:	08002b41 	.word	0x08002b41
 8002aec:	08002b29 	.word	0x08002b29
 8002af0:	08002b11 	.word	0x08002b11
 8002af4:	08002af9 	.word	0x08002af9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4a56      	ldr	r2, [pc, #344]	; (8002c54 <SpiritRadioSetFrequencyBase+0x218>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d803      	bhi.n	8002b08 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002b00:	2000      	movs	r0, #0
 8002b02:	f7fe fda5 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002b06:	e026      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002b08:	2001      	movs	r0, #1
 8002b0a:	f7fe fda1 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 8002b0e:	e022      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	4a51      	ldr	r2, [pc, #324]	; (8002c58 <SpiritRadioSetFrequencyBase+0x21c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d803      	bhi.n	8002b20 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002b18:	2000      	movs	r0, #0
 8002b1a:	f7fe fd99 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002b1e:	e01a      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002b20:	2001      	movs	r0, #1
 8002b22:	f7fe fd95 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 8002b26:	e016      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	4a4c      	ldr	r2, [pc, #304]	; (8002c5c <SpiritRadioSetFrequencyBase+0x220>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d803      	bhi.n	8002b38 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002b30:	2000      	movs	r0, #0
 8002b32:	f7fe fd8d 	bl	8001650 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002b36:	e00e      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002b38:	2001      	movs	r0, #1
 8002b3a:	f7fe fd89 	bl	8001650 <SpiritCalibrationSelectVco>
    break;
 8002b3e:	e00a      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	4a47      	ldr	r2, [pc, #284]	; (8002c60 <SpiritRadioSetFrequencyBase+0x224>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d803      	bhi.n	8002b50 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002b48:	2000      	movs	r0, #0
 8002b4a:	f7fe fd81 	bl	8001650 <SpiritCalibrationSelectVco>
 8002b4e:	e002      	b.n	8002b56 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002b50:	2001      	movs	r0, #1
 8002b52:	f7fe fd7d 	bl	8001650 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002b56:	6978      	ldr	r0, [r7, #20]
 8002b58:	f7ff fe0c 	bl	8002774 <SpiritRadioSearchWCP>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8002b60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002b64:	4a3f      	ldr	r2, [pc, #252]	; (8002c64 <SpiritRadioSetFrequencyBase+0x228>)
 8002b66:	5cd3      	ldrb	r3, [r2, r3]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	fb02 f303 	mul.w	r3, r2, r3
 8002b70:	4618      	mov	r0, r3
 8002b72:	f7fd fc73 	bl	800045c <__aeabi_ui2d>
 8002b76:	4604      	mov	r4, r0
 8002b78:	460d      	mov	r5, r1
 8002b7a:	7cfb      	ldrb	r3, [r7, #19]
 8002b7c:	049b      	lsls	r3, r3, #18
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fc7c 	bl	800047c <__aeabi_i2d>
 8002b84:	4680      	mov	r8, r0
 8002b86:	4689      	mov	r9, r1
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <SpiritRadioSetFrequencyBase+0x22c>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fc65 	bl	800045c <__aeabi_ui2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	4640      	mov	r0, r8
 8002b98:	4649      	mov	r1, r9
 8002b9a:	f7fd fe03 	bl	80007a4 <__aeabi_ddiv>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	4620      	mov	r0, r4
 8002ba4:	4629      	mov	r1, r5
 8002ba6:	f7fd fcd3 	bl	8000550 <__aeabi_dmul>
 8002baa:	4602      	mov	r2, r0
 8002bac:	460b      	mov	r3, r1
 8002bae:	4610      	mov	r0, r2
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	f7fd fedf 	bl	8000974 <__aeabi_d2uiz>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	0d5b      	lsrs	r3, r3, #21
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	f003 031f 	and.w	r3, r3, #31
 8002bc4:	b2da      	uxtb	r2, r3
 8002bc6:	7cbb      	ldrb	r3, [r7, #18]
 8002bc8:	015b      	lsls	r3, r3, #5
 8002bca:	b2db      	uxtb	r3, r3
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	0b5b      	lsrs	r3, r3, #13
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	095b      	lsrs	r3, r3, #5
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bee:	491f      	ldr	r1, [pc, #124]	; (8002c6c <SpiritRadioSetFrequencyBase+0x230>)
 8002bf0:	5ccb      	ldrb	r3, [r1, r3]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8002bf8:	f107 0308 	add.w	r3, r7, #8
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	2104      	movs	r1, #4
 8002c00:	2008      	movs	r0, #8
 8002c02:	f000 fdeb 	bl	80037dc <RadioSpiWriteRegisters>
 8002c06:	4602      	mov	r2, r0
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <SpiritRadioSetFrequencyBase+0x234>)
 8002c0a:	b212      	sxth	r2, r2
 8002c0c:	4611      	mov	r1, r2
 8002c0e:	7019      	strb	r1, [r3, #0]
 8002c10:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c14:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8002c16:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <SpiritRadioSetFrequencyBase+0x238>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d103      	bne.n	8002c26 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8002c1e:	f7fe ff5b 	bl	8001ad8 <SpiritManagementWaVcoCalibration>
 8002c22:	4603      	mov	r3, r0
 8002c24:	e000      	b.n	8002c28 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8002c26:	2300      	movs	r3, #0
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3728      	adds	r7, #40	; 0x28
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c32:	bf00      	nop
 8002c34:	2e5f5680 	.word	0x2e5f5680
 8002c38:	390c2fe0 	.word	0x390c2fe0
 8002c3c:	1701e47f 	.word	0x1701e47f
 8002c40:	1c146a60 	.word	0x1c146a60
 8002c44:	11d260bf 	.word	0x11d260bf
 8002c48:	14ced7e0 	.word	0x14ced7e0
 8002c4c:	08e18f3f 	.word	0x08e18f3f
 8002c50:	0a6fd060 	.word	0x0a6fd060
 8002c54:	099cf4e1 	.word	0x099cf4e1
 8002c58:	1339e9c3 	.word	0x1339e9c3
 8002c5c:	19a28d05 	.word	0x19a28d05
 8002c60:	33451a0a 	.word	0x33451a0a
 8002c64:	0800733c 	.word	0x0800733c
 8002c68:	20000124 	.word	0x20000124
 8002c6c:	08007340 	.word	0x08007340
 8002c70:	20000128 	.word	0x20000128
 8002c74:	20000005 	.word	0x20000005

08002c78 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 8002c78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 8002c80:	f7ff fe0c 	bl	800289c <SpiritRadioGetSynthWord>
 8002c84:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 8002c86:	f7ff fe2f 	bl	80028e8 <SpiritRadioGetBand>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8002c8e:	f000 fc81 	bl	8003594 <SpiritRadioGetRefDiv>
 8002c92:	4603      	mov	r3, r0
 8002c94:	3301      	adds	r3, #1
 8002c96:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f7fd fbdf 	bl	800045c <__aeabi_ui2d>
 8002c9e:	4604      	mov	r4, r0
 8002ca0:	460d      	mov	r5, r1
 8002ca2:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <SpiritRadioGetFrequencyBase+0x90>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fbd8 	bl	800045c <__aeabi_ui2d>
 8002cac:	4680      	mov	r8, r0
 8002cae:	4689      	mov	r9, r1
 8002cb0:	78bb      	ldrb	r3, [r7, #2]
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	4915      	ldr	r1, [pc, #84]	; (8002d0c <SpiritRadioGetFrequencyBase+0x94>)
 8002cb6:	5c8a      	ldrb	r2, [r1, r2]
 8002cb8:	fb02 f303 	mul.w	r3, r2, r3
 8002cbc:	049b      	lsls	r3, r3, #18
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7fd fbdc 	bl	800047c <__aeabi_i2d>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	4640      	mov	r0, r8
 8002cca:	4649      	mov	r1, r9
 8002ccc:	f7fd fd6a 	bl	80007a4 <__aeabi_ddiv>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	460b      	mov	r3, r1
 8002cd4:	4620      	mov	r0, r4
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	f7fd fc3a 	bl	8000550 <__aeabi_dmul>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	460b      	mov	r3, r1
 8002ce0:	ec43 2b17 	vmov	d7, r2, r3
 8002ce4:	eeb0 0a47 	vmov.f32	s0, s14
 8002ce8:	eef0 0a67 	vmov.f32	s1, s15
 8002cec:	f004 fa86 	bl	80071fc <round>
 8002cf0:	ec53 2b10 	vmov	r2, r3, d0
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fd fe3c 	bl	8000974 <__aeabi_d2uiz>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d08:	20000124 	.word	0x20000124
 8002d0c:	0800733c 	.word	0x0800733c

08002d10 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b088      	sub	sp, #32
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	60f8      	str	r0, [r7, #12]
 8002d18:	60b9      	str	r1, [r7, #8]
 8002d1a:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8002d20:	230f      	movs	r3, #15
 8002d22:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 8002d28:	f000 fc86 	bl	8003638 <SpiritRadioGetDigDiv>
 8002d2c:	4603      	mov	r3, r0
 8002d2e:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8002d30:	e015      	b.n	8002d5e <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8002d32:	4b4f      	ldr	r3, [pc, #316]	; (8002e70 <SpiritRadioSearchDatarateME+0x160>)
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d3a:	f1c3 0114 	rsb	r1, r3, #20
 8002d3e:	7ebb      	ldrb	r3, [r7, #26]
 8002d40:	440b      	add	r3, r1
 8002d42:	fa22 f303 	lsr.w	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d302      	bcc.n	8002d52 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	763b      	strb	r3, [r7, #24]
 8002d50:	e005      	b.n	8002d5e <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 8002d52:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d56:	b2db      	uxtb	r3, r3
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	b2db      	uxtb	r3, r3
 8002d5c:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 8002d5e:	7e3b      	ldrb	r3, [r7, #24]
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d103      	bne.n	8002d6e <SpiritRadioSearchDatarateME+0x5e>
 8002d66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	dae1      	bge.n	8002d32 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 8002d6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	da01      	bge.n	8002d7a <SpiritRadioSearchDatarateME+0x6a>
 8002d76:	2300      	movs	r3, #0
 8002d78:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 8002d7a:	7ffa      	ldrb	r2, [r7, #31]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 8002d80:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002d84:	f1c3 0317 	rsb	r3, r3, #23
 8002d88:	68fa      	ldr	r2, [r7, #12]
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	4b38      	ldr	r3, [pc, #224]	; (8002e70 <SpiritRadioSearchDatarateME+0x160>)
 8002d8e:	6819      	ldr	r1, [r3, #0]
 8002d90:	7ebb      	ldrb	r3, [r7, #26]
 8002d92:	3305      	adds	r3, #5
 8002d94:	fa21 f303 	lsr.w	r3, r1, r3
 8002d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d9c:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8002d9e:	2300      	movs	r3, #0
 8002da0:	77bb      	strb	r3, [r7, #30]
 8002da2:	e031      	b.n	8002e08 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 8002da4:	7e7a      	ldrb	r2, [r7, #25]
 8002da6:	7fbb      	ldrb	r3, [r7, #30]
 8002da8:	4413      	add	r3, r2
 8002daa:	2b01      	cmp	r3, #1
 8002dac:	d021      	beq.n	8002df2 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	7e7b      	ldrb	r3, [r7, #25]
 8002db4:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8002db8:	7fbb      	ldrb	r3, [r7, #30]
 8002dba:	440b      	add	r3, r1
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	4b2b      	ldr	r3, [pc, #172]	; (8002e70 <SpiritRadioSearchDatarateME+0x160>)
 8002dc2:	6819      	ldr	r1, [r3, #0]
 8002dc4:	7ebb      	ldrb	r3, [r7, #26]
 8002dc6:	3305      	adds	r3, #5
 8002dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8002dcc:	fb03 f100 	mul.w	r1, r3, r0
 8002dd0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8002dd4:	f1c3 0317 	rsb	r3, r3, #23
 8002dd8:	fa21 f303 	lsr.w	r3, r1, r3
 8002ddc:	b29b      	uxth	r3, r3
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	b29a      	uxth	r2, r3
 8002de2:	7fbb      	ldrb	r3, [r7, #30]
 8002de4:	b212      	sxth	r2, r2
 8002de6:	005b      	lsls	r3, r3, #1
 8002de8:	3320      	adds	r3, #32
 8002dea:	443b      	add	r3, r7
 8002dec:	f823 2c10 	strh.w	r2, [r3, #-16]
 8002df0:	e007      	b.n	8002e02 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8002df2:	7fbb      	ldrb	r3, [r7, #30]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	3320      	adds	r3, #32
 8002df8:	443b      	add	r3, r7
 8002dfa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002dfe:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8002e02:	7fbb      	ldrb	r3, [r7, #30]
 8002e04:	3301      	adds	r3, #1
 8002e06:	77bb      	strb	r3, [r7, #30]
 8002e08:	7fbb      	ldrb	r3, [r7, #30]
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d9ca      	bls.n	8002da4 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8002e0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e12:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8002e14:	2300      	movs	r3, #0
 8002e16:	76fb      	strb	r3, [r7, #27]
 8002e18:	e021      	b.n	8002e5e <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8002e1a:	7efb      	ldrb	r3, [r7, #27]
 8002e1c:	005b      	lsls	r3, r3, #1
 8002e1e:	3320      	adds	r3, #32
 8002e20:	443b      	add	r3, r7
 8002e22:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	bfb8      	it	lt
 8002e2a:	425b      	neglt	r3, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	8bba      	ldrh	r2, [r7, #28]
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d911      	bls.n	8002e58 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8002e34:	7efb      	ldrb	r3, [r7, #27]
 8002e36:	005b      	lsls	r3, r3, #1
 8002e38:	3320      	adds	r3, #32
 8002e3a:	443b      	add	r3, r7
 8002e3c:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	bfb8      	it	lt
 8002e44:	425b      	neglt	r3, r3
 8002e46:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 8002e48:	7e7a      	ldrb	r2, [r7, #25]
 8002e4a:	7efb      	ldrb	r3, [r7, #27]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	3b01      	subs	r3, #1
 8002e52:	b2da      	uxtb	r2, r3
 8002e54:	68bb      	ldr	r3, [r7, #8]
 8002e56:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 8002e58:	7efb      	ldrb	r3, [r7, #27]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	76fb      	strb	r3, [r7, #27]
 8002e5e:	7efb      	ldrb	r3, [r7, #27]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d9da      	bls.n	8002e1a <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 8002e64:	bf00      	nop
 8002e66:	bf00      	nop
 8002e68:	3720      	adds	r7, #32
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bd80      	pop	{r7, pc}
 8002e6e:	bf00      	nop
 8002e70:	20000124 	.word	0x20000124

08002e74 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	60b9      	str	r1, [r7, #8]
 8002e7e:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 8002e80:	2301      	movs	r3, #1
 8002e82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 8002e86:	f000 fbd7 	bl	8003638 <SpiritRadioGetDigDiv>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d003      	beq.n	8002e98 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8002e90:	2302      	movs	r3, #2
 8002e92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8002e96:	e002      	b.n	8002e9e <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8002e9e:	4b63      	ldr	r3, [pc, #396]	; (800302c <SpiritRadioSearchChannelBwME+0x1b8>)
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4a61      	ldr	r2, [pc, #388]	; (8003030 <SpiritRadioSearchChannelBwME+0x1bc>)
 8002eac:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb0:	095b      	lsrs	r3, r3, #5
 8002eb2:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eba:	e006      	b.n	8002eca <SpiritRadioSearchChannelBwME+0x56>
 8002ebc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eca:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ece:	2b59      	cmp	r3, #89	; 0x59
 8002ed0:	dc0f      	bgt.n	8002ef2 <SpiritRadioSearchChannelBwME+0x7e>
 8002ed2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ed6:	4a57      	ldr	r2, [pc, #348]	; (8003034 <SpiritRadioSearchChannelBwME+0x1c0>)
 8002ed8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002edc:	461a      	mov	r2, r3
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	fb02 f303 	mul.w	r3, r2, r3
 8002ee4:	4a54      	ldr	r2, [pc, #336]	; (8003038 <SpiritRadioSearchChannelBwME+0x1c4>)
 8002ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eea:	0adb      	lsrs	r3, r3, #11
 8002eec:	68fa      	ldr	r2, [r7, #12]
 8002eee:	429a      	cmp	r2, r3
 8002ef0:	d3e4      	bcc.n	8002ebc <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8002ef2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d077      	beq.n	8002fea <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8002efa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efe:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8002f00:	2300      	movs	r3, #0
 8002f02:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f06:	e03a      	b.n	8002f7e <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8002f08:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002f0c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f10:	4413      	add	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	dc06      	bgt.n	8002f24 <SpiritRadioSearchChannelBwME+0xb0>
 8002f16:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8002f1a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f1e:	4413      	add	r3, r2
 8002f20:	2b5a      	cmp	r3, #90	; 0x5a
 8002f22:	dc1e      	bgt.n	8002f62 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8002f2c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f30:	440b      	add	r3, r1
 8002f32:	3b01      	subs	r3, #1
 8002f34:	493f      	ldr	r1, [pc, #252]	; (8003034 <SpiritRadioSearchChannelBwME+0x1c0>)
 8002f36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002f3a:	4619      	mov	r1, r3
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	fb01 f303 	mul.w	r3, r1, r3
 8002f42:	493d      	ldr	r1, [pc, #244]	; (8003038 <SpiritRadioSearchChannelBwME+0x1c4>)
 8002f44:	fba1 1303 	umull	r1, r3, r1, r3
 8002f48:	0adb      	lsrs	r3, r3, #11
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f54:	b212      	sxth	r2, r2
 8002f56:	005b      	lsls	r3, r3, #1
 8002f58:	3328      	adds	r3, #40	; 0x28
 8002f5a:	443b      	add	r3, r7
 8002f5c:	f823 2c14 	strh.w	r2, [r3, #-20]
 8002f60:	e008      	b.n	8002f74 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 8002f62:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f66:	005b      	lsls	r3, r3, #1
 8002f68:	3328      	adds	r3, #40	; 0x28
 8002f6a:	443b      	add	r3, r7
 8002f6c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002f70:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 8002f74:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f78:	3301      	adds	r3, #1
 8002f7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8002f7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d9c0      	bls.n	8002f08 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 8002f86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8a:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002f92:	e026      	b.n	8002fe2 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 8002f94:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	3328      	adds	r3, #40	; 0x28
 8002f9c:	443b      	add	r3, r7
 8002f9e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	bfb8      	it	lt
 8002fa6:	425b      	neglt	r3, r3
 8002fa8:	b29b      	uxth	r3, r3
 8002faa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d913      	bls.n	8002fd8 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8002fb0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fb4:	005b      	lsls	r3, r3, #1
 8002fb6:	3328      	adds	r3, #40	; 0x28
 8002fb8:	443b      	add	r3, r7
 8002fba:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bfb8      	it	lt
 8002fc2:	425b      	neglt	r3, r3
 8002fc4:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 8002fc6:	7efa      	ldrb	r2, [r7, #27]
 8002fc8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fcc:	4413      	add	r3, r2
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	3b01      	subs	r3, #1
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8002fd8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fdc:	3301      	adds	r3, #1
 8002fde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8002fe2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d9d4      	bls.n	8002f94 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8002fea:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002fee:	4a13      	ldr	r2, [pc, #76]	; (800303c <SpiritRadioSearchChannelBwME+0x1c8>)
 8002ff0:	fb82 1203 	smull	r1, r2, r2, r3
 8002ff4:	1052      	asrs	r2, r2, #1
 8002ff6:	17db      	asrs	r3, r3, #31
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	b25b      	sxtb	r3, r3
 8002ffc:	b2da      	uxtb	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003002:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 8003006:	4b0d      	ldr	r3, [pc, #52]	; (800303c <SpiritRadioSearchChannelBwME+0x1c8>)
 8003008:	fb83 1302 	smull	r1, r3, r3, r2
 800300c:	1059      	asrs	r1, r3, #1
 800300e:	17d3      	asrs	r3, r2, #31
 8003010:	1ac9      	subs	r1, r1, r3
 8003012:	460b      	mov	r3, r1
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	440b      	add	r3, r1
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	b25b      	sxtb	r3, r3
 800301c:	b2da      	uxtb	r2, r3
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	701a      	strb	r2, [r3, #0]
  
}
 8003022:	bf00      	nop
 8003024:	3728      	adds	r7, #40	; 0x28
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}
 800302a:	bf00      	nop
 800302c:	20000124 	.word	0x20000124
 8003030:	51eb851f 	.word	0x51eb851f
 8003034:	08007344 	.word	0x08007344
 8003038:	c9a633fd 	.word	0xc9a633fd
 800303c:	38e38e39 	.word	0x38e38e39

08003040 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b08a      	sub	sp, #40	; 0x28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 800304c:	2300      	movs	r3, #0
 800304e:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 8003050:	4b53      	ldr	r3, [pc, #332]	; (80031a0 <SpiritRadioSearchFreqDevME+0x160>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	ee07 3a90 	vmov	s15, r3
 8003058:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800305c:	eddf 6a51 	vldr	s13, [pc, #324]	; 80031a4 <SpiritRadioSearchFreqDevME+0x164>
 8003060:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003064:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 8003068:	2300      	movs	r3, #0
 800306a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800306e:	e028      	b.n	80030c2 <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 8003070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003074:	2201      	movs	r2, #1
 8003076:	fa02 f303 	lsl.w	r3, r2, r3
 800307a:	4618      	mov	r0, r3
 800307c:	f7fd f9fe 	bl	800047c <__aeabi_i2d>
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b48      	ldr	r3, [pc, #288]	; (80031a8 <SpiritRadioSearchFreqDevME+0x168>)
 8003086:	f7fd fa63 	bl	8000550 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f7fd fc6f 	bl	8000974 <__aeabi_d2uiz>
 8003096:	ee07 0a90 	vmov	s15, r0
 800309a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800309e:	edd7 7a06 	vldr	s15, [r7, #24]
 80030a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030aa:	ee17 3a90 	vmov	r3, s15
 80030ae:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 80030b0:	68fa      	ldr	r2, [r7, #12]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d309      	bcc.n	80030cc <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 80030b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030bc:	3301      	adds	r3, #1
 80030be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030c6:	2b09      	cmp	r3, #9
 80030c8:	d9d2      	bls.n	8003070 <SpiritRadioSearchFreqDevME+0x30>
 80030ca:	e000      	b.n	80030ce <SpiritRadioSearchFreqDevME+0x8e>
      break;
 80030cc:	bf00      	nop
  }
  (*pcE) = i;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80030d4:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 80030d6:	2300      	movs	r3, #0
 80030d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030dc:	e043      	b.n	8003166 <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 80030e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fd f9c8 	bl	800047c <__aeabi_i2d>
 80030ec:	f04f 0200 	mov.w	r2, #0
 80030f0:	4b2e      	ldr	r3, [pc, #184]	; (80031ac <SpiritRadioSearchFreqDevME+0x16c>)
 80030f2:	f7fd f877 	bl	80001e4 <__adddf3>
 80030f6:	4602      	mov	r2, r0
 80030f8:	460b      	mov	r3, r1
 80030fa:	4610      	mov	r0, r2
 80030fc:	4619      	mov	r1, r3
 80030fe:	f04f 0200 	mov.w	r2, #0
 8003102:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003106:	f7fd fb4d 	bl	80007a4 <__aeabi_ddiv>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4614      	mov	r4, r2
 8003110:	461d      	mov	r5, r3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	461a      	mov	r2, r3
 8003118:	2301      	movs	r3, #1
 800311a:	4093      	lsls	r3, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7fd f9ad 	bl	800047c <__aeabi_i2d>
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	4620      	mov	r0, r4
 8003128:	4629      	mov	r1, r5
 800312a:	f7fd fa11 	bl	8000550 <__aeabi_dmul>
 800312e:	4602      	mov	r2, r0
 8003130:	460b      	mov	r3, r1
 8003132:	4610      	mov	r0, r2
 8003134:	4619      	mov	r1, r3
 8003136:	f7fd fc1d 	bl	8000974 <__aeabi_d2uiz>
 800313a:	ee07 0a90 	vmov	s15, r0
 800313e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003142:	edd7 7a06 	vldr	s15, [r7, #24]
 8003146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800314e:	ee17 3a90 	vmov	r3, s15
 8003152:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	429a      	cmp	r2, r3
 800315a:	d309      	bcc.n	8003170 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 800315c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003160:	3301      	adds	r3, #1
 8003162:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800316a:	2b07      	cmp	r3, #7
 800316c:	d9b7      	bls.n	80030de <SpiritRadioSearchFreqDevME+0x9e>
 800316e:	e000      	b.n	8003172 <SpiritRadioSearchFreqDevME+0x132>
      break;
 8003170:	bf00      	nop
  }
  
  (*pcM)=i;
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003178:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	6a3b      	ldr	r3, [r7, #32]
 800317e:	1ad2      	subs	r2, r2, r3
 8003180:	69f9      	ldr	r1, [r7, #28]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1acb      	subs	r3, r1, r3
 8003186:	429a      	cmp	r2, r3
 8003188:	d205      	bcs.n	8003196 <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	3b01      	subs	r3, #1
 8003190:	b2da      	uxtb	r2, r3
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	701a      	strb	r2, [r3, #0]
  
}
 8003196:	bf00      	nop
 8003198:	3728      	adds	r7, #40	; 0x28
 800319a:	46bd      	mov	sp, r7
 800319c:	bdb0      	pop	{r4, r5, r7, pc}
 800319e:	bf00      	nop
 80031a0:	20000124 	.word	0x20000124
 80031a4:	48800000 	.word	0x48800000
 80031a8:	401e0000 	.word	0x401e0000
 80031ac:	40200000 	.word	0x40200000

080031b0 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	60f8      	str	r0, [r7, #12]
 80031b8:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 80031bc:	2300      	movs	r3, #0
 80031be:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 80031c0:	2300      	movs	r3, #0
 80031c2:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	4a74      	ldr	r2, [pc, #464]	; (8003398 <SpiritRadioGetdBm2Reg+0x1e8>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d30c      	bcc.n	80031e6 <SpiritRadioGetdBm2Reg+0x36>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	4a73      	ldr	r2, [pc, #460]	; (800339c <SpiritRadioGetdBm2Reg+0x1ec>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d808      	bhi.n	80031e6 <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 80031d4:	2300      	movs	r3, #0
 80031d6:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	4a71      	ldr	r2, [pc, #452]	; (80033a0 <SpiritRadioGetdBm2Reg+0x1f0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d822      	bhi.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
 80031e0:	2301      	movs	r3, #1
 80031e2:	75fb      	strb	r3, [r7, #23]
 80031e4:	e01f      	b.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	4a6e      	ldr	r2, [pc, #440]	; (80033a4 <SpiritRadioGetdBm2Reg+0x1f4>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d906      	bls.n	80031fc <SpiritRadioGetdBm2Reg+0x4c>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	4a6d      	ldr	r2, [pc, #436]	; (80033a8 <SpiritRadioGetdBm2Reg+0x1f8>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d802      	bhi.n	80031fc <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 80031f6:	2302      	movs	r3, #2
 80031f8:	75fb      	strb	r3, [r7, #23]
 80031fa:	e014      	b.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a6b      	ldr	r2, [pc, #428]	; (80033ac <SpiritRadioGetdBm2Reg+0x1fc>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d906      	bls.n	8003212 <SpiritRadioGetdBm2Reg+0x62>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	4a6a      	ldr	r2, [pc, #424]	; (80033b0 <SpiritRadioGetdBm2Reg+0x200>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d802      	bhi.n	8003212 <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 800320c:	2303      	movs	r3, #3
 800320e:	75fb      	strb	r3, [r7, #23]
 8003210:	e009      	b.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	4a67      	ldr	r2, [pc, #412]	; (80033b4 <SpiritRadioGetdBm2Reg+0x204>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d905      	bls.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4a66      	ldr	r2, [pc, #408]	; (80033b8 <SpiritRadioGetdBm2Reg+0x208>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d801      	bhi.n	8003226 <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 8003222:	2304      	movs	r3, #4
 8003224:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 8003226:	2301      	movs	r3, #1
 8003228:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 800322a:	edd7 7a02 	vldr	s15, [r7, #8]
 800322e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003236:	dd2f      	ble.n	8003298 <SpiritRadioGetdBm2Reg+0xe8>
 8003238:	7dfa      	ldrb	r2, [r7, #23]
 800323a:	4960      	ldr	r1, [pc, #384]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 800323c:	4613      	mov	r3, r2
 800323e:	005b      	lsls	r3, r3, #1
 8003240:	4413      	add	r3, r2
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	440b      	add	r3, r1
 8003246:	3308      	adds	r3, #8
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 8003250:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003254:	7dfa      	ldrb	r2, [r7, #23]
 8003256:	4959      	ldr	r1, [pc, #356]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 8003258:	4613      	mov	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	4413      	add	r3, r2
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	440b      	add	r3, r1
 8003262:	330c      	adds	r3, #12
 8003264:	ed93 6a00 	vldr	s12, [r3]
 8003268:	7dfa      	ldrb	r2, [r7, #23]
 800326a:	4954      	ldr	r1, [pc, #336]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 800326c:	4613      	mov	r3, r2
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	4413      	add	r3, r2
 8003272:	00db      	lsls	r3, r3, #3
 8003274:	440b      	add	r3, r1
 8003276:	3308      	adds	r3, #8
 8003278:	edd3 6a00 	vldr	s13, [r3]
 800327c:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003280:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003284:	ed97 7a02 	vldr	s14, [r7, #8]
 8003288:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003290:	dd02      	ble.n	8003298 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 8003292:	2300      	movs	r3, #0
 8003294:	75bb      	strb	r3, [r7, #22]
 8003296:	e035      	b.n	8003304 <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003298:	edd7 7a02 	vldr	s15, [r7, #8]
 800329c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a4:	d82e      	bhi.n	8003304 <SpiritRadioGetdBm2Reg+0x154>
 80032a6:	7dfa      	ldrb	r2, [r7, #23]
 80032a8:	4944      	ldr	r1, [pc, #272]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 80032aa:	4613      	mov	r3, r2
 80032ac:	005b      	lsls	r3, r3, #1
 80032ae:	4413      	add	r3, r2
 80032b0:	00db      	lsls	r3, r3, #3
 80032b2:	440b      	add	r3, r1
 80032b4:	3308      	adds	r3, #8
 80032b6:	edd3 7a00 	vldr	s15, [r3]
 80032ba:	eddf 6a41 	vldr	s13, [pc, #260]	; 80033c0 <SpiritRadioGetdBm2Reg+0x210>
 80032be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032c2:	7dfa      	ldrb	r2, [r7, #23]
 80032c4:	493d      	ldr	r1, [pc, #244]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 80032c6:	4613      	mov	r3, r2
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	4413      	add	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	440b      	add	r3, r1
 80032d0:	330c      	adds	r3, #12
 80032d2:	ed93 6a00 	vldr	s12, [r3]
 80032d6:	7dfa      	ldrb	r2, [r7, #23]
 80032d8:	4938      	ldr	r1, [pc, #224]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 80032da:	4613      	mov	r3, r2
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	4413      	add	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	440b      	add	r3, r1
 80032e4:	3308      	adds	r3, #8
 80032e6:	edd3 6a00 	vldr	s13, [r3]
 80032ea:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80032ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f2:	ed97 7a02 	vldr	s14, [r7, #8]
 80032f6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d501      	bpl.n	8003304 <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003300:	2302      	movs	r3, #2
 8003302:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 8003304:	7dfa      	ldrb	r2, [r7, #23]
 8003306:	7dbb      	ldrb	r3, [r7, #22]
 8003308:	0059      	lsls	r1, r3, #1
 800330a:	482c      	ldr	r0, [pc, #176]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	440b      	add	r3, r1
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4403      	add	r3, r0
 800331a:	ed93 7a00 	vldr	s14, [r3]
 800331e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003322:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003326:	7dfa      	ldrb	r2, [r7, #23]
 8003328:	7dbb      	ldrb	r3, [r7, #22]
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	4823      	ldr	r0, [pc, #140]	; (80033bc <SpiritRadioGetdBm2Reg+0x20c>)
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	440b      	add	r3, r1
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4403      	add	r3, r0
 800333e:	edd3 7a00 	vldr	s15, [r3]
 8003342:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003346:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 800334a:	edd7 7a04 	vldr	s15, [r7, #16]
 800334e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003352:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800335a:	d503      	bpl.n	8003364 <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 800335c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	e00a      	b.n	800337a <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 8003364:	edd7 7a04 	vldr	s15, [r7, #16]
 8003368:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80033c4 <SpiritRadioGetdBm2Reg+0x214>
 800336c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003374:	dd01      	ble.n	800337a <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 8003376:	4b14      	ldr	r3, [pc, #80]	; (80033c8 <SpiritRadioGetdBm2Reg+0x218>)
 8003378:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 800337a:	edd7 7a04 	vldr	s15, [r7, #16]
 800337e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003382:	edc7 7a01 	vstr	s15, [r7, #4]
 8003386:	793b      	ldrb	r3, [r7, #4]
 8003388:	b2db      	uxtb	r3, r3
}
 800338a:	4618      	mov	r0, r3
 800338c:	371c      	adds	r7, #28
 800338e:	46bd      	mov	sp, r7
 8003390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	2e5f5680 	.word	0x2e5f5680
 800339c:	390c2fe0 	.word	0x390c2fe0
 80033a0:	35a4e8ff 	.word	0x35a4e8ff
 80033a4:	1701e47f 	.word	0x1701e47f
 80033a8:	1c146a60 	.word	0x1c146a60
 80033ac:	11d260bf 	.word	0x11d260bf
 80033b0:	14ced7e0 	.word	0x14ced7e0
 80033b4:	08e18f3f 	.word	0x08e18f3f
 80033b8:	0a6fd060 	.word	0x0a6fd060
 80033bc:	08007418 	.word	0x08007418
 80033c0:	42200000 	.word	0x42200000
 80033c4:	42b40000 	.word	0x42b40000
 80033c8:	42b40000 	.word	0x42b40000

080033cc <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b084      	sub	sp, #16
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	4603      	mov	r3, r0
 80033d4:	ed87 0a00 	vstr	s0, [r7]
 80033d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 80033da:	f7ff fc4d 	bl	8002c78 <SpiritRadioGetFrequencyBase>
 80033de:	4603      	mov	r3, r0
 80033e0:	ed97 0a00 	vldr	s0, [r7]
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fee3 	bl	80031b0 <SpiritRadioGetdBm2Reg>
 80033ea:	4603      	mov	r3, r0
 80033ec:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 80033ee:	79fb      	ldrb	r3, [r7, #7]
 80033f0:	f1c3 0317 	rsb	r3, r3, #23
 80033f4:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 80033f6:	f107 020e 	add.w	r2, r7, #14
 80033fa:	7bfb      	ldrb	r3, [r7, #15]
 80033fc:	2101      	movs	r1, #1
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 f9ec 	bl	80037dc <RadioSpiWriteRegisters>
 8003404:	4602      	mov	r2, r0
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <SpiritRadioSetPALeveldBm+0x50>)
 8003408:	b212      	sxth	r2, r2
 800340a:	4611      	mov	r1, r2
 800340c:	7019      	strb	r1, [r3, #0]
 800340e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003412:	705a      	strb	r2, [r3, #1]
  
}
 8003414:	bf00      	nop
 8003416:	3710      	adds	r7, #16
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}
 800341c:	20000128 	.word	0x20000128

08003420 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	4603      	mov	r3, r0
 8003428:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800342a:	f107 030f 	add.w	r3, r7, #15
 800342e:	461a      	mov	r2, r3
 8003430:	2101      	movs	r1, #1
 8003432:	2018      	movs	r0, #24
 8003434:	f000 fa1e 	bl	8003874 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003438:	7bfb      	ldrb	r3, [r7, #15]
 800343a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800343e:	b2db      	uxtb	r3, r3
 8003440:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003442:	7bfa      	ldrb	r2, [r7, #15]
 8003444:	79fb      	ldrb	r3, [r7, #7]
 8003446:	4313      	orrs	r3, r2
 8003448:	b2db      	uxtb	r3, r3
 800344a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800344c:	f107 030f 	add.w	r3, r7, #15
 8003450:	461a      	mov	r2, r3
 8003452:	2101      	movs	r1, #1
 8003454:	2018      	movs	r0, #24
 8003456:	f000 f9c1 	bl	80037dc <RadioSpiWriteRegisters>
 800345a:	4602      	mov	r2, r0
 800345c:	4b05      	ldr	r3, [pc, #20]	; (8003474 <SpiritRadioSetPACwc+0x54>)
 800345e:	b212      	sxth	r2, r2
 8003460:	4611      	mov	r1, r2
 8003462:	7019      	strb	r1, [r3, #0]
 8003464:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003468:	705a      	strb	r2, [r3, #1]
  
}
 800346a:	bf00      	nop
 800346c:	3710      	adds	r7, #16
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}
 8003472:	bf00      	nop
 8003474:	20000128 	.word	0x20000128

08003478 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	4603      	mov	r3, r0
 8003480:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003482:	f107 030f 	add.w	r3, r7, #15
 8003486:	461a      	mov	r2, r3
 8003488:	2101      	movs	r1, #1
 800348a:	2018      	movs	r0, #24
 800348c:	f000 f9f2 	bl	8003874 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	f023 0307 	bic.w	r3, r3, #7
 8003496:	b2db      	uxtb	r3, r3
 8003498:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 800349a:	7bfa      	ldrb	r2, [r7, #15]
 800349c:	79fb      	ldrb	r3, [r7, #7]
 800349e:	4313      	orrs	r3, r2
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80034a4:	f107 030f 	add.w	r3, r7, #15
 80034a8:	461a      	mov	r2, r3
 80034aa:	2101      	movs	r1, #1
 80034ac:	2018      	movs	r0, #24
 80034ae:	f000 f995 	bl	80037dc <RadioSpiWriteRegisters>
 80034b2:	4602      	mov	r2, r0
 80034b4:	4b05      	ldr	r3, [pc, #20]	; (80034cc <SpiritRadioSetPALevelMaxIndex+0x54>)
 80034b6:	b212      	sxth	r2, r2
 80034b8:	4611      	mov	r1, r2
 80034ba:	7019      	strb	r1, [r3, #0]
 80034bc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80034c0:	705a      	strb	r2, [r3, #1]
  
}
 80034c2:	bf00      	nop
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000128 	.word	0x20000128

080034d0 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 80034da:	2300      	movs	r3, #0
 80034dc:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 80034de:	f107 030f 	add.w	r3, r7, #15
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	201e      	movs	r0, #30
 80034e8:	f000 f9c4 	bl	8003874 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 80034ec:	79fb      	ldrb	r3, [r7, #7]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d105      	bne.n	80034fe <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034f8:	b2db      	uxtb	r3, r3
 80034fa:	73fb      	strb	r3, [r7, #15]
 80034fc:	e004      	b.n	8003508 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003504:	b2db      	uxtb	r3, r3
 8003506:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003508:	f107 030f 	add.w	r3, r7, #15
 800350c:	461a      	mov	r2, r3
 800350e:	2101      	movs	r1, #1
 8003510:	201e      	movs	r0, #30
 8003512:	f000 f963 	bl	80037dc <RadioSpiWriteRegisters>
 8003516:	4602      	mov	r2, r0
 8003518:	4b05      	ldr	r3, [pc, #20]	; (8003530 <SpiritRadioAFCFreezeOnSync+0x60>)
 800351a:	b212      	sxth	r2, r2
 800351c:	4611      	mov	r1, r2
 800351e:	7019      	strb	r1, [r3, #0]
 8003520:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003524:	705a      	strb	r2, [r3, #1]
  
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	20000128 	.word	0x20000128

08003534 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	b084      	sub	sp, #16
 8003538:	af00      	add	r7, sp, #0
 800353a:	4603      	mov	r3, r0
 800353c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800353e:	f107 030f 	add.w	r3, r7, #15
 8003542:	461a      	mov	r2, r3
 8003544:	2101      	movs	r1, #1
 8003546:	209e      	movs	r0, #158	; 0x9e
 8003548:	f000 f994 	bl	8003874 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 800354c:	79fb      	ldrb	r3, [r7, #7]
 800354e:	2b01      	cmp	r3, #1
 8003550:	d105      	bne.n	800355e <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
 8003554:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	73fb      	strb	r3, [r7, #15]
 800355c:	e004      	b.n	8003568 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 800355e:	7bfb      	ldrb	r3, [r7, #15]
 8003560:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003564:	b2db      	uxtb	r3, r3
 8003566:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003568:	f107 030f 	add.w	r3, r7, #15
 800356c:	461a      	mov	r2, r3
 800356e:	2101      	movs	r1, #1
 8003570:	209e      	movs	r0, #158	; 0x9e
 8003572:	f000 f933 	bl	80037dc <RadioSpiWriteRegisters>
 8003576:	4602      	mov	r2, r0
 8003578:	4b05      	ldr	r3, [pc, #20]	; (8003590 <SpiritRadioSetRefDiv+0x5c>)
 800357a:	b212      	sxth	r2, r2
 800357c:	4611      	mov	r1, r2
 800357e:	7019      	strb	r1, [r3, #0]
 8003580:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003584:	705a      	strb	r2, [r3, #1]
  
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	20000128 	.word	0x20000128

08003594 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 800359a:	1dfb      	adds	r3, r7, #7
 800359c:	461a      	mov	r2, r3
 800359e:	2101      	movs	r1, #1
 80035a0:	209e      	movs	r0, #158	; 0x9e
 80035a2:	f000 f967 	bl	8003874 <RadioSpiReadRegisters>
 80035a6:	4602      	mov	r2, r0
 80035a8:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <SpiritRadioGetRefDiv+0x40>)
 80035aa:	b212      	sxth	r2, r2
 80035ac:	4611      	mov	r1, r2
 80035ae:	7019      	strb	r1, [r3, #0]
 80035b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80035b4:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 80035b6:	79fb      	ldrb	r3, [r7, #7]
 80035b8:	09db      	lsrs	r3, r3, #7
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e000      	b.n	80035ca <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 80035c8:	2300      	movs	r3, #0
  }
  
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	20000128 	.word	0x20000128

080035d8 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b084      	sub	sp, #16
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 80035e2:	f107 030f 	add.w	r3, r7, #15
 80035e6:	461a      	mov	r2, r3
 80035e8:	2101      	movs	r1, #1
 80035ea:	20b4      	movs	r0, #180	; 0xb4
 80035ec:	f000 f942 	bl	8003874 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d105      	bne.n	8003602 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 80035f6:	7bfb      	ldrb	r3, [r7, #15]
 80035f8:	f023 0308 	bic.w	r3, r3, #8
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	73fb      	strb	r3, [r7, #15]
 8003600:	e004      	b.n	800360c <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003602:	7bfb      	ldrb	r3, [r7, #15]
 8003604:	f043 0308 	orr.w	r3, r3, #8
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800360c:	f107 030f 	add.w	r3, r7, #15
 8003610:	461a      	mov	r2, r3
 8003612:	2101      	movs	r1, #1
 8003614:	20b4      	movs	r0, #180	; 0xb4
 8003616:	f000 f8e1 	bl	80037dc <RadioSpiWriteRegisters>
 800361a:	4602      	mov	r2, r0
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <SpiritRadioSetDigDiv+0x5c>)
 800361e:	b212      	sxth	r2, r2
 8003620:	4611      	mov	r1, r2
 8003622:	7019      	strb	r1, [r3, #0]
 8003624:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003628:	705a      	strb	r2, [r3, #1]
  
}
 800362a:	bf00      	nop
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	20000128 	.word	0x20000128

08003638 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 800363e:	1dfb      	adds	r3, r7, #7
 8003640:	461a      	mov	r2, r3
 8003642:	2101      	movs	r1, #1
 8003644:	20b4      	movs	r0, #180	; 0xb4
 8003646:	f000 f915 	bl	8003874 <RadioSpiReadRegisters>
 800364a:	4602      	mov	r2, r0
 800364c:	4b0a      	ldr	r3, [pc, #40]	; (8003678 <SpiritRadioGetDigDiv+0x40>)
 800364e:	b212      	sxth	r2, r2
 8003650:	4611      	mov	r1, r2
 8003652:	7019      	strb	r1, [r3, #0]
 8003654:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003658:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 800365a:	79fb      	ldrb	r3, [r7, #7]
 800365c:	08db      	lsrs	r3, r3, #3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d001      	beq.n	800366c <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003668:	2300      	movs	r3, #0
 800366a:	e000      	b.n	800366e <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 800366c:	2301      	movs	r3, #1
  }
  
}
 800366e:	4618      	mov	r0, r3
 8003670:	3708      	adds	r7, #8
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	20000128 	.word	0x20000128

0800367c <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003680:	4b03      	ldr	r3, [pc, #12]	; (8003690 <SpiritRadioGetXtalFrequency+0x14>)
 8003682:	681b      	ldr	r3, [r3, #0]
}
 8003684:	4618      	mov	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
 800368e:	bf00      	nop
 8003690:	20000124 	.word	0x20000124

08003694 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003694:	b480      	push	{r7}
 8003696:	b083      	sub	sp, #12
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 800369c:	4a04      	ldr	r2, [pc, #16]	; (80036b0 <SpiritRadioSetXtalFrequency+0x1c>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6013      	str	r3, [r2, #0]
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	20000124 	.word	0x20000124

080036b4 <SpiritTimerSetRxTimeoutCounter>:
 * @param  cCounter value for the timer counter.
 *         This parameter must be an uint8_t.
 * @retval None.
 */
void SpiritTimerSetRxTimeoutCounter(uint8_t cCounter)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b082      	sub	sp, #8
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4603      	mov	r3, r0
 80036bc:	71fb      	strb	r3, [r7, #7]
  /* Writes the counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS4_RX_TIMEOUT_COUNTER_BASE, 1, &cCounter);
 80036be:	1dfb      	adds	r3, r7, #7
 80036c0:	461a      	mov	r2, r3
 80036c2:	2101      	movs	r1, #1
 80036c4:	2054      	movs	r0, #84	; 0x54
 80036c6:	f000 f889 	bl	80037dc <RadioSpiWriteRegisters>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b05      	ldr	r3, [pc, #20]	; (80036e4 <SpiritTimerSetRxTimeoutCounter+0x30>)
 80036ce:	b212      	sxth	r2, r2
 80036d0:	4611      	mov	r1, r2
 80036d2:	7019      	strb	r1, [r3, #0]
 80036d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80036d8:	705a      	strb	r2, [r3, #1]

}
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bd80      	pop	{r7, pc}
 80036e2:	bf00      	nop
 80036e4:	20000128 	.word	0x20000128

080036e8 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 80036f2:	f107 030c 	add.w	r3, r7, #12
 80036f6:	461a      	mov	r2, r3
 80036f8:	2102      	movs	r1, #2
 80036fa:	204f      	movs	r0, #79	; 0x4f
 80036fc:	f000 f8ba 	bl	8003874 <RadioSpiReadRegisters>
 8003700:	4602      	mov	r2, r0
 8003702:	4b1c      	ldr	r3, [pc, #112]	; (8003774 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003704:	b212      	sxth	r2, r2
 8003706:	4611      	mov	r1, r2
 8003708:	7019      	strb	r1, [r3, #0]
 800370a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800370e:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003710:	7b3b      	ldrb	r3, [r7, #12]
 8003712:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003716:	b2db      	uxtb	r3, r3
 8003718:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 800371a:	7b3b      	ldrb	r3, [r7, #12]
 800371c:	b25a      	sxtb	r2, r3
 800371e:	79fb      	ldrb	r3, [r7, #7]
 8003720:	00db      	lsls	r3, r3, #3
 8003722:	b25b      	sxtb	r3, r3
 8003724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003728:	b25b      	sxtb	r3, r3
 800372a:	4313      	orrs	r3, r2
 800372c:	b25b      	sxtb	r3, r3
 800372e:	b2db      	uxtb	r3, r3
 8003730:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003732:	7b7b      	ldrb	r3, [r7, #13]
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	b2db      	uxtb	r3, r3
 800373a:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 800373c:	7b7b      	ldrb	r3, [r7, #13]
 800373e:	b25a      	sxtb	r2, r3
 8003740:	79fb      	ldrb	r3, [r7, #7]
 8003742:	015b      	lsls	r3, r3, #5
 8003744:	b25b      	sxtb	r3, r3
 8003746:	4313      	orrs	r3, r2
 8003748:	b25b      	sxtb	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 800374e:	f107 030c 	add.w	r3, r7, #12
 8003752:	461a      	mov	r2, r3
 8003754:	2102      	movs	r1, #2
 8003756:	204f      	movs	r0, #79	; 0x4f
 8003758:	f000 f840 	bl	80037dc <RadioSpiWriteRegisters>
 800375c:	4602      	mov	r2, r0
 800375e:	4b05      	ldr	r3, [pc, #20]	; (8003774 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003760:	b212      	sxth	r2, r2
 8003762:	4611      	mov	r1, r2
 8003764:	7019      	strb	r1, [r3, #0]
 8003766:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800376a:	705a      	strb	r2, [r3, #1]

}
 800376c:	bf00      	nop
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}
 8003774:	20000128 	.word	0x20000128

08003778 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 800377e:	1d3b      	adds	r3, r7, #4
 8003780:	461a      	mov	r2, r3
 8003782:	2102      	movs	r1, #2
 8003784:	20c0      	movs	r0, #192	; 0xc0
 8003786:	f000 f875 	bl	8003874 <RadioSpiReadRegisters>
 800378a:	4603      	mov	r3, r0
 800378c:	4a09      	ldr	r2, [pc, #36]	; (80037b4 <SpiritRefreshStatus+0x3c>)
 800378e:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003790:	4b08      	ldr	r3, [pc, #32]	; (80037b4 <SpiritRefreshStatus+0x3c>)
 8003792:	781a      	ldrb	r2, [r3, #0]
 8003794:	797b      	ldrb	r3, [r7, #5]
 8003796:	429a      	cmp	r2, r3
 8003798:	d1f1      	bne.n	800377e <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 800379a:	4b07      	ldr	r3, [pc, #28]	; (80037b8 <SpiritRefreshStatus+0x40>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d1ea      	bne.n	800377e <SpiritRefreshStatus+0x6>

}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3708      	adds	r7, #8
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	20000128 	.word	0x20000128
 80037b8:	20000129 	.word	0x20000129

080037bc <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80037c0:	4b05      	ldr	r3, [pc, #20]	; (80037d8 <RadioSpiInit+0x1c>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d101      	bne.n	80037d2 <RadioSpiInit+0x16>
  {
    Error_Handler();
 80037ce:	f7fd fbdd 	bl	8000f8c <Error_Handler>
  }
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000008 	.word	0x20000008

080037dc <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b088      	sub	sp, #32
 80037e0:	af02      	add	r7, sp, #8
 80037e2:	4603      	mov	r3, r0
 80037e4:	603a      	str	r2, [r7, #0]
 80037e6:	71fb      	strb	r3, [r7, #7]
 80037e8:	460b      	mov	r3, r1
 80037ea:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80037ec:	2300      	movs	r3, #0
 80037ee:	743b      	strb	r3, [r7, #16]
 80037f0:	79fb      	ldrb	r3, [r7, #7]
 80037f2:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80037f4:	2017      	movs	r0, #23
 80037f6:	f000 faec 	bl	8003dd2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80037fa:	2200      	movs	r2, #0
 80037fc:	2140      	movs	r1, #64	; 0x40
 80037fe:	481b      	ldr	r0, [pc, #108]	; (800386c <RadioSpiWriteRegisters+0x90>)
 8003800:	f000 fcac 	bl	800415c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003804:	4b1a      	ldr	r3, [pc, #104]	; (8003870 <RadioSpiWriteRegisters+0x94>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	f107 020c 	add.w	r2, r7, #12
 800380c:	f107 0110 	add.w	r1, r7, #16
 8003810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	2302      	movs	r3, #2
 8003818:	f002 fb3f 	bl	8005e9a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800381c:	4b14      	ldr	r3, [pc, #80]	; (8003870 <RadioSpiWriteRegisters+0x94>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	79bb      	ldrb	r3, [r7, #6]
 8003822:	b29a      	uxth	r2, r3
 8003824:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003828:	6839      	ldr	r1, [r7, #0]
 800382a:	f002 f88a 	bl	8005942 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800382e:	2201      	movs	r2, #1
 8003830:	2140      	movs	r1, #64	; 0x40
 8003832:	480e      	ldr	r0, [pc, #56]	; (800386c <RadioSpiWriteRegisters+0x90>)
 8003834:	f000 fc92 	bl	800415c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003838:	2017      	movs	r0, #23
 800383a:	f000 fabc 	bl	8003db6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800383e:	f107 0308 	add.w	r3, r7, #8
 8003842:	3301      	adds	r3, #1
 8003844:	7b3a      	ldrb	r2, [r7, #12]
 8003846:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003848:	f107 0308 	add.w	r3, r7, #8
 800384c:	7b7a      	ldrb	r2, [r7, #13]
 800384e:	701a      	strb	r2, [r3, #0]

  return status;
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	82bb      	strh	r3, [r7, #20]
 8003854:	2300      	movs	r3, #0
 8003856:	7d3a      	ldrb	r2, [r7, #20]
 8003858:	f362 0307 	bfi	r3, r2, #0, #8
 800385c:	7d7a      	ldrb	r2, [r7, #21]
 800385e:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003862:	4618      	mov	r0, r3
 8003864:	3718      	adds	r7, #24
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	48000400 	.word	0x48000400
 8003870:	20000008 	.word	0x20000008

08003874 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b088      	sub	sp, #32
 8003878:	af02      	add	r7, sp, #8
 800387a:	4603      	mov	r3, r0
 800387c:	603a      	str	r2, [r7, #0]
 800387e:	71fb      	strb	r3, [r7, #7]
 8003880:	460b      	mov	r3, r1
 8003882:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003884:	2301      	movs	r3, #1
 8003886:	743b      	strb	r3, [r7, #16]
 8003888:	79fb      	ldrb	r3, [r7, #7]
 800388a:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800388c:	2017      	movs	r0, #23
 800388e:	f000 faa0 	bl	8003dd2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003892:	2200      	movs	r2, #0
 8003894:	2140      	movs	r1, #64	; 0x40
 8003896:	481b      	ldr	r0, [pc, #108]	; (8003904 <RadioSpiReadRegisters+0x90>)
 8003898:	f000 fc60 	bl	800415c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800389c:	4b1a      	ldr	r3, [pc, #104]	; (8003908 <RadioSpiReadRegisters+0x94>)
 800389e:	6818      	ldr	r0, [r3, #0]
 80038a0:	f107 020c 	add.w	r2, r7, #12
 80038a4:	f107 0110 	add.w	r1, r7, #16
 80038a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038ac:	9300      	str	r3, [sp, #0]
 80038ae:	2302      	movs	r3, #2
 80038b0:	f002 faf3 	bl	8005e9a <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80038b4:	4b14      	ldr	r3, [pc, #80]	; (8003908 <RadioSpiReadRegisters+0x94>)
 80038b6:	6818      	ldr	r0, [r3, #0]
 80038b8:	79bb      	ldrb	r3, [r7, #6]
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80038c0:	6839      	ldr	r1, [r7, #0]
 80038c2:	f002 f9b3 	bl	8005c2c <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80038c6:	2201      	movs	r2, #1
 80038c8:	2140      	movs	r1, #64	; 0x40
 80038ca:	480e      	ldr	r0, [pc, #56]	; (8003904 <RadioSpiReadRegisters+0x90>)
 80038cc:	f000 fc46 	bl	800415c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80038d0:	2017      	movs	r0, #23
 80038d2:	f000 fa70 	bl	8003db6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80038d6:	f107 0308 	add.w	r3, r7, #8
 80038da:	3301      	adds	r3, #1
 80038dc:	7b3a      	ldrb	r2, [r7, #12]
 80038de:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80038e0:	f107 0308 	add.w	r3, r7, #8
 80038e4:	7b7a      	ldrb	r2, [r7, #13]
 80038e6:	701a      	strb	r2, [r3, #0]

  return status;
 80038e8:	893b      	ldrh	r3, [r7, #8]
 80038ea:	82bb      	strh	r3, [r7, #20]
 80038ec:	2300      	movs	r3, #0
 80038ee:	7d3a      	ldrb	r2, [r7, #20]
 80038f0:	f362 0307 	bfi	r3, r2, #0, #8
 80038f4:	7d7a      	ldrb	r2, [r7, #21]
 80038f6:	f362 230f 	bfi	r3, r2, #8, #8
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	48000400 	.word	0x48000400
 8003908:	20000008 	.word	0x20000008

0800390c <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af02      	add	r7, sp, #8
 8003912:	4603      	mov	r3, r0
 8003914:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	743b      	strb	r3, [r7, #16]
 800391a:	79fb      	ldrb	r3, [r7, #7]
 800391c:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800391e:	2017      	movs	r0, #23
 8003920:	f000 fa57 	bl	8003dd2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	4816      	ldr	r0, [pc, #88]	; (8003984 <RadioSpiCommandStrobes+0x78>)
 800392a:	f000 fc17 	bl	800415c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 800392e:	4b16      	ldr	r3, [pc, #88]	; (8003988 <RadioSpiCommandStrobes+0x7c>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f107 020c 	add.w	r2, r7, #12
 8003936:	f107 0110 	add.w	r1, r7, #16
 800393a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	2302      	movs	r3, #2
 8003942:	f002 faaa 	bl	8005e9a <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003946:	2201      	movs	r2, #1
 8003948:	2140      	movs	r1, #64	; 0x40
 800394a:	480e      	ldr	r0, [pc, #56]	; (8003984 <RadioSpiCommandStrobes+0x78>)
 800394c:	f000 fc06 	bl	800415c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003950:	2017      	movs	r0, #23
 8003952:	f000 fa30 	bl	8003db6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003956:	f107 0308 	add.w	r3, r7, #8
 800395a:	3301      	adds	r3, #1
 800395c:	7b3a      	ldrb	r2, [r7, #12]
 800395e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003960:	f107 0308 	add.w	r3, r7, #8
 8003964:	7b7a      	ldrb	r2, [r7, #13]
 8003966:	701a      	strb	r2, [r3, #0]

  return status;
 8003968:	893b      	ldrh	r3, [r7, #8]
 800396a:	82bb      	strh	r3, [r7, #20]
 800396c:	2300      	movs	r3, #0
 800396e:	7d3a      	ldrb	r2, [r7, #20]
 8003970:	f362 0307 	bfi	r3, r2, #0, #8
 8003974:	7d7a      	ldrb	r2, [r7, #21]
 8003976:	f362 230f 	bfi	r3, r2, #8, #8
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	48000400 	.word	0x48000400
 8003988:	20000008 	.word	0x20000008

0800398c <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b088      	sub	sp, #32
 8003990:	af02      	add	r7, sp, #8
 8003992:	4603      	mov	r3, r0
 8003994:	6039      	str	r1, [r7, #0]
 8003996:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8003998:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 800399c:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 800399e:	2017      	movs	r0, #23
 80039a0:	f000 fa17 	bl	8003dd2 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80039a4:	2200      	movs	r2, #0
 80039a6:	2140      	movs	r1, #64	; 0x40
 80039a8:	481a      	ldr	r0, [pc, #104]	; (8003a14 <RadioSpiWriteFifo+0x88>)
 80039aa:	f000 fbd7 	bl	800415c <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80039ae:	4b1a      	ldr	r3, [pc, #104]	; (8003a18 <RadioSpiWriteFifo+0x8c>)
 80039b0:	6818      	ldr	r0, [r3, #0]
 80039b2:	f107 020c 	add.w	r2, r7, #12
 80039b6:	f107 0110 	add.w	r1, r7, #16
 80039ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2302      	movs	r3, #2
 80039c2:	f002 fa6a 	bl	8005e9a <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80039c6:	4b14      	ldr	r3, [pc, #80]	; (8003a18 <RadioSpiWriteFifo+0x8c>)
 80039c8:	6818      	ldr	r0, [r3, #0]
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80039d2:	6839      	ldr	r1, [r7, #0]
 80039d4:	f001 ffb5 	bl	8005942 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80039d8:	2201      	movs	r2, #1
 80039da:	2140      	movs	r1, #64	; 0x40
 80039dc:	480d      	ldr	r0, [pc, #52]	; (8003a14 <RadioSpiWriteFifo+0x88>)
 80039de:	f000 fbbd 	bl	800415c <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80039e2:	2017      	movs	r0, #23
 80039e4:	f000 f9e7 	bl	8003db6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80039e8:	f107 0308 	add.w	r3, r7, #8
 80039ec:	3301      	adds	r3, #1
 80039ee:	7b3a      	ldrb	r2, [r7, #12]
 80039f0:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80039f2:	f107 0308 	add.w	r3, r7, #8
 80039f6:	7b7a      	ldrb	r2, [r7, #13]
 80039f8:	701a      	strb	r2, [r3, #0]

  return status;
 80039fa:	893b      	ldrh	r3, [r7, #8]
 80039fc:	82bb      	strh	r3, [r7, #20]
 80039fe:	2300      	movs	r3, #0
 8003a00:	7d3a      	ldrb	r2, [r7, #20]
 8003a02:	f362 0307 	bfi	r3, r2, #0, #8
 8003a06:	7d7a      	ldrb	r2, [r7, #21]
 8003a08:	f362 230f 	bfi	r3, r2, #8, #8
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	3718      	adds	r7, #24
 8003a10:	46bd      	mov	sp, r7
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	48000400 	.word	0x48000400
 8003a18:	20000008 	.word	0x20000008

08003a1c <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8003a20:	2201      	movs	r2, #1
 8003a22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a2a:	f000 fb97 	bl	800415c <HAL_GPIO_WritePin>
}
 8003a2e:	bf00      	nop
 8003a30:	bd80      	pop	{r7, pc}

08003a32 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8003a32:	b580      	push	{r7, lr}
 8003a34:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 8003a36:	2200      	movs	r2, #0
 8003a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a40:	f000 fb8c 	bl	800415c <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8003a44:	2001      	movs	r0, #1
 8003a46:	f000 f877 	bl	8003b38 <HAL_Delay>
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a4e:	b580      	push	{r7, lr}
 8003a50:	b082      	sub	sp, #8
 8003a52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a58:	2003      	movs	r0, #3
 8003a5a:	f000 f985 	bl	8003d68 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003a5e:	200f      	movs	r0, #15
 8003a60:	f000 f80e 	bl	8003a80 <HAL_InitTick>
 8003a64:	4603      	mov	r3, r0
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d002      	beq.n	8003a70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	71fb      	strb	r3, [r7, #7]
 8003a6e:	e001      	b.n	8003a74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003a70:	f7fd fc0c 	bl	800128c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003a74:	79fb      	ldrb	r3, [r7, #7]
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003a8c:	4b17      	ldr	r3, [pc, #92]	; (8003aec <HAL_InitTick+0x6c>)
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d023      	beq.n	8003adc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003a94:	4b16      	ldr	r3, [pc, #88]	; (8003af0 <HAL_InitTick+0x70>)
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	4b14      	ldr	r3, [pc, #80]	; (8003aec <HAL_InitTick+0x6c>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003aa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f000 f99f 	bl	8003dee <HAL_SYSTICK_Config>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10f      	bne.n	8003ad6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b0f      	cmp	r3, #15
 8003aba:	d809      	bhi.n	8003ad0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003abc:	2200      	movs	r2, #0
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ac4:	f000 f95b 	bl	8003d7e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003ac8:	4a0a      	ldr	r2, [pc, #40]	; (8003af4 <HAL_InitTick+0x74>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e007      	b.n	8003ae0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	73fb      	strb	r3, [r7, #15]
 8003ad4:	e004      	b.n	8003ae0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	73fb      	strb	r3, [r7, #15]
 8003ada:	e001      	b.n	8003ae0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000010 	.word	0x20000010
 8003af0:	20000000 	.word	0x20000000
 8003af4:	2000000c 	.word	0x2000000c

08003af8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003af8:	b480      	push	{r7}
 8003afa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003afc:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_IncTick+0x20>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	461a      	mov	r2, r3
 8003b02:	4b06      	ldr	r3, [pc, #24]	; (8003b1c <HAL_IncTick+0x24>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4413      	add	r3, r2
 8003b08:	4a04      	ldr	r2, [pc, #16]	; (8003b1c <HAL_IncTick+0x24>)
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	20000010 	.word	0x20000010
 8003b1c:	2000012c 	.word	0x2000012c

08003b20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return uwTick;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_GetTick+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	2000012c 	.word	0x2000012c

08003b38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b084      	sub	sp, #16
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff ffee 	bl	8003b20 <HAL_GetTick>
 8003b44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d005      	beq.n	8003b5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003b52:	4b0a      	ldr	r3, [pc, #40]	; (8003b7c <HAL_Delay+0x44>)
 8003b54:	781b      	ldrb	r3, [r3, #0]
 8003b56:	461a      	mov	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b5e:	bf00      	nop
 8003b60:	f7ff ffde 	bl	8003b20 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d8f7      	bhi.n	8003b60 <HAL_Delay+0x28>
  {
  }
}
 8003b70:	bf00      	nop
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000010 	.word	0x20000010

08003b80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f003 0307 	and.w	r3, r3, #7
 8003b8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003ba8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003bac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003bb2:	4a04      	ldr	r2, [pc, #16]	; (8003bc4 <__NVIC_SetPriorityGrouping+0x44>)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	60d3      	str	r3, [r2, #12]
}
 8003bb8:	bf00      	nop
 8003bba:	3714      	adds	r7, #20
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc2:	4770      	bx	lr
 8003bc4:	e000ed00 	.word	0xe000ed00

08003bc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003bcc:	4b04      	ldr	r3, [pc, #16]	; (8003be0 <__NVIC_GetPriorityGrouping+0x18>)
 8003bce:	68db      	ldr	r3, [r3, #12]
 8003bd0:	0a1b      	lsrs	r3, r3, #8
 8003bd2:	f003 0307 	and.w	r3, r3, #7
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bde:	4770      	bx	lr
 8003be0:	e000ed00 	.word	0xe000ed00

08003be4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	4603      	mov	r3, r0
 8003bec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	db0b      	blt.n	8003c0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bf6:	79fb      	ldrb	r3, [r7, #7]
 8003bf8:	f003 021f 	and.w	r2, r3, #31
 8003bfc:	4907      	ldr	r1, [pc, #28]	; (8003c1c <__NVIC_EnableIRQ+0x38>)
 8003bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c02:	095b      	lsrs	r3, r3, #5
 8003c04:	2001      	movs	r0, #1
 8003c06:	fa00 f202 	lsl.w	r2, r0, r2
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003c0e:	bf00      	nop
 8003c10:	370c      	adds	r7, #12
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	e000e100 	.word	0xe000e100

08003c20 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003c20:	b480      	push	{r7}
 8003c22:	b083      	sub	sp, #12
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	4603      	mov	r3, r0
 8003c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	db12      	blt.n	8003c58 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	f003 021f 	and.w	r2, r3, #31
 8003c38:	490a      	ldr	r1, [pc, #40]	; (8003c64 <__NVIC_DisableIRQ+0x44>)
 8003c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c3e:	095b      	lsrs	r3, r3, #5
 8003c40:	2001      	movs	r0, #1
 8003c42:	fa00 f202 	lsl.w	r2, r0, r2
 8003c46:	3320      	adds	r3, #32
 8003c48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003c4c:	f3bf 8f4f 	dsb	sy
}
 8003c50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003c52:	f3bf 8f6f 	isb	sy
}
 8003c56:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c58:	bf00      	nop
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c62:	4770      	bx	lr
 8003c64:	e000e100 	.word	0xe000e100

08003c68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	4603      	mov	r3, r0
 8003c70:	6039      	str	r1, [r7, #0]
 8003c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db0a      	blt.n	8003c92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	490c      	ldr	r1, [pc, #48]	; (8003cb4 <__NVIC_SetPriority+0x4c>)
 8003c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c86:	0112      	lsls	r2, r2, #4
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c90:	e00a      	b.n	8003ca8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	b2da      	uxtb	r2, r3
 8003c96:	4908      	ldr	r1, [pc, #32]	; (8003cb8 <__NVIC_SetPriority+0x50>)
 8003c98:	79fb      	ldrb	r3, [r7, #7]
 8003c9a:	f003 030f 	and.w	r3, r3, #15
 8003c9e:	3b04      	subs	r3, #4
 8003ca0:	0112      	lsls	r2, r2, #4
 8003ca2:	b2d2      	uxtb	r2, r2
 8003ca4:	440b      	add	r3, r1
 8003ca6:	761a      	strb	r2, [r3, #24]
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr
 8003cb4:	e000e100 	.word	0xe000e100
 8003cb8:	e000ed00 	.word	0xe000ed00

08003cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b089      	sub	sp, #36	; 0x24
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	60f8      	str	r0, [r7, #12]
 8003cc4:	60b9      	str	r1, [r7, #8]
 8003cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0307 	and.w	r3, r3, #7
 8003cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	f1c3 0307 	rsb	r3, r3, #7
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	bf28      	it	cs
 8003cda:	2304      	movcs	r3, #4
 8003cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d902      	bls.n	8003cec <NVIC_EncodePriority+0x30>
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	3b03      	subs	r3, #3
 8003cea:	e000      	b.n	8003cee <NVIC_EncodePriority+0x32>
 8003cec:	2300      	movs	r3, #0
 8003cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	401a      	ands	r2, r3
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003d04:	f04f 31ff 	mov.w	r1, #4294967295
 8003d08:	697b      	ldr	r3, [r7, #20]
 8003d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8003d0e:	43d9      	mvns	r1, r3
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003d14:	4313      	orrs	r3, r2
         );
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3724      	adds	r7, #36	; 0x24
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
	...

08003d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	3b01      	subs	r3, #1
 8003d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d34:	d301      	bcc.n	8003d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d36:	2301      	movs	r3, #1
 8003d38:	e00f      	b.n	8003d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d3a:	4a0a      	ldr	r2, [pc, #40]	; (8003d64 <SysTick_Config+0x40>)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d42:	210f      	movs	r1, #15
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	f7ff ff8e 	bl	8003c68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d4c:	4b05      	ldr	r3, [pc, #20]	; (8003d64 <SysTick_Config+0x40>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d52:	4b04      	ldr	r3, [pc, #16]	; (8003d64 <SysTick_Config+0x40>)
 8003d54:	2207      	movs	r2, #7
 8003d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d58:	2300      	movs	r3, #0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
 8003d62:	bf00      	nop
 8003d64:	e000e010 	.word	0xe000e010

08003d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ff05 	bl	8003b80 <__NVIC_SetPriorityGrouping>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b086      	sub	sp, #24
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	4603      	mov	r3, r0
 8003d86:	60b9      	str	r1, [r7, #8]
 8003d88:	607a      	str	r2, [r7, #4]
 8003d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003d90:	f7ff ff1a 	bl	8003bc8 <__NVIC_GetPriorityGrouping>
 8003d94:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	6978      	ldr	r0, [r7, #20]
 8003d9c:	f7ff ff8e 	bl	8003cbc <NVIC_EncodePriority>
 8003da0:	4602      	mov	r2, r0
 8003da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003da6:	4611      	mov	r1, r2
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7ff ff5d 	bl	8003c68 <__NVIC_SetPriority>
}
 8003dae:	bf00      	nop
 8003db0:	3718      	adds	r7, #24
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff ff0d 	bl	8003be4 <__NVIC_EnableIRQ>
}
 8003dca:	bf00      	nop
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b082      	sub	sp, #8
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	4603      	mov	r3, r0
 8003dda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003ddc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff ff1d 	bl	8003c20 <__NVIC_DisableIRQ>
}
 8003de6:	bf00      	nop
 8003de8:	3708      	adds	r7, #8
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b082      	sub	sp, #8
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7ff ff94 	bl	8003d24 <SysTick_Config>
 8003dfc:	4603      	mov	r3, r0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}
	...

08003e08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
 8003e10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e12:	2300      	movs	r3, #0
 8003e14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e16:	e17f      	b.n	8004118 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	2101      	movs	r1, #1
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	fa01 f303 	lsl.w	r3, r1, r3
 8003e24:	4013      	ands	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f000 8171 	beq.w	8004112 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f003 0303 	and.w	r3, r3, #3
 8003e38:	2b01      	cmp	r3, #1
 8003e3a:	d005      	beq.n	8003e48 <HAL_GPIO_Init+0x40>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	f003 0303 	and.w	r3, r3, #3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d130      	bne.n	8003eaa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	005b      	lsls	r3, r3, #1
 8003e52:	2203      	movs	r2, #3
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	68da      	ldr	r2, [r3, #12]
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	005b      	lsls	r3, r3, #1
 8003e68:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	693a      	ldr	r2, [r7, #16]
 8003e76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003e7e:	2201      	movs	r2, #1
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	fa02 f303 	lsl.w	r3, r2, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	091b      	lsrs	r3, r3, #4
 8003e94:	f003 0201 	and.w	r2, r3, #1
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	685b      	ldr	r3, [r3, #4]
 8003eae:	f003 0303 	and.w	r3, r3, #3
 8003eb2:	2b03      	cmp	r3, #3
 8003eb4:	d118      	bne.n	8003ee8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	08db      	lsrs	r3, r3, #3
 8003ed2:	f003 0201 	and.w	r2, r3, #1
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	693a      	ldr	r2, [r7, #16]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	693a      	ldr	r2, [r7, #16]
 8003ee6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 0303 	and.w	r3, r3, #3
 8003ef0:	2b03      	cmp	r3, #3
 8003ef2:	d017      	beq.n	8003f24 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	005b      	lsls	r3, r3, #1
 8003efe:	2203      	movs	r2, #3
 8003f00:	fa02 f303 	lsl.w	r3, r2, r3
 8003f04:	43db      	mvns	r3, r3
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	4013      	ands	r3, r2
 8003f0a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689a      	ldr	r2, [r3, #8]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	fa02 f303 	lsl.w	r3, r2, r3
 8003f18:	693a      	ldr	r2, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	f003 0303 	and.w	r3, r3, #3
 8003f2c:	2b02      	cmp	r3, #2
 8003f2e:	d123      	bne.n	8003f78 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	08da      	lsrs	r2, r3, #3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3208      	adds	r2, #8
 8003f38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f003 0307 	and.w	r3, r3, #7
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	220f      	movs	r2, #15
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	4013      	ands	r3, r2
 8003f52:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	691a      	ldr	r2, [r3, #16]
 8003f58:	697b      	ldr	r3, [r7, #20]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	009b      	lsls	r3, r3, #2
 8003f60:	fa02 f303 	lsl.w	r3, r2, r3
 8003f64:	693a      	ldr	r2, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	08da      	lsrs	r2, r3, #3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	3208      	adds	r2, #8
 8003f72:	6939      	ldr	r1, [r7, #16]
 8003f74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	2203      	movs	r2, #3
 8003f84:	fa02 f303 	lsl.w	r3, r2, r3
 8003f88:	43db      	mvns	r3, r3
 8003f8a:	693a      	ldr	r2, [r7, #16]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f003 0203 	and.w	r2, r3, #3
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	005b      	lsls	r3, r3, #1
 8003f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 80ac 	beq.w	8004112 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fba:	4b5f      	ldr	r3, [pc, #380]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbe:	4a5e      	ldr	r2, [pc, #376]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fc0:	f043 0301 	orr.w	r3, r3, #1
 8003fc4:	6613      	str	r3, [r2, #96]	; 0x60
 8003fc6:	4b5c      	ldr	r3, [pc, #368]	; (8004138 <HAL_GPIO_Init+0x330>)
 8003fc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	60bb      	str	r3, [r7, #8]
 8003fd0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003fd2:	4a5a      	ldr	r2, [pc, #360]	; (800413c <HAL_GPIO_Init+0x334>)
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	089b      	lsrs	r3, r3, #2
 8003fd8:	3302      	adds	r3, #2
 8003fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fde:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	009b      	lsls	r3, r3, #2
 8003fe8:	220f      	movs	r2, #15
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43db      	mvns	r3, r3
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003ffc:	d025      	beq.n	800404a <HAL_GPIO_Init+0x242>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a4f      	ldr	r2, [pc, #316]	; (8004140 <HAL_GPIO_Init+0x338>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d01f      	beq.n	8004046 <HAL_GPIO_Init+0x23e>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a4e      	ldr	r2, [pc, #312]	; (8004144 <HAL_GPIO_Init+0x33c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d019      	beq.n	8004042 <HAL_GPIO_Init+0x23a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4d      	ldr	r2, [pc, #308]	; (8004148 <HAL_GPIO_Init+0x340>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d013      	beq.n	800403e <HAL_GPIO_Init+0x236>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a4c      	ldr	r2, [pc, #304]	; (800414c <HAL_GPIO_Init+0x344>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d00d      	beq.n	800403a <HAL_GPIO_Init+0x232>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a4b      	ldr	r2, [pc, #300]	; (8004150 <HAL_GPIO_Init+0x348>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d007      	beq.n	8004036 <HAL_GPIO_Init+0x22e>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a4a      	ldr	r2, [pc, #296]	; (8004154 <HAL_GPIO_Init+0x34c>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d101      	bne.n	8004032 <HAL_GPIO_Init+0x22a>
 800402e:	2306      	movs	r3, #6
 8004030:	e00c      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004032:	2307      	movs	r3, #7
 8004034:	e00a      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004036:	2305      	movs	r3, #5
 8004038:	e008      	b.n	800404c <HAL_GPIO_Init+0x244>
 800403a:	2304      	movs	r3, #4
 800403c:	e006      	b.n	800404c <HAL_GPIO_Init+0x244>
 800403e:	2303      	movs	r3, #3
 8004040:	e004      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004042:	2302      	movs	r3, #2
 8004044:	e002      	b.n	800404c <HAL_GPIO_Init+0x244>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <HAL_GPIO_Init+0x244>
 800404a:	2300      	movs	r3, #0
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	f002 0203 	and.w	r2, r2, #3
 8004052:	0092      	lsls	r2, r2, #2
 8004054:	4093      	lsls	r3, r2
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	4313      	orrs	r3, r2
 800405a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800405c:	4937      	ldr	r1, [pc, #220]	; (800413c <HAL_GPIO_Init+0x334>)
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	089b      	lsrs	r3, r3, #2
 8004062:	3302      	adds	r3, #2
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800406a:	4b3b      	ldr	r3, [pc, #236]	; (8004158 <HAL_GPIO_Init+0x350>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	43db      	mvns	r3, r3
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	4013      	ands	r3, r2
 8004078:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d003      	beq.n	800408e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4313      	orrs	r3, r2
 800408c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800408e:	4a32      	ldr	r2, [pc, #200]	; (8004158 <HAL_GPIO_Init+0x350>)
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004094:	4b30      	ldr	r3, [pc, #192]	; (8004158 <HAL_GPIO_Init+0x350>)
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	43db      	mvns	r3, r3
 800409e:	693a      	ldr	r2, [r7, #16]
 80040a0:	4013      	ands	r3, r2
 80040a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d003      	beq.n	80040b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80040b8:	4a27      	ldr	r2, [pc, #156]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80040be:	4b26      	ldr	r3, [pc, #152]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	693a      	ldr	r2, [r7, #16]
 80040ca:	4013      	ands	r3, r2
 80040cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80040e2:	4a1d      	ldr	r2, [pc, #116]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80040e8:	4b1b      	ldr	r3, [pc, #108]	; (8004158 <HAL_GPIO_Init+0x350>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	43db      	mvns	r3, r3
 80040f2:	693a      	ldr	r2, [r7, #16]
 80040f4:	4013      	ands	r3, r2
 80040f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d003      	beq.n	800410c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004104:	693a      	ldr	r2, [r7, #16]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	4313      	orrs	r3, r2
 800410a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800410c:	4a12      	ldr	r2, [pc, #72]	; (8004158 <HAL_GPIO_Init+0x350>)
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	3301      	adds	r3, #1
 8004116:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa22 f303 	lsr.w	r3, r2, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	f47f ae78 	bne.w	8003e18 <HAL_GPIO_Init+0x10>
  }
}
 8004128:	bf00      	nop
 800412a:	bf00      	nop
 800412c:	371c      	adds	r7, #28
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr
 8004136:	bf00      	nop
 8004138:	40021000 	.word	0x40021000
 800413c:	40010000 	.word	0x40010000
 8004140:	48000400 	.word	0x48000400
 8004144:	48000800 	.word	0x48000800
 8004148:	48000c00 	.word	0x48000c00
 800414c:	48001000 	.word	0x48001000
 8004150:	48001400 	.word	0x48001400
 8004154:	48001800 	.word	0x48001800
 8004158:	40010400 	.word	0x40010400

0800415c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	460b      	mov	r3, r1
 8004166:	807b      	strh	r3, [r7, #2]
 8004168:	4613      	mov	r3, r2
 800416a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800416c:	787b      	ldrb	r3, [r7, #1]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004172:	887a      	ldrh	r2, [r7, #2]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004178:	e002      	b.n	8004180 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	4603      	mov	r3, r0
 8004194:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004196:	4b08      	ldr	r3, [pc, #32]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004198:	695a      	ldr	r2, [r3, #20]
 800419a:	88fb      	ldrh	r3, [r7, #6]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d006      	beq.n	80041b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80041a2:	4a05      	ldr	r2, [pc, #20]	; (80041b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80041a4:	88fb      	ldrh	r3, [r7, #6]
 80041a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80041a8:	88fb      	ldrh	r3, [r7, #6]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc fe0e 	bl	8000dcc <HAL_GPIO_EXTI_Callback>
  }
}
 80041b0:	bf00      	nop
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40010400 	.word	0x40010400

080041bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	40007000 	.word	0x40007000

080041d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80041d8:	b480      	push	{r7}
 80041da:	b085      	sub	sp, #20
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e6:	d130      	bne.n	800424a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80041e8:	4b23      	ldr	r3, [pc, #140]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80041f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041f4:	d038      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80041f6:	4b20      	ldr	r3, [pc, #128]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80041fe:	4a1e      	ldr	r2, [pc, #120]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004200:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004204:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004206:	4b1d      	ldr	r3, [pc, #116]	; (800427c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	2232      	movs	r2, #50	; 0x32
 800420c:	fb02 f303 	mul.w	r3, r2, r3
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0c9b      	lsrs	r3, r3, #18
 8004218:	3301      	adds	r3, #1
 800421a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800421c:	e002      	b.n	8004224 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	3b01      	subs	r3, #1
 8004222:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004224:	4b14      	ldr	r3, [pc, #80]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004226:	695b      	ldr	r3, [r3, #20]
 8004228:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800422c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004230:	d102      	bne.n	8004238 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1f2      	bne.n	800421e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004238:	4b0f      	ldr	r3, [pc, #60]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004244:	d110      	bne.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e00f      	b.n	800426a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800424a:	4b0b      	ldr	r3, [pc, #44]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004256:	d007      	beq.n	8004268 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004258:	4b07      	ldr	r3, [pc, #28]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004260:	4a05      	ldr	r2, [pc, #20]	; (8004278 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004262:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004266:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40007000 	.word	0x40007000
 800427c:	20000000 	.word	0x20000000
 8004280:	431bde83 	.word	0x431bde83

08004284 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e3ca      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004296:	4b97      	ldr	r3, [pc, #604]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f003 030c 	and.w	r3, r3, #12
 800429e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80042a0:	4b94      	ldr	r3, [pc, #592]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0303 	and.w	r3, r3, #3
 80042a8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0310 	and.w	r3, r3, #16
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 80e4 	beq.w	8004480 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d007      	beq.n	80042ce <HAL_RCC_OscConfig+0x4a>
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b0c      	cmp	r3, #12
 80042c2:	f040 808b 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	f040 8087 	bne.w	80043dc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ce:	4b89      	ldr	r3, [pc, #548]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0302 	and.w	r3, r3, #2
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d005      	beq.n	80042e6 <HAL_RCC_OscConfig+0x62>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	699b      	ldr	r3, [r3, #24]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d101      	bne.n	80042e6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80042e2:	2301      	movs	r3, #1
 80042e4:	e3a2      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a1a      	ldr	r2, [r3, #32]
 80042ea:	4b82      	ldr	r3, [pc, #520]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0308 	and.w	r3, r3, #8
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_RCC_OscConfig+0x7c>
 80042f6:	4b7f      	ldr	r3, [pc, #508]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042fe:	e005      	b.n	800430c <HAL_RCC_OscConfig+0x88>
 8004300:	4b7c      	ldr	r3, [pc, #496]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004306:	091b      	lsrs	r3, r3, #4
 8004308:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800430c:	4293      	cmp	r3, r2
 800430e:	d223      	bcs.n	8004358 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6a1b      	ldr	r3, [r3, #32]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd55 	bl	8004dc4 <RCC_SetFlashLatencyFromMSIRange>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d001      	beq.n	8004324 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e383      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004324:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a72      	ldr	r2, [pc, #456]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800432a:	f043 0308 	orr.w	r3, r3, #8
 800432e:	6013      	str	r3, [r2, #0]
 8004330:	4b70      	ldr	r3, [pc, #448]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	496d      	ldr	r1, [pc, #436]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004342:	4b6c      	ldr	r3, [pc, #432]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	021b      	lsls	r3, r3, #8
 8004350:	4968      	ldr	r1, [pc, #416]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004352:	4313      	orrs	r3, r2
 8004354:	604b      	str	r3, [r1, #4]
 8004356:	e025      	b.n	80043a4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004358:	4b66      	ldr	r3, [pc, #408]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a65      	ldr	r2, [pc, #404]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800435e:	f043 0308 	orr.w	r3, r3, #8
 8004362:	6013      	str	r3, [r2, #0]
 8004364:	4b63      	ldr	r3, [pc, #396]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	4960      	ldr	r1, [pc, #384]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004372:	4313      	orrs	r3, r2
 8004374:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004376:	4b5f      	ldr	r3, [pc, #380]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	021b      	lsls	r3, r3, #8
 8004384:	495b      	ldr	r1, [pc, #364]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004386:	4313      	orrs	r3, r2
 8004388:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	4618      	mov	r0, r3
 8004396:	f000 fd15 	bl	8004dc4 <RCC_SetFlashLatencyFromMSIRange>
 800439a:	4603      	mov	r3, r0
 800439c:	2b00      	cmp	r3, #0
 800439e:	d001      	beq.n	80043a4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e343      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80043a4:	f000 fc4a 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b52      	ldr	r3, [pc, #328]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	091b      	lsrs	r3, r3, #4
 80043b0:	f003 030f 	and.w	r3, r3, #15
 80043b4:	4950      	ldr	r1, [pc, #320]	; (80044f8 <HAL_RCC_OscConfig+0x274>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	f003 031f 	and.w	r3, r3, #31
 80043bc:	fa22 f303 	lsr.w	r3, r2, r3
 80043c0:	4a4e      	ldr	r2, [pc, #312]	; (80044fc <HAL_RCC_OscConfig+0x278>)
 80043c2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80043c4:	4b4e      	ldr	r3, [pc, #312]	; (8004500 <HAL_RCC_OscConfig+0x27c>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7ff fb59 	bl	8003a80 <HAL_InitTick>
 80043ce:	4603      	mov	r3, r0
 80043d0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80043d2:	7bfb      	ldrb	r3, [r7, #15]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d052      	beq.n	800447e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80043d8:	7bfb      	ldrb	r3, [r7, #15]
 80043da:	e327      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d032      	beq.n	800444a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80043e4:	4b43      	ldr	r3, [pc, #268]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a42      	ldr	r2, [pc, #264]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043f0:	f7ff fb96 	bl	8003b20 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043f8:	f7ff fb92 	bl	8003b20 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e310      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800440a:	4b3a      	ldr	r3, [pc, #232]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004416:	4b37      	ldr	r3, [pc, #220]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	4a36      	ldr	r2, [pc, #216]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800441c:	f043 0308 	orr.w	r3, r3, #8
 8004420:	6013      	str	r3, [r2, #0]
 8004422:	4b34      	ldr	r3, [pc, #208]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	4931      	ldr	r1, [pc, #196]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004430:	4313      	orrs	r3, r2
 8004432:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004434:	4b2f      	ldr	r3, [pc, #188]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	69db      	ldr	r3, [r3, #28]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	492c      	ldr	r1, [pc, #176]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004444:	4313      	orrs	r3, r2
 8004446:	604b      	str	r3, [r1, #4]
 8004448:	e01a      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800444a:	4b2a      	ldr	r3, [pc, #168]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a29      	ldr	r2, [pc, #164]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004450:	f023 0301 	bic.w	r3, r3, #1
 8004454:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004456:	f7ff fb63 	bl	8003b20 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800445e:	f7ff fb5f 	bl	8003b20 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e2dd      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004470:	4b20      	ldr	r3, [pc, #128]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x1da>
 800447c:	e000      	b.n	8004480 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800447e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0301 	and.w	r3, r3, #1
 8004488:	2b00      	cmp	r3, #0
 800448a:	d074      	beq.n	8004576 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b08      	cmp	r3, #8
 8004490:	d005      	beq.n	800449e <HAL_RCC_OscConfig+0x21a>
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b0c      	cmp	r3, #12
 8004496:	d10e      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004498:	697b      	ldr	r3, [r7, #20]
 800449a:	2b03      	cmp	r3, #3
 800449c:	d10b      	bne.n	80044b6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800449e:	4b15      	ldr	r3, [pc, #84]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d064      	beq.n	8004574 <HAL_RCC_OscConfig+0x2f0>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d160      	bne.n	8004574 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80044b2:	2301      	movs	r3, #1
 80044b4:	e2ba      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044be:	d106      	bne.n	80044ce <HAL_RCC_OscConfig+0x24a>
 80044c0:	4b0c      	ldr	r3, [pc, #48]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0b      	ldr	r2, [pc, #44]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ca:	6013      	str	r3, [r2, #0]
 80044cc:	e026      	b.n	800451c <HAL_RCC_OscConfig+0x298>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044d6:	d115      	bne.n	8004504 <HAL_RCC_OscConfig+0x280>
 80044d8:	4b06      	ldr	r3, [pc, #24]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a05      	ldr	r2, [pc, #20]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044e2:	6013      	str	r3, [r2, #0]
 80044e4:	4b03      	ldr	r3, [pc, #12]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a02      	ldr	r2, [pc, #8]	; (80044f4 <HAL_RCC_OscConfig+0x270>)
 80044ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	e014      	b.n	800451c <HAL_RCC_OscConfig+0x298>
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000
 80044f8:	080072ec 	.word	0x080072ec
 80044fc:	20000000 	.word	0x20000000
 8004500:	2000000c 	.word	0x2000000c
 8004504:	4ba0      	ldr	r3, [pc, #640]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a9f      	ldr	r2, [pc, #636]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800450a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800450e:	6013      	str	r3, [r2, #0]
 8004510:	4b9d      	ldr	r3, [pc, #628]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a9c      	ldr	r2, [pc, #624]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800451a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d013      	beq.n	800454c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004524:	f7ff fafc 	bl	8003b20 <HAL_GetTick>
 8004528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800452a:	e008      	b.n	800453e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800452c:	f7ff faf8 	bl	8003b20 <HAL_GetTick>
 8004530:	4602      	mov	r2, r0
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	1ad3      	subs	r3, r2, r3
 8004536:	2b64      	cmp	r3, #100	; 0x64
 8004538:	d901      	bls.n	800453e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800453a:	2303      	movs	r3, #3
 800453c:	e276      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800453e:	4b92      	ldr	r3, [pc, #584]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d0f0      	beq.n	800452c <HAL_RCC_OscConfig+0x2a8>
 800454a:	e014      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800454c:	f7ff fae8 	bl	8003b20 <HAL_GetTick>
 8004550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004552:	e008      	b.n	8004566 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004554:	f7ff fae4 	bl	8003b20 <HAL_GetTick>
 8004558:	4602      	mov	r2, r0
 800455a:	693b      	ldr	r3, [r7, #16]
 800455c:	1ad3      	subs	r3, r2, r3
 800455e:	2b64      	cmp	r3, #100	; 0x64
 8004560:	d901      	bls.n	8004566 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e262      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004566:	4b88      	ldr	r3, [pc, #544]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800456e:	2b00      	cmp	r3, #0
 8004570:	d1f0      	bne.n	8004554 <HAL_RCC_OscConfig+0x2d0>
 8004572:	e000      	b.n	8004576 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004574:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 0302 	and.w	r3, r3, #2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d060      	beq.n	8004644 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004582:	69bb      	ldr	r3, [r7, #24]
 8004584:	2b04      	cmp	r3, #4
 8004586:	d005      	beq.n	8004594 <HAL_RCC_OscConfig+0x310>
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d119      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d116      	bne.n	80045c2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004594:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800459c:	2b00      	cmp	r3, #0
 800459e:	d005      	beq.n	80045ac <HAL_RCC_OscConfig+0x328>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d101      	bne.n	80045ac <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e23f      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045ac:	4b76      	ldr	r3, [pc, #472]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	691b      	ldr	r3, [r3, #16]
 80045b8:	061b      	lsls	r3, r3, #24
 80045ba:	4973      	ldr	r1, [pc, #460]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045bc:	4313      	orrs	r3, r2
 80045be:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80045c0:	e040      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d023      	beq.n	8004612 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045ca:	4b6f      	ldr	r3, [pc, #444]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6e      	ldr	r2, [pc, #440]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045d6:	f7ff faa3 	bl	8003b20 <HAL_GetTick>
 80045da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045dc:	e008      	b.n	80045f0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045de:	f7ff fa9f 	bl	8003b20 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b02      	cmp	r3, #2
 80045ea:	d901      	bls.n	80045f0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80045ec:	2303      	movs	r3, #3
 80045ee:	e21d      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80045f0:	4b65      	ldr	r3, [pc, #404]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d0f0      	beq.n	80045de <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	061b      	lsls	r3, r3, #24
 800460a:	495f      	ldr	r1, [pc, #380]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800460c:	4313      	orrs	r3, r2
 800460e:	604b      	str	r3, [r1, #4]
 8004610:	e018      	b.n	8004644 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004612:	4b5d      	ldr	r3, [pc, #372]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4a5c      	ldr	r2, [pc, #368]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800461c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800461e:	f7ff fa7f 	bl	8003b20 <HAL_GetTick>
 8004622:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004624:	e008      	b.n	8004638 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004626:	f7ff fa7b 	bl	8003b20 <HAL_GetTick>
 800462a:	4602      	mov	r2, r0
 800462c:	693b      	ldr	r3, [r7, #16]
 800462e:	1ad3      	subs	r3, r2, r3
 8004630:	2b02      	cmp	r3, #2
 8004632:	d901      	bls.n	8004638 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004634:	2303      	movs	r3, #3
 8004636:	e1f9      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1f0      	bne.n	8004626 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d03c      	beq.n	80046ca <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d01c      	beq.n	8004692 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004658:	4b4b      	ldr	r3, [pc, #300]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800465a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800465e:	4a4a      	ldr	r2, [pc, #296]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004660:	f043 0301 	orr.w	r3, r3, #1
 8004664:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004668:	f7ff fa5a 	bl	8003b20 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800466e:	e008      	b.n	8004682 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004670:	f7ff fa56 	bl	8003b20 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	2b02      	cmp	r3, #2
 800467c:	d901      	bls.n	8004682 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e1d4      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004684:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004688:	f003 0302 	and.w	r3, r3, #2
 800468c:	2b00      	cmp	r3, #0
 800468e:	d0ef      	beq.n	8004670 <HAL_RCC_OscConfig+0x3ec>
 8004690:	e01b      	b.n	80046ca <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004692:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004698:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800469a:	f023 0301 	bic.w	r3, r3, #1
 800469e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046a2:	f7ff fa3d 	bl	8003b20 <HAL_GetTick>
 80046a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046a8:	e008      	b.n	80046bc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046aa:	f7ff fa39 	bl	8003b20 <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d901      	bls.n	80046bc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80046b8:	2303      	movs	r3, #3
 80046ba:	e1b7      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80046bc:	4b32      	ldr	r3, [pc, #200]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80046be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1ef      	bne.n	80046aa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0304 	and.w	r3, r3, #4
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	f000 80a6 	beq.w	8004824 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046d8:	2300      	movs	r3, #0
 80046da:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80046dc:	4b2a      	ldr	r3, [pc, #168]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80046de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d10d      	bne.n	8004704 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046e8:	4b27      	ldr	r3, [pc, #156]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80046ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ec:	4a26      	ldr	r2, [pc, #152]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80046ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046f2:	6593      	str	r3, [r2, #88]	; 0x58
 80046f4:	4b24      	ldr	r3, [pc, #144]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 80046f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fc:	60bb      	str	r3, [r7, #8]
 80046fe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004700:	2301      	movs	r3, #1
 8004702:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004704:	4b21      	ldr	r3, [pc, #132]	; (800478c <HAL_RCC_OscConfig+0x508>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800470c:	2b00      	cmp	r3, #0
 800470e:	d118      	bne.n	8004742 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004710:	4b1e      	ldr	r3, [pc, #120]	; (800478c <HAL_RCC_OscConfig+0x508>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1d      	ldr	r2, [pc, #116]	; (800478c <HAL_RCC_OscConfig+0x508>)
 8004716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800471c:	f7ff fa00 	bl	8003b20 <HAL_GetTick>
 8004720:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004722:	e008      	b.n	8004736 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004724:	f7ff f9fc 	bl	8003b20 <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	2b02      	cmp	r3, #2
 8004730:	d901      	bls.n	8004736 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004732:	2303      	movs	r3, #3
 8004734:	e17a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <HAL_RCC_OscConfig+0x508>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800473e:	2b00      	cmp	r3, #0
 8004740:	d0f0      	beq.n	8004724 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <HAL_RCC_OscConfig+0x4d8>
 800474a:	4b0f      	ldr	r3, [pc, #60]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800474c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004750:	4a0d      	ldr	r2, [pc, #52]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004752:	f043 0301 	orr.w	r3, r3, #1
 8004756:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800475a:	e029      	b.n	80047b0 <HAL_RCC_OscConfig+0x52c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	2b05      	cmp	r3, #5
 8004762:	d115      	bne.n	8004790 <HAL_RCC_OscConfig+0x50c>
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	4a07      	ldr	r2, [pc, #28]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800476c:	f043 0304 	orr.w	r3, r3, #4
 8004770:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004774:	4b04      	ldr	r3, [pc, #16]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	4a03      	ldr	r2, [pc, #12]	; (8004788 <HAL_RCC_OscConfig+0x504>)
 800477c:	f043 0301 	orr.w	r3, r3, #1
 8004780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004784:	e014      	b.n	80047b0 <HAL_RCC_OscConfig+0x52c>
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	4b9c      	ldr	r3, [pc, #624]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a9b      	ldr	r2, [pc, #620]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004798:	f023 0301 	bic.w	r3, r3, #1
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80047a0:	4b98      	ldr	r3, [pc, #608]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047a6:	4a97      	ldr	r2, [pc, #604]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047a8:	f023 0304 	bic.w	r3, r3, #4
 80047ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d016      	beq.n	80047e6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047b8:	f7ff f9b2 	bl	8003b20 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047be:	e00a      	b.n	80047d6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7ff f9ae 	bl	8003b20 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e12a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d6:	4b8b      	ldr	r3, [pc, #556]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80047d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047dc:	f003 0302 	and.w	r3, r3, #2
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0ed      	beq.n	80047c0 <HAL_RCC_OscConfig+0x53c>
 80047e4:	e015      	b.n	8004812 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e6:	f7ff f99b 	bl	8003b20 <HAL_GetTick>
 80047ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047ec:	e00a      	b.n	8004804 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7ff f997 	bl	8003b20 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d901      	bls.n	8004804 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	e113      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004804:	4b7f      	ldr	r3, [pc, #508]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480a:	f003 0302 	and.w	r3, r3, #2
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1ed      	bne.n	80047ee <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004812:	7ffb      	ldrb	r3, [r7, #31]
 8004814:	2b01      	cmp	r3, #1
 8004816:	d105      	bne.n	8004824 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004818:	4b7a      	ldr	r3, [pc, #488]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800481a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481c:	4a79      	ldr	r2, [pc, #484]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800481e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004822:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80fe 	beq.w	8004a2a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	2b02      	cmp	r3, #2
 8004834:	f040 80d0 	bne.w	80049d8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004838:	4b72      	ldr	r3, [pc, #456]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	f003 0203 	and.w	r2, r3, #3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004848:	429a      	cmp	r2, r3
 800484a:	d130      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004856:	3b01      	subs	r3, #1
 8004858:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800485a:	429a      	cmp	r2, r3
 800485c:	d127      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004868:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800486a:	429a      	cmp	r2, r3
 800486c:	d11f      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004878:	2a07      	cmp	r2, #7
 800487a:	bf14      	ite	ne
 800487c:	2201      	movne	r2, #1
 800487e:	2200      	moveq	r2, #0
 8004880:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004882:	4293      	cmp	r3, r2
 8004884:	d113      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004890:	085b      	lsrs	r3, r3, #1
 8004892:	3b01      	subs	r3, #1
 8004894:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004896:	429a      	cmp	r2, r3
 8004898:	d109      	bne.n	80048ae <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a4:	085b      	lsrs	r3, r3, #1
 80048a6:	3b01      	subs	r3, #1
 80048a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d06e      	beq.n	800498c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b0c      	cmp	r3, #12
 80048b2:	d069      	beq.n	8004988 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b4:	4b53      	ldr	r3, [pc, #332]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d105      	bne.n	80048cc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048c0:	4b50      	ldr	r3, [pc, #320]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e0ad      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048d0:	4b4c      	ldr	r3, [pc, #304]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a4b      	ldr	r2, [pc, #300]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048da:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048dc:	f7ff f920 	bl	8003b20 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e4:	f7ff f91c 	bl	8003b20 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b02      	cmp	r3, #2
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e09a      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f6:	4b43      	ldr	r3, [pc, #268]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004902:	4b40      	ldr	r3, [pc, #256]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	4b40      	ldr	r3, [pc, #256]	; (8004a08 <HAL_RCC_OscConfig+0x784>)
 8004908:	4013      	ands	r3, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004912:	3a01      	subs	r2, #1
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	4311      	orrs	r1, r2
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800491c:	0212      	lsls	r2, r2, #8
 800491e:	4311      	orrs	r1, r2
 8004920:	687a      	ldr	r2, [r7, #4]
 8004922:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004924:	0852      	lsrs	r2, r2, #1
 8004926:	3a01      	subs	r2, #1
 8004928:	0552      	lsls	r2, r2, #21
 800492a:	4311      	orrs	r1, r2
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004930:	0852      	lsrs	r2, r2, #1
 8004932:	3a01      	subs	r2, #1
 8004934:	0652      	lsls	r2, r2, #25
 8004936:	4311      	orrs	r1, r2
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493c:	0912      	lsrs	r2, r2, #4
 800493e:	0452      	lsls	r2, r2, #17
 8004940:	430a      	orrs	r2, r1
 8004942:	4930      	ldr	r1, [pc, #192]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004944:	4313      	orrs	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004948:	4b2e      	ldr	r3, [pc, #184]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a2d      	ldr	r2, [pc, #180]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004954:	4b2b      	ldr	r3, [pc, #172]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a2a      	ldr	r2, [pc, #168]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004960:	f7ff f8de 	bl	8003b20 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7ff f8da 	bl	8003b20 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e058      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b22      	ldr	r3, [pc, #136]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004986:	e050      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04f      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800498c:	4b1d      	ldr	r3, [pc, #116]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	d148      	bne.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 800499e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049a2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049a4:	4b17      	ldr	r3, [pc, #92]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a16      	ldr	r2, [pc, #88]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049ae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b0:	f7ff f8b6 	bl	8003b20 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049b6:	e008      	b.n	80049ca <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049b8:	f7ff f8b2 	bl	8003b20 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d901      	bls.n	80049ca <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e030      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049ca:	4b0e      	ldr	r3, [pc, #56]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d0f0      	beq.n	80049b8 <HAL_RCC_OscConfig+0x734>
 80049d6:	e028      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	2b0c      	cmp	r3, #12
 80049dc:	d023      	beq.n	8004a26 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049de:	4b09      	ldr	r3, [pc, #36]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	4a08      	ldr	r2, [pc, #32]	; (8004a04 <HAL_RCC_OscConfig+0x780>)
 80049e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ea:	f7ff f899 	bl	8003b20 <HAL_GetTick>
 80049ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f0:	e00c      	b.n	8004a0c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049f2:	f7ff f895 	bl	8003b20 <HAL_GetTick>
 80049f6:	4602      	mov	r2, r0
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	1ad3      	subs	r3, r2, r3
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d905      	bls.n	8004a0c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e013      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
 8004a04:	40021000 	.word	0x40021000
 8004a08:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1ec      	bne.n	80049f2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	4905      	ldr	r1, [pc, #20]	; (8004a34 <HAL_RCC_OscConfig+0x7b0>)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_OscConfig+0x7b4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e001      	b.n	8004a2a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	feeefffc 	.word	0xfeeefffc

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0e7      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b75      	ldr	r3, [pc, #468]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d910      	bls.n	8004a80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b72      	ldr	r3, [pc, #456]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f023 0207 	bic.w	r2, r3, #7
 8004a66:	4970      	ldr	r1, [pc, #448]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6e:	4b6e      	ldr	r3, [pc, #440]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0307 	and.w	r3, r3, #7
 8004a76:	683a      	ldr	r2, [r7, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d001      	beq.n	8004a80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e0cf      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 0302 	and.w	r3, r3, #2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d010      	beq.n	8004aae <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689a      	ldr	r2, [r3, #8]
 8004a90:	4b66      	ldr	r3, [pc, #408]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a98:	429a      	cmp	r2, r3
 8004a9a:	d908      	bls.n	8004aae <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a9c:	4b63      	ldr	r3, [pc, #396]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	4960      	ldr	r1, [pc, #384]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0301 	and.w	r3, r3, #1
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d04c      	beq.n	8004b54 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b03      	cmp	r3, #3
 8004ac0:	d107      	bne.n	8004ad2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac2:	4b5a      	ldr	r3, [pc, #360]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d121      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e0a6      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004ada:	4b54      	ldr	r3, [pc, #336]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d115      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e09a      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d107      	bne.n	8004b02 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004af2:	4b4e      	ldr	r3, [pc, #312]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f003 0302 	and.w	r3, r3, #2
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d109      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e08e      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b02:	4b4a      	ldr	r3, [pc, #296]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e086      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b12:	4b46      	ldr	r3, [pc, #280]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f023 0203 	bic.w	r2, r3, #3
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	4943      	ldr	r1, [pc, #268]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b24:	f7fe fffc 	bl	8003b20 <HAL_GetTick>
 8004b28:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b2a:	e00a      	b.n	8004b42 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b2c:	f7fe fff8 	bl	8003b20 <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d901      	bls.n	8004b42 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	e06e      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b42:	4b3a      	ldr	r3, [pc, #232]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 020c 	and.w	r2, r3, #12
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	429a      	cmp	r2, r3
 8004b52:	d1eb      	bne.n	8004b2c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f003 0302 	and.w	r3, r3, #2
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d010      	beq.n	8004b82 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	4b31      	ldr	r3, [pc, #196]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b66:	689b      	ldr	r3, [r3, #8]
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d208      	bcs.n	8004b82 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b70:	4b2e      	ldr	r3, [pc, #184]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	492b      	ldr	r1, [pc, #172]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b82:	4b29      	ldr	r3, [pc, #164]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d210      	bcs.n	8004bb2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b90:	4b25      	ldr	r3, [pc, #148]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 0207 	bic.w	r2, r3, #7
 8004b98:	4923      	ldr	r1, [pc, #140]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ba0:	4b21      	ldr	r3, [pc, #132]	; (8004c28 <HAL_RCC_ClockConfig+0x1ec>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	683a      	ldr	r2, [r7, #0]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d001      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e036      	b.n	8004c20 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d008      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bbe:	4b1b      	ldr	r3, [pc, #108]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	4918      	ldr	r1, [pc, #96]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0308 	and.w	r3, r3, #8
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d009      	beq.n	8004bf0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bdc:	4b13      	ldr	r3, [pc, #76]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	00db      	lsls	r3, r3, #3
 8004bea:	4910      	ldr	r1, [pc, #64]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bec:	4313      	orrs	r3, r2
 8004bee:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004bf0:	f000 f824 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8004bf4:	4602      	mov	r2, r0
 8004bf6:	4b0d      	ldr	r3, [pc, #52]	; (8004c2c <HAL_RCC_ClockConfig+0x1f0>)
 8004bf8:	689b      	ldr	r3, [r3, #8]
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	490b      	ldr	r1, [pc, #44]	; (8004c30 <HAL_RCC_ClockConfig+0x1f4>)
 8004c02:	5ccb      	ldrb	r3, [r1, r3]
 8004c04:	f003 031f 	and.w	r3, r3, #31
 8004c08:	fa22 f303 	lsr.w	r3, r2, r3
 8004c0c:	4a09      	ldr	r2, [pc, #36]	; (8004c34 <HAL_RCC_ClockConfig+0x1f8>)
 8004c0e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c10:	4b09      	ldr	r3, [pc, #36]	; (8004c38 <HAL_RCC_ClockConfig+0x1fc>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fe ff33 	bl	8003a80 <HAL_InitTick>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	72fb      	strb	r3, [r7, #11]

  return status;
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	40022000 	.word	0x40022000
 8004c2c:	40021000 	.word	0x40021000
 8004c30:	080072ec 	.word	0x080072ec
 8004c34:	20000000 	.word	0x20000000
 8004c38:	2000000c 	.word	0x2000000c

08004c3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	; 0x24
 8004c40:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004c42:	2300      	movs	r3, #0
 8004c44:	61fb      	str	r3, [r7, #28]
 8004c46:	2300      	movs	r3, #0
 8004c48:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c4a:	4b3e      	ldr	r3, [pc, #248]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f003 030c 	and.w	r3, r3, #12
 8004c52:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c54:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f003 0303 	and.w	r3, r3, #3
 8004c5c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_GetSysClockFreq+0x34>
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	2b0c      	cmp	r3, #12
 8004c68:	d121      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d11e      	bne.n	8004cae <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004c70:	4b34      	ldr	r3, [pc, #208]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0308 	and.w	r3, r3, #8
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d107      	bne.n	8004c8c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004c7c:	4b31      	ldr	r3, [pc, #196]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004c82:	0a1b      	lsrs	r3, r3, #8
 8004c84:	f003 030f 	and.w	r3, r3, #15
 8004c88:	61fb      	str	r3, [r7, #28]
 8004c8a:	e005      	b.n	8004c98 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c8c:	4b2d      	ldr	r3, [pc, #180]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	091b      	lsrs	r3, r3, #4
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c98:	4a2b      	ldr	r2, [pc, #172]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c9a:	69fb      	ldr	r3, [r7, #28]
 8004c9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ca0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d10d      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004ca8:	69fb      	ldr	r3, [r7, #28]
 8004caa:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004cac:	e00a      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004cae:	693b      	ldr	r3, [r7, #16]
 8004cb0:	2b04      	cmp	r3, #4
 8004cb2:	d102      	bne.n	8004cba <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004cb4:	4b25      	ldr	r3, [pc, #148]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004cb6:	61bb      	str	r3, [r7, #24]
 8004cb8:	e004      	b.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	2b08      	cmp	r3, #8
 8004cbe:	d101      	bne.n	8004cc4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004cc0:	4b23      	ldr	r3, [pc, #140]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cc2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	2b0c      	cmp	r3, #12
 8004cc8:	d134      	bne.n	8004d34 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	f003 0303 	and.w	r3, r3, #3
 8004cd2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004cd4:	68bb      	ldr	r3, [r7, #8]
 8004cd6:	2b02      	cmp	r3, #2
 8004cd8:	d003      	beq.n	8004ce2 <HAL_RCC_GetSysClockFreq+0xa6>
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d003      	beq.n	8004ce8 <HAL_RCC_GetSysClockFreq+0xac>
 8004ce0:	e005      	b.n	8004cee <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004ce2:	4b1a      	ldr	r3, [pc, #104]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x110>)
 8004ce4:	617b      	str	r3, [r7, #20]
      break;
 8004ce6:	e005      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004ce8:	4b19      	ldr	r3, [pc, #100]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x114>)
 8004cea:	617b      	str	r3, [r7, #20]
      break;
 8004cec:	e002      	b.n	8004cf4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	617b      	str	r3, [r7, #20]
      break;
 8004cf2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004cf4:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	091b      	lsrs	r3, r3, #4
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	3301      	adds	r3, #1
 8004d00:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d02:	4b10      	ldr	r3, [pc, #64]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	0a1b      	lsrs	r3, r3, #8
 8004d08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d1a:	4b0a      	ldr	r3, [pc, #40]	; (8004d44 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	0e5b      	lsrs	r3, r3, #25
 8004d20:	f003 0303 	and.w	r3, r3, #3
 8004d24:	3301      	adds	r3, #1
 8004d26:	005b      	lsls	r3, r3, #1
 8004d28:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d2a:	697a      	ldr	r2, [r7, #20]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d32:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004d34:	69bb      	ldr	r3, [r7, #24]
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3724      	adds	r7, #36	; 0x24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	40021000 	.word	0x40021000
 8004d48:	08007304 	.word	0x08007304
 8004d4c:	00f42400 	.word	0x00f42400
 8004d50:	007a1200 	.word	0x007a1200

08004d54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d54:	b480      	push	{r7}
 8004d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000000 	.word	0x20000000

08004d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004d70:	f7ff fff0 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004d74:	4602      	mov	r2, r0
 8004d76:	4b06      	ldr	r3, [pc, #24]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	f003 0307 	and.w	r3, r3, #7
 8004d80:	4904      	ldr	r1, [pc, #16]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004d82:	5ccb      	ldrb	r3, [r1, r3]
 8004d84:	f003 031f 	and.w	r3, r3, #31
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	080072fc 	.word	0x080072fc

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d9c:	f7ff ffda 	bl	8004d54 <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b06      	ldr	r3, [pc, #24]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4904      	ldr	r1, [pc, #16]	; (8004dc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	f003 031f 	and.w	r3, r3, #31
 8004db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	40021000 	.word	0x40021000
 8004dc0:	080072fc 	.word	0x080072fc

08004dc4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b086      	sub	sp, #24
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004dcc:	2300      	movs	r3, #0
 8004dce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004ddc:	f7ff f9ee 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004de0:	6178      	str	r0, [r7, #20]
 8004de2:	e014      	b.n	8004e0e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004de4:	4b25      	ldr	r3, [pc, #148]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de8:	4a24      	ldr	r2, [pc, #144]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004dea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dee:	6593      	str	r3, [r2, #88]	; 0x58
 8004df0:	4b22      	ldr	r3, [pc, #136]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004df2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df8:	60fb      	str	r3, [r7, #12]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004dfc:	f7ff f9de 	bl	80041bc <HAL_PWREx_GetVoltageRange>
 8004e00:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e02:	4b1e      	ldr	r3, [pc, #120]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e06:	4a1d      	ldr	r2, [pc, #116]	; (8004e7c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004e08:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e14:	d10b      	bne.n	8004e2e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b80      	cmp	r3, #128	; 0x80
 8004e1a:	d919      	bls.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2ba0      	cmp	r3, #160	; 0xa0
 8004e20:	d902      	bls.n	8004e28 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e22:	2302      	movs	r3, #2
 8004e24:	613b      	str	r3, [r7, #16]
 8004e26:	e013      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e28:	2301      	movs	r3, #1
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	e010      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b80      	cmp	r3, #128	; 0x80
 8004e32:	d902      	bls.n	8004e3a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004e34:	2303      	movs	r3, #3
 8004e36:	613b      	str	r3, [r7, #16]
 8004e38:	e00a      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b80      	cmp	r3, #128	; 0x80
 8004e3e:	d102      	bne.n	8004e46 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e40:	2302      	movs	r3, #2
 8004e42:	613b      	str	r3, [r7, #16]
 8004e44:	e004      	b.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b70      	cmp	r3, #112	; 0x70
 8004e4a:	d101      	bne.n	8004e50 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f023 0207 	bic.w	r2, r3, #7
 8004e58:	4909      	ldr	r1, [pc, #36]	; (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004e60:	4b07      	ldr	r3, [pc, #28]	; (8004e80 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 0307 	and.w	r3, r3, #7
 8004e68:	693a      	ldr	r2, [r7, #16]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d001      	beq.n	8004e72 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e000      	b.n	8004e74 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3718      	adds	r7, #24
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40022000 	.word	0x40022000

08004e84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e90:	2300      	movs	r3, #0
 8004e92:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d041      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ea4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004ea8:	d02a      	beq.n	8004f00 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004eaa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004eae:	d824      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004eb0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eb4:	d008      	beq.n	8004ec8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004eb6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004eba:	d81e      	bhi.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d00a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ec4:	d010      	beq.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004ec6:	e018      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ec8:	4b86      	ldr	r3, [pc, #536]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	4a85      	ldr	r2, [pc, #532]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ece:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ed2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed4:	e015      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	2100      	movs	r1, #0
 8004edc:	4618      	mov	r0, r3
 8004ede:	f000 fabb 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ee6:	e00c      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3320      	adds	r3, #32
 8004eec:	2100      	movs	r1, #0
 8004eee:	4618      	mov	r0, r3
 8004ef0:	f000 fba6 	bl	8005640 <RCCEx_PLLSAI2_Config>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ef8:	e003      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	74fb      	strb	r3, [r7, #19]
      break;
 8004efe:	e000      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004f00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f02:	7cfb      	ldrb	r3, [r7, #19]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004f08:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004f16:	4973      	ldr	r1, [pc, #460]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f1e:	e001      	b.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f20:	7cfb      	ldrb	r3, [r7, #19]
 8004f22:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d041      	beq.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f38:	d02a      	beq.n	8004f90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004f3a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004f3e:	d824      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f44:	d008      	beq.n	8004f58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004f46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004f4a:	d81e      	bhi.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f54:	d010      	beq.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004f56:	e018      	b.n	8004f8a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f58:	4b62      	ldr	r3, [pc, #392]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	68db      	ldr	r3, [r3, #12]
 8004f5c:	4a61      	ldr	r2, [pc, #388]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f62:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f64:	e015      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	3304      	adds	r3, #4
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fa73 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8004f72:	4603      	mov	r3, r0
 8004f74:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f76:	e00c      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3320      	adds	r3, #32
 8004f7c:	2100      	movs	r1, #0
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f000 fb5e 	bl	8005640 <RCCEx_PLLSAI2_Config>
 8004f84:	4603      	mov	r3, r0
 8004f86:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f88:	e003      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	74fb      	strb	r3, [r7, #19]
      break;
 8004f8e:	e000      	b.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f90:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10b      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f98:	4b52      	ldr	r3, [pc, #328]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004fa6:	494f      	ldr	r1, [pc, #316]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004fae:	e001      	b.n	8004fb4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fb0:	7cfb      	ldrb	r3, [r7, #19]
 8004fb2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80a0 	beq.w	8005102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d101      	bne.n	8004fd6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e000      	b.n	8004fd8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fdc:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fe0:	4a40      	ldr	r2, [pc, #256]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe8:	4b3e      	ldr	r3, [pc, #248]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ff0:	60bb      	str	r3, [r7, #8]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ff8:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a3a      	ldr	r2, [pc, #232]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005002:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005004:	f7fe fd8c 	bl	8003b20 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800500a:	e009      	b.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800500c:	f7fe fd88 	bl	8003b20 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	2b02      	cmp	r3, #2
 8005018:	d902      	bls.n	8005020 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	74fb      	strb	r3, [r7, #19]
        break;
 800501e:	e005      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005020:	4b31      	ldr	r3, [pc, #196]	; (80050e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005028:	2b00      	cmp	r3, #0
 800502a:	d0ef      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800502c:	7cfb      	ldrb	r3, [r7, #19]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d15c      	bne.n	80050ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005032:	4b2c      	ldr	r3, [pc, #176]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800503c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d01f      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	429a      	cmp	r2, r3
 800504e:	d019      	beq.n	8005084 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005050:	4b24      	ldr	r3, [pc, #144]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800505a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800505c:	4b21      	ldr	r3, [pc, #132]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800505e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005062:	4a20      	ldr	r2, [pc, #128]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005068:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800506c:	4b1d      	ldr	r3, [pc, #116]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800506e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005072:	4a1c      	ldr	r2, [pc, #112]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005074:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005078:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800507c:	4a19      	ldr	r2, [pc, #100]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f003 0301 	and.w	r3, r3, #1
 800508a:	2b00      	cmp	r3, #0
 800508c:	d016      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800508e:	f7fe fd47 	bl	8003b20 <HAL_GetTick>
 8005092:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005094:	e00b      	b.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005096:	f7fe fd43 	bl	8003b20 <HAL_GetTick>
 800509a:	4602      	mov	r2, r0
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	1ad3      	subs	r3, r2, r3
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d902      	bls.n	80050ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80050a8:	2303      	movs	r3, #3
 80050aa:	74fb      	strb	r3, [r7, #19]
            break;
 80050ac:	e006      	b.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80050ae:	4b0d      	ldr	r3, [pc, #52]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	f003 0302 	and.w	r3, r3, #2
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d0ec      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80050bc:	7cfb      	ldrb	r3, [r7, #19]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10c      	bne.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050c2:	4b08      	ldr	r3, [pc, #32]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050d2:	4904      	ldr	r1, [pc, #16]	; (80050e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80050d4:	4313      	orrs	r3, r2
 80050d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050da:	e009      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050dc:	7cfb      	ldrb	r3, [r7, #19]
 80050de:	74bb      	strb	r3, [r7, #18]
 80050e0:	e006      	b.n	80050f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80050e2:	bf00      	nop
 80050e4:	40021000 	.word	0x40021000
 80050e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050f0:	7c7b      	ldrb	r3, [r7, #17]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d105      	bne.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050f6:	4b9e      	ldr	r3, [pc, #632]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050fa:	4a9d      	ldr	r2, [pc, #628]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800510e:	4b98      	ldr	r3, [pc, #608]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f023 0203 	bic.w	r2, r3, #3
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800511c:	4994      	ldr	r1, [pc, #592]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005130:	4b8f      	ldr	r3, [pc, #572]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f023 020c 	bic.w	r2, r3, #12
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800513e:	498c      	ldr	r1, [pc, #560]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005152:	4b87      	ldr	r3, [pc, #540]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005160:	4983      	ldr	r1, [pc, #524]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f003 0308 	and.w	r3, r3, #8
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005174:	4b7e      	ldr	r3, [pc, #504]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005182:	497b      	ldr	r1, [pc, #492]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0310 	and.w	r3, r3, #16
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005196:	4b76      	ldr	r3, [pc, #472]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051a4:	4972      	ldr	r1, [pc, #456]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0320 	and.w	r3, r3, #32
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80051b8:	4b6d      	ldr	r3, [pc, #436]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051c6:	496a      	ldr	r1, [pc, #424]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051da:	4b65      	ldr	r3, [pc, #404]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051e8:	4961      	ldr	r1, [pc, #388]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051fc:	4b5c      	ldr	r3, [pc, #368]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520a:	4959      	ldr	r1, [pc, #356]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800521e:	4b54      	ldr	r3, [pc, #336]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005224:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522c:	4950      	ldr	r1, [pc, #320]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800522e:	4313      	orrs	r3, r2
 8005230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005240:	4b4b      	ldr	r3, [pc, #300]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005242:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005246:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800524e:	4948      	ldr	r1, [pc, #288]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005250:	4313      	orrs	r3, r2
 8005252:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005262:	4b43      	ldr	r3, [pc, #268]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005270:	493f      	ldr	r1, [pc, #252]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005272:	4313      	orrs	r3, r2
 8005274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005280:	2b00      	cmp	r3, #0
 8005282:	d028      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005284:	4b3a      	ldr	r3, [pc, #232]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005292:	4937      	ldr	r1, [pc, #220]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005294:	4313      	orrs	r3, r2
 8005296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800529e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a2:	d106      	bne.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a4:	4b32      	ldr	r3, [pc, #200]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	4a31      	ldr	r2, [pc, #196]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052ae:	60d3      	str	r3, [r2, #12]
 80052b0:	e011      	b.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80052b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052ba:	d10c      	bne.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	3304      	adds	r3, #4
 80052c0:	2101      	movs	r1, #1
 80052c2:	4618      	mov	r0, r3
 80052c4:	f000 f8c8 	bl	8005458 <RCCEx_PLLSAI1_Config>
 80052c8:	4603      	mov	r3, r0
 80052ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052cc:	7cfb      	ldrb	r3, [r7, #19]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d001      	beq.n	80052d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d028      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e2:	4b23      	ldr	r3, [pc, #140]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f0:	491f      	ldr	r1, [pc, #124]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052f2:	4313      	orrs	r3, r2
 80052f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005300:	d106      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005302:	4b1b      	ldr	r3, [pc, #108]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4a1a      	ldr	r2, [pc, #104]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005308:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800530c:	60d3      	str	r3, [r2, #12]
 800530e:	e011      	b.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005314:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005318:	d10c      	bne.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3304      	adds	r3, #4
 800531e:	2101      	movs	r1, #1
 8005320:	4618      	mov	r0, r3
 8005322:	f000 f899 	bl	8005458 <RCCEx_PLLSAI1_Config>
 8005326:	4603      	mov	r3, r0
 8005328:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800532a:	7cfb      	ldrb	r3, [r7, #19]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d001      	beq.n	8005334 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005330:	7cfb      	ldrb	r3, [r7, #19]
 8005332:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800533c:	2b00      	cmp	r3, #0
 800533e:	d02b      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005340:	4b0b      	ldr	r3, [pc, #44]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005346:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800534e:	4908      	ldr	r1, [pc, #32]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005350:	4313      	orrs	r3, r2
 8005352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800535a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800535e:	d109      	bne.n	8005374 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005360:	4b03      	ldr	r3, [pc, #12]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	4a02      	ldr	r2, [pc, #8]	; (8005370 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005366:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800536a:	60d3      	str	r3, [r2, #12]
 800536c:	e014      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800536e:	bf00      	nop
 8005370:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005378:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800537c:	d10c      	bne.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3304      	adds	r3, #4
 8005382:	2101      	movs	r1, #1
 8005384:	4618      	mov	r0, r3
 8005386:	f000 f867 	bl	8005458 <RCCEx_PLLSAI1_Config>
 800538a:	4603      	mov	r3, r0
 800538c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800538e:	7cfb      	ldrb	r3, [r7, #19]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d001      	beq.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005394:	7cfb      	ldrb	r3, [r7, #19]
 8005396:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d02f      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053a4:	4b2b      	ldr	r3, [pc, #172]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053b2:	4928      	ldr	r1, [pc, #160]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80053c2:	d10d      	bne.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	2102      	movs	r1, #2
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f844 	bl	8005458 <RCCEx_PLLSAI1_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d014      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	74bb      	strb	r3, [r7, #18]
 80053de:	e011      	b.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80053e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053e8:	d10c      	bne.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	3320      	adds	r3, #32
 80053ee:	2102      	movs	r1, #2
 80053f0:	4618      	mov	r0, r3
 80053f2:	f000 f925 	bl	8005640 <RCCEx_PLLSAI2_Config>
 80053f6:	4603      	mov	r3, r0
 80053f8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053fa:	7cfb      	ldrb	r3, [r7, #19]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005400:	7cfb      	ldrb	r3, [r7, #19]
 8005402:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540c:	2b00      	cmp	r3, #0
 800540e:	d00a      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005410:	4b10      	ldr	r3, [pc, #64]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005412:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005416:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800541e:	490d      	ldr	r1, [pc, #52]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542e:	2b00      	cmp	r3, #0
 8005430:	d00b      	beq.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005432:	4b08      	ldr	r3, [pc, #32]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005442:	4904      	ldr	r1, [pc, #16]	; (8005454 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005444:	4313      	orrs	r3, r2
 8005446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800544a:	7cbb      	ldrb	r3, [r7, #18]
}
 800544c:	4618      	mov	r0, r3
 800544e:	3718      	adds	r7, #24
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}
 8005454:	40021000 	.word	0x40021000

08005458 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
 8005460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005462:	2300      	movs	r3, #0
 8005464:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005466:	4b75      	ldr	r3, [pc, #468]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	2b00      	cmp	r3, #0
 8005470:	d018      	beq.n	80054a4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005472:	4b72      	ldr	r3, [pc, #456]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0203 	and.w	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	429a      	cmp	r2, r3
 8005480:	d10d      	bne.n	800549e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
       ||
 8005486:	2b00      	cmp	r3, #0
 8005488:	d009      	beq.n	800549e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800548a:	4b6c      	ldr	r3, [pc, #432]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800548c:	68db      	ldr	r3, [r3, #12]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f003 0307 	and.w	r3, r3, #7
 8005494:	1c5a      	adds	r2, r3, #1
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
       ||
 800549a:	429a      	cmp	r2, r3
 800549c:	d047      	beq.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	73fb      	strb	r3, [r7, #15]
 80054a2:	e044      	b.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b03      	cmp	r3, #3
 80054aa:	d018      	beq.n	80054de <RCCEx_PLLSAI1_Config+0x86>
 80054ac:	2b03      	cmp	r3, #3
 80054ae:	d825      	bhi.n	80054fc <RCCEx_PLLSAI1_Config+0xa4>
 80054b0:	2b01      	cmp	r3, #1
 80054b2:	d002      	beq.n	80054ba <RCCEx_PLLSAI1_Config+0x62>
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d009      	beq.n	80054cc <RCCEx_PLLSAI1_Config+0x74>
 80054b8:	e020      	b.n	80054fc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054ba:	4b60      	ldr	r3, [pc, #384]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d11d      	bne.n	8005502 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054c6:	2301      	movs	r3, #1
 80054c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054ca:	e01a      	b.n	8005502 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054cc:	4b5b      	ldr	r3, [pc, #364]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d116      	bne.n	8005506 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054dc:	e013      	b.n	8005506 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054de:	4b57      	ldr	r3, [pc, #348]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10f      	bne.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054ea:	4b54      	ldr	r3, [pc, #336]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d109      	bne.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80054fa:	e006      	b.n	800550a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80054fc:	2301      	movs	r3, #1
 80054fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005500:	e004      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005502:	bf00      	nop
 8005504:	e002      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005506:	bf00      	nop
 8005508:	e000      	b.n	800550c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800550a:	bf00      	nop
    }

    if(status == HAL_OK)
 800550c:	7bfb      	ldrb	r3, [r7, #15]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10d      	bne.n	800552e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005512:	4b4a      	ldr	r3, [pc, #296]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6819      	ldr	r1, [r3, #0]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	3b01      	subs	r3, #1
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	430b      	orrs	r3, r1
 8005528:	4944      	ldr	r1, [pc, #272]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800552e:	7bfb      	ldrb	r3, [r7, #15]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d17d      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005534:	4b41      	ldr	r3, [pc, #260]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a40      	ldr	r2, [pc, #256]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800553a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800553e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005540:	f7fe faee 	bl	8003b20 <HAL_GetTick>
 8005544:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005546:	e009      	b.n	800555c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005548:	f7fe faea 	bl	8003b20 <HAL_GetTick>
 800554c:	4602      	mov	r2, r0
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	2b02      	cmp	r3, #2
 8005554:	d902      	bls.n	800555c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005556:	2303      	movs	r3, #3
 8005558:	73fb      	strb	r3, [r7, #15]
        break;
 800555a:	e005      	b.n	8005568 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800555c:	4b37      	ldr	r3, [pc, #220]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1ef      	bne.n	8005548 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005568:	7bfb      	ldrb	r3, [r7, #15]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d160      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d111      	bne.n	8005598 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005574:	4b31      	ldr	r3, [pc, #196]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005576:	691b      	ldr	r3, [r3, #16]
 8005578:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800557c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005580:	687a      	ldr	r2, [r7, #4]
 8005582:	6892      	ldr	r2, [r2, #8]
 8005584:	0211      	lsls	r1, r2, #8
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68d2      	ldr	r2, [r2, #12]
 800558a:	0912      	lsrs	r2, r2, #4
 800558c:	0452      	lsls	r2, r2, #17
 800558e:	430a      	orrs	r2, r1
 8005590:	492a      	ldr	r1, [pc, #168]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]
 8005596:	e027      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	2b01      	cmp	r3, #1
 800559c:	d112      	bne.n	80055c4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800559e:	4b27      	ldr	r3, [pc, #156]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055aa:	687a      	ldr	r2, [r7, #4]
 80055ac:	6892      	ldr	r2, [r2, #8]
 80055ae:	0211      	lsls	r1, r2, #8
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	6912      	ldr	r2, [r2, #16]
 80055b4:	0852      	lsrs	r2, r2, #1
 80055b6:	3a01      	subs	r2, #1
 80055b8:	0552      	lsls	r2, r2, #21
 80055ba:	430a      	orrs	r2, r1
 80055bc:	491f      	ldr	r1, [pc, #124]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	610b      	str	r3, [r1, #16]
 80055c2:	e011      	b.n	80055e8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c4:	4b1d      	ldr	r3, [pc, #116]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055cc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055d0:	687a      	ldr	r2, [r7, #4]
 80055d2:	6892      	ldr	r2, [r2, #8]
 80055d4:	0211      	lsls	r1, r2, #8
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6952      	ldr	r2, [r2, #20]
 80055da:	0852      	lsrs	r2, r2, #1
 80055dc:	3a01      	subs	r2, #1
 80055de:	0652      	lsls	r2, r2, #25
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4916      	ldr	r1, [pc, #88]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055e4:	4313      	orrs	r3, r2
 80055e6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055e8:	4b14      	ldr	r3, [pc, #80]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	4a13      	ldr	r2, [pc, #76]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055f2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055f4:	f7fe fa94 	bl	8003b20 <HAL_GetTick>
 80055f8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055fa:	e009      	b.n	8005610 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80055fc:	f7fe fa90 	bl	8003b20 <HAL_GetTick>
 8005600:	4602      	mov	r2, r0
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	1ad3      	subs	r3, r2, r3
 8005606:	2b02      	cmp	r3, #2
 8005608:	d902      	bls.n	8005610 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800560a:	2303      	movs	r3, #3
 800560c:	73fb      	strb	r3, [r7, #15]
          break;
 800560e:	e005      	b.n	800561c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d0ef      	beq.n	80055fc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	2b00      	cmp	r3, #0
 8005620:	d106      	bne.n	8005630 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005622:	4b06      	ldr	r3, [pc, #24]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005624:	691a      	ldr	r2, [r3, #16]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699b      	ldr	r3, [r3, #24]
 800562a:	4904      	ldr	r1, [pc, #16]	; (800563c <RCCEx_PLLSAI1_Config+0x1e4>)
 800562c:	4313      	orrs	r3, r2
 800562e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005630:	7bfb      	ldrb	r3, [r7, #15]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	40021000 	.word	0x40021000

08005640 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b084      	sub	sp, #16
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
 8005648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800564a:	2300      	movs	r3, #0
 800564c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800564e:	4b6a      	ldr	r3, [pc, #424]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	2b00      	cmp	r3, #0
 8005658:	d018      	beq.n	800568c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800565a:	4b67      	ldr	r3, [pc, #412]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0203 	and.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	429a      	cmp	r2, r3
 8005668:	d10d      	bne.n	8005686 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
       ||
 800566e:	2b00      	cmp	r3, #0
 8005670:	d009      	beq.n	8005686 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005672:	4b61      	ldr	r3, [pc, #388]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	091b      	lsrs	r3, r3, #4
 8005678:	f003 0307 	and.w	r3, r3, #7
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
       ||
 8005682:	429a      	cmp	r2, r3
 8005684:	d047      	beq.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	73fb      	strb	r3, [r7, #15]
 800568a:	e044      	b.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d018      	beq.n	80056c6 <RCCEx_PLLSAI2_Config+0x86>
 8005694:	2b03      	cmp	r3, #3
 8005696:	d825      	bhi.n	80056e4 <RCCEx_PLLSAI2_Config+0xa4>
 8005698:	2b01      	cmp	r3, #1
 800569a:	d002      	beq.n	80056a2 <RCCEx_PLLSAI2_Config+0x62>
 800569c:	2b02      	cmp	r3, #2
 800569e:	d009      	beq.n	80056b4 <RCCEx_PLLSAI2_Config+0x74>
 80056a0:	e020      	b.n	80056e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056a2:	4b55      	ldr	r3, [pc, #340]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0302 	and.w	r3, r3, #2
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d11d      	bne.n	80056ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056b2:	e01a      	b.n	80056ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056b4:	4b50      	ldr	r3, [pc, #320]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d116      	bne.n	80056ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056c0:	2301      	movs	r3, #1
 80056c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056c4:	e013      	b.n	80056ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056c6:	4b4c      	ldr	r3, [pc, #304]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10f      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056d2:	4b49      	ldr	r3, [pc, #292]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d109      	bne.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056de:	2301      	movs	r3, #1
 80056e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056e2:	e006      	b.n	80056f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	73fb      	strb	r3, [r7, #15]
      break;
 80056e8:	e004      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ea:	bf00      	nop
 80056ec:	e002      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056ee:	bf00      	nop
 80056f0:	e000      	b.n	80056f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80056f4:	7bfb      	ldrb	r3, [r7, #15]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d10d      	bne.n	8005716 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80056fa:	4b3f      	ldr	r3, [pc, #252]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056fc:	68db      	ldr	r3, [r3, #12]
 80056fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	6819      	ldr	r1, [r3, #0]
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	3b01      	subs	r3, #1
 800570c:	011b      	lsls	r3, r3, #4
 800570e:	430b      	orrs	r3, r1
 8005710:	4939      	ldr	r1, [pc, #228]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005716:	7bfb      	ldrb	r3, [r7, #15]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d167      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800571c:	4b36      	ldr	r3, [pc, #216]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a35      	ldr	r2, [pc, #212]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fe f9fa 	bl	8003b20 <HAL_GetTick>
 800572c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800572e:	e009      	b.n	8005744 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005730:	f7fe f9f6 	bl	8003b20 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b02      	cmp	r3, #2
 800573c:	d902      	bls.n	8005744 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	73fb      	strb	r3, [r7, #15]
        break;
 8005742:	e005      	b.n	8005750 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005744:	4b2c      	ldr	r3, [pc, #176]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1ef      	bne.n	8005730 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005750:	7bfb      	ldrb	r3, [r7, #15]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d14a      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d111      	bne.n	8005780 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800575c:	4b26      	ldr	r3, [pc, #152]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800575e:	695b      	ldr	r3, [r3, #20]
 8005760:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005764:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6892      	ldr	r2, [r2, #8]
 800576c:	0211      	lsls	r1, r2, #8
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	68d2      	ldr	r2, [r2, #12]
 8005772:	0912      	lsrs	r2, r2, #4
 8005774:	0452      	lsls	r2, r2, #17
 8005776:	430a      	orrs	r2, r1
 8005778:	491f      	ldr	r1, [pc, #124]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 800577a:	4313      	orrs	r3, r2
 800577c:	614b      	str	r3, [r1, #20]
 800577e:	e011      	b.n	80057a4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005780:	4b1d      	ldr	r3, [pc, #116]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005782:	695b      	ldr	r3, [r3, #20]
 8005784:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005788:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6892      	ldr	r2, [r2, #8]
 8005790:	0211      	lsls	r1, r2, #8
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6912      	ldr	r2, [r2, #16]
 8005796:	0852      	lsrs	r2, r2, #1
 8005798:	3a01      	subs	r2, #1
 800579a:	0652      	lsls	r2, r2, #25
 800579c:	430a      	orrs	r2, r1
 800579e:	4916      	ldr	r1, [pc, #88]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a0:	4313      	orrs	r3, r2
 80057a2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057a4:	4b14      	ldr	r3, [pc, #80]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4a13      	ldr	r2, [pc, #76]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fe f9b6 	bl	8003b20 <HAL_GetTick>
 80057b4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057b6:	e009      	b.n	80057cc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057b8:	f7fe f9b2 	bl	8003b20 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	68bb      	ldr	r3, [r7, #8]
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d902      	bls.n	80057cc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	73fb      	strb	r3, [r7, #15]
          break;
 80057ca:	e005      	b.n	80057d8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057cc:	4b0a      	ldr	r3, [pc, #40]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0ef      	beq.n	80057b8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057d8:	7bfb      	ldrb	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	4904      	ldr	r1, [pc, #16]	; (80057f8 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057e8:	4313      	orrs	r3, r2
 80057ea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000

080057fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b084      	sub	sp, #16
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e095      	b.n	800593a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	2b00      	cmp	r3, #0
 8005814:	d108      	bne.n	8005828 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800581e:	d009      	beq.n	8005834 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2200      	movs	r2, #0
 8005824:	61da      	str	r2, [r3, #28]
 8005826:	e005      	b.n	8005834 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b00      	cmp	r3, #0
 8005844:	d106      	bne.n	8005854 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2200      	movs	r2, #0
 800584a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f7fb fbe0 	bl	8001014 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800586a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68db      	ldr	r3, [r3, #12]
 8005870:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005874:	d902      	bls.n	800587c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005876:	2300      	movs	r3, #0
 8005878:	60fb      	str	r3, [r7, #12]
 800587a:	e002      	b.n	8005882 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800587c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005880:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800588a:	d007      	beq.n	800589c <HAL_SPI_Init+0xa0>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005894:	d002      	beq.n	800589c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80058ac:	431a      	orrs	r2, r3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	431a      	orrs	r2, r3
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	695b      	ldr	r3, [r3, #20]
 80058bc:	f003 0301 	and.w	r3, r3, #1
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	699b      	ldr	r3, [r3, #24]
 80058c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058ca:	431a      	orrs	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058d4:	431a      	orrs	r2, r3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058de:	ea42 0103 	orr.w	r1, r2, r3
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058e6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	699b      	ldr	r3, [r3, #24]
 80058f6:	0c1b      	lsrs	r3, r3, #16
 80058f8:	f003 0204 	and.w	r2, r3, #4
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005900:	f003 0310 	and.w	r3, r3, #16
 8005904:	431a      	orrs	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590a:	f003 0308 	and.w	r3, r3, #8
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	68db      	ldr	r3, [r3, #12]
 8005914:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005918:	ea42 0103 	orr.w	r1, r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	430a      	orrs	r2, r1
 8005928:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	2200      	movs	r2, #0
 800592e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	3710      	adds	r7, #16
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}

08005942 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005942:	b580      	push	{r7, lr}
 8005944:	b088      	sub	sp, #32
 8005946:	af00      	add	r7, sp, #0
 8005948:	60f8      	str	r0, [r7, #12]
 800594a:	60b9      	str	r1, [r7, #8]
 800594c:	603b      	str	r3, [r7, #0]
 800594e:	4613      	mov	r3, r2
 8005950:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800595c:	2b01      	cmp	r3, #1
 800595e:	d101      	bne.n	8005964 <HAL_SPI_Transmit+0x22>
 8005960:	2302      	movs	r3, #2
 8005962:	e15f      	b.n	8005c24 <HAL_SPI_Transmit+0x2e2>
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800596c:	f7fe f8d8 	bl	8003b20 <HAL_GetTick>
 8005970:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005972:	88fb      	ldrh	r3, [r7, #6]
 8005974:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800597c:	b2db      	uxtb	r3, r3
 800597e:	2b01      	cmp	r3, #1
 8005980:	d002      	beq.n	8005988 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005982:	2302      	movs	r3, #2
 8005984:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005986:	e148      	b.n	8005c1a <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 8005988:	68bb      	ldr	r3, [r7, #8]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d002      	beq.n	8005994 <HAL_SPI_Transmit+0x52>
 800598e:	88fb      	ldrh	r3, [r7, #6]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d102      	bne.n	800599a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005998:	e13f      	b.n	8005c1a <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2203      	movs	r2, #3
 800599e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2200      	movs	r2, #0
 80059a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	88fa      	ldrh	r2, [r7, #6]
 80059b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	88fa      	ldrh	r2, [r7, #6]
 80059b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	2200      	movs	r2, #0
 80059da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80059e4:	d10f      	bne.n	8005a06 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a04:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a10:	2b40      	cmp	r3, #64	; 0x40
 8005a12:	d007      	beq.n	8005a24 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a22:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	68db      	ldr	r3, [r3, #12]
 8005a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a2c:	d94f      	bls.n	8005ace <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <HAL_SPI_Transmit+0xfa>
 8005a36:	8afb      	ldrh	r3, [r7, #22]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d142      	bne.n	8005ac2 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a40:	881a      	ldrh	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a60:	e02f      	b.n	8005ac2 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f003 0302 	and.w	r3, r3, #2
 8005a6c:	2b02      	cmp	r3, #2
 8005a6e:	d112      	bne.n	8005a96 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	881a      	ldrh	r2, [r3, #0]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a80:	1c9a      	adds	r2, r3, #2
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005a8a:	b29b      	uxth	r3, r3
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	b29a      	uxth	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005a94:	e015      	b.n	8005ac2 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a96:	f7fe f843 	bl	8003b20 <HAL_GetTick>
 8005a9a:	4602      	mov	r2, r0
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	1ad3      	subs	r3, r2, r3
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	429a      	cmp	r2, r3
 8005aa4:	d803      	bhi.n	8005aae <HAL_SPI_Transmit+0x16c>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aac:	d102      	bne.n	8005ab4 <HAL_SPI_Transmit+0x172>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d106      	bne.n	8005ac2 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005ac0:	e0ab      	b.n	8005c1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ca      	bne.n	8005a62 <HAL_SPI_Transmit+0x120>
 8005acc:	e080      	b.n	8005bd0 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d002      	beq.n	8005adc <HAL_SPI_Transmit+0x19a>
 8005ad6:	8afb      	ldrh	r3, [r7, #22]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d174      	bne.n	8005bc6 <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ae0:	b29b      	uxth	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d912      	bls.n	8005b0c <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aea:	881a      	ldrh	r2, [r3, #0]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af6:	1c9a      	adds	r2, r3, #2
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	3b02      	subs	r3, #2
 8005b04:	b29a      	uxth	r2, r3
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b0a:	e05c      	b.n	8005bc6 <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	330c      	adds	r3, #12
 8005b16:	7812      	ldrb	r2, [r2, #0]
 8005b18:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b28:	b29b      	uxth	r3, r3
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	b29a      	uxth	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005b32:	e048      	b.n	8005bc6 <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f003 0302 	and.w	r3, r3, #2
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d12b      	bne.n	8005b9a <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d912      	bls.n	8005b72 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b50:	881a      	ldrh	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b5c:	1c9a      	adds	r2, r3, #2
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b66:	b29b      	uxth	r3, r3
 8005b68:	3b02      	subs	r3, #2
 8005b6a:	b29a      	uxth	r2, r3
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b70:	e029      	b.n	8005bc6 <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	330c      	adds	r3, #12
 8005b7c:	7812      	ldrb	r2, [r2, #0]
 8005b7e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b84:	1c5a      	adds	r2, r3, #1
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005b8e:	b29b      	uxth	r3, r3
 8005b90:	3b01      	subs	r3, #1
 8005b92:	b29a      	uxth	r2, r3
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005b98:	e015      	b.n	8005bc6 <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b9a:	f7fd ffc1 	bl	8003b20 <HAL_GetTick>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	1ad3      	subs	r3, r2, r3
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d803      	bhi.n	8005bb2 <HAL_SPI_Transmit+0x270>
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb0:	d102      	bne.n	8005bb8 <HAL_SPI_Transmit+0x276>
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d106      	bne.n	8005bc6 <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005bc4:	e029      	b.n	8005c1a <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1b1      	bne.n	8005b34 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd0:	69ba      	ldr	r2, [r7, #24]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fcf9 	bl	80065cc <SPI_EndRxTxTransaction>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d10a      	bne.n	8005c04 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bee:	2300      	movs	r3, #0
 8005bf0:	613b      	str	r3, [r7, #16]
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	613b      	str	r3, [r7, #16]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d002      	beq.n	8005c12 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	77fb      	strb	r3, [r7, #31]
 8005c10:	e003      	b.n	8005c1a <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c22:	7ffb      	ldrb	r3, [r7, #31]
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3720      	adds	r7, #32
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b088      	sub	sp, #32
 8005c30:	af02      	add	r7, sp, #8
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	603b      	str	r3, [r7, #0]
 8005c38:	4613      	mov	r3, r2
 8005c3a:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d002      	beq.n	8005c52 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8005c4c:	2302      	movs	r3, #2
 8005c4e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005c50:	e11a      	b.n	8005e88 <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d112      	bne.n	8005c82 <HAL_SPI_Receive+0x56>
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d10e      	bne.n	8005c82 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2204      	movs	r2, #4
 8005c68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005c6c:	88fa      	ldrh	r2, [r7, #6]
 8005c6e:	683b      	ldr	r3, [r7, #0]
 8005c70:	9300      	str	r3, [sp, #0]
 8005c72:	4613      	mov	r3, r2
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	68b9      	ldr	r1, [r7, #8]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f000 f90e 	bl	8005e9a <HAL_SPI_TransmitReceive>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	e107      	b.n	8005e92 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c88:	2b01      	cmp	r3, #1
 8005c8a:	d101      	bne.n	8005c90 <HAL_SPI_Receive+0x64>
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	e100      	b.n	8005e92 <HAL_SPI_Receive+0x266>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c98:	f7fd ff42 	bl	8003b20 <HAL_GetTick>
 8005c9c:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d002      	beq.n	8005caa <HAL_SPI_Receive+0x7e>
 8005ca4:	88fb      	ldrh	r3, [r7, #6]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005cae:	e0eb      	b.n	8005e88 <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2204      	movs	r2, #4
 8005cb4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	68ba      	ldr	r2, [r7, #8]
 8005cc2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	88fa      	ldrh	r2, [r7, #6]
 8005cc8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	88fa      	ldrh	r2, [r7, #6]
 8005cd0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	68db      	ldr	r3, [r3, #12]
 8005cf6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cfa:	d908      	bls.n	8005d0e <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	e007      	b.n	8005d1e <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d1c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d26:	d10f      	bne.n	8005d48 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	681a      	ldr	r2, [r3, #0]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005d46:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d52:	2b40      	cmp	r3, #64	; 0x40
 8005d54:	d007      	beq.n	8005d66 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	681a      	ldr	r2, [r3, #0]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d64:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d6e:	d86f      	bhi.n	8005e50 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005d70:	e034      	b.n	8005ddc <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f003 0301 	and.w	r3, r3, #1
 8005d7c:	2b01      	cmp	r3, #1
 8005d7e:	d117      	bne.n	8005db0 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f103 020c 	add.w	r2, r3, #12
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d8c:	7812      	ldrb	r2, [r2, #0]
 8005d8e:	b2d2      	uxtb	r2, r2
 8005d90:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005da2:	b29b      	uxth	r3, r3
 8005da4:	3b01      	subs	r3, #1
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005dae:	e015      	b.n	8005ddc <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005db0:	f7fd feb6 	bl	8003b20 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d803      	bhi.n	8005dc8 <HAL_SPI_Receive+0x19c>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dc6:	d102      	bne.n	8005dce <HAL_SPI_Receive+0x1a2>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d106      	bne.n	8005ddc <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005dda:	e055      	b.n	8005e88 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1c4      	bne.n	8005d72 <HAL_SPI_Receive+0x146>
 8005de8:	e038      	b.n	8005e5c <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	f003 0301 	and.w	r3, r3, #1
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d115      	bne.n	8005e24 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	68da      	ldr	r2, [r3, #12]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e02:	b292      	uxth	r2, r2
 8005e04:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	1c9a      	adds	r2, r3, #2
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005e22:	e015      	b.n	8005e50 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e24:	f7fd fe7c 	bl	8003b20 <HAL_GetTick>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	1ad3      	subs	r3, r2, r3
 8005e2e:	683a      	ldr	r2, [r7, #0]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d803      	bhi.n	8005e3c <HAL_SPI_Receive+0x210>
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e3a:	d102      	bne.n	8005e42 <HAL_SPI_Receive+0x216>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d106      	bne.n	8005e50 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2201      	movs	r2, #1
 8005e4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005e4e:	e01b      	b.n	8005e88 <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1c6      	bne.n	8005dea <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005e5c:	693a      	ldr	r2, [r7, #16]
 8005e5e:	6839      	ldr	r1, [r7, #0]
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fb5b 	bl	800651c <SPI_EndRxTransaction>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d002      	beq.n	8005e72 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2220      	movs	r2, #32
 8005e70:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d002      	beq.n	8005e80 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	75fb      	strb	r3, [r7, #23]
 8005e7e:	e003      	b.n	8005e88 <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e90:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005e9a:	b580      	push	{r7, lr}
 8005e9c:	b08a      	sub	sp, #40	; 0x28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
 8005ea6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d101      	bne.n	8005ec0 <HAL_SPI_TransmitReceive+0x26>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	e20a      	b.n	80062d6 <HAL_SPI_TransmitReceive+0x43c>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2201      	movs	r2, #1
 8005ec4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ec8:	f7fd fe2a 	bl	8003b20 <HAL_GetTick>
 8005ecc:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005ed4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005edc:	887b      	ldrh	r3, [r7, #2]
 8005ede:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005ee0:	887b      	ldrh	r3, [r7, #2]
 8005ee2:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005ee4:	7efb      	ldrb	r3, [r7, #27]
 8005ee6:	2b01      	cmp	r3, #1
 8005ee8:	d00e      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x6e>
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ef0:	d106      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d102      	bne.n	8005f00 <HAL_SPI_TransmitReceive+0x66>
 8005efa:	7efb      	ldrb	r3, [r7, #27]
 8005efc:	2b04      	cmp	r3, #4
 8005efe:	d003      	beq.n	8005f08 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005f00:	2302      	movs	r3, #2
 8005f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f06:	e1e0      	b.n	80062ca <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005f08:	68bb      	ldr	r3, [r7, #8]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d005      	beq.n	8005f1a <HAL_SPI_TransmitReceive+0x80>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d002      	beq.n	8005f1a <HAL_SPI_TransmitReceive+0x80>
 8005f14:	887b      	ldrh	r3, [r7, #2]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d103      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005f20:	e1d3      	b.n	80062ca <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b04      	cmp	r3, #4
 8005f2c:	d003      	beq.n	8005f36 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2205      	movs	r2, #5
 8005f32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	687a      	ldr	r2, [r7, #4]
 8005f40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	887a      	ldrh	r2, [r7, #2]
 8005f46:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	887a      	ldrh	r2, [r7, #2]
 8005f4e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	68ba      	ldr	r2, [r7, #8]
 8005f56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	887a      	ldrh	r2, [r7, #2]
 8005f5c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	887a      	ldrh	r2, [r7, #2]
 8005f62:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f78:	d802      	bhi.n	8005f80 <HAL_SPI_TransmitReceive+0xe6>
 8005f7a:	8a3b      	ldrh	r3, [r7, #16]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d908      	bls.n	8005f92 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685a      	ldr	r2, [r3, #4]
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f8e:	605a      	str	r2, [r3, #4]
 8005f90:	e007      	b.n	8005fa2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	685a      	ldr	r2, [r3, #4]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005fa0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fac:	2b40      	cmp	r3, #64	; 0x40
 8005fae:	d007      	beq.n	8005fc0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005fbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005fc8:	f240 8081 	bls.w	80060ce <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <HAL_SPI_TransmitReceive+0x140>
 8005fd4:	8a7b      	ldrh	r3, [r7, #18]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d16d      	bne.n	80060b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	881a      	ldrh	r2, [r3, #0]
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fea:	1c9a      	adds	r2, r3, #2
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	3b01      	subs	r3, #1
 8005ff8:	b29a      	uxth	r2, r3
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffe:	e05a      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	f003 0302 	and.w	r3, r3, #2
 800600a:	2b02      	cmp	r3, #2
 800600c:	d11b      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x1ac>
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006012:	b29b      	uxth	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d016      	beq.n	8006046 <HAL_SPI_TransmitReceive+0x1ac>
 8006018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800601a:	2b01      	cmp	r3, #1
 800601c:	d113      	bne.n	8006046 <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006022:	881a      	ldrh	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	1c9a      	adds	r2, r3, #2
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006042:	2300      	movs	r3, #0
 8006044:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f003 0301 	and.w	r3, r3, #1
 8006050:	2b01      	cmp	r3, #1
 8006052:	d11c      	bne.n	800608e <HAL_SPI_TransmitReceive+0x1f4>
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800605a:	b29b      	uxth	r3, r3
 800605c:	2b00      	cmp	r3, #0
 800605e:	d016      	beq.n	800608e <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	68da      	ldr	r2, [r3, #12]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	b292      	uxth	r2, r2
 800606c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006072:	1c9a      	adds	r2, r3, #2
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800607e:	b29b      	uxth	r3, r3
 8006080:	3b01      	subs	r3, #1
 8006082:	b29a      	uxth	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608a:	2301      	movs	r3, #1
 800608c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800608e:	f7fd fd47 	bl	8003b20 <HAL_GetTick>
 8006092:	4602      	mov	r2, r0
 8006094:	69fb      	ldr	r3, [r7, #28]
 8006096:	1ad3      	subs	r3, r2, r3
 8006098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609a:	429a      	cmp	r2, r3
 800609c:	d80b      	bhi.n	80060b6 <HAL_SPI_TransmitReceive+0x21c>
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d007      	beq.n	80060b6 <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80060b4:	e109      	b.n	80062ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d19f      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x166>
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d199      	bne.n	8006000 <HAL_SPI_TransmitReceive+0x166>
 80060cc:	e0e3      	b.n	8006296 <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d003      	beq.n	80060de <HAL_SPI_TransmitReceive+0x244>
 80060d6:	8a7b      	ldrh	r3, [r7, #18]
 80060d8:	2b01      	cmp	r3, #1
 80060da:	f040 80cf 	bne.w	800627c <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80060e2:	b29b      	uxth	r3, r3
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d912      	bls.n	800610e <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ec:	881a      	ldrh	r2, [r3, #0]
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060f8:	1c9a      	adds	r2, r3, #2
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006102:	b29b      	uxth	r3, r3
 8006104:	3b02      	subs	r3, #2
 8006106:	b29a      	uxth	r2, r3
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800610c:	e0b6      	b.n	800627c <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	7812      	ldrb	r2, [r2, #0]
 800611a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800612a:	b29b      	uxth	r3, r3
 800612c:	3b01      	subs	r3, #1
 800612e:	b29a      	uxth	r2, r3
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006134:	e0a2      	b.n	800627c <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0302 	and.w	r3, r3, #2
 8006140:	2b02      	cmp	r3, #2
 8006142:	d134      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x314>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006148:	b29b      	uxth	r3, r3
 800614a:	2b00      	cmp	r3, #0
 800614c:	d02f      	beq.n	80061ae <HAL_SPI_TransmitReceive+0x314>
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	2b01      	cmp	r3, #1
 8006152:	d12c      	bne.n	80061ae <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006158:	b29b      	uxth	r3, r3
 800615a:	2b01      	cmp	r3, #1
 800615c:	d912      	bls.n	8006184 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006162:	881a      	ldrh	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800616e:	1c9a      	adds	r2, r3, #2
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006178:	b29b      	uxth	r3, r3
 800617a:	3b02      	subs	r3, #2
 800617c:	b29a      	uxth	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006182:	e012      	b.n	80061aa <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	330c      	adds	r3, #12
 800618e:	7812      	ldrb	r2, [r2, #0]
 8006190:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29a      	uxth	r2, r3
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80061aa:	2300      	movs	r3, #0
 80061ac:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f003 0301 	and.w	r3, r3, #1
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d148      	bne.n	800624e <HAL_SPI_TransmitReceive+0x3b4>
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d042      	beq.n	800624e <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d923      	bls.n	800621c <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68da      	ldr	r2, [r3, #12]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061de:	b292      	uxth	r2, r2
 80061e0:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061e6:	1c9a      	adds	r2, r3, #2
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80061f2:	b29b      	uxth	r3, r3
 80061f4:	3b02      	subs	r3, #2
 80061f6:	b29a      	uxth	r2, r3
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006204:	b29b      	uxth	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d81f      	bhi.n	800624a <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	685a      	ldr	r2, [r3, #4]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006218:	605a      	str	r2, [r3, #4]
 800621a:	e016      	b.n	800624a <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f103 020c 	add.w	r2, r3, #12
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006228:	7812      	ldrb	r2, [r2, #0]
 800622a:	b2d2      	uxtb	r2, r2
 800622c:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006232:	1c5a      	adds	r2, r3, #1
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800623e:	b29b      	uxth	r3, r3
 8006240:	3b01      	subs	r3, #1
 8006242:	b29a      	uxth	r2, r3
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800624a:	2301      	movs	r3, #1
 800624c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800624e:	f7fd fc67 	bl	8003b20 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800625a:	429a      	cmp	r2, r3
 800625c:	d803      	bhi.n	8006266 <HAL_SPI_TransmitReceive+0x3cc>
 800625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006264:	d102      	bne.n	800626c <HAL_SPI_TransmitReceive+0x3d2>
 8006266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 800626c:	2303      	movs	r3, #3
 800626e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2201      	movs	r2, #1
 8006276:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 800627a:	e026      	b.n	80062ca <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006280:	b29b      	uxth	r3, r3
 8006282:	2b00      	cmp	r3, #0
 8006284:	f47f af57 	bne.w	8006136 <HAL_SPI_TransmitReceive+0x29c>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800628e:	b29b      	uxth	r3, r3
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f af50 	bne.w	8006136 <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006296:	69fa      	ldr	r2, [r7, #28]
 8006298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800629a:	68f8      	ldr	r0, [r7, #12]
 800629c:	f000 f996 	bl	80065cc <SPI_EndRxTxTransaction>
 80062a0:	4603      	mov	r3, r0
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d005      	beq.n	80062b2 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	2220      	movs	r2, #32
 80062b0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80062c0:	e003      	b.n	80062ca <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2201      	movs	r2, #1
 80062c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	2200      	movs	r2, #0
 80062ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80062d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3728      	adds	r7, #40	; 0x28
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
	...

080062e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b088      	sub	sp, #32
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	603b      	str	r3, [r7, #0]
 80062ec:	4613      	mov	r3, r2
 80062ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80062f0:	f7fd fc16 	bl	8003b20 <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f8:	1a9b      	subs	r3, r3, r2
 80062fa:	683a      	ldr	r2, [r7, #0]
 80062fc:	4413      	add	r3, r2
 80062fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006300:	f7fd fc0e 	bl	8003b20 <HAL_GetTick>
 8006304:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006306:	4b39      	ldr	r3, [pc, #228]	; (80063ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	015b      	lsls	r3, r3, #5
 800630c:	0d1b      	lsrs	r3, r3, #20
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	fb02 f303 	mul.w	r3, r2, r3
 8006314:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006316:	e054      	b.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800631e:	d050      	beq.n	80063c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006320:	f7fd fbfe 	bl	8003b20 <HAL_GetTick>
 8006324:	4602      	mov	r2, r0
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	1ad3      	subs	r3, r2, r3
 800632a:	69fa      	ldr	r2, [r7, #28]
 800632c:	429a      	cmp	r2, r3
 800632e:	d902      	bls.n	8006336 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006330:	69fb      	ldr	r3, [r7, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d13d      	bne.n	80063b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	685a      	ldr	r2, [r3, #4]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006344:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800634e:	d111      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006358:	d004      	beq.n	8006364 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	689b      	ldr	r3, [r3, #8]
 800635e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006362:	d107      	bne.n	8006374 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006372:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006378:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800637c:	d10f      	bne.n	800639e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681a      	ldr	r2, [r3, #0]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800638c:	601a      	str	r2, [r3, #0]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	681a      	ldr	r2, [r3, #0]
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800639c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	2200      	movs	r2, #0
 80063aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80063ae:	2303      	movs	r3, #3
 80063b0:	e017      	b.n	80063e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d101      	bne.n	80063bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80063b8:	2300      	movs	r3, #0
 80063ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	3b01      	subs	r3, #1
 80063c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689a      	ldr	r2, [r3, #8]
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	4013      	ands	r3, r2
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	429a      	cmp	r2, r3
 80063d0:	bf0c      	ite	eq
 80063d2:	2301      	moveq	r3, #1
 80063d4:	2300      	movne	r3, #0
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	461a      	mov	r2, r3
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d19b      	bne.n	8006318 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80063e0:	2300      	movs	r3, #0
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3720      	adds	r7, #32
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	20000000 	.word	0x20000000

080063f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80063fe:	2300      	movs	r3, #0
 8006400:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006402:	f7fd fb8d 	bl	8003b20 <HAL_GetTick>
 8006406:	4602      	mov	r2, r0
 8006408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800640a:	1a9b      	subs	r3, r3, r2
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	4413      	add	r3, r2
 8006410:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006412:	f7fd fb85 	bl	8003b20 <HAL_GetTick>
 8006416:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	330c      	adds	r3, #12
 800641e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006420:	4b3d      	ldr	r3, [pc, #244]	; (8006518 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006422:	681a      	ldr	r2, [r3, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	009b      	lsls	r3, r3, #2
 8006428:	4413      	add	r3, r2
 800642a:	00da      	lsls	r2, r3, #3
 800642c:	1ad3      	subs	r3, r2, r3
 800642e:	0d1b      	lsrs	r3, r3, #20
 8006430:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006432:	fb02 f303 	mul.w	r3, r2, r3
 8006436:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006438:	e060      	b.n	80064fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006440:	d107      	bne.n	8006452 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	d104      	bne.n	8006452 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	781b      	ldrb	r3, [r3, #0]
 800644c:	b2db      	uxtb	r3, r3
 800644e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006450:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006458:	d050      	beq.n	80064fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800645a:	f7fd fb61 	bl	8003b20 <HAL_GetTick>
 800645e:	4602      	mov	r2, r0
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	1ad3      	subs	r3, r2, r3
 8006464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006466:	429a      	cmp	r2, r3
 8006468:	d902      	bls.n	8006470 <SPI_WaitFifoStateUntilTimeout+0x80>
 800646a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800646c:	2b00      	cmp	r3, #0
 800646e:	d13d      	bne.n	80064ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	685a      	ldr	r2, [r3, #4]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800647e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	685b      	ldr	r3, [r3, #4]
 8006484:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006488:	d111      	bne.n	80064ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006492:	d004      	beq.n	800649e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800649c:	d107      	bne.n	80064ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064b6:	d10f      	bne.n	80064d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	681a      	ldr	r2, [r3, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80064d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80064e8:	2303      	movs	r3, #3
 80064ea:	e010      	b.n	800650e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80064ec:	69bb      	ldr	r3, [r7, #24]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d101      	bne.n	80064f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80064f2:	2300      	movs	r3, #0
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	3b01      	subs	r3, #1
 80064fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	689a      	ldr	r2, [r3, #8]
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	4013      	ands	r3, r2
 8006506:	687a      	ldr	r2, [r7, #4]
 8006508:	429a      	cmp	r2, r3
 800650a:	d196      	bne.n	800643a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800650c:	2300      	movs	r3, #0
}
 800650e:	4618      	mov	r0, r3
 8006510:	3728      	adds	r7, #40	; 0x28
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	20000000 	.word	0x20000000

0800651c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af02      	add	r7, sp, #8
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	60b9      	str	r1, [r7, #8]
 8006526:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006530:	d111      	bne.n	8006556 <SPI_EndRxTransaction+0x3a>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800653a:	d004      	beq.n	8006546 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	689b      	ldr	r3, [r3, #8]
 8006540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006544:	d107      	bne.n	8006556 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006554:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	9300      	str	r3, [sp, #0]
 800655a:	68bb      	ldr	r3, [r7, #8]
 800655c:	2200      	movs	r2, #0
 800655e:	2180      	movs	r1, #128	; 0x80
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7ff febd 	bl	80062e0 <SPI_WaitFlagStateUntilTimeout>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d007      	beq.n	800657c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006570:	f043 0220 	orr.w	r2, r3, #32
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006578:	2303      	movs	r3, #3
 800657a:	e023      	b.n	80065c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006584:	d11d      	bne.n	80065c2 <SPI_EndRxTransaction+0xa6>
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800658e:	d004      	beq.n	800659a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006598:	d113      	bne.n	80065c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	9300      	str	r3, [sp, #0]
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7ff ff22 	bl	80063f0 <SPI_WaitFifoStateUntilTimeout>
 80065ac:	4603      	mov	r3, r0
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d007      	beq.n	80065c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065b6:	f043 0220 	orr.w	r2, r3, #32
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e000      	b.n	80065c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b086      	sub	sp, #24
 80065d0:	af02      	add	r7, sp, #8
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	9300      	str	r3, [sp, #0]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	2200      	movs	r2, #0
 80065e0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff03 	bl	80063f0 <SPI_WaitFifoStateUntilTimeout>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d007      	beq.n	8006600 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80065f4:	f043 0220 	orr.w	r2, r3, #32
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80065fc:	2303      	movs	r3, #3
 80065fe:	e027      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	9300      	str	r3, [sp, #0]
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	2200      	movs	r2, #0
 8006608:	2180      	movs	r1, #128	; 0x80
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fe68 	bl	80062e0 <SPI_WaitFlagStateUntilTimeout>
 8006610:	4603      	mov	r3, r0
 8006612:	2b00      	cmp	r3, #0
 8006614:	d007      	beq.n	8006626 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800661a:	f043 0220 	orr.w	r2, r3, #32
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006622:	2303      	movs	r3, #3
 8006624:	e014      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	68bb      	ldr	r3, [r7, #8]
 800662c:	2200      	movs	r2, #0
 800662e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006632:	68f8      	ldr	r0, [r7, #12]
 8006634:	f7ff fedc 	bl	80063f0 <SPI_WaitFifoStateUntilTimeout>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d007      	beq.n	800664e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006642:	f043 0220 	orr.w	r2, r3, #32
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e000      	b.n	8006650 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e040      	b.n	80066ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800666e:	2b00      	cmp	r3, #0
 8006670:	d106      	bne.n	8006680 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa fea6 	bl	80013cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2224      	movs	r2, #36	; 0x24
 8006684:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f022 0201 	bic.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669a:	2b00      	cmp	r3, #0
 800669c:	d002      	beq.n	80066a4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fb6a 	bl	8006d78 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f8af 	bl	8006808 <UART_SetConfig>
 80066aa:	4603      	mov	r3, r0
 80066ac:	2b01      	cmp	r3, #1
 80066ae:	d101      	bne.n	80066b4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80066b0:	2301      	movs	r3, #1
 80066b2:	e01b      	b.n	80066ec <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	685a      	ldr	r2, [r3, #4]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	689a      	ldr	r2, [r3, #8]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f042 0201 	orr.w	r2, r2, #1
 80066e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80066e4:	6878      	ldr	r0, [r7, #4]
 80066e6:	f000 fbe9 	bl	8006ebc <UART_CheckIdleState>
 80066ea:	4603      	mov	r3, r0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3708      	adds	r7, #8
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08a      	sub	sp, #40	; 0x28
 80066f8:	af02      	add	r7, sp, #8
 80066fa:	60f8      	str	r0, [r7, #12]
 80066fc:	60b9      	str	r1, [r7, #8]
 80066fe:	603b      	str	r3, [r7, #0]
 8006700:	4613      	mov	r3, r2
 8006702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006708:	2b20      	cmp	r3, #32
 800670a:	d178      	bne.n	80067fe <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_UART_Transmit+0x24>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e071      	b.n	8006800 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	2200      	movs	r2, #0
 8006720:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2221      	movs	r2, #33	; 0x21
 8006728:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800672a:	f7fd f9f9 	bl	8003b20 <HAL_GetTick>
 800672e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	88fa      	ldrh	r2, [r7, #6]
 8006734:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	88fa      	ldrh	r2, [r7, #6]
 800673c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	689b      	ldr	r3, [r3, #8]
 8006744:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006748:	d108      	bne.n	800675c <HAL_UART_Transmit+0x68>
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d104      	bne.n	800675c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006752:	2300      	movs	r3, #0
 8006754:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	61bb      	str	r3, [r7, #24]
 800675a:	e003      	b.n	8006764 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006760:	2300      	movs	r3, #0
 8006762:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006764:	e030      	b.n	80067c8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	9300      	str	r3, [sp, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	2200      	movs	r2, #0
 800676e:	2180      	movs	r1, #128	; 0x80
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 fc4b 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d004      	beq.n	8006786 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2220      	movs	r2, #32
 8006780:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8006782:	2303      	movs	r3, #3
 8006784:	e03c      	b.n	8006800 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d10b      	bne.n	80067a4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800678c:	69bb      	ldr	r3, [r7, #24]
 800678e:	881a      	ldrh	r2, [r3, #0]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006798:	b292      	uxth	r2, r2
 800679a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800679c:	69bb      	ldr	r3, [r7, #24]
 800679e:	3302      	adds	r3, #2
 80067a0:	61bb      	str	r3, [r7, #24]
 80067a2:	e008      	b.n	80067b6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	781a      	ldrb	r2, [r3, #0]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	b292      	uxth	r2, r2
 80067ae:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	3301      	adds	r3, #1
 80067b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067bc:	b29b      	uxth	r3, r3
 80067be:	3b01      	subs	r3, #1
 80067c0:	b29a      	uxth	r2, r3
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1c8      	bne.n	8006766 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	9300      	str	r3, [sp, #0]
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	2200      	movs	r2, #0
 80067dc:	2140      	movs	r1, #64	; 0x40
 80067de:	68f8      	ldr	r0, [r7, #12]
 80067e0:	f000 fc14 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 80067e4:	4603      	mov	r3, r0
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d004      	beq.n	80067f4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e005      	b.n	8006800 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2220      	movs	r2, #32
 80067f8:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	e000      	b.n	8006800 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80067fe:	2302      	movs	r3, #2
  }
}
 8006800:	4618      	mov	r0, r3
 8006802:	3720      	adds	r7, #32
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800680c:	b08a      	sub	sp, #40	; 0x28
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006812:	2300      	movs	r3, #0
 8006814:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	689a      	ldr	r2, [r3, #8]
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	431a      	orrs	r2, r3
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	695b      	ldr	r3, [r3, #20]
 8006826:	431a      	orrs	r2, r3
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	69db      	ldr	r3, [r3, #28]
 800682c:	4313      	orrs	r3, r2
 800682e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4ba4      	ldr	r3, [pc, #656]	; (8006ac8 <UART_SetConfig+0x2c0>)
 8006838:	4013      	ands	r3, r2
 800683a:	68fa      	ldr	r2, [r7, #12]
 800683c:	6812      	ldr	r2, [r2, #0]
 800683e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006840:	430b      	orrs	r3, r1
 8006842:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	68da      	ldr	r2, [r3, #12]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	699b      	ldr	r3, [r3, #24]
 800685e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	4a99      	ldr	r2, [pc, #612]	; (8006acc <UART_SetConfig+0x2c4>)
 8006866:	4293      	cmp	r3, r2
 8006868:	d004      	beq.n	8006874 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006870:	4313      	orrs	r3, r2
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006884:	430a      	orrs	r2, r1
 8006886:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a90      	ldr	r2, [pc, #576]	; (8006ad0 <UART_SetConfig+0x2c8>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d126      	bne.n	80068e0 <UART_SetConfig+0xd8>
 8006892:	4b90      	ldr	r3, [pc, #576]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006898:	f003 0303 	and.w	r3, r3, #3
 800689c:	2b03      	cmp	r3, #3
 800689e:	d81b      	bhi.n	80068d8 <UART_SetConfig+0xd0>
 80068a0:	a201      	add	r2, pc, #4	; (adr r2, 80068a8 <UART_SetConfig+0xa0>)
 80068a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068a6:	bf00      	nop
 80068a8:	080068b9 	.word	0x080068b9
 80068ac:	080068c9 	.word	0x080068c9
 80068b0:	080068c1 	.word	0x080068c1
 80068b4:	080068d1 	.word	0x080068d1
 80068b8:	2301      	movs	r3, #1
 80068ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068be:	e116      	b.n	8006aee <UART_SetConfig+0x2e6>
 80068c0:	2302      	movs	r3, #2
 80068c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068c6:	e112      	b.n	8006aee <UART_SetConfig+0x2e6>
 80068c8:	2304      	movs	r3, #4
 80068ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ce:	e10e      	b.n	8006aee <UART_SetConfig+0x2e6>
 80068d0:	2308      	movs	r3, #8
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e10a      	b.n	8006aee <UART_SetConfig+0x2e6>
 80068d8:	2310      	movs	r3, #16
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e106      	b.n	8006aee <UART_SetConfig+0x2e6>
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	4a7c      	ldr	r2, [pc, #496]	; (8006ad8 <UART_SetConfig+0x2d0>)
 80068e6:	4293      	cmp	r3, r2
 80068e8:	d138      	bne.n	800695c <UART_SetConfig+0x154>
 80068ea:	4b7a      	ldr	r3, [pc, #488]	; (8006ad4 <UART_SetConfig+0x2cc>)
 80068ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068f0:	f003 030c 	and.w	r3, r3, #12
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d82d      	bhi.n	8006954 <UART_SetConfig+0x14c>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <UART_SetConfig+0xf8>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006935 	.word	0x08006935
 8006904:	08006955 	.word	0x08006955
 8006908:	08006955 	.word	0x08006955
 800690c:	08006955 	.word	0x08006955
 8006910:	08006945 	.word	0x08006945
 8006914:	08006955 	.word	0x08006955
 8006918:	08006955 	.word	0x08006955
 800691c:	08006955 	.word	0x08006955
 8006920:	0800693d 	.word	0x0800693d
 8006924:	08006955 	.word	0x08006955
 8006928:	08006955 	.word	0x08006955
 800692c:	08006955 	.word	0x08006955
 8006930:	0800694d 	.word	0x0800694d
 8006934:	2300      	movs	r3, #0
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693a:	e0d8      	b.n	8006aee <UART_SetConfig+0x2e6>
 800693c:	2302      	movs	r3, #2
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006942:	e0d4      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006944:	2304      	movs	r3, #4
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694a:	e0d0      	b.n	8006aee <UART_SetConfig+0x2e6>
 800694c:	2308      	movs	r3, #8
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006952:	e0cc      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006954:	2310      	movs	r3, #16
 8006956:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800695a:	e0c8      	b.n	8006aee <UART_SetConfig+0x2e6>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	4a5e      	ldr	r2, [pc, #376]	; (8006adc <UART_SetConfig+0x2d4>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d125      	bne.n	80069b2 <UART_SetConfig+0x1aa>
 8006966:	4b5b      	ldr	r3, [pc, #364]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800696c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006970:	2b30      	cmp	r3, #48	; 0x30
 8006972:	d016      	beq.n	80069a2 <UART_SetConfig+0x19a>
 8006974:	2b30      	cmp	r3, #48	; 0x30
 8006976:	d818      	bhi.n	80069aa <UART_SetConfig+0x1a2>
 8006978:	2b20      	cmp	r3, #32
 800697a:	d00a      	beq.n	8006992 <UART_SetConfig+0x18a>
 800697c:	2b20      	cmp	r3, #32
 800697e:	d814      	bhi.n	80069aa <UART_SetConfig+0x1a2>
 8006980:	2b00      	cmp	r3, #0
 8006982:	d002      	beq.n	800698a <UART_SetConfig+0x182>
 8006984:	2b10      	cmp	r3, #16
 8006986:	d008      	beq.n	800699a <UART_SetConfig+0x192>
 8006988:	e00f      	b.n	80069aa <UART_SetConfig+0x1a2>
 800698a:	2300      	movs	r3, #0
 800698c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006990:	e0ad      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006992:	2302      	movs	r3, #2
 8006994:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006998:	e0a9      	b.n	8006aee <UART_SetConfig+0x2e6>
 800699a:	2304      	movs	r3, #4
 800699c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a0:	e0a5      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069a2:	2308      	movs	r3, #8
 80069a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069a8:	e0a1      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069aa:	2310      	movs	r3, #16
 80069ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069b0:	e09d      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a4a      	ldr	r2, [pc, #296]	; (8006ae0 <UART_SetConfig+0x2d8>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0x200>
 80069bc:	4b45      	ldr	r3, [pc, #276]	; (8006ad4 <UART_SetConfig+0x2cc>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80069c6:	2bc0      	cmp	r3, #192	; 0xc0
 80069c8:	d016      	beq.n	80069f8 <UART_SetConfig+0x1f0>
 80069ca:	2bc0      	cmp	r3, #192	; 0xc0
 80069cc:	d818      	bhi.n	8006a00 <UART_SetConfig+0x1f8>
 80069ce:	2b80      	cmp	r3, #128	; 0x80
 80069d0:	d00a      	beq.n	80069e8 <UART_SetConfig+0x1e0>
 80069d2:	2b80      	cmp	r3, #128	; 0x80
 80069d4:	d814      	bhi.n	8006a00 <UART_SetConfig+0x1f8>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d002      	beq.n	80069e0 <UART_SetConfig+0x1d8>
 80069da:	2b40      	cmp	r3, #64	; 0x40
 80069dc:	d008      	beq.n	80069f0 <UART_SetConfig+0x1e8>
 80069de:	e00f      	b.n	8006a00 <UART_SetConfig+0x1f8>
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069e6:	e082      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069ee:	e07e      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069f6:	e07a      	b.n	8006aee <UART_SetConfig+0x2e6>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80069fe:	e076      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a06:	e072      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a35      	ldr	r2, [pc, #212]	; (8006ae4 <UART_SetConfig+0x2dc>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d12a      	bne.n	8006a68 <UART_SetConfig+0x260>
 8006a12:	4b30      	ldr	r3, [pc, #192]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a20:	d01a      	beq.n	8006a58 <UART_SetConfig+0x250>
 8006a22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a26:	d81b      	bhi.n	8006a60 <UART_SetConfig+0x258>
 8006a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a2c:	d00c      	beq.n	8006a48 <UART_SetConfig+0x240>
 8006a2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a32:	d815      	bhi.n	8006a60 <UART_SetConfig+0x258>
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d003      	beq.n	8006a40 <UART_SetConfig+0x238>
 8006a38:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a3c:	d008      	beq.n	8006a50 <UART_SetConfig+0x248>
 8006a3e:	e00f      	b.n	8006a60 <UART_SetConfig+0x258>
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a46:	e052      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a48:	2302      	movs	r3, #2
 8006a4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a4e:	e04e      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a50:	2304      	movs	r3, #4
 8006a52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a56:	e04a      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a58:	2308      	movs	r3, #8
 8006a5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a5e:	e046      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a60:	2310      	movs	r3, #16
 8006a62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006a66:	e042      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	4a17      	ldr	r2, [pc, #92]	; (8006acc <UART_SetConfig+0x2c4>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d13a      	bne.n	8006ae8 <UART_SetConfig+0x2e0>
 8006a72:	4b18      	ldr	r3, [pc, #96]	; (8006ad4 <UART_SetConfig+0x2cc>)
 8006a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a78:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a80:	d01a      	beq.n	8006ab8 <UART_SetConfig+0x2b0>
 8006a82:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006a86:	d81b      	bhi.n	8006ac0 <UART_SetConfig+0x2b8>
 8006a88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a8c:	d00c      	beq.n	8006aa8 <UART_SetConfig+0x2a0>
 8006a8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a92:	d815      	bhi.n	8006ac0 <UART_SetConfig+0x2b8>
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d003      	beq.n	8006aa0 <UART_SetConfig+0x298>
 8006a98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a9c:	d008      	beq.n	8006ab0 <UART_SetConfig+0x2a8>
 8006a9e:	e00f      	b.n	8006ac0 <UART_SetConfig+0x2b8>
 8006aa0:	2300      	movs	r3, #0
 8006aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aa6:	e022      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006aae:	e01e      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006ab0:	2304      	movs	r3, #4
 8006ab2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ab6:	e01a      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006ab8:	2308      	movs	r3, #8
 8006aba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006abe:	e016      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006ac0:	2310      	movs	r3, #16
 8006ac2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006ac6:	e012      	b.n	8006aee <UART_SetConfig+0x2e6>
 8006ac8:	efff69f3 	.word	0xefff69f3
 8006acc:	40008000 	.word	0x40008000
 8006ad0:	40013800 	.word	0x40013800
 8006ad4:	40021000 	.word	0x40021000
 8006ad8:	40004400 	.word	0x40004400
 8006adc:	40004800 	.word	0x40004800
 8006ae0:	40004c00 	.word	0x40004c00
 8006ae4:	40005000 	.word	0x40005000
 8006ae8:	2310      	movs	r3, #16
 8006aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a9f      	ldr	r2, [pc, #636]	; (8006d70 <UART_SetConfig+0x568>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d17a      	bne.n	8006bee <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006af8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006afc:	2b08      	cmp	r3, #8
 8006afe:	d824      	bhi.n	8006b4a <UART_SetConfig+0x342>
 8006b00:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <UART_SetConfig+0x300>)
 8006b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b06:	bf00      	nop
 8006b08:	08006b2d 	.word	0x08006b2d
 8006b0c:	08006b4b 	.word	0x08006b4b
 8006b10:	08006b35 	.word	0x08006b35
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b3b 	.word	0x08006b3b
 8006b1c:	08006b4b 	.word	0x08006b4b
 8006b20:	08006b4b 	.word	0x08006b4b
 8006b24:	08006b4b 	.word	0x08006b4b
 8006b28:	08006b43 	.word	0x08006b43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b2c:	f7fe f91e 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006b30:	61f8      	str	r0, [r7, #28]
        break;
 8006b32:	e010      	b.n	8006b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b34:	4b8f      	ldr	r3, [pc, #572]	; (8006d74 <UART_SetConfig+0x56c>)
 8006b36:	61fb      	str	r3, [r7, #28]
        break;
 8006b38:	e00d      	b.n	8006b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b3a:	f7fe f87f 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8006b3e:	61f8      	str	r0, [r7, #28]
        break;
 8006b40:	e009      	b.n	8006b56 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b46:	61fb      	str	r3, [r7, #28]
        break;
 8006b48:	e005      	b.n	8006b56 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006b54:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80fb 	beq.w	8006d54 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	685a      	ldr	r2, [r3, #4]
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	69fa      	ldr	r2, [r7, #28]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d305      	bcc.n	8006b7a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006b74:	69fa      	ldr	r2, [r7, #28]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d903      	bls.n	8006b82 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b80:	e0e8      	b.n	8006d54 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	2200      	movs	r2, #0
 8006b86:	461c      	mov	r4, r3
 8006b88:	4615      	mov	r5, r2
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	022b      	lsls	r3, r5, #8
 8006b94:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006b98:	0222      	lsls	r2, r4, #8
 8006b9a:	68f9      	ldr	r1, [r7, #12]
 8006b9c:	6849      	ldr	r1, [r1, #4]
 8006b9e:	0849      	lsrs	r1, r1, #1
 8006ba0:	2000      	movs	r0, #0
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4681      	mov	r9, r0
 8006ba6:	eb12 0a08 	adds.w	sl, r2, r8
 8006baa:	eb43 0b09 	adc.w	fp, r3, r9
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	603b      	str	r3, [r7, #0]
 8006bb6:	607a      	str	r2, [r7, #4]
 8006bb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006bbc:	4650      	mov	r0, sl
 8006bbe:	4659      	mov	r1, fp
 8006bc0:	f7f9 fef8 	bl	80009b4 <__aeabi_uldivmod>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	4613      	mov	r3, r2
 8006bca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006bd2:	d308      	bcc.n	8006be6 <UART_SetConfig+0x3de>
 8006bd4:	69bb      	ldr	r3, [r7, #24]
 8006bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bda:	d204      	bcs.n	8006be6 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	69ba      	ldr	r2, [r7, #24]
 8006be2:	60da      	str	r2, [r3, #12]
 8006be4:	e0b6      	b.n	8006d54 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006be6:	2301      	movs	r3, #1
 8006be8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006bec:	e0b2      	b.n	8006d54 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	69db      	ldr	r3, [r3, #28]
 8006bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006bf6:	d15e      	bne.n	8006cb6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006bf8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006bfc:	2b08      	cmp	r3, #8
 8006bfe:	d828      	bhi.n	8006c52 <UART_SetConfig+0x44a>
 8006c00:	a201      	add	r2, pc, #4	; (adr r2, 8006c08 <UART_SetConfig+0x400>)
 8006c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c06:	bf00      	nop
 8006c08:	08006c2d 	.word	0x08006c2d
 8006c0c:	08006c35 	.word	0x08006c35
 8006c10:	08006c3d 	.word	0x08006c3d
 8006c14:	08006c53 	.word	0x08006c53
 8006c18:	08006c43 	.word	0x08006c43
 8006c1c:	08006c53 	.word	0x08006c53
 8006c20:	08006c53 	.word	0x08006c53
 8006c24:	08006c53 	.word	0x08006c53
 8006c28:	08006c4b 	.word	0x08006c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c2c:	f7fe f89e 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006c30:	61f8      	str	r0, [r7, #28]
        break;
 8006c32:	e014      	b.n	8006c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006c34:	f7fe f8b0 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8006c38:	61f8      	str	r0, [r7, #28]
        break;
 8006c3a:	e010      	b.n	8006c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c3c:	4b4d      	ldr	r3, [pc, #308]	; (8006d74 <UART_SetConfig+0x56c>)
 8006c3e:	61fb      	str	r3, [r7, #28]
        break;
 8006c40:	e00d      	b.n	8006c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c42:	f7fd fffb 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8006c46:	61f8      	str	r0, [r7, #28]
        break;
 8006c48:	e009      	b.n	8006c5e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c4e:	61fb      	str	r3, [r7, #28]
        break;
 8006c50:	e005      	b.n	8006c5e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006c52:	2300      	movs	r3, #0
 8006c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006c5c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d077      	beq.n	8006d54 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	005a      	lsls	r2, r3, #1
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	085b      	lsrs	r3, r3, #1
 8006c6e:	441a      	add	r2, r3
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8006c78:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b0f      	cmp	r3, #15
 8006c7e:	d916      	bls.n	8006cae <UART_SetConfig+0x4a6>
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c86:	d212      	bcs.n	8006cae <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	b29b      	uxth	r3, r3
 8006c8c:	f023 030f 	bic.w	r3, r3, #15
 8006c90:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006c92:	69bb      	ldr	r3, [r7, #24]
 8006c94:	085b      	lsrs	r3, r3, #1
 8006c96:	b29b      	uxth	r3, r3
 8006c98:	f003 0307 	and.w	r3, r3, #7
 8006c9c:	b29a      	uxth	r2, r3
 8006c9e:	8afb      	ldrh	r3, [r7, #22]
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	8afa      	ldrh	r2, [r7, #22]
 8006caa:	60da      	str	r2, [r3, #12]
 8006cac:	e052      	b.n	8006d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006cb4:	e04e      	b.n	8006d54 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006cb6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006cba:	2b08      	cmp	r3, #8
 8006cbc:	d827      	bhi.n	8006d0e <UART_SetConfig+0x506>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <UART_SetConfig+0x4bc>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006ce9 	.word	0x08006ce9
 8006cc8:	08006cf1 	.word	0x08006cf1
 8006ccc:	08006cf9 	.word	0x08006cf9
 8006cd0:	08006d0f 	.word	0x08006d0f
 8006cd4:	08006cff 	.word	0x08006cff
 8006cd8:	08006d0f 	.word	0x08006d0f
 8006cdc:	08006d0f 	.word	0x08006d0f
 8006ce0:	08006d0f 	.word	0x08006d0f
 8006ce4:	08006d07 	.word	0x08006d07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ce8:	f7fe f840 	bl	8004d6c <HAL_RCC_GetPCLK1Freq>
 8006cec:	61f8      	str	r0, [r7, #28]
        break;
 8006cee:	e014      	b.n	8006d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006cf0:	f7fe f852 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8006cf4:	61f8      	str	r0, [r7, #28]
        break;
 8006cf6:	e010      	b.n	8006d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006cf8:	4b1e      	ldr	r3, [pc, #120]	; (8006d74 <UART_SetConfig+0x56c>)
 8006cfa:	61fb      	str	r3, [r7, #28]
        break;
 8006cfc:	e00d      	b.n	8006d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006cfe:	f7fd ff9d 	bl	8004c3c <HAL_RCC_GetSysClockFreq>
 8006d02:	61f8      	str	r0, [r7, #28]
        break;
 8006d04:	e009      	b.n	8006d1a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d0a:	61fb      	str	r3, [r7, #28]
        break;
 8006d0c:	e005      	b.n	8006d1a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006d18:	bf00      	nop
    }

    if (pclk != 0U)
 8006d1a:	69fb      	ldr	r3, [r7, #28]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d019      	beq.n	8006d54 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	685b      	ldr	r3, [r3, #4]
 8006d24:	085a      	lsrs	r2, r3, #1
 8006d26:	69fb      	ldr	r3, [r7, #28]
 8006d28:	441a      	add	r2, r3
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d32:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	2b0f      	cmp	r3, #15
 8006d38:	d909      	bls.n	8006d4e <UART_SetConfig+0x546>
 8006d3a:	69bb      	ldr	r3, [r7, #24]
 8006d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d40:	d205      	bcs.n	8006d4e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006d42:	69bb      	ldr	r3, [r7, #24]
 8006d44:	b29a      	uxth	r2, r3
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	60da      	str	r2, [r3, #12]
 8006d4c:	e002      	b.n	8006d54 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006d4e:	2301      	movs	r3, #1
 8006d50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2200      	movs	r2, #0
 8006d58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006d60:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3728      	adds	r7, #40	; 0x28
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d6e:	bf00      	nop
 8006d70:	40008000 	.word	0x40008000
 8006d74:	00f42400 	.word	0x00f42400

08006d78 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b083      	sub	sp, #12
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d84:	f003 0308 	and.w	r3, r3, #8
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	430a      	orrs	r2, r1
 8006da0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006da6:	f003 0301 	and.w	r3, r3, #1
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d00a      	beq.n	8006dc4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	430a      	orrs	r2, r1
 8006dc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc8:	f003 0302 	and.w	r3, r3, #2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00a      	beq.n	8006de6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	430a      	orrs	r2, r1
 8006de4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dea:	f003 0304 	and.w	r3, r3, #4
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	685b      	ldr	r3, [r3, #4]
 8006df8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e0c:	f003 0310 	and.w	r3, r3, #16
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d00a      	beq.n	8006e2a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	430a      	orrs	r2, r1
 8006e28:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e2e:	f003 0320 	and.w	r3, r3, #32
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00a      	beq.n	8006e4c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	430a      	orrs	r2, r1
 8006e4a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d01a      	beq.n	8006e8e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	430a      	orrs	r2, r1
 8006e6c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e76:	d10a      	bne.n	8006e8e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	685b      	ldr	r3, [r3, #4]
 8006e7e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	685b      	ldr	r3, [r3, #4]
 8006ea0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	605a      	str	r2, [r3, #4]
  }
}
 8006eb0:	bf00      	nop
 8006eb2:	370c      	adds	r7, #12
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr

08006ebc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b098      	sub	sp, #96	; 0x60
 8006ec0:	af02      	add	r7, sp, #8
 8006ec2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006ecc:	f7fc fe28 	bl	8003b20 <HAL_GetTick>
 8006ed0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f003 0308 	and.w	r3, r3, #8
 8006edc:	2b08      	cmp	r3, #8
 8006ede:	d12e      	bne.n	8006f3e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ee0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ee4:	9300      	str	r3, [sp, #0]
 8006ee6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 f88c 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d021      	beq.n	8006f3e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f02:	e853 3f00 	ldrex	r3, [r3]
 8006f06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f0a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f0e:	653b      	str	r3, [r7, #80]	; 0x50
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	461a      	mov	r2, r3
 8006f16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f18:	647b      	str	r3, [r7, #68]	; 0x44
 8006f1a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e6      	bne.n	8006efa <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2220      	movs	r2, #32
 8006f30:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	e062      	b.n	8007004 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f003 0304 	and.w	r3, r3, #4
 8006f48:	2b04      	cmp	r3, #4
 8006f4a:	d149      	bne.n	8006fe0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006f4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006f50:	9300      	str	r3, [sp, #0]
 8006f52:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006f54:	2200      	movs	r2, #0
 8006f56:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 f856 	bl	800700c <UART_WaitOnFlagUntilTimeout>
 8006f60:	4603      	mov	r3, r0
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d03c      	beq.n	8006fe0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6e:	e853 3f00 	ldrex	r3, [r3]
 8006f72:	623b      	str	r3, [r7, #32]
   return(result);
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	461a      	mov	r2, r3
 8006f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f84:	633b      	str	r3, [r7, #48]	; 0x30
 8006f86:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f88:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f8c:	e841 2300 	strex	r3, r2, [r1]
 8006f90:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d1e6      	bne.n	8006f66 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3308      	adds	r3, #8
 8006f9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	e853 3f00 	ldrex	r3, [r3]
 8006fa6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	f023 0301 	bic.w	r3, r3, #1
 8006fae:	64bb      	str	r3, [r7, #72]	; 0x48
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	3308      	adds	r3, #8
 8006fb6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fb8:	61fa      	str	r2, [r7, #28]
 8006fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fbc:	69b9      	ldr	r1, [r7, #24]
 8006fbe:	69fa      	ldr	r2, [r7, #28]
 8006fc0:	e841 2300 	strex	r3, r2, [r1]
 8006fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1e5      	bne.n	8006f98 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006fdc:	2303      	movs	r3, #3
 8006fde:	e011      	b.n	8007004 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2220      	movs	r2, #32
 8006fe4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2220      	movs	r2, #32
 8006fea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007002:	2300      	movs	r3, #0
}
 8007004:	4618      	mov	r0, r3
 8007006:	3758      	adds	r7, #88	; 0x58
 8007008:	46bd      	mov	sp, r7
 800700a:	bd80      	pop	{r7, pc}

0800700c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b084      	sub	sp, #16
 8007010:	af00      	add	r7, sp, #0
 8007012:	60f8      	str	r0, [r7, #12]
 8007014:	60b9      	str	r1, [r7, #8]
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	4613      	mov	r3, r2
 800701a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800701c:	e049      	b.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800701e:	69bb      	ldr	r3, [r7, #24]
 8007020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007024:	d045      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007026:	f7fc fd7b 	bl	8003b20 <HAL_GetTick>
 800702a:	4602      	mov	r2, r0
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	1ad3      	subs	r3, r2, r3
 8007030:	69ba      	ldr	r2, [r7, #24]
 8007032:	429a      	cmp	r2, r3
 8007034:	d302      	bcc.n	800703c <UART_WaitOnFlagUntilTimeout+0x30>
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800703c:	2303      	movs	r3, #3
 800703e:	e048      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f003 0304 	and.w	r3, r3, #4
 800704a:	2b00      	cmp	r3, #0
 800704c:	d031      	beq.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	69db      	ldr	r3, [r3, #28]
 8007054:	f003 0308 	and.w	r3, r3, #8
 8007058:	2b08      	cmp	r3, #8
 800705a:	d110      	bne.n	800707e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	2208      	movs	r2, #8
 8007062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007064:	68f8      	ldr	r0, [r7, #12]
 8007066:	f000 f838 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2208      	movs	r2, #8
 800706e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800707a:	2301      	movs	r3, #1
 800707c:	e029      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	69db      	ldr	r3, [r3, #28]
 8007084:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007088:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800708c:	d111      	bne.n	80070b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007098:	68f8      	ldr	r0, [r7, #12]
 800709a:	f000 f81e 	bl	80070da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2220      	movs	r2, #32
 80070a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80070ae:	2303      	movs	r3, #3
 80070b0:	e00f      	b.n	80070d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	69da      	ldr	r2, [r3, #28]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	4013      	ands	r3, r2
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	429a      	cmp	r2, r3
 80070c0:	bf0c      	ite	eq
 80070c2:	2301      	moveq	r3, #1
 80070c4:	2300      	movne	r3, #0
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	461a      	mov	r2, r3
 80070ca:	79fb      	ldrb	r3, [r7, #7]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d0a6      	beq.n	800701e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070da:	b480      	push	{r7}
 80070dc:	b095      	sub	sp, #84	; 0x54
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070ea:	e853 3f00 	ldrex	r3, [r3]
 80070ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	461a      	mov	r2, r3
 80070fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007100:	643b      	str	r3, [r7, #64]	; 0x40
 8007102:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007108:	e841 2300 	strex	r3, r2, [r1]
 800710c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800710e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1e6      	bne.n	80070e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	3308      	adds	r3, #8
 800711a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711c:	6a3b      	ldr	r3, [r7, #32]
 800711e:	e853 3f00 	ldrex	r3, [r3]
 8007122:	61fb      	str	r3, [r7, #28]
   return(result);
 8007124:	69fb      	ldr	r3, [r7, #28]
 8007126:	f023 0301 	bic.w	r3, r3, #1
 800712a:	64bb      	str	r3, [r7, #72]	; 0x48
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	3308      	adds	r3, #8
 8007132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800713a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800713c:	e841 2300 	strex	r3, r2, [r1]
 8007140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007144:	2b00      	cmp	r3, #0
 8007146:	d1e5      	bne.n	8007114 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800714c:	2b01      	cmp	r3, #1
 800714e:	d118      	bne.n	8007182 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	60bb      	str	r3, [r7, #8]
   return(result);
 800715e:	68bb      	ldr	r3, [r7, #8]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	647b      	str	r3, [r7, #68]	; 0x44
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	461a      	mov	r2, r3
 800716c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800716e:	61bb      	str	r3, [r7, #24]
 8007170:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6979      	ldr	r1, [r7, #20]
 8007174:	69ba      	ldr	r2, [r7, #24]
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	613b      	str	r3, [r7, #16]
   return(result);
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e6      	bne.n	8007150 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007196:	bf00      	nop
 8007198:	3754      	adds	r7, #84	; 0x54
 800719a:	46bd      	mov	sp, r7
 800719c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a0:	4770      	bx	lr

080071a2 <memset>:
 80071a2:	4402      	add	r2, r0
 80071a4:	4603      	mov	r3, r0
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d100      	bne.n	80071ac <memset+0xa>
 80071aa:	4770      	bx	lr
 80071ac:	f803 1b01 	strb.w	r1, [r3], #1
 80071b0:	e7f9      	b.n	80071a6 <memset+0x4>
	...

080071b4 <__libc_init_array>:
 80071b4:	b570      	push	{r4, r5, r6, lr}
 80071b6:	4d0d      	ldr	r5, [pc, #52]	; (80071ec <__libc_init_array+0x38>)
 80071b8:	4c0d      	ldr	r4, [pc, #52]	; (80071f0 <__libc_init_array+0x3c>)
 80071ba:	1b64      	subs	r4, r4, r5
 80071bc:	10a4      	asrs	r4, r4, #2
 80071be:	2600      	movs	r6, #0
 80071c0:	42a6      	cmp	r6, r4
 80071c2:	d109      	bne.n	80071d8 <__libc_init_array+0x24>
 80071c4:	4d0b      	ldr	r5, [pc, #44]	; (80071f4 <__libc_init_array+0x40>)
 80071c6:	4c0c      	ldr	r4, [pc, #48]	; (80071f8 <__libc_init_array+0x44>)
 80071c8:	f000 f860 	bl	800728c <_init>
 80071cc:	1b64      	subs	r4, r4, r5
 80071ce:	10a4      	asrs	r4, r4, #2
 80071d0:	2600      	movs	r6, #0
 80071d2:	42a6      	cmp	r6, r4
 80071d4:	d105      	bne.n	80071e2 <__libc_init_array+0x2e>
 80071d6:	bd70      	pop	{r4, r5, r6, pc}
 80071d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80071dc:	4798      	blx	r3
 80071de:	3601      	adds	r6, #1
 80071e0:	e7ee      	b.n	80071c0 <__libc_init_array+0xc>
 80071e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071e6:	4798      	blx	r3
 80071e8:	3601      	adds	r6, #1
 80071ea:	e7f2      	b.n	80071d2 <__libc_init_array+0x1e>
 80071ec:	08007498 	.word	0x08007498
 80071f0:	08007498 	.word	0x08007498
 80071f4:	08007498 	.word	0x08007498
 80071f8:	0800749c 	.word	0x0800749c

080071fc <round>:
 80071fc:	ec53 2b10 	vmov	r2, r3, d0
 8007200:	b570      	push	{r4, r5, r6, lr}
 8007202:	f3c3 540a 	ubfx	r4, r3, #20, #11
 8007206:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800720a:	2813      	cmp	r0, #19
 800720c:	ee10 5a10 	vmov	r5, s0
 8007210:	4619      	mov	r1, r3
 8007212:	dc18      	bgt.n	8007246 <round+0x4a>
 8007214:	2800      	cmp	r0, #0
 8007216:	da09      	bge.n	800722c <round+0x30>
 8007218:	3001      	adds	r0, #1
 800721a:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800721e:	d103      	bne.n	8007228 <round+0x2c>
 8007220:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8007224:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8007228:	2300      	movs	r3, #0
 800722a:	e02a      	b.n	8007282 <round+0x86>
 800722c:	4c16      	ldr	r4, [pc, #88]	; (8007288 <round+0x8c>)
 800722e:	4104      	asrs	r4, r0
 8007230:	ea03 0604 	and.w	r6, r3, r4
 8007234:	4316      	orrs	r6, r2
 8007236:	d011      	beq.n	800725c <round+0x60>
 8007238:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800723c:	4103      	asrs	r3, r0
 800723e:	440b      	add	r3, r1
 8007240:	ea23 0104 	bic.w	r1, r3, r4
 8007244:	e7f0      	b.n	8007228 <round+0x2c>
 8007246:	2833      	cmp	r0, #51	; 0x33
 8007248:	dd0b      	ble.n	8007262 <round+0x66>
 800724a:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800724e:	d105      	bne.n	800725c <round+0x60>
 8007250:	ee10 0a10 	vmov	r0, s0
 8007254:	f7f8 ffc6 	bl	80001e4 <__adddf3>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	ec43 2b10 	vmov	d0, r2, r3
 8007260:	bd70      	pop	{r4, r5, r6, pc}
 8007262:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8007266:	f04f 34ff 	mov.w	r4, #4294967295
 800726a:	40f4      	lsrs	r4, r6
 800726c:	4214      	tst	r4, r2
 800726e:	d0f5      	beq.n	800725c <round+0x60>
 8007270:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 8007274:	2301      	movs	r3, #1
 8007276:	4083      	lsls	r3, r0
 8007278:	195b      	adds	r3, r3, r5
 800727a:	bf28      	it	cs
 800727c:	3101      	addcs	r1, #1
 800727e:	ea23 0304 	bic.w	r3, r3, r4
 8007282:	461a      	mov	r2, r3
 8007284:	460b      	mov	r3, r1
 8007286:	e7e9      	b.n	800725c <round+0x60>
 8007288:	000fffff 	.word	0x000fffff

0800728c <_init>:
 800728c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800728e:	bf00      	nop
 8007290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007292:	bc08      	pop	{r3}
 8007294:	469e      	mov	lr, r3
 8007296:	4770      	bx	lr

08007298 <_fini>:
 8007298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800729a:	bf00      	nop
 800729c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800729e:	bc08      	pop	{r3}
 80072a0:	469e      	mov	lr, r3
 80072a2:	4770      	bx	lr
