
A7_spirit1_library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b84c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000294  0800b9dc  0800b9dc  0001b9dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc70  0800bc70  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc78  0800bc78  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800bc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003c6c  20000080  0800bd00  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003cec  0800bd00  00023cec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00026b34  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005b95  00000000  00000000  00046c27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002358  00000000  00000000  0004c7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b10  00000000  00000000  0004eb18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002da2f  00000000  00000000  00050628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027f1c  00000000  00000000  0007e057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010f94d  00000000  00000000  000a5f73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00009864  00000000  00000000  001b58c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  001bf124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000080 	.word	0x20000080
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b9c4 	.word	0x0800b9c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000084 	.word	0x20000084
 80001cc:	0800b9c4 	.word	0x0800b9c4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2uiz>:
 8000a1c:	004a      	lsls	r2, r1, #1
 8000a1e:	d211      	bcs.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d211      	bcs.n	8000a4a <__aeabi_d2uiz+0x2e>
 8000a26:	d50d      	bpl.n	8000a44 <__aeabi_d2uiz+0x28>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d40e      	bmi.n	8000a50 <__aeabi_d2uiz+0x34>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a4e:	d102      	bne.n	8000a56 <__aeabi_d2uiz+0x3a>
 8000a50:	f04f 30ff 	mov.w	r0, #4294967295
 8000a54:	4770      	bx	lr
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	4770      	bx	lr

08000a5c <__aeabi_uldivmod>:
 8000a5c:	b953      	cbnz	r3, 8000a74 <__aeabi_uldivmod+0x18>
 8000a5e:	b94a      	cbnz	r2, 8000a74 <__aeabi_uldivmod+0x18>
 8000a60:	2900      	cmp	r1, #0
 8000a62:	bf08      	it	eq
 8000a64:	2800      	cmpeq	r0, #0
 8000a66:	bf1c      	itt	ne
 8000a68:	f04f 31ff 	movne.w	r1, #4294967295
 8000a6c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a70:	f000 b970 	b.w	8000d54 <__aeabi_idiv0>
 8000a74:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a78:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a7c:	f000 f806 	bl	8000a8c <__udivmoddi4>
 8000a80:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a84:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a88:	b004      	add	sp, #16
 8000a8a:	4770      	bx	lr

08000a8c <__udivmoddi4>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	9e08      	ldr	r6, [sp, #32]
 8000a92:	460d      	mov	r5, r1
 8000a94:	4604      	mov	r4, r0
 8000a96:	460f      	mov	r7, r1
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d14a      	bne.n	8000b32 <__udivmoddi4+0xa6>
 8000a9c:	428a      	cmp	r2, r1
 8000a9e:	4694      	mov	ip, r2
 8000aa0:	d965      	bls.n	8000b6e <__udivmoddi4+0xe2>
 8000aa2:	fab2 f382 	clz	r3, r2
 8000aa6:	b143      	cbz	r3, 8000aba <__udivmoddi4+0x2e>
 8000aa8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000aac:	f1c3 0220 	rsb	r2, r3, #32
 8000ab0:	409f      	lsls	r7, r3
 8000ab2:	fa20 f202 	lsr.w	r2, r0, r2
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	409c      	lsls	r4, r3
 8000aba:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000abe:	fa1f f58c 	uxth.w	r5, ip
 8000ac2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ac6:	0c22      	lsrs	r2, r4, #16
 8000ac8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000acc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ad0:	fb01 f005 	mul.w	r0, r1, r5
 8000ad4:	4290      	cmp	r0, r2
 8000ad6:	d90a      	bls.n	8000aee <__udivmoddi4+0x62>
 8000ad8:	eb1c 0202 	adds.w	r2, ip, r2
 8000adc:	f101 37ff 	add.w	r7, r1, #4294967295
 8000ae0:	f080 811c 	bcs.w	8000d1c <__udivmoddi4+0x290>
 8000ae4:	4290      	cmp	r0, r2
 8000ae6:	f240 8119 	bls.w	8000d1c <__udivmoddi4+0x290>
 8000aea:	3902      	subs	r1, #2
 8000aec:	4462      	add	r2, ip
 8000aee:	1a12      	subs	r2, r2, r0
 8000af0:	b2a4      	uxth	r4, r4
 8000af2:	fbb2 f0fe 	udiv	r0, r2, lr
 8000af6:	fb0e 2210 	mls	r2, lr, r0, r2
 8000afa:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000afe:	fb00 f505 	mul.w	r5, r0, r5
 8000b02:	42a5      	cmp	r5, r4
 8000b04:	d90a      	bls.n	8000b1c <__udivmoddi4+0x90>
 8000b06:	eb1c 0404 	adds.w	r4, ip, r4
 8000b0a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b0e:	f080 8107 	bcs.w	8000d20 <__udivmoddi4+0x294>
 8000b12:	42a5      	cmp	r5, r4
 8000b14:	f240 8104 	bls.w	8000d20 <__udivmoddi4+0x294>
 8000b18:	4464      	add	r4, ip
 8000b1a:	3802      	subs	r0, #2
 8000b1c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b20:	1b64      	subs	r4, r4, r5
 8000b22:	2100      	movs	r1, #0
 8000b24:	b11e      	cbz	r6, 8000b2e <__udivmoddi4+0xa2>
 8000b26:	40dc      	lsrs	r4, r3
 8000b28:	2300      	movs	r3, #0
 8000b2a:	e9c6 4300 	strd	r4, r3, [r6]
 8000b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b32:	428b      	cmp	r3, r1
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0xbc>
 8000b36:	2e00      	cmp	r6, #0
 8000b38:	f000 80ed 	beq.w	8000d16 <__udivmoddi4+0x28a>
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	e9c6 0500 	strd	r0, r5, [r6]
 8000b42:	4608      	mov	r0, r1
 8000b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b48:	fab3 f183 	clz	r1, r3
 8000b4c:	2900      	cmp	r1, #0
 8000b4e:	d149      	bne.n	8000be4 <__udivmoddi4+0x158>
 8000b50:	42ab      	cmp	r3, r5
 8000b52:	d302      	bcc.n	8000b5a <__udivmoddi4+0xce>
 8000b54:	4282      	cmp	r2, r0
 8000b56:	f200 80f8 	bhi.w	8000d4a <__udivmoddi4+0x2be>
 8000b5a:	1a84      	subs	r4, r0, r2
 8000b5c:	eb65 0203 	sbc.w	r2, r5, r3
 8000b60:	2001      	movs	r0, #1
 8000b62:	4617      	mov	r7, r2
 8000b64:	2e00      	cmp	r6, #0
 8000b66:	d0e2      	beq.n	8000b2e <__udivmoddi4+0xa2>
 8000b68:	e9c6 4700 	strd	r4, r7, [r6]
 8000b6c:	e7df      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000b6e:	b902      	cbnz	r2, 8000b72 <__udivmoddi4+0xe6>
 8000b70:	deff      	udf	#255	; 0xff
 8000b72:	fab2 f382 	clz	r3, r2
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	f040 8090 	bne.w	8000c9c <__udivmoddi4+0x210>
 8000b7c:	1a8a      	subs	r2, r1, r2
 8000b7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b82:	fa1f fe8c 	uxth.w	lr, ip
 8000b86:	2101      	movs	r1, #1
 8000b88:	fbb2 f5f7 	udiv	r5, r2, r7
 8000b8c:	fb07 2015 	mls	r0, r7, r5, r2
 8000b90:	0c22      	lsrs	r2, r4, #16
 8000b92:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b96:	fb0e f005 	mul.w	r0, lr, r5
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	d908      	bls.n	8000bb0 <__udivmoddi4+0x124>
 8000b9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ba2:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ba6:	d202      	bcs.n	8000bae <__udivmoddi4+0x122>
 8000ba8:	4290      	cmp	r0, r2
 8000baa:	f200 80cb 	bhi.w	8000d44 <__udivmoddi4+0x2b8>
 8000bae:	4645      	mov	r5, r8
 8000bb0:	1a12      	subs	r2, r2, r0
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bb8:	fb07 2210 	mls	r2, r7, r0, r2
 8000bbc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000bc4:	45a6      	cmp	lr, r4
 8000bc6:	d908      	bls.n	8000bda <__udivmoddi4+0x14e>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000bd0:	d202      	bcs.n	8000bd8 <__udivmoddi4+0x14c>
 8000bd2:	45a6      	cmp	lr, r4
 8000bd4:	f200 80bb 	bhi.w	8000d4e <__udivmoddi4+0x2c2>
 8000bd8:	4610      	mov	r0, r2
 8000bda:	eba4 040e 	sub.w	r4, r4, lr
 8000bde:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000be2:	e79f      	b.n	8000b24 <__udivmoddi4+0x98>
 8000be4:	f1c1 0720 	rsb	r7, r1, #32
 8000be8:	408b      	lsls	r3, r1
 8000bea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bf2:	fa05 f401 	lsl.w	r4, r5, r1
 8000bf6:	fa20 f307 	lsr.w	r3, r0, r7
 8000bfa:	40fd      	lsrs	r5, r7
 8000bfc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c00:	4323      	orrs	r3, r4
 8000c02:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c06:	fa1f fe8c 	uxth.w	lr, ip
 8000c0a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c0e:	0c1c      	lsrs	r4, r3, #16
 8000c10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c14:	fb08 f50e 	mul.w	r5, r8, lr
 8000c18:	42a5      	cmp	r5, r4
 8000c1a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c1e:	fa00 f001 	lsl.w	r0, r0, r1
 8000c22:	d90b      	bls.n	8000c3c <__udivmoddi4+0x1b0>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c2c:	f080 8088 	bcs.w	8000d40 <__udivmoddi4+0x2b4>
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	f240 8085 	bls.w	8000d40 <__udivmoddi4+0x2b4>
 8000c36:	f1a8 0802 	sub.w	r8, r8, #2
 8000c3a:	4464      	add	r4, ip
 8000c3c:	1b64      	subs	r4, r4, r5
 8000c3e:	b29d      	uxth	r5, r3
 8000c40:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c44:	fb09 4413 	mls	r4, r9, r3, r4
 8000c48:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c4c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c50:	45a6      	cmp	lr, r4
 8000c52:	d908      	bls.n	8000c66 <__udivmoddi4+0x1da>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c5c:	d26c      	bcs.n	8000d38 <__udivmoddi4+0x2ac>
 8000c5e:	45a6      	cmp	lr, r4
 8000c60:	d96a      	bls.n	8000d38 <__udivmoddi4+0x2ac>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	4464      	add	r4, ip
 8000c66:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c6a:	fba3 9502 	umull	r9, r5, r3, r2
 8000c6e:	eba4 040e 	sub.w	r4, r4, lr
 8000c72:	42ac      	cmp	r4, r5
 8000c74:	46c8      	mov	r8, r9
 8000c76:	46ae      	mov	lr, r5
 8000c78:	d356      	bcc.n	8000d28 <__udivmoddi4+0x29c>
 8000c7a:	d053      	beq.n	8000d24 <__udivmoddi4+0x298>
 8000c7c:	b156      	cbz	r6, 8000c94 <__udivmoddi4+0x208>
 8000c7e:	ebb0 0208 	subs.w	r2, r0, r8
 8000c82:	eb64 040e 	sbc.w	r4, r4, lr
 8000c86:	fa04 f707 	lsl.w	r7, r4, r7
 8000c8a:	40ca      	lsrs	r2, r1
 8000c8c:	40cc      	lsrs	r4, r1
 8000c8e:	4317      	orrs	r7, r2
 8000c90:	e9c6 7400 	strd	r7, r4, [r6]
 8000c94:	4618      	mov	r0, r3
 8000c96:	2100      	movs	r1, #0
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	f1c3 0120 	rsb	r1, r3, #32
 8000ca0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ca4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ca8:	fa25 f101 	lsr.w	r1, r5, r1
 8000cac:	409d      	lsls	r5, r3
 8000cae:	432a      	orrs	r2, r5
 8000cb0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cb4:	fa1f fe8c 	uxth.w	lr, ip
 8000cb8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cbc:	fb07 1510 	mls	r5, r7, r0, r1
 8000cc0:	0c11      	lsrs	r1, r2, #16
 8000cc2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cc6:	fb00 f50e 	mul.w	r5, r0, lr
 8000cca:	428d      	cmp	r5, r1
 8000ccc:	fa04 f403 	lsl.w	r4, r4, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x258>
 8000cd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cda:	d22f      	bcs.n	8000d3c <__udivmoddi4+0x2b0>
 8000cdc:	428d      	cmp	r5, r1
 8000cde:	d92d      	bls.n	8000d3c <__udivmoddi4+0x2b0>
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	1b49      	subs	r1, r1, r5
 8000ce6:	b292      	uxth	r2, r2
 8000ce8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000cec:	fb07 1115 	mls	r1, r7, r5, r1
 8000cf0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000cf4:	fb05 f10e 	mul.w	r1, r5, lr
 8000cf8:	4291      	cmp	r1, r2
 8000cfa:	d908      	bls.n	8000d0e <__udivmoddi4+0x282>
 8000cfc:	eb1c 0202 	adds.w	r2, ip, r2
 8000d00:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d04:	d216      	bcs.n	8000d34 <__udivmoddi4+0x2a8>
 8000d06:	4291      	cmp	r1, r2
 8000d08:	d914      	bls.n	8000d34 <__udivmoddi4+0x2a8>
 8000d0a:	3d02      	subs	r5, #2
 8000d0c:	4462      	add	r2, ip
 8000d0e:	1a52      	subs	r2, r2, r1
 8000d10:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d14:	e738      	b.n	8000b88 <__udivmoddi4+0xfc>
 8000d16:	4631      	mov	r1, r6
 8000d18:	4630      	mov	r0, r6
 8000d1a:	e708      	b.n	8000b2e <__udivmoddi4+0xa2>
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e6e6      	b.n	8000aee <__udivmoddi4+0x62>
 8000d20:	4610      	mov	r0, r2
 8000d22:	e6fb      	b.n	8000b1c <__udivmoddi4+0x90>
 8000d24:	4548      	cmp	r0, r9
 8000d26:	d2a9      	bcs.n	8000c7c <__udivmoddi4+0x1f0>
 8000d28:	ebb9 0802 	subs.w	r8, r9, r2
 8000d2c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d30:	3b01      	subs	r3, #1
 8000d32:	e7a3      	b.n	8000c7c <__udivmoddi4+0x1f0>
 8000d34:	4645      	mov	r5, r8
 8000d36:	e7ea      	b.n	8000d0e <__udivmoddi4+0x282>
 8000d38:	462b      	mov	r3, r5
 8000d3a:	e794      	b.n	8000c66 <__udivmoddi4+0x1da>
 8000d3c:	4640      	mov	r0, r8
 8000d3e:	e7d1      	b.n	8000ce4 <__udivmoddi4+0x258>
 8000d40:	46d0      	mov	r8, sl
 8000d42:	e77b      	b.n	8000c3c <__udivmoddi4+0x1b0>
 8000d44:	3d02      	subs	r5, #2
 8000d46:	4462      	add	r2, ip
 8000d48:	e732      	b.n	8000bb0 <__udivmoddi4+0x124>
 8000d4a:	4608      	mov	r0, r1
 8000d4c:	e70a      	b.n	8000b64 <__udivmoddi4+0xd8>
 8000d4e:	4464      	add	r4, ip
 8000d50:	3802      	subs	r0, #2
 8000d52:	e742      	b.n	8000bda <__udivmoddi4+0x14e>

08000d54 <__aeabi_idiv0>:
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop

08000d58 <configureTimerForRunTimeStats>:
unsigned long getRunTimeCounterValue(void);

/* USER CODE BEGIN 1 */
/* Functions needed when configGENERATE_RUN_TIME_STATS is on */
__weak void configureTimerForRunTimeStats(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0

}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr

08000d66 <getRunTimeCounterValue>:

__weak unsigned long getRunTimeCounterValue(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
return 0;
 8000d6a:	2300      	movs	r3, #0
}
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
	...

08000d78 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d7e:	f107 030c 	add.w	r3, r7, #12
 8000d82:	2200      	movs	r2, #0
 8000d84:	601a      	str	r2, [r3, #0]
 8000d86:	605a      	str	r2, [r3, #4]
 8000d88:	609a      	str	r2, [r3, #8]
 8000d8a:	60da      	str	r2, [r3, #12]
 8000d8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	4b3e      	ldr	r3, [pc, #248]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a3d      	ldr	r2, [pc, #244]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d94:	f043 0304 	orr.w	r3, r3, #4
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b3b      	ldr	r3, [pc, #236]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0304 	and.w	r3, r3, #4
 8000da2:	60bb      	str	r3, [r7, #8]
 8000da4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	4b38      	ldr	r3, [pc, #224]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000daa:	4a37      	ldr	r2, [pc, #220]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000db2:	4b35      	ldr	r3, [pc, #212]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dbe:	4b32      	ldr	r3, [pc, #200]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc2:	4a31      	ldr	r2, [pc, #196]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dc4:	f043 0302 	orr.w	r3, r3, #2
 8000dc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dca:	4b2f      	ldr	r3, [pc, #188]	; (8000e88 <MX_GPIO_Init+0x110>)
 8000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	603b      	str	r3, [r7, #0]
 8000dd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Green_LED_onboard_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f003 fdec 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2140      	movs	r1, #64	; 0x40
 8000de8:	4828      	ldr	r0, [pc, #160]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000dea:	f003 fde7 	bl	80049bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000dee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000df2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000df8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dfe:	f107 030c 	add.w	r3, r7, #12
 8000e02:	4619      	mov	r1, r3
 8000e04:	4822      	ldr	r0, [pc, #136]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e06:	f003 fc2f 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = Green_LED_onboard_Pin|SPIRIT1_SDN_Pin;
 8000e0a:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f003 fc1f 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_GPIO3_Pin;
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e2e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4814      	ldr	r0, [pc, #80]	; (8000e90 <MX_GPIO_Init+0x118>)
 8000e40:	f003 fc12 	bl	8004668 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 8000e44:	2340      	movs	r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e50:	2300      	movs	r3, #0
 8000e52:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	4619      	mov	r1, r3
 8000e5a:	480c      	ldr	r0, [pc, #48]	; (8000e8c <MX_GPIO_Init+0x114>)
 8000e5c:	f003 fc04 	bl	8004668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 6, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2106      	movs	r1, #6
 8000e64:	2017      	movs	r0, #23
 8000e66:	f003 fbc7 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000e6a:	2017      	movs	r0, #23
 8000e6c:	f003 fbe0 	bl	8004630 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 7, 0);
 8000e70:	2200      	movs	r2, #0
 8000e72:	2107      	movs	r1, #7
 8000e74:	2028      	movs	r0, #40	; 0x28
 8000e76:	f003 fbbf 	bl	80045f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e7a:	2028      	movs	r0, #40	; 0x28
 8000e7c:	f003 fbd8 	bl	8004630 <HAL_NVIC_EnableIRQ>

}
 8000e80:	bf00      	nop
 8000e82:	3720      	adds	r7, #32
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	48000400 	.word	0x48000400
 8000e90:	48000800 	.word	0x48000800

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	; (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	; (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	; 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	; 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <RTOS_ISR_setPriority>:


TaskHandle_t Task_TXHandler, Task_printUsersHandler, Task_RXHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b084      	sub	sp, #16
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8000f56:	2000      	movs	r0, #0
 8000f58:	f003 fb43 	bl	80045e2 <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	210a      	movs	r1, #10
 8000f60:	2000      	movs	r0, #0
 8000f62:	f7ff ffc1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f66:	60f8      	str	r0, [r7, #12]
	//DMA1_Channel3_IRQn
	NVIC_SetPriority(IRQn, lowPriority);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	b25b      	sxtb	r3, r3
 8000f6c:	68f9      	ldr	r1, [r7, #12]
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f7ff ff90 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f74:	bf00      	nop
 8000f76:	3710      	adds	r7, #16
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <myHAL_UART_printf>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void myHAL_UART_printf(const char* format, ...) {
 8000f7c:	b40f      	push	{r0, r1, r2, r3}
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b082      	sub	sp, #8
 8000f82:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8000f84:	f107 0314 	add.w	r3, r7, #20
 8000f88:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f92:	480c      	ldr	r0, [pc, #48]	; (8000fc4 <myHAL_UART_printf+0x48>)
 8000f94:	f009 ffe6 	bl	800af64 <vsniprintf>
 8000f98:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa0:	d300      	bcc.n	8000fa4 <myHAL_UART_printf+0x28>
		// Handle buffer overflow (e.g., print error message)
		while(1);
 8000fa2:	e7fe      	b.n	8000fa2 <myHAL_UART_printf+0x26>
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	b29a      	uxth	r2, r3
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	4905      	ldr	r1, [pc, #20]	; (8000fc4 <myHAL_UART_printf+0x48>)
 8000fae:	4806      	ldr	r0, [pc, #24]	; (8000fc8 <myHAL_UART_printf+0x4c>)
 8000fb0:	f006 fab6 	bl	8007520 <HAL_UART_Transmit>
	}

	va_end(args);
}
 8000fb4:	bf00      	nop
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fbe:	b004      	add	sp, #16
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	20001cac 	.word	0x20001cac
 8000fc8:	20002160 	.word	0x20002160

08000fcc <myHAL_UART_clear>:

void myHAL_UART_clear(){
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
 8000fd2:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <myHAL_UART_clear+0x30>)
 8000fd4:	1d3b      	adds	r3, r7, #4
 8000fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);
 8000fdc:	1d3b      	adds	r3, r7, #4
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8f6 	bl	80001d0 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	1d39      	adds	r1, r7, #4
 8000fea:	2364      	movs	r3, #100	; 0x64
 8000fec:	4804      	ldr	r0, [pc, #16]	; (8001000 <myHAL_UART_clear+0x34>)
 8000fee:	f006 fa97 	bl	8007520 <HAL_UART_Transmit>

}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	0800b9dc 	.word	0x0800b9dc
 8001000:	20002160 	.word	0x20002160

08001004 <printUsersOnline>:

void printUsersOnline(){
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
	TickType_t currentTime = xTaskGetTickCount;
 800100a:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <printUsersOnline+0x7c>)
 800100c:	603b      	str	r3, [r7, #0]
	myHAL_UART_printf("Users Online:\r\n");
 800100e:	481d      	ldr	r0, [pc, #116]	; (8001084 <printUsersOnline+0x80>)
 8001010:	f7ff ffb4 	bl	8000f7c <myHAL_UART_printf>
	for (int i = 0; i < 256; i++){
 8001014:	2300      	movs	r3, #0
 8001016:	607b      	str	r3, [r7, #4]
 8001018:	e02a      	b.n	8001070 <printUsersOnline+0x6c>
		if (usersOnline[i].address != 0){
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <printUsersOnline+0x84>)
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	00db      	lsls	r3, r3, #3
 8001022:	1a9b      	subs	r3, r3, r2
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	440b      	add	r3, r1
 8001028:	3314      	adds	r3, #20
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d01c      	beq.n	800106a <printUsersOnline+0x66>
			myHAL_UART_printf("%d seen %d s ago\r\n", usersOnline[i].address, (currentTime - usersOnline[i].timeLastSeen)/1000);
 8001030:	4915      	ldr	r1, [pc, #84]	; (8001088 <printUsersOnline+0x84>)
 8001032:	687a      	ldr	r2, [r7, #4]
 8001034:	4613      	mov	r3, r2
 8001036:	00db      	lsls	r3, r3, #3
 8001038:	1a9b      	subs	r3, r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	440b      	add	r3, r1
 800103e:	3314      	adds	r3, #20
 8001040:	6819      	ldr	r1, [r3, #0]
 8001042:	4811      	ldr	r0, [pc, #68]	; (8001088 <printUsersOnline+0x84>)
 8001044:	687a      	ldr	r2, [r7, #4]
 8001046:	4613      	mov	r3, r2
 8001048:	00db      	lsls	r3, r3, #3
 800104a:	1a9b      	subs	r3, r3, r2
 800104c:	009b      	lsls	r3, r3, #2
 800104e:	4403      	add	r3, r0
 8001050:	3318      	adds	r3, #24
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	4a0c      	ldr	r2, [pc, #48]	; (800108c <printUsersOnline+0x88>)
 800105c:	fba2 2303 	umull	r2, r3, r2, r3
 8001060:	099b      	lsrs	r3, r3, #6
 8001062:	461a      	mov	r2, r3
 8001064:	480a      	ldr	r0, [pc, #40]	; (8001090 <printUsersOnline+0x8c>)
 8001066:	f7ff ff89 	bl	8000f7c <myHAL_UART_printf>
	for (int i = 0; i < 256; i++){
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	3301      	adds	r3, #1
 800106e:	607b      	str	r3, [r7, #4]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2bff      	cmp	r3, #255	; 0xff
 8001074:	ddd1      	ble.n	800101a <printUsersOnline+0x16>
		}
	}
}
 8001076:	bf00      	nop
 8001078:	bf00      	nop
 800107a:	3708      	adds	r7, #8
 800107c:	46bd      	mov	sp, r7
 800107e:	bd80      	pop	{r7, pc}
 8001080:	08009589 	.word	0x08009589
 8001084:	0800b9e8 	.word	0x0800b9e8
 8001088:	200000ac 	.word	0x200000ac
 800108c:	10624dd3 	.word	0x10624dd3
 8001090:	0800b9f8 	.word	0x0800b9f8

08001094 <HAL_GPIO_EXTI_Callback>:

volatile SpiritFlagStatus xTxDoneFlag;
volatile SpiritFlagStatus xRxDoneFlag;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b084      	sub	sp, #16
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	80fb      	strh	r3, [r7, #6]
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800109e:	2300      	movs	r3, #0
 80010a0:	60bb      	str	r3, [r7, #8]

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 80010a2:	88fb      	ldrh	r3, [r7, #6]
 80010a4:	2b80      	cmp	r3, #128	; 0x80
 80010a6:	d150      	bne.n	800114a <HAL_GPIO_EXTI_Callback+0xb6>

  SpiritIrqGetStatus(&xIrqStatus);
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fecf 	bl	8001e50 <SpiritIrqGetStatus>


  if (xIrqStatus.IRQ_TX_DATA_SENT)
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d009      	beq.n	80010d2 <HAL_GPIO_EXTI_Callback+0x3e>
  {
	  confirm_TX();
 80010be:	f000 f84d 	bl	800115c <confirm_TX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 80010c2:	4b24      	ldr	r3, [pc, #144]	; (8001154 <HAL_GPIO_EXTI_Callback+0xc0>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f107 0208 	add.w	r2, r7, #8
 80010ca:	4611      	mov	r1, r2
 80010cc:	4618      	mov	r0, r3
 80010ce:	f007 fb4e 	bl	800876e <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_READY)
 80010d2:	7b3b      	ldrb	r3, [r7, #12]
 80010d4:	f003 0301 	and.w	r3, r3, #1
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d009      	beq.n	80010f2 <HAL_GPIO_EXTI_Callback+0x5e>
  {
//    xRxDoneFlag = S_SET;
	  get_RX();
 80010de:	f000 f877 	bl	80011d0 <get_RX>
	  xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 80010e2:	4b1c      	ldr	r3, [pc, #112]	; (8001154 <HAL_GPIO_EXTI_Callback+0xc0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f107 0208 	add.w	r2, r7, #8
 80010ea:	4611      	mov	r1, r2
 80010ec:	4618      	mov	r0, r3
 80010ee:	f007 fb3e 	bl	800876e <xQueueGiveFromISR>
  }

  if (xIrqStatus.IRQ_RX_DATA_DISC)
 80010f2:	7b3b      	ldrb	r3, [r7, #12]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d004      	beq.n	8001108 <HAL_GPIO_EXTI_Callback+0x74>
  {
    SpiritCmdStrobeRx();
 80010fe:	f001 f907 	bl	8002310 <SpiritManagementWaCmdStrobeRx>
 8001102:	2061      	movs	r0, #97	; 0x61
 8001104:	f000 fdd6 	bl	8001cb4 <SpiritCmdStrobeCommand>
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	f003 0320 	and.w	r3, r3, #32
 800110e:	b2db      	uxtb	r3, r3
 8001110:	2b00      	cmp	r3, #0
 8001112:	d00c      	beq.n	800112e <HAL_GPIO_EXTI_Callback+0x9a>
	xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
 8001114:	4b0f      	ldr	r3, [pc, #60]	; (8001154 <HAL_GPIO_EXTI_Callback+0xc0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f107 0208 	add.w	r2, r7, #8
 800111c:	4611      	mov	r1, r2
 800111e:	4618      	mov	r0, r3
 8001120:	f007 fb25 	bl	800876e <xQueueGiveFromISR>
	SpiritCmdStrobeRx();
 8001124:	f001 f8f4 	bl	8002310 <SpiritManagementWaCmdStrobeRx>
 8001128:	2061      	movs	r0, #97	; 0x61
 800112a:	f000 fdc3 	bl	8001cb4 <SpiritCmdStrobeCommand>
  }

  SpiritIrqClearStatus();
 800112e:	f000 fec1 	bl	8001eb4 <SpiritIrqClearStatus>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001132:	68bb      	ldr	r3, [r7, #8]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d009      	beq.n	800114c <HAL_GPIO_EXTI_Callback+0xb8>
 8001138:	4b07      	ldr	r3, [pc, #28]	; (8001158 <HAL_GPIO_EXTI_Callback+0xc4>)
 800113a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	f3bf 8f4f 	dsb	sy
 8001144:	f3bf 8f6f 	isb	sy
 8001148:	e000      	b.n	800114c <HAL_GPIO_EXTI_Callback+0xb8>
  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}
 800114a:	bf00      	nop
}
 800114c:	3710      	adds	r7, #16
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	200000a8 	.word	0x200000a8
 8001158:	e000ed04 	.word	0xe000ed04

0800115c <confirm_TX>:


//TX//////////////
char payload[] = "Beep beep bloop bloop\r\n";

void confirm_TX(){
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
    myHAL_UART_clear();
 8001160:	f7ff ff34 	bl	8000fcc <myHAL_UART_clear>
    myHAL_UART_printf("payload sent: %s", payload);
 8001164:	4902      	ldr	r1, [pc, #8]	; (8001170 <confirm_TX+0x14>)
 8001166:	4803      	ldr	r0, [pc, #12]	; (8001174 <confirm_TX+0x18>)
 8001168:	f7ff ff08 	bl	8000f7c <myHAL_UART_printf>
}
 800116c:	bf00      	nop
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000000 	.word	0x20000000
 8001174:	0800ba28 	.word	0x0800ba28

08001178 <Task_TX>:

void Task_TX(void *argument){
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
	  while (1)
	  {
		  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001180:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <Task_TX+0x38>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	210a      	movs	r1, #10
 8001186:	4618      	mov	r0, r3
 8001188:	f007 fc5e 	bl	8008a48 <xQueueSemaphoreTake>
 800118c:	4603      	mov	r3, r0
 800118e:	2b01      	cmp	r3, #1
 8001190:	d1f6      	bne.n	8001180 <Task_TX+0x8>
			SPSGRF_StartTx(payload, strlen(payload));
 8001192:	4808      	ldr	r0, [pc, #32]	; (80011b4 <Task_TX+0x3c>)
 8001194:	f7ff f81c 	bl	80001d0 <strlen>
 8001198:	4603      	mov	r3, r0
 800119a:	b2db      	uxtb	r3, r3
 800119c:	4619      	mov	r1, r3
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <Task_TX+0x3c>)
 80011a0:	f000 faa2 	bl	80016e8 <SPSGRF_StartTx>
			vTaskDelay(2000);
 80011a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011a8:	f008 f89c 	bl	80092e4 <vTaskDelay>
		  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 80011ac:	e7e8      	b.n	8001180 <Task_TX+0x8>
 80011ae:	bf00      	nop
 80011b0:	200000a8 	.word	0x200000a8
 80011b4:	20000000 	.word	0x20000000

080011b8 <Task_printUsers>:
	  }
}


//USERS//////////////
void Task_printUsers(void *argument){
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	while (1){
	  printUsersOnline();
 80011c0:	f7ff ff20 	bl	8001004 <printUsersOnline>
	  vTaskDelay(1000);
 80011c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80011c8:	f008 f88c 	bl	80092e4 <vTaskDelay>
	  printUsersOnline();
 80011cc:	e7f8      	b.n	80011c0 <Task_printUsers+0x8>
	...

080011d0 <get_RX>:

	}
}

//RX//////////////
void get_RX(){
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
	uint8_t sadd = SpiritPktStackGetReceivedSourceAddress();
 80011d6:	f001 f9b7 	bl	8002548 <SpiritPktCommonGetReceivedSourceAddress>
 80011da:	4603      	mov	r3, r0
 80011dc:	71fb      	strb	r3, [r7, #7]

	usersOnline[sadd].timeLastSeen = xTaskGetTickCount();
 80011de:	f008 f9d3 	bl	8009588 <xTaskGetTickCount>
 80011e2:	4603      	mov	r3, r0
 80011e4:	79fa      	ldrb	r2, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	4915      	ldr	r1, [pc, #84]	; (8001240 <get_RX+0x70>)
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3318      	adds	r3, #24
 80011f6:	6018      	str	r0, [r3, #0]
	usersOnline[sadd].address = sadd;
 80011f8:	79fa      	ldrb	r2, [r7, #7]
 80011fa:	79f9      	ldrb	r1, [r7, #7]
 80011fc:	4810      	ldr	r0, [pc, #64]	; (8001240 <get_RX+0x70>)
 80011fe:	4613      	mov	r3, r2
 8001200:	00db      	lsls	r3, r3, #3
 8001202:	1a9b      	subs	r3, r3, r2
 8001204:	009b      	lsls	r3, r3, #2
 8001206:	4403      	add	r3, r0
 8001208:	3314      	adds	r3, #20
 800120a:	6019      	str	r1, [r3, #0]

	int rxLen = SPSGRF_GetRxData(&payload);
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <get_RX+0x74>)
 800120e:	f000 fa95 	bl	800173c <SPSGRF_GetRxData>
 8001212:	4603      	mov	r3, r0
 8001214:	603b      	str	r3, [r7, #0]

	myHAL_UART_clear();
 8001216:	f7ff fed9 	bl	8000fcc <myHAL_UART_clear>
	HAL_UART_Transmit(&huart2, "Received: ", 10, HAL_MAX_DELAY);
 800121a:	f04f 33ff 	mov.w	r3, #4294967295
 800121e:	220a      	movs	r2, #10
 8001220:	4909      	ldr	r1, [pc, #36]	; (8001248 <get_RX+0x78>)
 8001222:	480a      	ldr	r0, [pc, #40]	; (800124c <get_RX+0x7c>)
 8001224:	f006 f97c 	bl	8007520 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, payload, rxLen, HAL_MAX_DELAY);
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	b29a      	uxth	r2, r3
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	4904      	ldr	r1, [pc, #16]	; (8001244 <get_RX+0x74>)
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <get_RX+0x7c>)
 8001234:	f006 f974 	bl	8007520 <HAL_UART_Transmit>

}
 8001238:	bf00      	nop
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	200000ac 	.word	0x200000ac
 8001244:	20000000 	.word	0x20000000
 8001248:	0800ba0c 	.word	0x0800ba0c
 800124c:	20002160 	.word	0x20002160

08001250 <Task_RX>:

void Task_RX(void *argument){
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 8001258:	4b05      	ldr	r3, [pc, #20]	; (8001270 <Task_RX+0x20>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	210a      	movs	r1, #10
 800125e:	4618      	mov	r0, r3
 8001260:	f007 fbf2 	bl	8008a48 <xQueueSemaphoreTake>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d1f6      	bne.n	8001258 <Task_RX+0x8>
		  SPSGRF_StartRx();
 800126a:	f000 fa5e 	bl	800172a <SPSGRF_StartRx>
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
 800126e:	e7f3      	b.n	8001258 <Task_RX+0x8>
 8001270:	200000a8 	.word	0x200000a8

08001274 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b084      	sub	sp, #16
 8001278:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127a:	f003 f8a9 	bl	80043d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800127e:	f000 f871 	bl	8001364 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */



  RTOS_ISR_setPriority(EXTI9_5_IRQn);
 8001282:	2017      	movs	r0, #23
 8001284:	f7ff fe63 	bl	8000f4e <RTOS_ISR_setPriority>


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
 8001288:	4b2b      	ldr	r3, [pc, #172]	; (8001338 <main+0xc4>)
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	2304      	movs	r3, #4
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	2280      	movs	r2, #128	; 0x80
 8001294:	4929      	ldr	r1, [pc, #164]	; (800133c <main+0xc8>)
 8001296:	482a      	ldr	r0, [pc, #168]	; (8001340 <main+0xcc>)
 8001298:	f007 fec5 	bl	8009026 <xTaskCreate>
 800129c:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d000      	beq.n	80012a6 <main+0x32>
 80012a4:	e7fe      	b.n	80012a4 <main+0x30>

  retVal = xTaskCreate(Task_printUsers, "Task_printUsers", configMINIMAL_STACK_SIZE,
 80012a6:	4b27      	ldr	r3, [pc, #156]	; (8001344 <main+0xd0>)
 80012a8:	9301      	str	r3, [sp, #4]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2300      	movs	r3, #0
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	4925      	ldr	r1, [pc, #148]	; (8001348 <main+0xd4>)
 80012b4:	4825      	ldr	r0, [pc, #148]	; (800134c <main+0xd8>)
 80012b6:	f007 feb6 	bl	8009026 <xTaskCreate>
 80012ba:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 2, &Task_printUsersHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d000      	beq.n	80012c4 <main+0x50>
 80012c2:	e7fe      	b.n	80012c2 <main+0x4e>

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
 80012c4:	4b22      	ldr	r3, [pc, #136]	; (8001350 <main+0xdc>)
 80012c6:	9301      	str	r3, [sp, #4]
 80012c8:	2303      	movs	r3, #3
 80012ca:	9300      	str	r3, [sp, #0]
 80012cc:	2300      	movs	r3, #0
 80012ce:	2280      	movs	r2, #128	; 0x80
 80012d0:	4920      	ldr	r1, [pc, #128]	; (8001354 <main+0xe0>)
 80012d2:	4821      	ldr	r0, [pc, #132]	; (8001358 <main+0xe4>)
 80012d4:	f007 fea7 	bl	8009026 <xTaskCreate>
 80012d8:	6078      	str	r0, [r7, #4]
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d000      	beq.n	80012e2 <main+0x6e>
 80012e0:	e7fe      	b.n	80012e0 <main+0x6c>


  // Create Semaphores for task2 and task3
  FLAG_SPIRIT = xSemaphoreCreateBinary();
 80012e2:	2203      	movs	r2, #3
 80012e4:	2100      	movs	r1, #0
 80012e6:	2001      	movs	r0, #1
 80012e8:	f007 f84a 	bl	8008380 <xQueueGenericCreate>
 80012ec:	4603      	mov	r3, r0
 80012ee:	4a1b      	ldr	r2, [pc, #108]	; (800135c <main+0xe8>)
 80012f0:	6013      	str	r3, [r2, #0]
  if (FLAG_SPIRIT == NULL) { while(1); }
 80012f2:	4b1a      	ldr	r3, [pc, #104]	; (800135c <main+0xe8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d100      	bne.n	80012fc <main+0x88>
 80012fa:	e7fe      	b.n	80012fa <main+0x86>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012fc:	f7ff fd3c 	bl	8000d78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001300:	f000 f89a 	bl	8001438 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001304:	f000 fb3a 	bl	800197c <MX_USART2_UART_Init>


  /* USER CODE BEGIN 2 */
  myHAL_UART_clear();
 8001308:	f7ff fe60 	bl	8000fcc <myHAL_UART_clear>
  myHAL_UART_printf("let's goooo");
 800130c:	4814      	ldr	r0, [pc, #80]	; (8001360 <main+0xec>)
 800130e:	f7ff fe35 	bl	8000f7c <myHAL_UART_printf>

  SPSGRF_Init();
 8001312:	f000 f92f 	bl	8001574 <SPSGRF_Init>

  SpiritPktBasicSetDestinationAddress(0xFF);
 8001316:	20ff      	movs	r0, #255	; 0xff
 8001318:	f001 f8fc 	bl	8002514 <SpiritPktCommonSetDestinationAddress>



  xSemaphoreGive(FLAG_SPIRIT);
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <main+0xe8>)
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	2300      	movs	r3, #0
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	f007 f889 	bl	800843c <xQueueGenericSend>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }

  vTaskStartScheduler();
 800132a:	f008 f80f 	bl	800934c <vTaskStartScheduler>
 800132e:	2300      	movs	r3, #0

  /* USER CODE END 3 */
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	2000009c 	.word	0x2000009c
 800133c:	0800ba54 	.word	0x0800ba54
 8001340:	08001179 	.word	0x08001179
 8001344:	200000a0 	.word	0x200000a0
 8001348:	0800ba5c 	.word	0x0800ba5c
 800134c:	080011b9 	.word	0x080011b9
 8001350:	200000a4 	.word	0x200000a4
 8001354:	0800ba6c 	.word	0x0800ba6c
 8001358:	08001251 	.word	0x08001251
 800135c:	200000a8 	.word	0x200000a8
 8001360:	0800ba74 	.word	0x0800ba74

08001364 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b096      	sub	sp, #88	; 0x58
 8001368:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2244      	movs	r2, #68	; 0x44
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f009 fe04 	bl	800af80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001386:	f44f 7000 	mov.w	r0, #512	; 0x200
 800138a:	f003 fb55 	bl	8004a38 <HAL_PWREx_ControlVoltageScaling>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001394:	f000 f84a 	bl	800142c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001398:	2310      	movs	r3, #16
 800139a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013a0:	2300      	movs	r3, #0
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013a4:	2360      	movs	r3, #96	; 0x60
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013ac:	2301      	movs	r3, #1
 80013ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013b0:	2301      	movs	r3, #1
 80013b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80013b4:	2328      	movs	r3, #40	; 0x28
 80013b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013b8:	2307      	movs	r3, #7
 80013ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013bc:	2302      	movs	r3, #2
 80013be:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80013c0:	2302      	movs	r3, #2
 80013c2:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c4:	f107 0314 	add.w	r3, r7, #20
 80013c8:	4618      	mov	r0, r3
 80013ca:	f003 fb8b 	bl	8004ae4 <HAL_RCC_OscConfig>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80013d4:	f000 f82a 	bl	800142c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d8:	230f      	movs	r3, #15
 80013da:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2303      	movs	r3, #3
 80013de:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80013ec:	463b      	mov	r3, r7
 80013ee:	2104      	movs	r1, #4
 80013f0:	4618      	mov	r0, r3
 80013f2:	f003 ff53 	bl	800529c <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80013fc:	f000 f816 	bl	800142c <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3758      	adds	r7, #88	; 0x58
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a04      	ldr	r2, [pc, #16]	; (8001428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d101      	bne.n	800141e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141a:	f002 fff1 	bl	8004400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40014400 	.word	0x40014400

0800142c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001430:	b672      	cpsid	i
}
 8001432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001434:	e7fe      	b.n	8001434 <Error_Handler+0x8>
	...

08001438 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <MX_SPI1_Init+0x74>)
 800143e:	4a1c      	ldr	r2, [pc, #112]	; (80014b0 <MX_SPI1_Init+0x78>)
 8001440:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001442:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_SPI1_Init+0x74>)
 8001444:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001448:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144a:	4b18      	ldr	r3, [pc, #96]	; (80014ac <MX_SPI1_Init+0x74>)
 800144c:	2200      	movs	r2, #0
 800144e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001450:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_SPI1_Init+0x74>)
 8001452:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001456:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_SPI1_Init+0x74>)
 800145a:	2200      	movs	r2, #0
 800145c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_SPI1_Init+0x74>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001464:	4b11      	ldr	r3, [pc, #68]	; (80014ac <MX_SPI1_Init+0x74>)
 8001466:	f44f 7200 	mov.w	r2, #512	; 0x200
 800146a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800146c:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <MX_SPI1_Init+0x74>)
 800146e:	2210      	movs	r2, #16
 8001470:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001472:	4b0e      	ldr	r3, [pc, #56]	; (80014ac <MX_SPI1_Init+0x74>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <MX_SPI1_Init+0x74>)
 800147a:	2200      	movs	r2, #0
 800147c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147e:	4b0b      	ldr	r3, [pc, #44]	; (80014ac <MX_SPI1_Init+0x74>)
 8001480:	2200      	movs	r2, #0
 8001482:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001484:	4b09      	ldr	r3, [pc, #36]	; (80014ac <MX_SPI1_Init+0x74>)
 8001486:	2207      	movs	r2, #7
 8001488:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148a:	4b08      	ldr	r3, [pc, #32]	; (80014ac <MX_SPI1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_SPI1_Init+0x74>)
 8001492:	2208      	movs	r2, #8
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_SPI1_Init+0x74>)
 8001498:	f004 fe12 	bl	80060c0 <HAL_SPI_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014a2:	f7ff ffc3 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200020ac 	.word	0x200020ac
 80014b0:	40013000 	.word	0x40013000

080014b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08a      	sub	sp, #40	; 0x28
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a25      	ldr	r2, [pc, #148]	; (8001568 <HAL_SPI_MspInit+0xb4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d144      	bne.n	8001560 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014d6:	4b25      	ldr	r3, [pc, #148]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014da:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014e0:	6613      	str	r3, [r2, #96]	; 0x60
 80014e2:	4b22      	ldr	r3, [pc, #136]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b1f      	ldr	r3, [pc, #124]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f2:	4a1e      	ldr	r2, [pc, #120]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014fa:	4b1c      	ldr	r3, [pc, #112]	; (800156c <HAL_SPI_MspInit+0xb8>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_SPI_MspInit+0xb8>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	4a18      	ldr	r2, [pc, #96]	; (800156c <HAL_SPI_MspInit+0xb8>)
 800150c:	f043 0302 	orr.w	r3, r3, #2
 8001510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001512:	4b16      	ldr	r3, [pc, #88]	; (800156c <HAL_SPI_MspInit+0xb8>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	f003 0302 	and.w	r3, r3, #2
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3 (JTDO-TRACESWO)     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800151e:	23c0      	movs	r3, #192	; 0xc0
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001522:	2302      	movs	r3, #2
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800152e:	2305      	movs	r3, #5
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f003 f894 	bl	8004668 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001540:	2308      	movs	r3, #8
 8001542:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001544:	2302      	movs	r3, #2
 8001546:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001548:	2300      	movs	r3, #0
 800154a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154c:	2303      	movs	r3, #3
 800154e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001550:	2305      	movs	r3, #5
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001554:	f107 0314 	add.w	r3, r7, #20
 8001558:	4619      	mov	r1, r3
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_SPI_MspInit+0xbc>)
 800155c:	f003 f884 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001560:	bf00      	nop
 8001562:	3728      	adds	r7, #40	; 0x28
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	40013000 	.word	0x40013000
 800156c:	40021000 	.word	0x40021000
 8001570:	48000400 	.word	0x48000400

08001574 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b096      	sub	sp, #88	; 0x58
 8001578:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 800157a:	f002 fd9b 	bl	80040b4 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 800157e:	f002 ff11 	bl	80043a4 <RadioEnterShutdown>
  SpiritExitShutdown();
 8001582:	f002 ff1a 	bl	80043ba <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 8001586:	f000 fef3 	bl	8002370 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 800158a:	2300      	movs	r3, #0
 800158c:	70fb      	strb	r3, [r7, #3]
 800158e:	e004      	b.n	800159a <SPSGRF_Init+0x26>
 8001590:	78fb      	ldrb	r3, [r7, #3]
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3301      	adds	r3, #1
 8001596:	b2db      	uxtb	r3, r3
 8001598:	70fb      	strb	r3, [r7, #3]
 800159a:	78fb      	ldrb	r3, [r7, #3]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2bff      	cmp	r3, #255	; 0xff
 80015a0:	d1f6      	bne.n	8001590 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80015a2:	f002 fd65 	bl	8004070 <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80015a6:	4b4b      	ldr	r3, [pc, #300]	; (80016d4 <SPSGRF_Init+0x160>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d1ea      	bne.n	800158a <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80015b4:	2300      	movs	r3, #0
 80015b6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80015b8:	4b47      	ldr	r3, [pc, #284]	; (80016d8 <SPSGRF_Init+0x164>)
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80015bc:	4b47      	ldr	r3, [pc, #284]	; (80016dc <SPSGRF_Init+0x168>)
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 80015c0:	2300      	movs	r3, #0
 80015c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  xRadioInit.lDatarate = DATARATE;
 80015cc:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80015d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 80015d2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80015d6:	653b      	str	r3, [r7, #80]	; 0x50
  xRadioInit.lBandwidth = BANDWIDTH;
 80015d8:	4b40      	ldr	r3, [pc, #256]	; (80016dc <SPSGRF_Init+0x168>)
 80015da:	657b      	str	r3, [r7, #84]	; 0x54
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 80015dc:	4840      	ldr	r0, [pc, #256]	; (80016e0 <SPSGRF_Init+0x16c>)
 80015de:	f002 fb95 	bl	8003d0c <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 80015e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80015e6:	4618      	mov	r0, r3
 80015e8:	f001 f9e2 	bl	80029b0 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 80015ec:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 80016e4 <SPSGRF_Init+0x170>
 80015f0:	2007      	movs	r0, #7
 80015f2:	f002 fa27 	bl	8003a44 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 80015f6:	2007      	movs	r0, #7
 80015f8:	f002 fa7a 	bl	8003af0 <SpiritRadioSetPALevelMaxIndex>
	PktStackInit xSTackInit;
	PktStackAddressesInit xSTackAddress;
	PktStackLlpInit xSTackLlp;

//	xSTackInit.xPreambleLength = PREAMBLE_LENGTH;
	xSTackInit.xPreambleLength = PKT_PREAMBLE_LENGTH_04BYTES;
 80015fc:	2318      	movs	r3, #24
 80015fe:	743b      	strb	r3, [r7, #16]
	xSTackInit.xSyncLength = SYNC_LENGTH;
 8001600:	2306      	movs	r3, #6
 8001602:	747b      	strb	r3, [r7, #17]
	xSTackInit.lSyncWords = SYNC_WORD; //double check this one?
 8001604:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001608:	617b      	str	r3, [r7, #20]
	xSTackInit.xFixVarLength = LENGTH_TYPE;
 800160a:	2301      	movs	r3, #1
 800160c:	763b      	strb	r3, [r7, #24]
	xSTackInit.cPktLengthWidth = LENGTH_WIDTH;
 800160e:	2307      	movs	r3, #7
 8001610:	767b      	strb	r3, [r7, #25]
	xSTackInit.xCrcMode = CRC_MODE; //todo:set to 8 bit CRC? is this right?
 8001612:	2320      	movs	r3, #32
 8001614:	76bb      	strb	r3, [r7, #26]
	xSTackInit.xControlLength = CONTROL_LENGTH;
 8001616:	2300      	movs	r3, #0
 8001618:	76fb      	strb	r3, [r7, #27]
	xSTackInit.xFec = S_DISABLE; //todo: what is FEN?
 800161a:	2300      	movs	r3, #0
 800161c:	773b      	strb	r3, [r7, #28]
	xSTackInit.xDataWhitening = EN_WHITENING;
 800161e:	2301      	movs	r3, #1
 8001620:	777b      	strb	r3, [r7, #29]
	SpiritPktStackInit(&xSTackInit);
 8001622:	f107 0310 	add.w	r3, r7, #16
 8001626:	4618      	mov	r0, r3
 8001628:	f000 ffa6 	bl	8002578 <SpiritPktStackInit>

	xSTackAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 800162c:	2301      	movs	r3, #1
 800162e:	723b      	strb	r3, [r7, #8]
	xSTackAddress.cMyAddress = MY_ADDRESS;
 8001630:	23b0      	movs	r3, #176	; 0xb0
 8001632:	727b      	strb	r3, [r7, #9]
	xSTackAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 8001634:	2301      	movs	r3, #1
 8001636:	72bb      	strb	r3, [r7, #10]
	xSTackAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001638:	23ee      	movs	r3, #238	; 0xee
 800163a:	72fb      	strb	r3, [r7, #11]
	xSTackAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 800163c:	2301      	movs	r3, #1
 800163e:	733b      	strb	r3, [r7, #12]
	xSTackAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	737b      	strb	r3, [r7, #13]
	SpiritPktStackAddressesInit(&xSTackAddress);
 8001644:	f107 0308 	add.w	r3, r7, #8
 8001648:	4618      	mov	r0, r3
 800164a:	f001 f865 	bl	8002718 <SpiritPktStackAddressesInit>

	xSTackLlp.xAutoAck = S_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	713b      	strb	r3, [r7, #4]
	xSTackLlp.xPiggybacking = S_ENABLE;
 8001652:	2301      	movs	r3, #1
 8001654:	717b      	strb	r3, [r7, #5]
	xSTackLlp.xNMaxRetx = PKT_DISABLE_RETX; //todo?
 8001656:	2300      	movs	r3, #0
 8001658:	71bb      	strb	r3, [r7, #6]

	SpiritPktStackLlpInit(&xSTackLlp);
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4618      	mov	r0, r3
 800165e:	f001 f8c9 	bl	80027f4 <SpiritPktStackLlpInit>




  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001662:	2302      	movs	r3, #2
 8001664:	f887 3020 	strb.w	r3, [r7, #32]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 8001668:	2302      	movs	r3, #2
 800166a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800166e:	2300      	movs	r3, #0
 8001670:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritGpioInit(&xGpioInit);
 8001674:	f107 0320 	add.w	r3, r7, #32
 8001678:	4618      	mov	r0, r3
 800167a:	f000 fb33 	bl	8001ce4 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 fb54 	bl	8001d2c <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 8001684:	2101      	movs	r1, #1
 8001686:	2004      	movs	r0, #4
 8001688:	f000 fb7c 	bl	8001d84 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 800168c:	2101      	movs	r1, #1
 800168e:	2001      	movs	r0, #1
 8001690:	f000 fb78 	bl	8001d84 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 8001694:	2101      	movs	r1, #1
 8001696:	2002      	movs	r0, #2
 8001698:	f000 fb74 	bl	8001d84 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 800169c:	2101      	movs	r1, #1
 800169e:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80016a2:	f000 fb6f 	bl	8001d84 <SpiritIrq>
  SpiritIrqClearStatus();
 80016a6:	f000 fc05 	bl	8001eb4 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80016aa:	2000      	movs	r0, #0
 80016ac:	f001 f92c 	bl	8002908 <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80016b0:	2001      	movs	r0, #1
 80016b2:	f001 f8f1 	bl	8002898 <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80016b6:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80016ba:	f001 f959 	bl	8002970 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80016be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80016c2:	f002 fb33 	bl	8003d2c <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80016c6:	2002      	movs	r0, #2
 80016c8:	f002 fc8a 	bl	8003fe0 <SpiritTimerSetRxTimeoutStopCondition>
}
 80016cc:	bf00      	nop
 80016ce:	3758      	adds	r7, #88	; 0x58
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}
 80016d4:	200021f0 	.word	0x200021f0
 80016d8:	3689cac0 	.word	0x3689cac0
 80016dc:	000186a0 	.word	0x000186a0
 80016e0:	02faf080 	.word	0x02faf080
 80016e4:	4139999a 	.word	0x4139999a

080016e8 <SPSGRF_StartTx>:
* @param  txBuff: pointer to the data to transmit
* @param  txLen: number of bytes to transmit
* @retval None
*/
void SPSGRF_StartTx(uint8_t *txBuff, uint8_t txLen)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	460b      	mov	r3, r1
 80016f2:	70fb      	strb	r3, [r7, #3]
  // flush the TX FIFO
  SpiritCmdStrobeFlushTxFifo();
 80016f4:	2072      	movs	r0, #114	; 0x72
 80016f6:	f000 fadd 	bl	8001cb4 <SpiritCmdStrobeCommand>

  // Avoid TX FIFO overflow
  txLen = (txLen > MAX_BUFFER_LEN ? MAX_BUFFER_LEN : txLen);
 80016fa:	78fb      	ldrb	r3, [r7, #3]
 80016fc:	2b60      	cmp	r3, #96	; 0x60
 80016fe:	bf28      	it	cs
 8001700:	2360      	movcs	r3, #96	; 0x60
 8001702:	70fb      	strb	r3, [r7, #3]

  // start TX operation
  SpiritSpiWriteLinearFifo(txLen, txBuff);
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	6879      	ldr	r1, [r7, #4]
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fdbb 	bl	8004284 <RadioSpiWriteFifo>
  SpiritPktBasicSetPayloadLength(txLen);
 800170e:	78fb      	ldrb	r3, [r7, #3]
 8001710:	b29b      	uxth	r3, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fe72 	bl	80023fc <SpiritPktBasicSetPayloadLength>
  SpiritCmdStrobeTx();
 8001718:	f000 fdc2 	bl	80022a0 <SpiritManagementWaCmdStrobeTx>
 800171c:	2060      	movs	r0, #96	; 0x60
 800171e:	f000 fac9 	bl	8001cb4 <SpiritCmdStrobeCommand>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	af00      	add	r7, sp, #0
  SpiritCmdStrobeRx();
 800172e:	f000 fdef 	bl	8002310 <SpiritManagementWaCmdStrobeRx>
 8001732:	2061      	movs	r0, #97	; 0x61
 8001734:	f000 fabe 	bl	8001cb4 <SpiritCmdStrobeCommand>
}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}

0800173c <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001744:	f000 fbce 	bl	8001ee4 <SpiritLinearFifoReadNumElementsRxFifo>
 8001748:	4603      	mov	r3, r0
 800174a:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	4618      	mov	r0, r3
 8001752:	f002 fddf 	bl	8004314 <RadioSpiReadFifo>

  return len;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001766:	4b11      	ldr	r3, [pc, #68]	; (80017ac <HAL_MspInit+0x4c>)
 8001768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176a:	4a10      	ldr	r2, [pc, #64]	; (80017ac <HAL_MspInit+0x4c>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	6613      	str	r3, [r2, #96]	; 0x60
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <HAL_MspInit+0x4c>)
 8001774:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_MspInit+0x4c>)
 8001780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001782:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_MspInit+0x4c>)
 8001784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001788:	6593      	str	r3, [r2, #88]	; 0x58
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <HAL_MspInit+0x4c>)
 800178c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800178e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	210f      	movs	r1, #15
 800179a:	f06f 0001 	mvn.w	r0, #1
 800179e:	f002 ff2b 	bl	80045f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40021000 	.word	0x40021000

080017b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08c      	sub	sp, #48	; 0x30
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80017b8:	2300      	movs	r3, #0
 80017ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <HAL_InitTick+0xc8>)
 80017c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017c2:	4a2d      	ldr	r2, [pc, #180]	; (8001878 <HAL_InitTick+0xc8>)
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	6613      	str	r3, [r2, #96]	; 0x60
 80017ca:	4b2b      	ldr	r3, [pc, #172]	; (8001878 <HAL_InitTick+0xc8>)
 80017cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d6:	f107 020c 	add.w	r2, r7, #12
 80017da:	f107 0310 	add.w	r3, r7, #16
 80017de:	4611      	mov	r1, r2
 80017e0:	4618      	mov	r0, r3
 80017e2:	f003 ff1f 	bl	8005624 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80017e6:	f003 ff07 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 80017ea:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	4a23      	ldr	r2, [pc, #140]	; (800187c <HAL_InitTick+0xcc>)
 80017f0:	fba2 2303 	umull	r2, r3, r2, r3
 80017f4:	0c9b      	lsrs	r3, r3, #18
 80017f6:	3b01      	subs	r3, #1
 80017f8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80017fa:	4b21      	ldr	r3, [pc, #132]	; (8001880 <HAL_InitTick+0xd0>)
 80017fc:	4a21      	ldr	r2, [pc, #132]	; (8001884 <HAL_InitTick+0xd4>)
 80017fe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001800:	4b1f      	ldr	r3, [pc, #124]	; (8001880 <HAL_InitTick+0xd0>)
 8001802:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001806:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001808:	4a1d      	ldr	r2, [pc, #116]	; (8001880 <HAL_InitTick+0xd0>)
 800180a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800180c:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800180e:	4b1c      	ldr	r3, [pc, #112]	; (8001880 <HAL_InitTick+0xd0>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001814:	4b1a      	ldr	r3, [pc, #104]	; (8001880 <HAL_InitTick+0xd0>)
 8001816:	2200      	movs	r2, #0
 8001818:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_InitTick+0xd0>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8001820:	4817      	ldr	r0, [pc, #92]	; (8001880 <HAL_InitTick+0xd0>)
 8001822:	f005 fb7b 	bl	8006f1c <HAL_TIM_Base_Init>
 8001826:	4603      	mov	r3, r0
 8001828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800182c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001830:	2b00      	cmp	r3, #0
 8001832:	d11b      	bne.n	800186c <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8001834:	4812      	ldr	r0, [pc, #72]	; (8001880 <HAL_InitTick+0xd0>)
 8001836:	f005 fbd3 	bl	8006fe0 <HAL_TIM_Base_Start_IT>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001840:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001844:	2b00      	cmp	r3, #0
 8001846:	d111      	bne.n	800186c <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001848:	2019      	movs	r0, #25
 800184a:	f002 fef1 	bl	8004630 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d808      	bhi.n	8001866 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	2019      	movs	r0, #25
 800185a:	f002 fecd 	bl	80045f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800185e:	4a0a      	ldr	r2, [pc, #40]	; (8001888 <HAL_InitTick+0xd8>)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6013      	str	r3, [r2, #0]
 8001864:	e002      	b.n	800186c <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800186c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001870:	4618      	mov	r0, r3
 8001872:	3730      	adds	r7, #48	; 0x30
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	431bde83 	.word	0x431bde83
 8001880:	20002110 	.word	0x20002110
 8001884:	40014400 	.word	0x40014400
 8001888:	20000024 	.word	0x20000024

0800188c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001890:	e7fe      	b.n	8001890 <NMI_Handler+0x4>

08001892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001896:	e7fe      	b.n	8001896 <HardFault_Handler+0x4>

08001898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800189c:	e7fe      	b.n	800189c <MemManage_Handler+0x4>

0800189e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a2:	e7fe      	b.n	80018a2 <BusFault_Handler+0x4>

080018a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018a8:	e7fe      	b.n	80018a8 <UsageFault_Handler+0x4>

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SPIRIT1_GPIO3_Pin);
 80018bc:	2080      	movs	r0, #128	; 0x80
 80018be:	f003 f895 	bl	80049ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80018ce:	f005 fbf7 	bl	80070c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20002110 	.word	0x20002110

080018dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80018e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80018e4:	f003 f882 	bl	80049ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80018e8:	bf00      	nop
 80018ea:	bd80      	pop	{r7, pc}

080018ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b086      	sub	sp, #24
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018f4:	4a14      	ldr	r2, [pc, #80]	; (8001948 <_sbrk+0x5c>)
 80018f6:	4b15      	ldr	r3, [pc, #84]	; (800194c <_sbrk+0x60>)
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001900:	4b13      	ldr	r3, [pc, #76]	; (8001950 <_sbrk+0x64>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d102      	bne.n	800190e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <_sbrk+0x64>)
 800190a:	4a12      	ldr	r2, [pc, #72]	; (8001954 <_sbrk+0x68>)
 800190c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <_sbrk+0x64>)
 8001910:	681a      	ldr	r2, [r3, #0]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4413      	add	r3, r2
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	429a      	cmp	r2, r3
 800191a:	d207      	bcs.n	800192c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800191c:	f009 fb8e 	bl	800b03c <__errno>
 8001920:	4603      	mov	r3, r0
 8001922:	220c      	movs	r2, #12
 8001924:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001926:	f04f 33ff 	mov.w	r3, #4294967295
 800192a:	e009      	b.n	8001940 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800192c:	4b08      	ldr	r3, [pc, #32]	; (8001950 <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001932:	4b07      	ldr	r3, [pc, #28]	; (8001950 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	4a05      	ldr	r2, [pc, #20]	; (8001950 <_sbrk+0x64>)
 800193c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800193e:	68fb      	ldr	r3, [r7, #12]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3718      	adds	r7, #24
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}
 8001948:	20018000 	.word	0x20018000
 800194c:	00000400 	.word	0x00000400
 8001950:	2000215c 	.word	0x2000215c
 8001954:	20003cf0 	.word	0x20003cf0

08001958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <SystemInit+0x20>)
 800195e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001962:	4a05      	ldr	r2, [pc, #20]	; (8001978 <SystemInit+0x20>)
 8001964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	e000ed00 	.word	0xe000ed00

0800197c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001980:	4b14      	ldr	r3, [pc, #80]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <MX_USART2_UART_Init+0x5c>)
 8001984:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001986:	4b13      	ldr	r3, [pc, #76]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 8001988:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800198c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800198e:	4b11      	ldr	r3, [pc, #68]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001994:	4b0f      	ldr	r3, [pc, #60]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800199a:	4b0e      	ldr	r3, [pc, #56]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 800199c:	2200      	movs	r2, #0
 800199e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019a0:	4b0c      	ldr	r3, [pc, #48]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019a2:	220c      	movs	r2, #12
 80019a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019a6:	4b0b      	ldr	r3, [pc, #44]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019b2:	4b08      	ldr	r3, [pc, #32]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019b8:	4b06      	ldr	r3, [pc, #24]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <MX_USART2_UART_Init+0x58>)
 80019c0:	f005 fd60 	bl	8007484 <HAL_UART_Init>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80019ca:	f7ff fd2f 	bl	800142c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ce:	bf00      	nop
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	bf00      	nop
 80019d4:	20002160 	.word	0x20002160
 80019d8:	40004400 	.word	0x40004400

080019dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b0ac      	sub	sp, #176	; 0xb0
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80019f4:	f107 0314 	add.w	r3, r7, #20
 80019f8:	2288      	movs	r2, #136	; 0x88
 80019fa:	2100      	movs	r1, #0
 80019fc:	4618      	mov	r0, r3
 80019fe:	f009 fabf 	bl	800af80 <memset>
  if(uartHandle->Instance==USART2)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <HAL_UART_MspInit+0xb0>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d13b      	bne.n	8001a84 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a14:	f107 0314 	add.w	r3, r7, #20
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f003 fe95 	bl	8005748 <HAL_RCCEx_PeriphCLKConfig>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a24:	f7ff fd02 	bl	800142c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2c:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a32:	6593      	str	r3, [r2, #88]	; 0x58
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a40:	4b13      	ldr	r3, [pc, #76]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a44:	4a12      	ldr	r2, [pc, #72]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4c:	4b10      	ldr	r3, [pc, #64]	; (8001a90 <HAL_UART_MspInit+0xb4>)
 8001a4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a58:	230c      	movs	r3, #12
 8001a5a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a70:	2307      	movs	r3, #7
 8001a72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a76:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a80:	f002 fdf2 	bl	8004668 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a84:	bf00      	nop
 8001a86:	37b0      	adds	r7, #176	; 0xb0
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40004400 	.word	0x40004400
 8001a90:	40021000 	.word	0x40021000

08001a94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001acc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a98:	f7ff ff5e 	bl	8001958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a9c:	480c      	ldr	r0, [pc, #48]	; (8001ad0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a9e:	490d      	ldr	r1, [pc, #52]	; (8001ad4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001aa0:	4a0d      	ldr	r2, [pc, #52]	; (8001ad8 <LoopForever+0xe>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aa4:	e002      	b.n	8001aac <LoopCopyDataInit>

08001aa6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aa6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001aa8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001aaa:	3304      	adds	r3, #4

08001aac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab0:	d3f9      	bcc.n	8001aa6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	; (8001adc <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ab4:	4c0a      	ldr	r4, [pc, #40]	; (8001ae0 <LoopForever+0x16>)
  movs r3, #0
 8001ab6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ab8:	e001      	b.n	8001abe <LoopFillZerobss>

08001aba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001abc:	3204      	adds	r2, #4

08001abe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001abe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac0:	d3fb      	bcc.n	8001aba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ac2:	f009 fac1 	bl	800b048 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ac6:	f7ff fbd5 	bl	8001274 <main>

08001aca <LoopForever>:

LoopForever:
    b LoopForever
 8001aca:	e7fe      	b.n	8001aca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001acc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ad0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ad4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ad8:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8001adc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ae0:	20003cec 	.word	0x20003cec

08001ae4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ae4:	e7fe      	b.n	8001ae4 <ADC1_2_IRQHandler>
	...

08001ae8 <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001af2:	f107 030f 	add.w	r3, r7, #15
 8001af6:	461a      	mov	r2, r3
 8001af8:	2101      	movs	r1, #1
 8001afa:	2050      	movs	r0, #80	; 0x50
 8001afc:	f002 fb36 	bl	800416c <RadioSpiReadRegisters>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b14      	ldr	r3, [pc, #80]	; (8001b54 <SpiritCalibrationVco+0x6c>)
 8001b04:	b212      	sxth	r2, r2
 8001b06:	4611      	mov	r1, r2
 8001b08:	7019      	strb	r1, [r3, #0]
 8001b0a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b0e:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001b10:	79fb      	ldrb	r3, [r7, #7]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d105      	bne.n	8001b22 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	f043 0302 	orr.w	r3, r3, #2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e004      	b.n	8001b2c <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001b2c:	f107 030f 	add.w	r3, r7, #15
 8001b30:	461a      	mov	r2, r3
 8001b32:	2101      	movs	r1, #1
 8001b34:	2050      	movs	r0, #80	; 0x50
 8001b36:	f002 facd 	bl	80040d4 <RadioSpiWriteRegisters>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SpiritCalibrationVco+0x6c>)
 8001b3e:	b212      	sxth	r2, r2
 8001b40:	4611      	mov	r1, r2
 8001b42:	7019      	strb	r1, [r3, #0]
 8001b44:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b48:	705a      	strb	r2, [r3, #1]

}
 8001b4a:	bf00      	nop
 8001b4c:	3710      	adds	r7, #16
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200021f0 	.word	0x200021f0

08001b58 <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001b5e:	1dfb      	adds	r3, r7, #7
 8001b60:	461a      	mov	r2, r3
 8001b62:	2101      	movs	r1, #1
 8001b64:	20e5      	movs	r0, #229	; 0xe5
 8001b66:	f002 fb01 	bl	800416c <RadioSpiReadRegisters>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	4b07      	ldr	r3, [pc, #28]	; (8001b8c <SpiritCalibrationGetVcoCalData+0x34>)
 8001b6e:	b212      	sxth	r2, r2
 8001b70:	4611      	mov	r1, r2
 8001b72:	7019      	strb	r1, [r3, #0]
 8001b74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b78:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b80:	b2db      	uxtb	r3, r3

}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3708      	adds	r7, #8
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	bf00      	nop
 8001b8c:	200021f0 	.word	0x200021f0

08001b90 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b084      	sub	sp, #16
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	4603      	mov	r3, r0
 8001b98:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b9a:	f107 030f 	add.w	r3, r7, #15
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	206e      	movs	r0, #110	; 0x6e
 8001ba4:	f002 fae2 	bl	800416c <RadioSpiReadRegisters>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001bac:	b212      	sxth	r2, r2
 8001bae:	4611      	mov	r1, r2
 8001bb0:	7019      	strb	r1, [r3, #0]
 8001bb2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bb6:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001bb8:	7bfb      	ldrb	r3, [r7, #15]
 8001bba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001bc2:	7bfa      	ldrb	r2, [r7, #15]
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001bcc:	f107 030f 	add.w	r3, r7, #15
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	206e      	movs	r0, #110	; 0x6e
 8001bd6:	f002 fa7d 	bl	80040d4 <RadioSpiWriteRegisters>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	4b05      	ldr	r3, [pc, #20]	; (8001bf4 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001bde:	b212      	sxth	r2, r2
 8001be0:	4611      	mov	r1, r2
 8001be2:	7019      	strb	r1, [r3, #0]
 8001be4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001be8:	705a      	strb	r2, [r3, #1]

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	200021f0 	.word	0x200021f0

08001bf8 <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001c02:	f107 030f 	add.w	r3, r7, #15
 8001c06:	461a      	mov	r2, r3
 8001c08:	2101      	movs	r1, #1
 8001c0a:	206f      	movs	r0, #111	; 0x6f
 8001c0c:	f002 faae 	bl	800416c <RadioSpiReadRegisters>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001c14:	b212      	sxth	r2, r2
 8001c16:	4611      	mov	r1, r2
 8001c18:	7019      	strb	r1, [r3, #0]
 8001c1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c1e:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001c20:	7bfb      	ldrb	r3, [r7, #15]
 8001c22:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001c2a:	7bfa      	ldrb	r2, [r7, #15]
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001c34:	f107 030f 	add.w	r3, r7, #15
 8001c38:	461a      	mov	r2, r3
 8001c3a:	2101      	movs	r1, #1
 8001c3c:	206f      	movs	r0, #111	; 0x6f
 8001c3e:	f002 fa49 	bl	80040d4 <RadioSpiWriteRegisters>
 8001c42:	4602      	mov	r2, r0
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001c46:	b212      	sxth	r2, r2
 8001c48:	4611      	mov	r1, r2
 8001c4a:	7019      	strb	r1, [r3, #0]
 8001c4c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c50:	705a      	strb	r2, [r3, #1]

}
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	200021f0 	.word	0x200021f0

08001c60 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001c6a:	f107 030f 	add.w	r3, r7, #15
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2101      	movs	r1, #1
 8001c72:	209e      	movs	r0, #158	; 0x9e
 8001c74:	f002 fa7a 	bl	800416c <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	f023 0306 	bic.w	r3, r3, #6
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	2b01      	cmp	r3, #1
 8001c86:	d105      	bne.n	8001c94 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	f043 0302 	orr.w	r3, r3, #2
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	73fb      	strb	r3, [r7, #15]
 8001c92:	e004      	b.n	8001c9e <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001c94:	7bfb      	ldrb	r3, [r7, #15]
 8001c96:	f043 0304 	orr.w	r3, r3, #4
 8001c9a:	b2db      	uxtb	r3, r3
 8001c9c:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001c9e:	f107 030f 	add.w	r3, r7, #15
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	2101      	movs	r1, #1
 8001ca6:	209e      	movs	r0, #158	; 0x9e
 8001ca8:	f002 fa14 	bl	80040d4 <RadioSpiWriteRegisters>
  
}
 8001cac:	bf00      	nop
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f002 fa9f 	bl	8004204 <RadioSpiCommandStrobes>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	4b05      	ldr	r3, [pc, #20]	; (8001ce0 <SpiritCmdStrobeCommand+0x2c>)
 8001cca:	b212      	sxth	r2, r2
 8001ccc:	4611      	mov	r1, r2
 8001cce:	7019      	strb	r1, [r3, #0]
 8001cd0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cd4:	705a      	strb	r2, [r3, #1]
}
 8001cd6:	bf00      	nop
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	200021f0 	.word	0x200021f0

08001ce4 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	785a      	ldrb	r2, [r3, #1]
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	789b      	ldrb	r3, [r3, #2]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	f107 020f 	add.w	r2, r7, #15
 8001d06:	2101      	movs	r1, #1
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f002 f9e3 	bl	80040d4 <RadioSpiWriteRegisters>
 8001d0e:	4602      	mov	r2, r0
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <SpiritGpioInit+0x44>)
 8001d12:	b212      	sxth	r2, r2
 8001d14:	4611      	mov	r1, r2
 8001d16:	7019      	strb	r1, [r3, #0]
 8001d18:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d1c:	705a      	strb	r2, [r3, #1]

}
 8001d1e:	bf00      	nop
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200021f0 	.word	0x200021f0

08001d2c <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001d34:	2300      	movs	r3, #0
 8001d36:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00c      	beq.n	8001d58 <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001d3e:	f107 0308 	add.w	r3, r7, #8
 8001d42:	2204      	movs	r2, #4
 8001d44:	2100      	movs	r1, #0
 8001d46:	4618      	mov	r0, r3
 8001d48:	f009 f91a 	bl	800af80 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f107 0308 	add.w	r3, r7, #8
 8001d54:	6818      	ldr	r0, [r3, #0]
 8001d56:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d58:	f107 030c 	add.w	r3, r7, #12
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	2104      	movs	r1, #4
 8001d60:	2090      	movs	r0, #144	; 0x90
 8001d62:	f002 f9b7 	bl	80040d4 <RadioSpiWriteRegisters>
 8001d66:	4602      	mov	r2, r0
 8001d68:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <SpiritIrqDeInit+0x54>)
 8001d6a:	b212      	sxth	r2, r2
 8001d6c:	4611      	mov	r1, r2
 8001d6e:	7019      	strb	r1, [r3, #0]
 8001d70:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d74:	705a      	strb	r2, [r3, #1]
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	200021f0 	.word	0x200021f0

08001d84 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d94:	f107 030c 	add.w	r3, r7, #12
 8001d98:	461a      	mov	r2, r3
 8001d9a:	2104      	movs	r1, #4
 8001d9c:	2090      	movs	r0, #144	; 0x90
 8001d9e:	f002 f9e5 	bl	800416c <RadioSpiReadRegisters>
 8001da2:	4602      	mov	r2, r0
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <SpiritIrq+0xc8>)
 8001da6:	b212      	sxth	r2, r2
 8001da8:	4611      	mov	r1, r2
 8001daa:	7019      	strb	r1, [r3, #0]
 8001dac:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001db0:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	74fb      	strb	r3, [r7, #19]
 8001db6:	e011      	b.n	8001ddc <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	3318      	adds	r3, #24
 8001dbc:	443b      	add	r3, r7
 8001dbe:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001dc2:	461a      	mov	r2, r3
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	f1c3 0303 	rsb	r3, r3, #3
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001dd6:	7cfb      	ldrb	r3, [r7, #19]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	74fb      	strb	r3, [r7, #19]
 8001ddc:	7cfb      	ldrb	r3, [r7, #19]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d9ea      	bls.n	8001db8 <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d105      	bne.n	8001df4 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4013      	ands	r3, r2
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e003      	b.n	8001dfc <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	74bb      	strb	r3, [r7, #18]
 8001e00:	e00e      	b.n	8001e20 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001e02:	7cbb      	ldrb	r3, [r7, #18]
 8001e04:	f1c3 0303 	rsb	r3, r3, #3
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	40da      	lsrs	r2, r3
 8001e0e:	7cbb      	ldrb	r3, [r7, #18]
 8001e10:	b2d2      	uxtb	r2, r2
 8001e12:	3318      	adds	r3, #24
 8001e14:	443b      	add	r3, r7
 8001e16:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001e1a:	7cbb      	ldrb	r3, [r7, #18]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	74bb      	strb	r3, [r7, #18]
 8001e20:	7cbb      	ldrb	r3, [r7, #18]
 8001e22:	2b03      	cmp	r3, #3
 8001e24:	d9ed      	bls.n	8001e02 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001e26:	f107 030c 	add.w	r3, r7, #12
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	2104      	movs	r1, #4
 8001e2e:	2090      	movs	r0, #144	; 0x90
 8001e30:	f002 f950 	bl	80040d4 <RadioSpiWriteRegisters>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b05      	ldr	r3, [pc, #20]	; (8001e4c <SpiritIrq+0xc8>)
 8001e38:	b212      	sxth	r2, r2
 8001e3a:	4611      	mov	r1, r2
 8001e3c:	7019      	strb	r1, [r3, #0]
 8001e3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e42:	705a      	strb	r2, [r3, #1]

}
 8001e44:	bf00      	nop
 8001e46:	3718      	adds	r7, #24
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	200021f0 	.word	0x200021f0

08001e50 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b086      	sub	sp, #24
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001e5c:	f107 030c 	add.w	r3, r7, #12
 8001e60:	461a      	mov	r2, r3
 8001e62:	2104      	movs	r1, #4
 8001e64:	20fa      	movs	r0, #250	; 0xfa
 8001e66:	f002 f981 	bl	800416c <RadioSpiReadRegisters>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	4b10      	ldr	r3, [pc, #64]	; (8001eb0 <SpiritIrqGetStatus+0x60>)
 8001e6e:	b212      	sxth	r2, r2
 8001e70:	4611      	mov	r1, r2
 8001e72:	7019      	strb	r1, [r3, #0]
 8001e74:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e78:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	74fb      	strb	r3, [r7, #19]
 8001e7e:	e00e      	b.n	8001e9e <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	f1c3 0303 	rsb	r3, r3, #3
 8001e86:	3318      	adds	r3, #24
 8001e88:	443b      	add	r3, r7
 8001e8a:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	3301      	adds	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001e98:	7cfb      	ldrb	r3, [r7, #19]
 8001e9a:	3301      	adds	r3, #1
 8001e9c:	74fb      	strb	r3, [r7, #19]
 8001e9e:	7cfb      	ldrb	r3, [r7, #19]
 8001ea0:	2b03      	cmp	r3, #3
 8001ea2:	d9ed      	bls.n	8001e80 <SpiritIrqGetStatus+0x30>
  }
}
 8001ea4:	bf00      	nop
 8001ea6:	bf00      	nop
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	200021f0 	.word	0x200021f0

08001eb4 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	2104      	movs	r1, #4
 8001ec0:	20fa      	movs	r0, #250	; 0xfa
 8001ec2:	f002 f953 	bl	800416c <RadioSpiReadRegisters>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	4b05      	ldr	r3, [pc, #20]	; (8001ee0 <SpiritIrqClearStatus+0x2c>)
 8001eca:	b212      	sxth	r2, r2
 8001ecc:	4611      	mov	r1, r2
 8001ece:	7019      	strb	r1, [r3, #0]
 8001ed0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ed4:	705a      	strb	r2, [r3, #1]

}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	200021f0 	.word	0x200021f0

08001ee4 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8001eea:	1dfb      	adds	r3, r7, #7
 8001eec:	461a      	mov	r2, r3
 8001eee:	2101      	movs	r1, #1
 8001ef0:	20e7      	movs	r0, #231	; 0xe7
 8001ef2:	f002 f93b 	bl	800416c <RadioSpiReadRegisters>
 8001ef6:	4602      	mov	r2, r0
 8001ef8:	4b07      	ldr	r3, [pc, #28]	; (8001f18 <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8001efa:	b212      	sxth	r2, r2
 8001efc:	4611      	mov	r1, r2
 8001efe:	7019      	strb	r1, [r3, #0]
 8001f00:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001f04:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8001f06:	79fb      	ldrb	r3, [r7, #7]
 8001f08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f0c:	b2db      	uxtb	r3, r3

}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3708      	adds	r7, #8
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	200021f0 	.word	0x200021f0

08001f1c <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001f1c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f20:	b08a      	sub	sp, #40	; 0x28
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a70      	ldr	r2, [pc, #448]	; (80020ec <SpiritManagementSetFrequencyBase+0x1d0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d307      	bcc.n	8001f3e <SpiritManagementSetFrequencyBase+0x22>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4a6f      	ldr	r2, [pc, #444]	; (80020f0 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d803      	bhi.n	8001f3e <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001f36:	2300      	movs	r3, #0
 8001f38:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f3c:	e01a      	b.n	8001f74 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	4a6c      	ldr	r2, [pc, #432]	; (80020f4 <SpiritManagementSetFrequencyBase+0x1d8>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d907      	bls.n	8001f56 <SpiritManagementSetFrequencyBase+0x3a>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a6b      	ldr	r2, [pc, #428]	; (80020f8 <SpiritManagementSetFrequencyBase+0x1dc>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d803      	bhi.n	8001f56 <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f54:	e00e      	b.n	8001f74 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a68      	ldr	r2, [pc, #416]	; (80020fc <SpiritManagementSetFrequencyBase+0x1e0>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d907      	bls.n	8001f6e <SpiritManagementSetFrequencyBase+0x52>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a67      	ldr	r2, [pc, #412]	; (8002100 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d803      	bhi.n	8001f6e <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f6c:	e002      	b.n	8001f74 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001f6e:	2303      	movs	r3, #3
 8001f70:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001f74:	f001 f85a 	bl	800302c <SpiritRadioGetFrequencyOffset>
 8001f78:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001f7a:	f001 f837 	bl	8002fec <SpiritRadioGetChannelSpace>
 8001f7e:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001f80:	f001 f81c 	bl	8002fbc <SpiritRadioGetChannel>
 8001f84:	4603      	mov	r3, r0
 8001f86:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001f88:	6a3a      	ldr	r2, [r7, #32]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	7efb      	ldrb	r3, [r7, #27]
 8001f90:	69f9      	ldr	r1, [r7, #28]
 8001f92:	fb01 f303 	mul.w	r3, r1, r3
 8001f96:	4413      	add	r3, r2
 8001f98:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001f9a:	f001 fe37 	bl	8003c0c <SpiritRadioGetRefDiv>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001fa4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fa8:	2b03      	cmp	r3, #3
 8001faa:	d83a      	bhi.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
 8001fac:	a201      	add	r2, pc, #4	; (adr r2, 8001fb4 <SpiritManagementSetFrequencyBase+0x98>)
 8001fae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fb2:	bf00      	nop
 8001fb4:	0800200d 	.word	0x0800200d
 8001fb8:	08001ff5 	.word	0x08001ff5
 8001fbc:	08001fdd 	.word	0x08001fdd
 8001fc0:	08001fc5 	.word	0x08001fc5
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001fc4:	697b      	ldr	r3, [r7, #20]
 8001fc6:	4a4f      	ldr	r2, [pc, #316]	; (8002104 <SpiritManagementSetFrequencyBase+0x1e8>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d803      	bhi.n	8001fd4 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001fcc:	2000      	movs	r0, #0
 8001fce:	f7ff fe47 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001fd2:	e026      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001fd4:	2001      	movs	r0, #1
 8001fd6:	f7ff fe43 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 8001fda:	e022      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <SpiritManagementSetFrequencyBase+0x1ec>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d803      	bhi.n	8001fec <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001fe4:	2000      	movs	r0, #0
 8001fe6:	f7ff fe3b 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001fea:	e01a      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f7ff fe37 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 8001ff2:	e016      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	4a45      	ldr	r2, [pc, #276]	; (800210c <SpiritManagementSetFrequencyBase+0x1f0>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d803      	bhi.n	8002004 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001ffc:	2000      	movs	r0, #0
 8001ffe:	f7ff fe2f 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002002:	e00e      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8002004:	2001      	movs	r0, #1
 8002006:	f7ff fe2b 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 800200a:	e00a      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d803      	bhi.n	800201c <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fe23 	bl	8001c60 <SpiritCalibrationSelectVco>
 800201a:	e002      	b.n	8002022 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 800201c:	2001      	movs	r0, #1
 800201e:	f7ff fe1f 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002022:	6978      	ldr	r0, [r7, #20]
 8002024:	f000 fee2 	bl	8002dec <SpiritRadioSearchWCP>
 8002028:	4603      	mov	r3, r0
 800202a:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 800202c:	6878      	ldr	r0, [r7, #4]
 800202e:	f7fe fa69 	bl	8000504 <__aeabi_ui2d>
 8002032:	4604      	mov	r4, r0
 8002034:	460d      	mov	r5, r1
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800203c:	4935      	ldr	r1, [pc, #212]	; (8002114 <SpiritManagementSetFrequencyBase+0x1f8>)
 800203e:	5c8a      	ldrb	r2, [r1, r2]
 8002040:	fb02 f303 	mul.w	r3, r2, r3
 8002044:	049b      	lsls	r3, r3, #18
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa6c 	bl	8000524 <__aeabi_i2d>
 800204c:	4680      	mov	r8, r0
 800204e:	4689      	mov	r9, r1
 8002050:	f001 fe50 	bl	8003cf4 <SpiritRadioGetXtalFrequency>
 8002054:	4603      	mov	r3, r0
 8002056:	4618      	mov	r0, r3
 8002058:	f7fe fa54 	bl	8000504 <__aeabi_ui2d>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4640      	mov	r0, r8
 8002062:	4649      	mov	r1, r9
 8002064:	f7fe fbf2 	bl	800084c <__aeabi_ddiv>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4620      	mov	r0, r4
 800206e:	4629      	mov	r1, r5
 8002070:	f7fe fac2 	bl	80005f8 <__aeabi_dmul>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4610      	mov	r0, r2
 800207a:	4619      	mov	r1, r3
 800207c:	f7fe fcce 	bl	8000a1c <__aeabi_d2uiz>
 8002080:	4603      	mov	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	0d5b      	lsrs	r3, r3, #21
 8002088:	b2db      	uxtb	r3, r3
 800208a:	f003 031f 	and.w	r3, r3, #31
 800208e:	b2da      	uxtb	r2, r3
 8002090:	7cbb      	ldrb	r3, [r7, #18]
 8002092:	015b      	lsls	r3, r3, #5
 8002094:	b2db      	uxtb	r3, r3
 8002096:	4313      	orrs	r3, r2
 8002098:	b2db      	uxtb	r3, r3
 800209a:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	0b5b      	lsrs	r3, r3, #13
 80020a0:	b2db      	uxtb	r3, r3
 80020a2:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	095b      	lsrs	r3, r3, #5
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	b2da      	uxtb	r2, r3
 80020b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020b8:	4917      	ldr	r1, [pc, #92]	; (8002118 <SpiritManagementSetFrequencyBase+0x1fc>)
 80020ba:	5ccb      	ldrb	r3, [r1, r3]
 80020bc:	4313      	orrs	r3, r2
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80020c2:	f107 0308 	add.w	r3, r7, #8
 80020c6:	461a      	mov	r2, r3
 80020c8:	2104      	movs	r1, #4
 80020ca:	2008      	movs	r0, #8
 80020cc:	f002 f802 	bl	80040d4 <RadioSpiWriteRegisters>
 80020d0:	4602      	mov	r2, r0
 80020d2:	4b12      	ldr	r3, [pc, #72]	; (800211c <SpiritManagementSetFrequencyBase+0x200>)
 80020d4:	b212      	sxth	r2, r2
 80020d6:	4611      	mov	r1, r2
 80020d8:	7019      	strb	r1, [r3, #0]
 80020da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020de:	705a      	strb	r2, [r3, #1]
}
 80020e0:	bf00      	nop
 80020e2:	3728      	adds	r7, #40	; 0x28
 80020e4:	46bd      	mov	sp, r7
 80020e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020ea:	bf00      	nop
 80020ec:	2e5f5680 	.word	0x2e5f5680
 80020f0:	390c2fe0 	.word	0x390c2fe0
 80020f4:	1701e47f 	.word	0x1701e47f
 80020f8:	1c146a60 	.word	0x1c146a60
 80020fc:	11d260bf 	.word	0x11d260bf
 8002100:	14ced7e0 	.word	0x14ced7e0
 8002104:	099cf4e1 	.word	0x099cf4e1
 8002108:	1339e9c3 	.word	0x1339e9c3
 800210c:	19a28d05 	.word	0x19a28d05
 8002110:	33451a0a 	.word	0x33451a0a
 8002114:	0800bae4 	.word	0x0800bae4
 8002118:	0800bae0 	.word	0x0800bae0
 800211c:	200021f0 	.word	0x200021f0

08002120 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800212a:	2300      	movs	r3, #0
 800212c:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 800212e:	f001 fde1 	bl	8003cf4 <SpiritRadioGetXtalFrequency>
 8002132:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002134:	2300      	movs	r3, #0
 8002136:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4a57      	ldr	r2, [pc, #348]	; (8002298 <SpiritManagementWaVcoCalibration+0x178>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d90f      	bls.n	8002160 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002140:	f001 fd64 	bl	8003c0c <SpiritRadioGetRefDiv>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d10a      	bne.n	8002160 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 800214e:	f001 f8cf 	bl	80032f0 <SpiritRadioGetFrequencyBase>
 8002152:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002154:	2001      	movs	r0, #1
 8002156:	f001 fd29 	bl	8003bac <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff fede 	bl	8001f1c <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002160:	f001 f8c6 	bl	80032f0 <SpiritRadioGetFrequencyBase>
 8002164:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 8002166:	2325      	movs	r3, #37	; 0x25
 8002168:	707b      	strb	r3, [r7, #1]
 800216a:	1c7b      	adds	r3, r7, #1
 800216c:	461a      	mov	r2, r3
 800216e:	2101      	movs	r1, #1
 8002170:	20a1      	movs	r0, #161	; 0xa1
 8002172:	f001 ffaf 	bl	80040d4 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 8002176:	2001      	movs	r0, #1
 8002178:	f7ff fcb6 	bl	8001ae8 <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 800217c:	f001 ff78 	bl	8004070 <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002180:	4b46      	ldr	r3, [pc, #280]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002188:	b2db      	uxtb	r3, r3
 800218a:	2b40      	cmp	r3, #64	; 0x40
 800218c:	d10d      	bne.n	80021aa <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 800218e:	2301      	movs	r3, #1
 8002190:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002192:	2062      	movs	r0, #98	; 0x62
 8002194:	f7ff fd8e 	bl	8001cb4 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 8002198:	f001 ff6a 	bl	8004070 <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 800219c:	4b3f      	ldr	r3, [pc, #252]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b03      	cmp	r3, #3
 80021a8:	d1f6      	bne.n	8002198 <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 80021aa:	2066      	movs	r0, #102	; 0x66
 80021ac:	f7ff fd82 	bl	8001cb4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80021b4:	f001 ff5c 	bl	8004070 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80021b8:	4b38      	ldr	r3, [pc, #224]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	2b13      	cmp	r3, #19
 80021c4:	d106      	bne.n	80021d4 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80021c6:	7b7b      	ldrb	r3, [r7, #13]
 80021c8:	1c5a      	adds	r2, r3, #1
 80021ca:	737a      	strb	r2, [r7, #13]
 80021cc:	2b05      	cmp	r3, #5
 80021ce:	d101      	bne.n	80021d4 <SpiritManagementWaVcoCalibration+0xb4>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e05d      	b.n	8002290 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80021d4:	4b31      	ldr	r3, [pc, #196]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b0f      	cmp	r3, #15
 80021e0:	d1e8      	bne.n	80021b4 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80021e2:	f7ff fcb9 	bl	8001b58 <SpiritCalibrationGetVcoCalData>
 80021e6:	4603      	mov	r3, r0
 80021e8:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80021ea:	2062      	movs	r0, #98	; 0x62
 80021ec:	f7ff fd62 	bl	8001cb4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80021f0:	f001 ff3e 	bl	8004070 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80021f4:	4b29      	ldr	r3, [pc, #164]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021fc:	b2db      	uxtb	r3, r3
 80021fe:	2b03      	cmp	r3, #3
 8002200:	d1f6      	bne.n	80021f0 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 8002202:	2065      	movs	r0, #101	; 0x65
 8002204:	f7ff fd56 	bl	8001cb4 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 8002208:	2300      	movs	r3, #0
 800220a:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 800220c:	f001 ff30 	bl	8004070 <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002210:	4b22      	ldr	r3, [pc, #136]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b13      	cmp	r3, #19
 800221c:	d106      	bne.n	800222c <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 800221e:	7b7b      	ldrb	r3, [r7, #13]
 8002220:	1c5a      	adds	r2, r3, #1
 8002222:	737a      	strb	r2, [r7, #13]
 8002224:	2b05      	cmp	r3, #5
 8002226:	d101      	bne.n	800222c <SpiritManagementWaVcoCalibration+0x10c>
 8002228:	2301      	movs	r3, #1
 800222a:	e031      	b.n	8002290 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 800222c:	4b1b      	ldr	r3, [pc, #108]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b0f      	cmp	r3, #15
 8002238:	d1e8      	bne.n	800220c <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800223a:	f7ff fc8d 	bl	8001b58 <SpiritCalibrationGetVcoCalData>
 800223e:	4603      	mov	r3, r0
 8002240:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002242:	2062      	movs	r0, #98	; 0x62
 8002244:	f7ff fd36 	bl	8001cb4 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 8002248:	f001 ff12 	bl	8004070 <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 800224c:	4b13      	ldr	r3, [pc, #76]	; (800229c <SpiritManagementWaVcoCalibration+0x17c>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002254:	b2db      	uxtb	r3, r3
 8002256:	2b03      	cmp	r3, #3
 8002258:	d1f6      	bne.n	8002248 <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800225a:	7bbb      	ldrb	r3, [r7, #14]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d102      	bne.n	8002266 <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002260:	2063      	movs	r0, #99	; 0x63
 8002262:	f7ff fd27 	bl	8001cb4 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 8002266:	2000      	movs	r0, #0
 8002268:	f7ff fc3e 	bl	8001ae8 <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 800226c:	7bfb      	ldrb	r3, [r7, #15]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d005      	beq.n	800227e <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002272:	2000      	movs	r0, #0
 8002274:	f001 fc9a 	bl	8003bac <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff fe4f 	bl	8001f1c <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 800227e:	78fb      	ldrb	r3, [r7, #3]
 8002280:	4618      	mov	r0, r3
 8002282:	f7ff fc85 	bl	8001b90 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 8002286:	78bb      	ldrb	r3, [r7, #2]
 8002288:	4618      	mov	r0, r3
 800228a:	f7ff fcb5 	bl	8001bf8 <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3710      	adds	r7, #16
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	01c9c380 	.word	0x01c9c380
 800229c:	200021f0 	.word	0x200021f0

080022a0 <SpiritManagementWaCmdStrobeTx>:


void SpiritManagementWaCmdStrobeTx(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_TX)
 80022a6:	4b16      	ldr	r3, [pc, #88]	; (8002300 <SpiritManagementWaCmdStrobeTx+0x60>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d023      	beq.n	80022f8 <SpiritManagementWaCmdStrobeTx+0x58>
  {
    //uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
    
    /* To achive the max output power */
    if(s_nDesiredFrequency>=150000000 && s_nDesiredFrequency<=470000000)
 80022b0:	4b14      	ldr	r3, [pc, #80]	; (8002304 <SpiritManagementWaCmdStrobeTx+0x64>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a14      	ldr	r2, [pc, #80]	; (8002308 <SpiritManagementWaCmdStrobeTx+0x68>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d908      	bls.n	80022cc <SpiritManagementWaCmdStrobeTx+0x2c>
 80022ba:	4b12      	ldr	r3, [pc, #72]	; (8002304 <SpiritManagementWaCmdStrobeTx+0x64>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a13      	ldr	r2, [pc, #76]	; (800230c <SpiritManagementWaCmdStrobeTx+0x6c>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d803      	bhi.n	80022cc <SpiritManagementWaCmdStrobeTx+0x2c>
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_3_6_PF);
 80022c4:	20c0      	movs	r0, #192	; 0xc0
 80022c6:	f001 fbe7 	bl	8003a98 <SpiritRadioSetPACwc>
 80022ca:	e002      	b.n	80022d2 <SpiritManagementWaCmdStrobeTx+0x32>
    }
    else
    {
      /* Optimal setting for Tx mode only */
      SpiritRadioSetPACwc(LOAD_0_PF);
 80022cc:	2000      	movs	r0, #0
 80022ce:	f001 fbe3 	bl	8003a98 <SpiritRadioSetPACwc>
    }
    
    uint8_t tmp = 0x11; SpiritSpiWriteRegisters(0xa9, 1, &tmp); /* Enable VCO_L buffer */
 80022d2:	2311      	movs	r3, #17
 80022d4:	71fb      	strb	r3, [r7, #7]
 80022d6:	1dfb      	adds	r3, r7, #7
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	20a9      	movs	r0, #169	; 0xa9
 80022de:	f001 fef9 	bl	80040d4 <RadioSpiWriteRegisters>
    tmp = 0x20; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */
 80022e2:	2320      	movs	r3, #32
 80022e4:	71fb      	strb	r3, [r7, #7]
 80022e6:	1dfb      	adds	r3, r7, #7
 80022e8:	461a      	mov	r2, r3
 80022ea:	2101      	movs	r1, #1
 80022ec:	20a5      	movs	r0, #165	; 0xa5
 80022ee:	f001 fef1 	bl	80040d4 <RadioSpiWriteRegisters>
    
    s_cCommunicationState = COMMUNICATION_STATE_TX;
 80022f2:	4b03      	ldr	r3, [pc, #12]	; (8002300 <SpiritManagementWaCmdStrobeTx+0x60>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]
  }
}
 80022f8:	bf00      	nop
 80022fa:	3708      	adds	r7, #8
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000001c 	.word	0x2000001c
 8002304:	200021e8 	.word	0x200021e8
 8002308:	08f0d17f 	.word	0x08f0d17f
 800230c:	1c03a180 	.word	0x1c03a180

08002310 <SpiritManagementWaCmdStrobeRx>:


void SpiritManagementWaCmdStrobeRx(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	b2db      	uxtb	r3, r3
 800231c:	2b01      	cmp	r3, #1
 800231e:	d00d      	beq.n	800233c <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 8002320:	2398      	movs	r3, #152	; 0x98
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	1dfb      	adds	r3, r7, #7
 8002326:	461a      	mov	r2, r3
 8002328:	2101      	movs	r1, #1
 800232a:	20a5      	movs	r0, #165	; 0xa5
 800232c:	f001 fed2 	bl	80040d4 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 8002330:	2000      	movs	r0, #0
 8002332:	f001 fbb1 	bl	8003a98 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 8002336:	4b03      	ldr	r3, [pc, #12]	; (8002344 <SpiritManagementWaCmdStrobeRx+0x34>)
 8002338:	2201      	movs	r2, #1
 800233a:	701a      	strb	r2, [r3, #0]
  }
}
 800233c:	bf00      	nop
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	2000001c 	.word	0x2000001c

08002348 <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SpiritManagementWaTRxFcMem+0x20>)
 8002352:	2202      	movs	r2, #2
 8002354:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <SpiritManagementWaTRxFcMem+0x24>)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6013      	str	r3, [r2, #0]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002366:	4770      	bx	lr
 8002368:	2000001c 	.word	0x2000001c
 800236c:	200021e8 	.word	0x200021e8

08002370 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 8002376:	23ca      	movs	r3, #202	; 0xca
 8002378:	71fb      	strb	r3, [r7, #7]
 800237a:	1dfb      	adds	r3, r7, #7
 800237c:	461a      	mov	r2, r3
 800237e:	2101      	movs	r1, #1
 8002380:	20b2      	movs	r0, #178	; 0xb2
 8002382:	f001 fea7 	bl	80040d4 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002386:	2304      	movs	r3, #4
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	1dfb      	adds	r3, r7, #7
 800238c:	461a      	mov	r2, r3
 800238e:	2101      	movs	r1, #1
 8002390:	20a8      	movs	r0, #168	; 0xa8
 8002392:	f001 fe9f 	bl	80040d4 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 8002396:	1dfb      	adds	r3, r7, #7
 8002398:	461a      	mov	r2, r3
 800239a:	2101      	movs	r1, #1
 800239c:	20a8      	movs	r0, #168	; 0xa8
 800239e:	f001 fee5 	bl	800416c <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 80023a2:	2300      	movs	r3, #0
 80023a4:	71fb      	strb	r3, [r7, #7]
 80023a6:	1dfb      	adds	r3, r7, #7
 80023a8:	461a      	mov	r2, r3
 80023aa:	2101      	movs	r1, #1
 80023ac:	20a8      	movs	r0, #168	; 0xa8
 80023ae:	f001 fe91 	bl	80040d4 <RadioSpiWriteRegisters>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
	...

080023bc <SpiritPktBasicGetAddressField>:
 * @brief  Specifies if the Address field for SPIRIT Basic packets is enabled or disabled.
 * @param  None.
 * @retval SpiritFunctionalState Notifies if the address field is enabled or disabled.
 */
SpiritFunctionalState SpiritPktBasicGetAddressField(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b082      	sub	sp, #8
 80023c0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 80023c2:	1dfb      	adds	r3, r7, #7
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	2030      	movs	r0, #48	; 0x30
 80023ca:	f001 fecf 	bl	800416c <RadioSpiReadRegisters>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <SpiritPktBasicGetAddressField+0x3c>)
 80023d2:	b212      	sxth	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	7019      	strb	r1, [r3, #0]
 80023d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023dc:	705a      	strb	r2, [r3, #1]

  /* Returns the address field value */
  if(tempRegValue & PCKTCTRL4_ADDRESS_LEN_MASK)
 80023de:	79fb      	ldrb	r3, [r7, #7]
 80023e0:	f003 0318 	and.w	r3, r3, #24
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <SpiritPktBasicGetAddressField+0x30>
  {
    return S_ENABLE;
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <SpiritPktBasicGetAddressField+0x32>
  }
  else
  {
    return S_DISABLE;
 80023ec:	2300      	movs	r3, #0
  }

}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	200021f0 	.word	0x200021f0

080023fc <SpiritPktBasicSetPayloadLength>:
 * @param  nPayloadLength payload length in bytes.
 *         This parameter is an uint16_t.
 * @retval None.
 */
void SpiritPktBasicSetPayloadLength(uint16_t nPayloadLength)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
  uint8_t tempRegValue[2];
  uint16_t overSize=0;
 8002406:	2300      	movs	r3, #0
 8002408:	81fb      	strh	r3, [r7, #14]

  /* Computes the oversize (address + control) size */
  if(SpiritPktBasicGetAddressField())
 800240a:	f7ff ffd7 	bl	80023bc <SpiritPktBasicGetAddressField>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d001      	beq.n	8002418 <SpiritPktBasicSetPayloadLength+0x1c>
  {
    overSize=1;
 8002414:	2301      	movs	r3, #1
 8002416:	81fb      	strh	r3, [r7, #14]
  }
  overSize += (uint16_t) SpiritPktBasicGetControlLength();
 8002418:	f000 f828 	bl	800246c <SpiritPktCommonGetControlLength>
 800241c:	4603      	mov	r3, r0
 800241e:	b29a      	uxth	r2, r3
 8002420:	89fb      	ldrh	r3, [r7, #14]
 8002422:	4413      	add	r3, r2
 8002424:	81fb      	strh	r3, [r7, #14]

  /* Computes PCKTLEN0 value from nPayloadLength */
  tempRegValue[1]=BASIC_BUILD_PCKTLEN0(nPayloadLength+overSize);
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	b2da      	uxtb	r2, r3
 800242a:	89fb      	ldrh	r3, [r7, #14]
 800242c:	b2db      	uxtb	r3, r3
 800242e:	4413      	add	r3, r2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	737b      	strb	r3, [r7, #13]
  /* Computes PCKTLEN1 value from nPayloadLength */
  tempRegValue[0]=BASIC_BUILD_PCKTLEN1(nPayloadLength+overSize);
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	89fb      	ldrh	r3, [r7, #14]
 8002438:	4413      	add	r3, r2
 800243a:	121b      	asrs	r3, r3, #8
 800243c:	b2db      	uxtb	r3, r3
 800243e:	733b      	strb	r3, [r7, #12]

  /* Writes data on the PCKTLEN1/0 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKTLEN1_BASE, 2, tempRegValue);
 8002440:	f107 030c 	add.w	r3, r7, #12
 8002444:	461a      	mov	r2, r3
 8002446:	2102      	movs	r1, #2
 8002448:	2034      	movs	r0, #52	; 0x34
 800244a:	f001 fe43 	bl	80040d4 <RadioSpiWriteRegisters>
 800244e:	4602      	mov	r2, r0
 8002450:	4b05      	ldr	r3, [pc, #20]	; (8002468 <SpiritPktBasicSetPayloadLength+0x6c>)
 8002452:	b212      	sxth	r2, r2
 8002454:	4611      	mov	r1, r2
 8002456:	7019      	strb	r1, [r3, #0]
 8002458:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800245c:	705a      	strb	r2, [r3, #1]

}
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	200021f0 	.word	0x200021f0

0800246c <SpiritPktCommonGetControlLength>:
 * @brief  Returns the CONTROL field length for SPIRIT packets.
 * @param  None.
 * @retval uint8_t Control field length.
 */
uint8_t SpiritPktCommonGetControlLength(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b082      	sub	sp, #8
 8002470:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the PCKTCTRL4 register value */
  g_xStatus = SpiritSpiReadRegisters(PCKTCTRL4_BASE, 1, &tempRegValue);
 8002472:	1dfb      	adds	r3, r7, #7
 8002474:	461a      	mov	r2, r3
 8002476:	2101      	movs	r1, #1
 8002478:	2030      	movs	r0, #48	; 0x30
 800247a:	f001 fe77 	bl	800416c <RadioSpiReadRegisters>
 800247e:	4602      	mov	r2, r0
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <SpiritPktCommonGetControlLength+0x34>)
 8002482:	b212      	sxth	r2, r2
 8002484:	4611      	mov	r1, r2
 8002486:	7019      	strb	r1, [r3, #0]
 8002488:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800248c:	705a      	strb	r2, [r3, #1]

  /* Rebuild and return value */
  return (tempRegValue & PCKTCTRL4_CONTROL_LEN_MASK);
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	f003 0307 	and.w	r3, r3, #7
 8002494:	b2db      	uxtb	r3, r3

}
 8002496:	4618      	mov	r0, r3
 8002498:	3708      	adds	r7, #8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	200021f0 	.word	0x200021f0

080024a4 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	4603      	mov	r3, r0
 80024ac:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80024ae:	f107 030f 	add.w	r3, r7, #15
 80024b2:	461a      	mov	r2, r3
 80024b4:	2101      	movs	r1, #1
 80024b6:	204f      	movs	r0, #79	; 0x4f
 80024b8:	f001 fe58 	bl	800416c <RadioSpiReadRegisters>
 80024bc:	4602      	mov	r2, r0
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <SpiritPktCommonFilterOnCrc+0x6c>)
 80024c0:	b212      	sxth	r2, r2
 80024c2:	4611      	mov	r1, r2
 80024c4:	7019      	strb	r1, [r3, #0]
 80024c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024ca:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d105      	bne.n	80024de <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	f043 0301 	orr.w	r3, r3, #1
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	73fb      	strb	r3, [r7, #15]
 80024dc:	e004      	b.n	80024e8 <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80024de:	7bfb      	ldrb	r3, [r7, #15]
 80024e0:	f023 0301 	bic.w	r3, r3, #1
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80024e8:	f107 030f 	add.w	r3, r7, #15
 80024ec:	461a      	mov	r2, r3
 80024ee:	2101      	movs	r1, #1
 80024f0:	204f      	movs	r0, #79	; 0x4f
 80024f2:	f001 fdef 	bl	80040d4 <RadioSpiWriteRegisters>
 80024f6:	4602      	mov	r2, r0
 80024f8:	4b05      	ldr	r3, [pc, #20]	; (8002510 <SpiritPktCommonFilterOnCrc+0x6c>)
 80024fa:	b212      	sxth	r2, r2
 80024fc:	4611      	mov	r1, r2
 80024fe:	7019      	strb	r1, [r3, #0]
 8002500:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002504:	705a      	strb	r2, [r3, #1]

}
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	200021f0 	.word	0x200021f0

08002514 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b082      	sub	sp, #8
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 800251e:	1dfb      	adds	r3, r7, #7
 8002520:	461a      	mov	r2, r3
 8002522:	2101      	movs	r1, #1
 8002524:	204b      	movs	r0, #75	; 0x4b
 8002526:	f001 fdd5 	bl	80040d4 <RadioSpiWriteRegisters>
 800252a:	4602      	mov	r2, r0
 800252c:	4b05      	ldr	r3, [pc, #20]	; (8002544 <SpiritPktCommonSetDestinationAddress+0x30>)
 800252e:	b212      	sxth	r2, r2
 8002530:	4611      	mov	r1, r2
 8002532:	7019      	strb	r1, [r3, #0]
 8002534:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002538:	705a      	strb	r2, [r3, #1]

}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	200021f0 	.word	0x200021f0

08002548 <SpiritPktCommonGetReceivedSourceAddress>:
 * @brief  Returns the source address of the received packet.
 * @param  None.
 * @retval uint8_t Source address of the received packet.
 */
uint8_t SpiritPktCommonGetReceivedSourceAddress(void)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b082      	sub	sp, #8
 800254c:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the RX_ADDR_FIELD1 register value */
  g_xStatus = SpiritSpiReadRegisters(RX_ADDR_FIELD1_BASE, 1, &tempRegValue);
 800254e:	1dfb      	adds	r3, r7, #7
 8002550:	461a      	mov	r2, r3
 8002552:	2101      	movs	r1, #1
 8002554:	20d2      	movs	r0, #210	; 0xd2
 8002556:	f001 fe09 	bl	800416c <RadioSpiReadRegisters>
 800255a:	4602      	mov	r2, r0
 800255c:	4b05      	ldr	r3, [pc, #20]	; (8002574 <SpiritPktCommonGetReceivedSourceAddress+0x2c>)
 800255e:	b212      	sxth	r2, r2
 8002560:	4611      	mov	r1, r2
 8002562:	7019      	strb	r1, [r3, #0]
 8002564:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002568:	705a      	strb	r2, [r3, #1]

  /* Returns value */
  return tempRegValue;
 800256a:	79fb      	ldrb	r3, [r7, #7]

}
 800256c:	4618      	mov	r0, r3
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200021f0 	.word	0x200021f0

08002578 <SpiritPktStackInit>:
 * @param  pxPktStackInit STack packet init structure.
 *         This parameter is a pointer to @ref PktStackInit.
 * @retval None.
 */
void SpiritPktStackInit(PktStackInit* pxPktStackInit)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackInit->xDataWhitening));
  s_assert_param(IS_STACK_CONTROL_LENGTH(pxPktStackInit->xControlLength));


  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002580:	f107 0308 	add.w	r3, r7, #8
 8002584:	461a      	mov	r2, r3
 8002586:	2101      	movs	r1, #1
 8002588:	2051      	movs	r0, #81	; 0x51
 800258a:	f001 fdef 	bl	800416c <RadioSpiReadRegisters>
 800258e:	4602      	mov	r2, r0
 8002590:	4b60      	ldr	r3, [pc, #384]	; (8002714 <SpiritPktStackInit+0x19c>)
 8002592:	b212      	sxth	r2, r2
 8002594:	4611      	mov	r1, r2
 8002596:	7019      	strb	r1, [r3, #0]
 8002598:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800259c:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 800259e:	7a3b      	ldrb	r3, [r7, #8]
 80025a0:	f023 0320 	bic.w	r3, r3, #32
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	723b      	strb	r3, [r7, #8]

  /* Always (!) set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 80025a8:	7a3b      	ldrb	r3, [r7, #8]
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 80025b2:	f107 0308 	add.w	r3, r7, #8
 80025b6:	461a      	mov	r2, r3
 80025b8:	2101      	movs	r1, #1
 80025ba:	2051      	movs	r0, #81	; 0x51
 80025bc:	f001 fd8a 	bl	80040d4 <RadioSpiWriteRegisters>
 80025c0:	4602      	mov	r2, r0
 80025c2:	4b54      	ldr	r3, [pc, #336]	; (8002714 <SpiritPktStackInit+0x19c>)
 80025c4:	b212      	sxth	r2, r2
 80025c6:	4611      	mov	r1, r2
 80025c8:	7019      	strb	r1, [r3, #0]
 80025ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025ce:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80025d0:	f107 0308 	add.w	r3, r7, #8
 80025d4:	461a      	mov	r2, r3
 80025d6:	2101      	movs	r1, #1
 80025d8:	204f      	movs	r0, #79	; 0x4f
 80025da:	f001 fdc7 	bl	800416c <RadioSpiReadRegisters>
 80025de:	4602      	mov	r2, r0
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <SpiritPktStackInit+0x19c>)
 80025e2:	b212      	sxth	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	7019      	strb	r1, [r3, #0]
 80025e8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025ec:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80025ee:	7a3b      	ldrb	r3, [r7, #8]
 80025f0:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80025f8:	f107 0308 	add.w	r3, r7, #8
 80025fc:	461a      	mov	r2, r3
 80025fe:	2101      	movs	r1, #1
 8002600:	204f      	movs	r0, #79	; 0x4f
 8002602:	f001 fd67 	bl	80040d4 <RadioSpiWriteRegisters>
 8002606:	4602      	mov	r2, r0
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <SpiritPktStackInit+0x19c>)
 800260a:	b212      	sxth	r2, r2
 800260c:	4611      	mov	r1, r2
 800260e:	7019      	strb	r1, [r3, #0]
 8002610:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002614:	705a      	strb	r2, [r3, #1]


  /* Address and control length setting: source and destination address are always present so ADDRESS_LENGTH=2 */
  tempRegValue[0] = 0x10 | ((uint8_t) pxPktStackInit->xControlLength);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	7adb      	ldrb	r3, [r3, #11]
 800261a:	f043 0310 	orr.w	r3, r3, #16
 800261e:	b2db      	uxtb	r3, r3
 8002620:	723b      	strb	r3, [r7, #8]


  /* Packet format and width length setting */
  pxPktStackInit->cPktLengthWidth == 0 ? pxPktStackInit->cPktLengthWidth=1 : pxPktStackInit->cPktLengthWidth;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	7a5b      	ldrb	r3, [r3, #9]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d102      	bne.n	8002630 <SpiritPktStackInit+0xb8>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2201      	movs	r2, #1
 800262e:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_STACK) | ((uint8_t)(pxPktStackInit->cPktLengthWidth-1));
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	7a5b      	ldrb	r3, [r3, #9]
 8002634:	3b01      	subs	r3, #1
 8002636:	b2db      	uxtb	r3, r3
 8002638:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800263c:	b2db      	uxtb	r3, r3
 800263e:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	781a      	ldrb	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	785b      	ldrb	r3, [r3, #1]
 8002648:	4313      	orrs	r3, r2
 800264a:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktStackInit->xFixVarLength);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktStackInit->xPreambleLength) | ((uint8_t) pxPktStackInit->xSyncLength) |
 8002650:	4313      	orrs	r3, r2
 8002652:	b2db      	uxtb	r3, r3
 8002654:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktStackInit->xCrcMode;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	7a9b      	ldrb	r3, [r3, #10]
 800265a:	72fb      	strb	r3, [r7, #11]

  if(pxPktStackInit->xDataWhitening == S_ENABLE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	7b5b      	ldrb	r3, [r3, #13]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d104      	bne.n	800266e <SpiritPktStackInit+0xf6>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002664:	7afb      	ldrb	r3, [r7, #11]
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	b2db      	uxtb	r3, r3
 800266c:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktStackInit->xFec == S_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	7b1b      	ldrb	r3, [r3, #12]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d104      	bne.n	8002680 <SpiritPktStackInit+0x108>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 8002676:	7afb      	ldrb	r3, [r7, #11]
 8002678:	f043 0301 	orr.w	r3, r3, #1
 800267c:	b2db      	uxtb	r3, r3
 800267e:	72fb      	strb	r3, [r7, #11]
  }
  
  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002680:	f107 0308 	add.w	r3, r7, #8
 8002684:	461a      	mov	r2, r3
 8002686:	2104      	movs	r1, #4
 8002688:	2030      	movs	r0, #48	; 0x30
 800268a:	f001 fd23 	bl	80040d4 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e01d      	b.n	80026d0 <SpiritPktStackInit+0x158>
  {
    if(i<3-(pxPktStackInit->xSyncLength >>1))
 8002694:	7bfa      	ldrb	r2, [r7, #15]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	785b      	ldrb	r3, [r3, #1]
 800269a:	085b      	lsrs	r3, r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	f1c3 0303 	rsb	r3, r3, #3
 80026a2:	429a      	cmp	r2, r3
 80026a4:	da06      	bge.n	80026b4 <SpiritPktStackInit+0x13c>
    {
      tempRegValue[i]=0;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	3310      	adds	r3, #16
 80026aa:	443b      	add	r3, r7
 80026ac:	2200      	movs	r2, #0
 80026ae:	f803 2c08 	strb.w	r2, [r3, #-8]
 80026b2:	e00a      	b.n	80026ca <SpiritPktStackInit+0x152>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktStackInit->lSyncWords>>(8*i));
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685a      	ldr	r2, [r3, #4]
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	40da      	lsrs	r2, r3
 80026be:	7bfb      	ldrb	r3, [r7, #15]
 80026c0:	b2d2      	uxtb	r2, r2
 80026c2:	3310      	adds	r3, #16
 80026c4:	443b      	add	r3, r7
 80026c6:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
 80026cc:	3301      	adds	r3, #1
 80026ce:	73fb      	strb	r3, [r7, #15]
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
 80026d2:	2b03      	cmp	r3, #3
 80026d4:	d9de      	bls.n	8002694 <SpiritPktStackInit+0x11c>
    }
  }

  /* Enables or disables the CRC check */
  if(pxPktStackInit->xCrcMode == PKT_NO_CRC)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	7a9b      	ldrb	r3, [r3, #10]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d103      	bne.n	80026e6 <SpiritPktStackInit+0x16e>
  {
    SpiritPktStackFilterOnCrc(S_DISABLE);
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fee0 	bl	80024a4 <SpiritPktCommonFilterOnCrc>
 80026e4:	e002      	b.n	80026ec <SpiritPktStackInit+0x174>
  }
  else
  {
    SpiritPktStackFilterOnCrc(S_ENABLE);
 80026e6:	2001      	movs	r0, #1
 80026e8:	f7ff fedc 	bl	80024a4 <SpiritPktCommonFilterOnCrc>
  }

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 80026ec:	f107 0308 	add.w	r3, r7, #8
 80026f0:	461a      	mov	r2, r3
 80026f2:	2104      	movs	r1, #4
 80026f4:	2036      	movs	r0, #54	; 0x36
 80026f6:	f001 fced 	bl	80040d4 <RadioSpiWriteRegisters>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <SpiritPktStackInit+0x19c>)
 80026fe:	b212      	sxth	r2, r2
 8002700:	4611      	mov	r1, r2
 8002702:	7019      	strb	r1, [r3, #0]
 8002704:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002708:	705a      	strb	r2, [r3, #1]

}
 800270a:	bf00      	nop
 800270c:	3710      	adds	r7, #16
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
 8002712:	bf00      	nop
 8002714:	200021f0 	.word	0x200021f0

08002718 <SpiritPktStackAddressesInit>:
 * @param  pxPktStackAddresses STack packet addresses init structure.
 *         This parameter is a pointer to @ref PktStackAddressesInit .
 * @retval None.
 */
void SpiritPktStackAddressesInit(PktStackAddressesInit* pxPktStackAddresses)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMyAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktStackAddresses->xFilterOnBroadcastAddress));
  
  /* Reads the filtering options ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002720:	f107 030c 	add.w	r3, r7, #12
 8002724:	461a      	mov	r2, r3
 8002726:	2101      	movs	r1, #1
 8002728:	204f      	movs	r0, #79	; 0x4f
 800272a:	f001 fd1f 	bl	800416c <RadioSpiReadRegisters>
 800272e:	4602      	mov	r2, r0
 8002730:	4b2f      	ldr	r3, [pc, #188]	; (80027f0 <SpiritPktStackAddressesInit+0xd8>)
 8002732:	b212      	sxth	r2, r2
 8002734:	4611      	mov	r1, r2
 8002736:	7019      	strb	r1, [r3, #0]
 8002738:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800273c:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktStackAddresses->xFilterOnMyAddress == S_ENABLE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d105      	bne.n	8002752 <SpiritPktStackAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002746:	7b3b      	ldrb	r3, [r7, #12]
 8002748:	f043 0308 	orr.w	r3, r3, #8
 800274c:	b2db      	uxtb	r3, r3
 800274e:	733b      	strb	r3, [r7, #12]
 8002750:	e004      	b.n	800275c <SpiritPktStackAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002752:	7b3b      	ldrb	r3, [r7, #12]
 8002754:	f023 0308 	bic.w	r3, r3, #8
 8002758:	b2db      	uxtb	r3, r3
 800275a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktStackAddresses->xFilterOnMulticastAddress == S_ENABLE)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	789b      	ldrb	r3, [r3, #2]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d105      	bne.n	8002770 <SpiritPktStackAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002764:	7b3b      	ldrb	r3, [r7, #12]
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	b2db      	uxtb	r3, r3
 800276c:	733b      	strb	r3, [r7, #12]
 800276e:	e004      	b.n	800277a <SpiritPktStackAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002770:	7b3b      	ldrb	r3, [r7, #12]
 8002772:	f023 0304 	bic.w	r3, r3, #4
 8002776:	b2db      	uxtb	r3, r3
 8002778:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktStackAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	791b      	ldrb	r3, [r3, #4]
 800277e:	2b01      	cmp	r3, #1
 8002780:	d105      	bne.n	800278e <SpiritPktStackAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002782:	7b3b      	ldrb	r3, [r7, #12]
 8002784:	f043 0302 	orr.w	r3, r3, #2
 8002788:	b2db      	uxtb	r3, r3
 800278a:	733b      	strb	r3, [r7, #12]
 800278c:	e004      	b.n	8002798 <SpiritPktStackAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 800278e:	7b3b      	ldrb	r3, [r7, #12]
 8002790:	f023 0302 	bic.w	r3, r3, #2
 8002794:	b2db      	uxtb	r3, r3
 8002796:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes value on the register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	461a      	mov	r2, r3
 800279e:	2101      	movs	r1, #1
 80027a0:	204f      	movs	r0, #79	; 0x4f
 80027a2:	f001 fc97 	bl	80040d4 <RadioSpiWriteRegisters>
 80027a6:	4602      	mov	r2, r0
 80027a8:	4b11      	ldr	r3, [pc, #68]	; (80027f0 <SpiritPktStackAddressesInit+0xd8>)
 80027aa:	b212      	sxth	r2, r2
 80027ac:	4611      	mov	r1, r2
 80027ae:	7019      	strb	r1, [r3, #0]
 80027b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027b4:	705a      	strb	r2, [r3, #1]
  
  /* Fills array with the addresses passed in the structure */
  tempRegValue[0] = pxPktStackAddresses->cBroadcastAddress;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	795b      	ldrb	r3, [r3, #5]
 80027ba:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktStackAddresses->cMulticastAddress;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	78db      	ldrb	r3, [r3, #3]
 80027c0:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktStackAddresses->cMyAddress;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	785b      	ldrb	r3, [r3, #1]
 80027c6:	73bb      	strb	r3, [r7, #14]
  
  /* Writes them on the addresses registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 80027c8:	f107 030c 	add.w	r3, r7, #12
 80027cc:	461a      	mov	r2, r3
 80027ce:	2103      	movs	r1, #3
 80027d0:	204c      	movs	r0, #76	; 0x4c
 80027d2:	f001 fc7f 	bl	80040d4 <RadioSpiWriteRegisters>
 80027d6:	4602      	mov	r2, r0
 80027d8:	4b05      	ldr	r3, [pc, #20]	; (80027f0 <SpiritPktStackAddressesInit+0xd8>)
 80027da:	b212      	sxth	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	7019      	strb	r1, [r3, #0]
 80027e0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80027e4:	705a      	strb	r2, [r3, #1]
  
}
 80027e6:	bf00      	nop
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	200021f0 	.word	0x200021f0

080027f4 <SpiritPktStackLlpInit>:
* @param  pxPktStackLlpInit STack packet LLP init structure.
*         This parameter is a pointer to @ref PktStackLlpInit.
* @retval None.
*/
void SpiritPktStackLlpInit(PktStackLlpInit* pxPktStackLlpInit)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_STACK_NMAX_RETX(pxPktStackLlpInit->xNMaxRetx));
  /* check if piggybacking is enabled and autoack is disabled */
  s_assert_param(!(pxPktStackLlpInit->xPiggybacking==S_ENABLE && pxPktStackLlpInit->xAutoAck==S_DISABLE));

  /* Piggybacking mechanism setting on the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 80027fc:	f107 030c 	add.w	r3, r7, #12
 8002800:	461a      	mov	r2, r3
 8002802:	2102      	movs	r1, #2
 8002804:	2051      	movs	r0, #81	; 0x51
 8002806:	f001 fcb1 	bl	800416c <RadioSpiReadRegisters>
 800280a:	4602      	mov	r2, r0
 800280c:	4b21      	ldr	r3, [pc, #132]	; (8002894 <SpiritPktStackLlpInit+0xa0>)
 800280e:	b212      	sxth	r2, r2
 8002810:	4611      	mov	r1, r2
 8002812:	7019      	strb	r1, [r3, #0]
 8002814:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002818:	705a      	strb	r2, [r3, #1]
  if(pxPktStackLlpInit->xPiggybacking == S_ENABLE)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	785b      	ldrb	r3, [r3, #1]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d105      	bne.n	800282e <SpiritPktStackLlpInit+0x3a>
  {
    tempRegValue[0] |= PROTOCOL1_PIGGYBACKING_MASK;
 8002822:	7b3b      	ldrb	r3, [r7, #12]
 8002824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002828:	b2db      	uxtb	r3, r3
 800282a:	733b      	strb	r3, [r7, #12]
 800282c:	e004      	b.n	8002838 <SpiritPktStackLlpInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PROTOCOL1_PIGGYBACKING_MASK;
 800282e:	7b3b      	ldrb	r3, [r7, #12]
 8002830:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002834:	b2db      	uxtb	r3, r3
 8002836:	733b      	strb	r3, [r7, #12]
  }

  /* RX and TX autoack mechanisms setting on the PROTOCOL0 register */
  if(pxPktStackLlpInit->xAutoAck == S_ENABLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <SpiritPktStackLlpInit+0x58>
  {
    tempRegValue[1] |= PROTOCOL0_AUTO_ACK_MASK;
 8002840:	7b7b      	ldrb	r3, [r7, #13]
 8002842:	f043 0304 	orr.w	r3, r3, #4
 8002846:	b2db      	uxtb	r3, r3
 8002848:	737b      	strb	r3, [r7, #13]
 800284a:	e004      	b.n	8002856 <SpiritPktStackLlpInit+0x62>
  }
  else
  {
    tempRegValue[1] &= ~PROTOCOL0_AUTO_ACK_MASK;
 800284c:	7b7b      	ldrb	r3, [r7, #13]
 800284e:	f023 0304 	bic.w	r3, r3, #4
 8002852:	b2db      	uxtb	r3, r3
 8002854:	737b      	strb	r3, [r7, #13]
  }

  /* Max number of retransmission setting */
  tempRegValue[1] &= ~PROTOCOL0_NMAX_RETX_MASK;
 8002856:	7b7b      	ldrb	r3, [r7, #13]
 8002858:	f003 030f 	and.w	r3, r3, #15
 800285c:	b2db      	uxtb	r3, r3
 800285e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= pxPktStackLlpInit->xNMaxRetx;
 8002860:	7b7a      	ldrb	r2, [r7, #13]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	789b      	ldrb	r3, [r3, #2]
 8002866:	4313      	orrs	r3, r2
 8002868:	b2db      	uxtb	r3, r3
 800286a:	737b      	strb	r3, [r7, #13]

  /* Writes registers */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 2, tempRegValue);
 800286c:	f107 030c 	add.w	r3, r7, #12
 8002870:	461a      	mov	r2, r3
 8002872:	2102      	movs	r1, #2
 8002874:	2051      	movs	r0, #81	; 0x51
 8002876:	f001 fc2d 	bl	80040d4 <RadioSpiWriteRegisters>
 800287a:	4602      	mov	r2, r0
 800287c:	4b05      	ldr	r3, [pc, #20]	; (8002894 <SpiritPktStackLlpInit+0xa0>)
 800287e:	b212      	sxth	r2, r2
 8002880:	4611      	mov	r1, r2
 8002882:	7019      	strb	r1, [r3, #0]
 8002884:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002888:	705a      	strb	r2, [r3, #1]

}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	200021f0 	.word	0x200021f0

08002898 <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	4603      	mov	r3, r0
 80028a0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80028a2:	f107 030f 	add.w	r3, r7, #15
 80028a6:	461a      	mov	r2, r3
 80028a8:	2101      	movs	r1, #1
 80028aa:	203a      	movs	r0, #58	; 0x3a
 80028ac:	f001 fc5e 	bl	800416c <RadioSpiReadRegisters>
 80028b0:	4602      	mov	r2, r0
 80028b2:	4b14      	ldr	r3, [pc, #80]	; (8002904 <SpiritQiSqiCheck+0x6c>)
 80028b4:	b212      	sxth	r2, r2
 80028b6:	4611      	mov	r1, r2
 80028b8:	7019      	strb	r1, [r3, #0]
 80028ba:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028be:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d105      	bne.n	80028d2 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	f043 0302 	orr.w	r3, r3, #2
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	73fb      	strb	r3, [r7, #15]
 80028d0:	e004      	b.n	80028dc <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80028d2:	7bfb      	ldrb	r3, [r7, #15]
 80028d4:	f023 0302 	bic.w	r3, r3, #2
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80028dc:	f107 030f 	add.w	r3, r7, #15
 80028e0:	461a      	mov	r2, r3
 80028e2:	2101      	movs	r1, #1
 80028e4:	203a      	movs	r0, #58	; 0x3a
 80028e6:	f001 fbf5 	bl	80040d4 <RadioSpiWriteRegisters>
 80028ea:	4602      	mov	r2, r0
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <SpiritQiSqiCheck+0x6c>)
 80028ee:	b212      	sxth	r2, r2
 80028f0:	4611      	mov	r1, r2
 80028f2:	7019      	strb	r1, [r3, #0]
 80028f4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80028f8:	705a      	strb	r2, [r3, #1]

}
 80028fa:	bf00      	nop
 80028fc:	3710      	adds	r7, #16
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}
 8002902:	bf00      	nop
 8002904:	200021f0 	.word	0x200021f0

08002908 <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b084      	sub	sp, #16
 800290c:	af00      	add	r7, sp, #0
 800290e:	4603      	mov	r3, r0
 8002910:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002912:	f107 030f 	add.w	r3, r7, #15
 8002916:	461a      	mov	r2, r3
 8002918:	2101      	movs	r1, #1
 800291a:	203a      	movs	r0, #58	; 0x3a
 800291c:	f001 fc26 	bl	800416c <RadioSpiReadRegisters>
 8002920:	4602      	mov	r2, r0
 8002922:	4b12      	ldr	r3, [pc, #72]	; (800296c <SpiritQiSetSqiThreshold+0x64>)
 8002924:	b212      	sxth	r2, r2
 8002926:	4611      	mov	r1, r2
 8002928:	7019      	strb	r1, [r3, #0]
 800292a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800292e:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002936:	b2db      	uxtb	r3, r3
 8002938:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800293a:	7bfa      	ldrb	r2, [r7, #15]
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4313      	orrs	r3, r2
 8002940:	b2db      	uxtb	r3, r3
 8002942:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002944:	f107 030f 	add.w	r3, r7, #15
 8002948:	461a      	mov	r2, r3
 800294a:	2101      	movs	r1, #1
 800294c:	203a      	movs	r0, #58	; 0x3a
 800294e:	f001 fbc1 	bl	80040d4 <RadioSpiWriteRegisters>
 8002952:	4602      	mov	r2, r0
 8002954:	4b05      	ldr	r3, [pc, #20]	; (800296c <SpiritQiSetSqiThreshold+0x64>)
 8002956:	b212      	sxth	r2, r2
 8002958:	4611      	mov	r1, r2
 800295a:	7019      	strb	r1, [r3, #0]
 800295c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002960:	705a      	strb	r2, [r3, #1]

}
 8002962:	bf00      	nop
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	200021f0 	.word	0x200021f0

08002970 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b084      	sub	sp, #16
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	3382      	adds	r3, #130	; 0x82
 800297c:	b2db      	uxtb	r3, r3
 800297e:	005b      	lsls	r3, r3, #1
 8002980:	b2db      	uxtb	r3, r3
 8002982:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002984:	f107 030f 	add.w	r3, r7, #15
 8002988:	461a      	mov	r2, r3
 800298a:	2101      	movs	r1, #1
 800298c:	2022      	movs	r0, #34	; 0x22
 800298e:	f001 fba1 	bl	80040d4 <RadioSpiWriteRegisters>
 8002992:	4602      	mov	r2, r0
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <SpiritQiSetRssiThresholddBm+0x3c>)
 8002996:	b212      	sxth	r2, r2
 8002998:	4611      	mov	r1, r2
 800299a:	7019      	strb	r1, [r3, #0]
 800299c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80029a0:	705a      	strb	r2, [r3, #1]

}
 80029a2:	bf00      	nop
 80029a4:	3710      	adds	r7, #16
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	200021f0 	.word	0x200021f0

080029b0 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b08c      	sub	sp, #48	; 0x30
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 80029b8:	23a0      	movs	r3, #160	; 0xa0
 80029ba:	747b      	strb	r3, [r7, #17]
 80029bc:	f107 0311 	add.w	r3, r7, #17
 80029c0:	461a      	mov	r2, r3
 80029c2:	2101      	movs	r1, #1
 80029c4:	209f      	movs	r0, #159	; 0x9f
 80029c6:	f001 fb85 	bl	80040d4 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029d0:	ee07 3a90 	vmov	s15, r3
 80029d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	ee07 3a90 	vmov	s15, r3
 80029e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e8:	eddf 6aae 	vldr	s13, [pc, #696]	; 8002ca4 <SpiritRadioInit+0x2f4>
 80029ec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80029f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029f4:	ee17 3a90 	vmov	r3, s15
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80029fa:	2063      	movs	r0, #99	; 0x63
 80029fc:	f001 fc02 	bl	8004204 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a00:	2300      	movs	r3, #0
 8002a02:	73bb      	strb	r3, [r7, #14]
 8002a04:	e004      	b.n	8002a10 <SpiritRadioInit+0x60>
 8002a06:	7bbb      	ldrb	r3, [r7, #14]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	73bb      	strb	r3, [r7, #14]
 8002a10:	7bbb      	ldrb	r3, [r7, #14]
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2bff      	cmp	r3, #255	; 0xff
 8002a16:	d1f6      	bne.n	8002a06 <SpiritRadioInit+0x56>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a18:	f001 fb2a 	bl	8004070 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 8002a1c:	4ba2      	ldr	r3, [pc, #648]	; (8002ca8 <SpiritRadioInit+0x2f8>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b40      	cmp	r3, #64	; 0x40
 8002a28:	d1ea      	bne.n	8002a00 <SpiritRadioInit+0x50>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002a2a:	4ba0      	ldr	r3, [pc, #640]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4aa0      	ldr	r2, [pc, #640]	; (8002cb0 <SpiritRadioInit+0x300>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d803      	bhi.n	8002a3c <SpiritRadioInit+0x8c>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002a34:	2000      	movs	r0, #0
 8002a36:	f001 f90b 	bl	8003c50 <SpiritRadioSetDigDiv>
 8002a3a:	e002      	b.n	8002a42 <SpiritRadioInit+0x92>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002a3c:	2001      	movs	r0, #1
 8002a3e:	f001 f907 	bl	8003c50 <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 8002a42:	2062      	movs	r0, #98	; 0x62
 8002a44:	f001 fbde 	bl	8004204 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002a48:	2300      	movs	r3, #0
 8002a4a:	737b      	strb	r3, [r7, #13]
 8002a4c:	e004      	b.n	8002a58 <SpiritRadioInit+0xa8>
 8002a4e:	7b7b      	ldrb	r3, [r7, #13]
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	737b      	strb	r3, [r7, #13]
 8002a58:	7b7b      	ldrb	r3, [r7, #13]
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	2bff      	cmp	r3, #255	; 0xff
 8002a5e:	d1f6      	bne.n	8002a4e <SpiritRadioInit+0x9e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 8002a60:	f001 fb06 	bl	8004070 <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002a64:	4b90      	ldr	r3, [pc, #576]	; (8002ca8 <SpiritRadioInit+0x2f8>)
 8002a66:	781b      	ldrb	r3, [r3, #0]
 8002a68:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d1ea      	bne.n	8002a48 <SpiritRadioInit+0x98>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 8002a72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a74:	ee07 3a90 	vmov	s15, r3
 8002a78:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a7c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8002cb4 <SpiritRadioInit+0x304>
 8002a80:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002a84:	4b89      	ldr	r3, [pc, #548]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	ee07 3a90 	vmov	s15, r3
 8002a8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a98:	ee17 3a90 	vmov	r3, s15
 8002a9c:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002a9e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002aa0:	0a1b      	lsrs	r3, r3, #8
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002aae:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	025a      	lsls	r2, r3, #9
 8002aba:	4b7c      	ldr	r3, [pc, #496]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	099b      	lsrs	r3, r3, #6
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	3301      	adds	r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f7ff fc39 	bl	8002348 <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 8002ad6:	f107 0310 	add.w	r3, r7, #16
 8002ada:	461a      	mov	r2, r3
 8002adc:	2101      	movs	r1, #1
 8002ade:	20a3      	movs	r0, #163	; 0xa3
 8002ae0:	f001 fb44 	bl	800416c <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 8002ae4:	7c3b      	ldrb	r3, [r7, #16]
 8002ae6:	f023 0302 	bic.w	r3, r3, #2
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	743b      	strb	r3, [r7, #16]
 8002aee:	f107 0310 	add.w	r3, r7, #16
 8002af2:	461a      	mov	r2, r3
 8002af4:	2101      	movs	r1, #1
 8002af6:	20a3      	movs	r0, #163	; 0xa3
 8002af8:	f001 faec 	bl	80040d4 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	f107 0216 	add.w	r2, r7, #22
 8002b04:	f107 0117 	add.w	r1, r7, #23
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fc3d 	bl	8003388 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 8002b0e:	7dfb      	ldrb	r3, [r7, #23]
 8002b10:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	7b5a      	ldrb	r2, [r3, #13]
 8002b16:	7dbb      	ldrb	r3, [r7, #22]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002b1e:	f107 0310 	add.w	r3, r7, #16
 8002b22:	461a      	mov	r2, r3
 8002b24:	2101      	movs	r1, #1
 8002b26:	201c      	movs	r0, #28
 8002b28:	f001 fb20 	bl	800416c <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	695b      	ldr	r3, [r3, #20]
 8002b30:	f107 0214 	add.w	r2, r7, #20
 8002b34:	f107 0115 	add.w	r1, r7, #21
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f000 fdbd 	bl	80036b8 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002b3e:	7d3b      	ldrb	r3, [r7, #20]
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	b25a      	sxtb	r2, r3
 8002b44:	7c3b      	ldrb	r3, [r7, #16]
 8002b46:	b25b      	sxtb	r3, r3
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	b25b      	sxtb	r3, r3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	b25a      	sxtb	r2, r3
 8002b52:	7d7b      	ldrb	r3, [r7, #21]
 8002b54:	b25b      	sxtb	r3, r3
 8002b56:	4313      	orrs	r3, r2
 8002b58:	b25b      	sxtb	r3, r3
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	f107 0212 	add.w	r2, r7, #18
 8002b66:	f107 0113 	add.w	r1, r7, #19
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f000 fcbe 	bl	80034ec <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002b70:	7cfb      	ldrb	r3, [r7, #19]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	b25a      	sxtb	r2, r3
 8002b76:	7cbb      	ldrb	r3, [r7, #18]
 8002b78:	b25b      	sxtb	r3, r3
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	b25b      	sxtb	r3, r3
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002b82:	4b4a      	ldr	r3, [pc, #296]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	0b1b      	lsrs	r3, r3, #12
 8002b88:	ee07 3a90 	vmov	s15, r3
 8002b8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b90:	eddf 6a49 	vldr	s13, [pc, #292]	; 8002cb8 <SpiritRadioInit+0x308>
 8002b94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b98:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8002cbc <SpiritRadioInit+0x30c>
 8002b9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ba0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 8002ba4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ba8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb0:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002bb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bb8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002bbc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002bc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc4:	dd09      	ble.n	8002bda <SpiritRadioInit+0x22a>
 8002bc6:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bce:	edc7 7a00 	vstr	s15, [r7]
 8002bd2:	783b      	ldrb	r3, [r7, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	e006      	b.n	8002be8 <SpiritRadioInit+0x238>
 8002bda:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002bde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002be2:	edc7 7a00 	vstr	s15, [r7]
 8002be6:	783b      	ldrb	r3, [r7, #0]
 8002be8:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002bea:	4b30      	ldr	r3, [pc, #192]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a30      	ldr	r2, [pc, #192]	; (8002cb0 <SpiritRadioInit+0x300>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d802      	bhi.n	8002bfa <SpiritRadioInit+0x24a>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	777b      	strb	r3, [r7, #29]
 8002bf8:	e033      	b.n	8002c62 <SpiritRadioInit+0x2b2>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	0b5b      	lsrs	r3, r3, #13
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002c08:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002cb8 <SpiritRadioInit+0x308>
 8002c0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c10:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002cbc <SpiritRadioInit+0x30c>
 8002c14:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002c18:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002c1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002c2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c30:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002c34:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	dd09      	ble.n	8002c52 <SpiritRadioInit+0x2a2>
 8002c3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c46:	edc7 7a00 	vstr	s15, [r7]
 8002c4a:	783b      	ldrb	r3, [r7, #0]
 8002c4c:	3301      	adds	r3, #1
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	e006      	b.n	8002c60 <SpiritRadioInit+0x2b0>
 8002c52:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002c56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c5a:	edc7 7a00 	vstr	s15, [r7]
 8002c5e:	783b      	ldrb	r3, [r7, #0]
 8002c60:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002c62:	f107 030f 	add.w	r3, r7, #15
 8002c66:	461a      	mov	r2, r3
 8002c68:	2101      	movs	r1, #1
 8002c6a:	2007      	movs	r0, #7
 8002c6c:	f001 fa32 	bl	80040d4 <RadioSpiWriteRegisters>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <SpiritRadioInit+0x2f8>)
 8002c74:	b212      	sxth	r2, r2
 8002c76:	4611      	mov	r1, r2
 8002c78:	7019      	strb	r1, [r3, #0]
 8002c7a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002c7e:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002c80:	4b0a      	ldr	r3, [pc, #40]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a0e      	ldr	r2, [pc, #56]	; (8002cc0 <SpiritRadioInit+0x310>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d91e      	bls.n	8002cc8 <SpiritRadioInit+0x318>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002c8a:	4b08      	ldr	r3, [pc, #32]	; (8002cac <SpiritRadioInit+0x2fc>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a0d      	ldr	r2, [pc, #52]	; (8002cc4 <SpiritRadioInit+0x314>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	bf8c      	ite	hi
 8002c94:	2301      	movhi	r3, #1
 8002c96:	2300      	movls	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 f86c 	bl	8002d78 <SpiritRadioSetXtalFlag>
 8002ca0:	e01d      	b.n	8002cde <SpiritRadioInit+0x32e>
 8002ca2:	bf00      	nop
 8002ca4:	49742400 	.word	0x49742400
 8002ca8:	200021f0 	.word	0x200021f0
 8002cac:	200021ec 	.word	0x200021ec
 8002cb0:	01c9c37f 	.word	0x01c9c37f
 8002cb4:	48800000 	.word	0x48800000
 8002cb8:	49afd520 	.word	0x49afd520
 8002cbc:	42800000 	.word	0x42800000
 8002cc0:	01c9c380 	.word	0x01c9c380
 8002cc4:	02faf07f 	.word	0x02faf07f
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <SpiritRadioInit+0x3bc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a28      	ldr	r2, [pc, #160]	; (8002d70 <SpiritRadioInit+0x3c0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	bf8c      	ite	hi
 8002cd2:	2301      	movhi	r3, #1
 8002cd4:	2300      	movls	r3, #0
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 f84d 	bl	8002d78 <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	330c      	adds	r3, #12
 8002ce2:	461a      	mov	r2, r3
 8002ce4:	2101      	movs	r1, #1
 8002ce6:	206c      	movs	r0, #108	; 0x6c
 8002ce8:	f001 f9f4 	bl	80040d4 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002cec:	f107 031c 	add.w	r3, r7, #28
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2104      	movs	r1, #4
 8002cf4:	200c      	movs	r0, #12
 8002cf6:	f001 f9ed 	bl	80040d4 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002cfa:	f107 0318 	add.w	r3, r7, #24
 8002cfe:	461a      	mov	r2, r3
 8002d00:	2104      	movs	r1, #4
 8002d02:	201a      	movs	r0, #26
 8002d04:	f001 f9e6 	bl	80040d4 <RadioSpiWriteRegisters>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	4b1a      	ldr	r3, [pc, #104]	; (8002d74 <SpiritRadioInit+0x3c4>)
 8002d0c:	b212      	sxth	r2, r2
 8002d0e:	4611      	mov	r1, r2
 8002d10:	7019      	strb	r1, [r3, #0]
 8002d12:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d16:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002d18:	2001      	movs	r0, #1
 8002d1a:	f000 ff15 	bl	8003b48 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002d1e:	2380      	movs	r3, #128	; 0x80
 8002d20:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002d22:	23e3      	movs	r3, #227	; 0xe3
 8002d24:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002d26:	f107 031c 	add.w	r3, r7, #28
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2102      	movs	r1, #2
 8002d2e:	2099      	movs	r0, #153	; 0x99
 8002d30:	f001 f9d0 	bl	80040d4 <RadioSpiWriteRegisters>
 8002d34:	4602      	mov	r2, r0
 8002d36:	4b0f      	ldr	r3, [pc, #60]	; (8002d74 <SpiritRadioInit+0x3c4>)
 8002d38:	b212      	sxth	r2, r2
 8002d3a:	4611      	mov	r1, r2
 8002d3c:	7019      	strb	r1, [r3, #0]
 8002d3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d42:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002d44:	2322      	movs	r3, #34	; 0x22
 8002d46:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002d48:	f107 031c 	add.w	r3, r7, #28
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	20bc      	movs	r0, #188	; 0xbc
 8002d52:	f001 f9bf 	bl	80040d4 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f000 f9aa 	bl	80030b4 <SpiritRadioSetFrequencyBase>
 8002d60:	4603      	mov	r3, r0
  
}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3730      	adds	r7, #48	; 0x30
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	200021ec 	.word	0x200021ec
 8002d70:	017d783f 	.word	0x017d783f
 8002d74:	200021f0 	.word	0x200021f0

08002d78 <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	4603      	mov	r3, r0
 8002d80:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002d82:	2300      	movs	r3, #0
 8002d84:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002d86:	f107 030f 	add.w	r3, r7, #15
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	2001      	movs	r0, #1
 8002d90:	f001 f9ec 	bl	800416c <RadioSpiReadRegisters>
 8002d94:	4602      	mov	r2, r0
 8002d96:	4b14      	ldr	r3, [pc, #80]	; (8002de8 <SpiritRadioSetXtalFlag+0x70>)
 8002d98:	b212      	sxth	r2, r2
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	7019      	strb	r1, [r3, #0]
 8002d9e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002da2:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002da4:	79fb      	ldrb	r3, [r7, #7]
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d105      	bne.n	8002db6 <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002daa:	7bfb      	ldrb	r3, [r7, #15]
 8002dac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	73fb      	strb	r3, [r7, #15]
 8002db4:	e004      	b.n	8002dc0 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002dc0:	f107 030f 	add.w	r3, r7, #15
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f001 f983 	bl	80040d4 <RadioSpiWriteRegisters>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	4b05      	ldr	r3, [pc, #20]	; (8002de8 <SpiritRadioSetXtalFlag+0x70>)
 8002dd2:	b212      	sxth	r2, r2
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	7019      	strb	r1, [r3, #0]
 8002dd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002ddc:	705a      	strb	r2, [r3, #1]
  
}
 8002dde:	bf00      	nop
 8002de0:	3710      	adds	r7, #16
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	200021f0 	.word	0x200021f0

08002dec <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b085      	sub	sp, #20
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a3a      	ldr	r2, [pc, #232]	; (8002eec <SpiritRadioSearchWCP+0x100>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d306      	bcc.n	8002e16 <SpiritRadioSearchWCP+0x2a>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a39      	ldr	r2, [pc, #228]	; (8002ef0 <SpiritRadioSearchWCP+0x104>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d802      	bhi.n	8002e16 <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002e10:	2306      	movs	r3, #6
 8002e12:	73bb      	strb	r3, [r7, #14]
 8002e14:	e01f      	b.n	8002e56 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a36      	ldr	r2, [pc, #216]	; (8002ef4 <SpiritRadioSearchWCP+0x108>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d906      	bls.n	8002e2c <SpiritRadioSearchWCP+0x40>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <SpiritRadioSearchWCP+0x10c>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d802      	bhi.n	8002e2c <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002e26:	230c      	movs	r3, #12
 8002e28:	73bb      	strb	r3, [r7, #14]
 8002e2a:	e014      	b.n	8002e56 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a33      	ldr	r2, [pc, #204]	; (8002efc <SpiritRadioSearchWCP+0x110>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d906      	bls.n	8002e42 <SpiritRadioSearchWCP+0x56>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	4a32      	ldr	r2, [pc, #200]	; (8002f00 <SpiritRadioSearchWCP+0x114>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d802      	bhi.n	8002e42 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	73bb      	strb	r3, [r7, #14]
 8002e40:	e009      	b.n	8002e56 <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a2f      	ldr	r2, [pc, #188]	; (8002f04 <SpiritRadioSearchWCP+0x118>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d905      	bls.n	8002e56 <SpiritRadioSearchWCP+0x6a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a2e      	ldr	r2, [pc, #184]	; (8002f08 <SpiritRadioSearchWCP+0x11c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d801      	bhi.n	8002e56 <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002e52:	2320      	movs	r3, #32
 8002e54:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	4a2c      	ldr	r2, [pc, #176]	; (8002f0c <SpiritRadioSearchWCP+0x120>)
 8002e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e5e:	099b      	lsrs	r3, r3, #6
 8002e60:	7bba      	ldrb	r2, [r7, #14]
 8002e62:	fb02 f303 	mul.w	r3, r2, r3
 8002e66:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002e68:	f241 631f 	movw	r3, #5663	; 0x161f
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e72:	fb02 f303 	mul.w	r3, r2, r3
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	d302      	bcc.n	8002e82 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002e7c:	230f      	movs	r3, #15
 8002e7e:	73fb      	strb	r3, [r7, #15]
 8002e80:	e023      	b.n	8002eca <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002e82:	2300      	movs	r3, #0
 8002e84:	73fb      	strb	r3, [r7, #15]
 8002e86:	e005      	b.n	8002e94 <SpiritRadioSearchWCP+0xa8>
 8002e88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	3301      	adds	r3, #1
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	73fb      	strb	r3, [r7, #15]
 8002e94:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e98:	2b0e      	cmp	r3, #14
 8002e9a:	dc0c      	bgt.n	8002eb6 <SpiritRadioSearchWCP+0xca>
 8002e9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ea0:	4a1b      	ldr	r2, [pc, #108]	; (8002f10 <SpiritRadioSearchWCP+0x124>)
 8002ea2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	68ba      	ldr	r2, [r7, #8]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d8e8      	bhi.n	8002e88 <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d005      	beq.n	8002eca <SpiritRadioSearchWCP+0xde>
      i--;
 8002ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002eca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ece:	425a      	negs	r2, r3
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	f002 0207 	and.w	r2, r2, #7
 8002ed8:	bf58      	it	pl
 8002eda:	4253      	negpl	r3, r2
 8002edc:	b25b      	sxtb	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
  
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3714      	adds	r7, #20
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	2e5f5680 	.word	0x2e5f5680
 8002ef0:	390c2fe0 	.word	0x390c2fe0
 8002ef4:	1701e47f 	.word	0x1701e47f
 8002ef8:	1c146a60 	.word	0x1c146a60
 8002efc:	11d260bf 	.word	0x11d260bf
 8002f00:	14ced7e0 	.word	0x14ced7e0
 8002f04:	08e18f3f 	.word	0x08e18f3f
 8002f08:	0a6fd060 	.word	0x0a6fd060
 8002f0c:	10624dd3 	.word	0x10624dd3
 8002f10:	0800bba4 	.word	0x0800bba4

08002f14 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b082      	sub	sp, #8
 8002f18:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002f1a:	1d3b      	adds	r3, r7, #4
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	2104      	movs	r1, #4
 8002f20:	2008      	movs	r0, #8
 8002f22:	f001 f923 	bl	800416c <RadioSpiReadRegisters>
 8002f26:	4602      	mov	r2, r0
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <SpiritRadioGetSynthWord+0x48>)
 8002f2a:	b212      	sxth	r2, r2
 8002f2c:	4611      	mov	r1, r2
 8002f2e:	7019      	strb	r1, [r3, #0]
 8002f30:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f34:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f36:	793b      	ldrb	r3, [r7, #4]
 8002f38:	055b      	lsls	r3, r3, #21
 8002f3a:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002f3e:	797b      	ldrb	r3, [r7, #5]
 8002f40:	035b      	lsls	r3, r3, #13
 8002f42:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f44:	79bb      	ldrb	r3, [r7, #6]
 8002f46:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002f48:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002f4a:	79fa      	ldrb	r2, [r7, #7]
 8002f4c:	08d2      	lsrs	r2, r2, #3
 8002f4e:	b2d2      	uxtb	r2, r2
 8002f50:	4413      	add	r3, r2
  
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	200021f0 	.word	0x200021f0

08002f60 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002f66:	1dfb      	adds	r3, r7, #7
 8002f68:	461a      	mov	r2, r3
 8002f6a:	2101      	movs	r1, #1
 8002f6c:	200b      	movs	r0, #11
 8002f6e:	f001 f8fd 	bl	800416c <RadioSpiReadRegisters>
 8002f72:	4602      	mov	r2, r0
 8002f74:	4b10      	ldr	r3, [pc, #64]	; (8002fb8 <SpiritRadioGetBand+0x58>)
 8002f76:	b212      	sxth	r2, r2
 8002f78:	4611      	mov	r1, r2
 8002f7a:	7019      	strb	r1, [r3, #0]
 8002f7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002f80:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002f82:	79fb      	ldrb	r3, [r7, #7]
 8002f84:	f003 0307 	and.w	r3, r3, #7
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d101      	bne.n	8002f90 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	e00e      	b.n	8002fae <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002f90:	79fb      	ldrb	r3, [r7, #7]
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d101      	bne.n	8002f9e <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e007      	b.n	8002fae <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	2b04      	cmp	r3, #4
 8002fa6:	d101      	bne.n	8002fac <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002fa8:	2302      	movs	r3, #2
 8002faa:	e000      	b.n	8002fae <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002fac:	2303      	movs	r3, #3
  }
  
}
 8002fae:	4618      	mov	r0, r3
 8002fb0:	3708      	adds	r7, #8
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}
 8002fb6:	bf00      	nop
 8002fb8:	200021f0 	.word	0x200021f0

08002fbc <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002fc2:	1dfb      	adds	r3, r7, #7
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	206c      	movs	r0, #108	; 0x6c
 8002fca:	f001 f8cf 	bl	800416c <RadioSpiReadRegisters>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	4b05      	ldr	r3, [pc, #20]	; (8002fe8 <SpiritRadioGetChannel+0x2c>)
 8002fd2:	b212      	sxth	r2, r2
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	7019      	strb	r1, [r3, #0]
 8002fd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002fdc:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002fde:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	200021f0 	.word	0x200021f0

08002fec <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	2101      	movs	r1, #1
 8002ff8:	200c      	movs	r0, #12
 8002ffa:	f001 f8b7 	bl	800416c <RadioSpiReadRegisters>
 8002ffe:	4602      	mov	r2, r0
 8003000:	4b08      	ldr	r3, [pc, #32]	; (8003024 <SpiritRadioGetChannelSpace+0x38>)
 8003002:	b212      	sxth	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	7019      	strb	r1, [r3, #0]
 8003008:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800300c:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 800300e:	79fb      	ldrb	r3, [r7, #7]
 8003010:	461a      	mov	r2, r3
 8003012:	4b05      	ldr	r3, [pc, #20]	; (8003028 <SpiritRadioGetChannelSpace+0x3c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	fb02 f303 	mul.w	r3, r2, r3
 800301a:	0bdb      	lsrs	r3, r3, #15
  
}
 800301c:	4618      	mov	r0, r3
 800301e:	3708      	adds	r7, #8
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	200021f0 	.word	0x200021f0
 8003028:	200021ec 	.word	0x200021ec

0800302c <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b082      	sub	sp, #8
 8003030:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8003032:	1d3b      	adds	r3, r7, #4
 8003034:	461a      	mov	r2, r3
 8003036:	2102      	movs	r1, #2
 8003038:	200e      	movs	r0, #14
 800303a:	f001 f897 	bl	800416c <RadioSpiReadRegisters>
 800303e:	4602      	mov	r2, r0
 8003040:	4b1a      	ldr	r3, [pc, #104]	; (80030ac <SpiritRadioGetFrequencyOffset+0x80>)
 8003042:	b212      	sxth	r2, r2
 8003044:	4611      	mov	r1, r2
 8003046:	7019      	strb	r1, [r3, #0]
 8003048:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800304c:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 800304e:	793b      	ldrb	r3, [r7, #4]
 8003050:	b29b      	uxth	r3, r3
 8003052:	021b      	lsls	r3, r3, #8
 8003054:	b29a      	uxth	r2, r3
 8003056:	797b      	ldrb	r3, [r7, #5]
 8003058:	b29b      	uxth	r3, r3
 800305a:	4413      	add	r3, r2
 800305c:	b29b      	uxth	r3, r3
 800305e:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003066:	2b00      	cmp	r3, #0
 8003068:	d007      	beq.n	800307a <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 800306a:	887b      	ldrh	r3, [r7, #2]
 800306c:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8003070:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8003074:	b29b      	uxth	r3, r3
 8003076:	807b      	strh	r3, [r7, #2]
 8003078:	e004      	b.n	8003084 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 800307a:	887b      	ldrh	r3, [r7, #2]
 800307c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003080:	b29b      	uxth	r3, r3
 8003082:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8003084:	1cbb      	adds	r3, r7, #2
 8003086:	881b      	ldrh	r3, [r3, #0]
 8003088:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 800308a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <SpiritRadioGetFrequencyOffset+0x84>)
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	fb02 f303 	mul.w	r3, r2, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	da03      	bge.n	80030a2 <SpiritRadioGetFrequencyOffset+0x76>
 800309a:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 800309e:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 80030a2:	149b      	asrs	r3, r3, #18
  
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	200021f0 	.word	0x200021f0
 80030b0:	200021ec 	.word	0x200021ec

080030b4 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 80030b4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030b8:	b08a      	sub	sp, #40	; 0x28
 80030ba:	af00      	add	r7, sp, #0
 80030bc:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 80030be:	2300      	movs	r3, #0
 80030c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	4a79      	ldr	r2, [pc, #484]	; (80032ac <SpiritRadioSetFrequencyBase+0x1f8>)
 80030c8:	4293      	cmp	r3, r2
 80030ca:	d307      	bcc.n	80030dc <SpiritRadioSetFrequencyBase+0x28>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a78      	ldr	r2, [pc, #480]	; (80032b0 <SpiritRadioSetFrequencyBase+0x1fc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d803      	bhi.n	80030dc <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 80030d4:	2300      	movs	r3, #0
 80030d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030da:	e022      	b.n	8003122 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a75      	ldr	r2, [pc, #468]	; (80032b4 <SpiritRadioSetFrequencyBase+0x200>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d907      	bls.n	80030f4 <SpiritRadioSetFrequencyBase+0x40>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a74      	ldr	r2, [pc, #464]	; (80032b8 <SpiritRadioSetFrequencyBase+0x204>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d803      	bhi.n	80030f4 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80030f2:	e016      	b.n	8003122 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a71      	ldr	r2, [pc, #452]	; (80032bc <SpiritRadioSetFrequencyBase+0x208>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d907      	bls.n	800310c <SpiritRadioSetFrequencyBase+0x58>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a70      	ldr	r2, [pc, #448]	; (80032c0 <SpiritRadioSetFrequencyBase+0x20c>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d803      	bhi.n	800310c <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8003104:	2302      	movs	r3, #2
 8003106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800310a:	e00a      	b.n	8003122 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a6d      	ldr	r2, [pc, #436]	; (80032c4 <SpiritRadioSetFrequencyBase+0x210>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d906      	bls.n	8003122 <SpiritRadioSetFrequencyBase+0x6e>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a6c      	ldr	r2, [pc, #432]	; (80032c8 <SpiritRadioSetFrequencyBase+0x214>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d802      	bhi.n	8003122 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 800311c:	2303      	movs	r3, #3
 800311e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8003122:	f7ff ff83 	bl	800302c <SpiritRadioGetFrequencyOffset>
 8003126:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8003128:	f7ff ff60 	bl	8002fec <SpiritRadioGetChannelSpace>
 800312c:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 800312e:	f7ff ff45 	bl	8002fbc <SpiritRadioGetChannel>
 8003132:	4603      	mov	r3, r0
 8003134:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	441a      	add	r2, r3
 800313c:	7efb      	ldrb	r3, [r7, #27]
 800313e:	69f9      	ldr	r1, [r7, #28]
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8003148:	f000 fd60 	bl	8003c0c <SpiritRadioGetRefDiv>
 800314c:	4603      	mov	r3, r0
 800314e:	3301      	adds	r3, #1
 8003150:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8003152:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003156:	2b03      	cmp	r3, #3
 8003158:	d839      	bhi.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
 800315a:	a201      	add	r2, pc, #4	; (adr r2, 8003160 <SpiritRadioSetFrequencyBase+0xac>)
 800315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003160:	080031b9 	.word	0x080031b9
 8003164:	080031a1 	.word	0x080031a1
 8003168:	08003189 	.word	0x08003189
 800316c:	08003171 	.word	0x08003171
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	4a56      	ldr	r2, [pc, #344]	; (80032cc <SpiritRadioSetFrequencyBase+0x218>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d803      	bhi.n	8003180 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003178:	2000      	movs	r0, #0
 800317a:	f7fe fd71 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 800317e:	e026      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003180:	2001      	movs	r0, #1
 8003182:	f7fe fd6d 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 8003186:	e022      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8003188:	697b      	ldr	r3, [r7, #20]
 800318a:	4a51      	ldr	r2, [pc, #324]	; (80032d0 <SpiritRadioSetFrequencyBase+0x21c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d803      	bhi.n	8003198 <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8003190:	2000      	movs	r0, #0
 8003192:	f7fe fd65 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8003196:	e01a      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8003198:	2001      	movs	r0, #1
 800319a:	f7fe fd61 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 800319e:	e016      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	4a4c      	ldr	r2, [pc, #304]	; (80032d4 <SpiritRadioSetFrequencyBase+0x220>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d803      	bhi.n	80031b0 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031a8:	2000      	movs	r0, #0
 80031aa:	f7fe fd59 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 80031ae:	e00e      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 80031b0:	2001      	movs	r0, #1
 80031b2:	f7fe fd55 	bl	8001c60 <SpiritCalibrationSelectVco>
    break;
 80031b6:	e00a      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	4a47      	ldr	r2, [pc, #284]	; (80032d8 <SpiritRadioSetFrequencyBase+0x224>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d803      	bhi.n	80031c8 <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 80031c0:	2000      	movs	r0, #0
 80031c2:	f7fe fd4d 	bl	8001c60 <SpiritCalibrationSelectVco>
 80031c6:	e002      	b.n	80031ce <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 80031c8:	2001      	movs	r0, #1
 80031ca:	f7fe fd49 	bl	8001c60 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 80031ce:	6978      	ldr	r0, [r7, #20]
 80031d0:	f7ff fe0c 	bl	8002dec <SpiritRadioSearchWCP>
 80031d4:	4603      	mov	r3, r0
 80031d6:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 80031d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031dc:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <SpiritRadioSetFrequencyBase+0x228>)
 80031de:	5cd3      	ldrb	r3, [r2, r3]
 80031e0:	461a      	mov	r2, r3
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd f98b 	bl	8000504 <__aeabi_ui2d>
 80031ee:	4604      	mov	r4, r0
 80031f0:	460d      	mov	r5, r1
 80031f2:	7cfb      	ldrb	r3, [r7, #19]
 80031f4:	049b      	lsls	r3, r3, #18
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fd f994 	bl	8000524 <__aeabi_i2d>
 80031fc:	4680      	mov	r8, r0
 80031fe:	4689      	mov	r9, r1
 8003200:	4b37      	ldr	r3, [pc, #220]	; (80032e0 <SpiritRadioSetFrequencyBase+0x22c>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7fd f97d 	bl	8000504 <__aeabi_ui2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4640      	mov	r0, r8
 8003210:	4649      	mov	r1, r9
 8003212:	f7fd fb1b 	bl	800084c <__aeabi_ddiv>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd f9eb 	bl	80005f8 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	f7fd fbf7 	bl	8000a1c <__aeabi_d2uiz>
 800322e:	4603      	mov	r3, r0
 8003230:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	0d5b      	lsrs	r3, r3, #21
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f003 031f 	and.w	r3, r3, #31
 800323c:	b2da      	uxtb	r2, r3
 800323e:	7cbb      	ldrb	r3, [r7, #18]
 8003240:	015b      	lsls	r3, r3, #5
 8003242:	b2db      	uxtb	r3, r3
 8003244:	4313      	orrs	r3, r2
 8003246:	b2db      	uxtb	r3, r3
 8003248:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	0b5b      	lsrs	r3, r3, #13
 800324e:	b2db      	uxtb	r3, r3
 8003250:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	095b      	lsrs	r3, r3, #5
 8003256:	b2db      	uxtb	r3, r3
 8003258:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	b2db      	uxtb	r3, r3
 800325e:	00db      	lsls	r3, r3, #3
 8003260:	b2da      	uxtb	r2, r3
 8003262:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003266:	491f      	ldr	r1, [pc, #124]	; (80032e4 <SpiritRadioSetFrequencyBase+0x230>)
 8003268:	5ccb      	ldrb	r3, [r1, r3]
 800326a:	4313      	orrs	r3, r2
 800326c:	b2db      	uxtb	r3, r3
 800326e:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003270:	f107 0308 	add.w	r3, r7, #8
 8003274:	461a      	mov	r2, r3
 8003276:	2104      	movs	r1, #4
 8003278:	2008      	movs	r0, #8
 800327a:	f000 ff2b 	bl	80040d4 <RadioSpiWriteRegisters>
 800327e:	4602      	mov	r2, r0
 8003280:	4b19      	ldr	r3, [pc, #100]	; (80032e8 <SpiritRadioSetFrequencyBase+0x234>)
 8003282:	b212      	sxth	r2, r2
 8003284:	4611      	mov	r1, r2
 8003286:	7019      	strb	r1, [r3, #0]
 8003288:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800328c:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 800328e:	4b17      	ldr	r3, [pc, #92]	; (80032ec <SpiritRadioSetFrequencyBase+0x238>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	2b01      	cmp	r3, #1
 8003294:	d103      	bne.n	800329e <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 8003296:	f7fe ff43 	bl	8002120 <SpiritManagementWaVcoCalibration>
 800329a:	4603      	mov	r3, r0
 800329c:	e000      	b.n	80032a0 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 800329e:	2300      	movs	r3, #0
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	3728      	adds	r7, #40	; 0x28
 80032a4:	46bd      	mov	sp, r7
 80032a6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80032aa:	bf00      	nop
 80032ac:	2e5f5680 	.word	0x2e5f5680
 80032b0:	390c2fe0 	.word	0x390c2fe0
 80032b4:	1701e47f 	.word	0x1701e47f
 80032b8:	1c146a60 	.word	0x1c146a60
 80032bc:	11d260bf 	.word	0x11d260bf
 80032c0:	14ced7e0 	.word	0x14ced7e0
 80032c4:	08e18f3f 	.word	0x08e18f3f
 80032c8:	0a6fd060 	.word	0x0a6fd060
 80032cc:	099cf4e1 	.word	0x099cf4e1
 80032d0:	1339e9c3 	.word	0x1339e9c3
 80032d4:	19a28d05 	.word	0x19a28d05
 80032d8:	33451a0a 	.word	0x33451a0a
 80032dc:	0800bae8 	.word	0x0800bae8
 80032e0:	200021ec 	.word	0x200021ec
 80032e4:	0800baec 	.word	0x0800baec
 80032e8:	200021f0 	.word	0x200021f0
 80032ec:	2000001d 	.word	0x2000001d

080032f0 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80032f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80032f8:	f7ff fe0c 	bl	8002f14 <SpiritRadioGetSynthWord>
 80032fc:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80032fe:	f7ff fe2f 	bl	8002f60 <SpiritRadioGetBand>
 8003302:	4603      	mov	r3, r0
 8003304:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 8003306:	f000 fc81 	bl	8003c0c <SpiritRadioGetRefDiv>
 800330a:	4603      	mov	r3, r0
 800330c:	3301      	adds	r3, #1
 800330e:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f7fd f8f7 	bl	8000504 <__aeabi_ui2d>
 8003316:	4604      	mov	r4, r0
 8003318:	460d      	mov	r5, r1
 800331a:	4b19      	ldr	r3, [pc, #100]	; (8003380 <SpiritRadioGetFrequencyBase+0x90>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f8f0 	bl	8000504 <__aeabi_ui2d>
 8003324:	4680      	mov	r8, r0
 8003326:	4689      	mov	r9, r1
 8003328:	78bb      	ldrb	r3, [r7, #2]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	4915      	ldr	r1, [pc, #84]	; (8003384 <SpiritRadioGetFrequencyBase+0x94>)
 800332e:	5c8a      	ldrb	r2, [r1, r2]
 8003330:	fb02 f303 	mul.w	r3, r2, r3
 8003334:	049b      	lsls	r3, r3, #18
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f8f4 	bl	8000524 <__aeabi_i2d>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4640      	mov	r0, r8
 8003342:	4649      	mov	r1, r9
 8003344:	f7fd fa82 	bl	800084c <__aeabi_ddiv>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fd f952 	bl	80005f8 <__aeabi_dmul>
 8003354:	4602      	mov	r2, r0
 8003356:	460b      	mov	r3, r1
 8003358:	ec43 2b17 	vmov	d7, r2, r3
 800335c:	eeb0 0a47 	vmov.f32	s0, s14
 8003360:	eef0 0a67 	vmov.f32	s1, s15
 8003364:	f008 fae6 	bl	800b934 <round>
 8003368:	ec53 2b10 	vmov	r2, r3, d0
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f7fd fb54 	bl	8000a1c <__aeabi_d2uiz>
 8003374:	4603      	mov	r3, r0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003380:	200021ec 	.word	0x200021ec
 8003384:	0800bae8 	.word	0x0800bae8

08003388 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b088      	sub	sp, #32
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003398:	230f      	movs	r3, #15
 800339a:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 800339c:	2300      	movs	r3, #0
 800339e:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 80033a0:	f000 fc86 	bl	8003cb0 <SpiritRadioGetDigDiv>
 80033a4:	4603      	mov	r3, r0
 80033a6:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 80033a8:	e015      	b.n	80033d6 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 80033aa:	4b4f      	ldr	r3, [pc, #316]	; (80034e8 <SpiritRadioSearchDatarateME+0x160>)
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033b2:	f1c3 0114 	rsb	r1, r3, #20
 80033b6:	7ebb      	ldrb	r3, [r7, #26]
 80033b8:	440b      	add	r3, r1
 80033ba:	fa22 f303 	lsr.w	r3, r2, r3
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d302      	bcc.n	80033ca <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80033c4:	2301      	movs	r3, #1
 80033c6:	763b      	strb	r3, [r7, #24]
 80033c8:	e005      	b.n	80033d6 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80033ca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	3b01      	subs	r3, #1
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80033d6:	7e3b      	ldrb	r3, [r7, #24]
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d103      	bne.n	80033e6 <SpiritRadioSearchDatarateME+0x5e>
 80033de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	dae1      	bge.n	80033aa <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80033e6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	da01      	bge.n	80033f2 <SpiritRadioSearchDatarateME+0x6a>
 80033ee:	2300      	movs	r3, #0
 80033f0:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80033f2:	7ffa      	ldrb	r2, [r7, #31]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80033f8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80033fc:	f1c3 0317 	rsb	r3, r3, #23
 8003400:	68fa      	ldr	r2, [r7, #12]
 8003402:	409a      	lsls	r2, r3
 8003404:	4b38      	ldr	r3, [pc, #224]	; (80034e8 <SpiritRadioSearchDatarateME+0x160>)
 8003406:	6819      	ldr	r1, [r3, #0]
 8003408:	7ebb      	ldrb	r3, [r7, #26]
 800340a:	3305      	adds	r3, #5
 800340c:	fa21 f303 	lsr.w	r3, r1, r3
 8003410:	fbb2 f3f3 	udiv	r3, r2, r3
 8003414:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 8003416:	2300      	movs	r3, #0
 8003418:	77bb      	strb	r3, [r7, #30]
 800341a:	e031      	b.n	8003480 <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 800341c:	7e7a      	ldrb	r2, [r7, #25]
 800341e:	7fbb      	ldrb	r3, [r7, #30]
 8003420:	4413      	add	r3, r2
 8003422:	2b01      	cmp	r3, #1
 8003424:	d021      	beq.n	800346a <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	b29a      	uxth	r2, r3
 800342a:	7e7b      	ldrb	r3, [r7, #25]
 800342c:	f503 7180 	add.w	r1, r3, #256	; 0x100
 8003430:	7fbb      	ldrb	r3, [r7, #30]
 8003432:	440b      	add	r3, r1
 8003434:	3b01      	subs	r3, #1
 8003436:	4618      	mov	r0, r3
 8003438:	4b2b      	ldr	r3, [pc, #172]	; (80034e8 <SpiritRadioSearchDatarateME+0x160>)
 800343a:	6819      	ldr	r1, [r3, #0]
 800343c:	7ebb      	ldrb	r3, [r7, #26]
 800343e:	3305      	adds	r3, #5
 8003440:	fa21 f303 	lsr.w	r3, r1, r3
 8003444:	fb03 f100 	mul.w	r1, r3, r0
 8003448:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800344c:	f1c3 0317 	rsb	r3, r3, #23
 8003450:	fa21 f303 	lsr.w	r3, r1, r3
 8003454:	b29b      	uxth	r3, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	b29a      	uxth	r2, r3
 800345a:	7fbb      	ldrb	r3, [r7, #30]
 800345c:	b212      	sxth	r2, r2
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	3320      	adds	r3, #32
 8003462:	443b      	add	r3, r7
 8003464:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003468:	e007      	b.n	800347a <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 800346a:	7fbb      	ldrb	r3, [r7, #30]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	3320      	adds	r3, #32
 8003470:	443b      	add	r3, r7
 8003472:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003476:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 800347a:	7fbb      	ldrb	r3, [r7, #30]
 800347c:	3301      	adds	r3, #1
 800347e:	77bb      	strb	r3, [r7, #30]
 8003480:	7fbb      	ldrb	r3, [r7, #30]
 8003482:	2b02      	cmp	r3, #2
 8003484:	d9ca      	bls.n	800341c <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800348a:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 800348c:	2300      	movs	r3, #0
 800348e:	76fb      	strb	r3, [r7, #27]
 8003490:	e021      	b.n	80034d6 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 8003492:	7efb      	ldrb	r3, [r7, #27]
 8003494:	005b      	lsls	r3, r3, #1
 8003496:	3320      	adds	r3, #32
 8003498:	443b      	add	r3, r7
 800349a:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	bfb8      	it	lt
 80034a2:	425b      	neglt	r3, r3
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	8bba      	ldrh	r2, [r7, #28]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d911      	bls.n	80034d0 <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 80034ac:	7efb      	ldrb	r3, [r7, #27]
 80034ae:	005b      	lsls	r3, r3, #1
 80034b0:	3320      	adds	r3, #32
 80034b2:	443b      	add	r3, r7
 80034b4:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bfb8      	it	lt
 80034bc:	425b      	neglt	r3, r3
 80034be:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 80034c0:	7e7a      	ldrb	r2, [r7, #25]
 80034c2:	7efb      	ldrb	r3, [r7, #27]
 80034c4:	4413      	add	r3, r2
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	3b01      	subs	r3, #1
 80034ca:	b2da      	uxtb	r2, r3
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80034d0:	7efb      	ldrb	r3, [r7, #27]
 80034d2:	3301      	adds	r3, #1
 80034d4:	76fb      	strb	r3, [r7, #27]
 80034d6:	7efb      	ldrb	r3, [r7, #27]
 80034d8:	2b02      	cmp	r3, #2
 80034da:	d9da      	bls.n	8003492 <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 80034dc:	bf00      	nop
 80034de:	bf00      	nop
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	200021ec 	.word	0x200021ec

080034ec <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80034f8:	2301      	movs	r3, #1
 80034fa:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80034fe:	f000 fbd7 	bl	8003cb0 <SpiritRadioGetDigDiv>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d003      	beq.n	8003510 <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 8003508:	2302      	movs	r3, #2
 800350a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800350e:	e002      	b.n	8003516 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 8003510:	2301      	movs	r3, #1
 8003512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 8003516:	4b63      	ldr	r3, [pc, #396]	; (80036a4 <SpiritRadioSearchChannelBwME+0x1b8>)
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800351e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003522:	4a61      	ldr	r2, [pc, #388]	; (80036a8 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003524:	fba2 2303 	umull	r2, r3, r2, r3
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 800352c:	2300      	movs	r3, #0
 800352e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003532:	e006      	b.n	8003542 <SpiritRadioSearchChannelBwME+0x56>
 8003534:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003538:	b2db      	uxtb	r3, r3
 800353a:	3301      	adds	r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003542:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003546:	2b59      	cmp	r3, #89	; 0x59
 8003548:	dc0f      	bgt.n	800356a <SpiritRadioSearchChannelBwME+0x7e>
 800354a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800354e:	4a57      	ldr	r2, [pc, #348]	; (80036ac <SpiritRadioSearchChannelBwME+0x1c0>)
 8003550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003554:	461a      	mov	r2, r3
 8003556:	69fb      	ldr	r3, [r7, #28]
 8003558:	fb02 f303 	mul.w	r3, r2, r3
 800355c:	4a54      	ldr	r2, [pc, #336]	; (80036b0 <SpiritRadioSearchChannelBwME+0x1c4>)
 800355e:	fba2 2303 	umull	r2, r3, r2, r3
 8003562:	0adb      	lsrs	r3, r3, #11
 8003564:	68fa      	ldr	r2, [r7, #12]
 8003566:	429a      	cmp	r2, r3
 8003568:	d3e4      	bcc.n	8003534 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 800356a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800356e:	2b00      	cmp	r3, #0
 8003570:	d077      	beq.n	8003662 <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 8003572:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003576:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800357e:	e03a      	b.n	80035f6 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 8003580:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003584:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003588:	4413      	add	r3, r2
 800358a:	2b00      	cmp	r3, #0
 800358c:	dc06      	bgt.n	800359c <SpiritRadioSearchChannelBwME+0xb0>
 800358e:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003592:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003596:	4413      	add	r3, r2
 8003598:	2b5a      	cmp	r3, #90	; 0x5a
 800359a:	dc1e      	bgt.n	80035da <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	b29a      	uxth	r2, r3
 80035a0:	f997 101b 	ldrsb.w	r1, [r7, #27]
 80035a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035a8:	440b      	add	r3, r1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	493f      	ldr	r1, [pc, #252]	; (80036ac <SpiritRadioSearchChannelBwME+0x1c0>)
 80035ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80035b2:	4619      	mov	r1, r3
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	fb01 f303 	mul.w	r3, r1, r3
 80035ba:	493d      	ldr	r1, [pc, #244]	; (80036b0 <SpiritRadioSearchChannelBwME+0x1c4>)
 80035bc:	fba1 1303 	umull	r1, r3, r1, r3
 80035c0:	0adb      	lsrs	r3, r3, #11
 80035c2:	b29b      	uxth	r3, r3
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	b29a      	uxth	r2, r3
 80035c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035cc:	b212      	sxth	r2, r2
 80035ce:	005b      	lsls	r3, r3, #1
 80035d0:	3328      	adds	r3, #40	; 0x28
 80035d2:	443b      	add	r3, r7
 80035d4:	f823 2c14 	strh.w	r2, [r3, #-20]
 80035d8:	e008      	b.n	80035ec <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80035da:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035de:	005b      	lsls	r3, r3, #1
 80035e0:	3328      	adds	r3, #40	; 0x28
 80035e2:	443b      	add	r3, r7
 80035e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80035e8:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80035ec:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035f0:	3301      	adds	r3, #1
 80035f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80035f6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d9c0      	bls.n	8003580 <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80035fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003602:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800360a:	e026      	b.n	800365a <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 800360c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	3328      	adds	r3, #40	; 0x28
 8003614:	443b      	add	r3, r7
 8003616:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	bfb8      	it	lt
 800361e:	425b      	neglt	r3, r3
 8003620:	b29b      	uxth	r3, r3
 8003622:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003624:	429a      	cmp	r2, r3
 8003626:	d913      	bls.n	8003650 <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003628:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800362c:	005b      	lsls	r3, r3, #1
 800362e:	3328      	adds	r3, #40	; 0x28
 8003630:	443b      	add	r3, r7
 8003632:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003636:	2b00      	cmp	r3, #0
 8003638:	bfb8      	it	lt
 800363a:	425b      	neglt	r3, r3
 800363c:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800363e:	7efa      	ldrb	r2, [r7, #27]
 8003640:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003644:	4413      	add	r3, r2
 8003646:	b2db      	uxtb	r3, r3
 8003648:	3b01      	subs	r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 8003650:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003654:	3301      	adds	r3, #1
 8003656:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 800365a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800365e:	2b02      	cmp	r3, #2
 8003660:	d9d4      	bls.n	800360c <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 8003662:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003666:	4a13      	ldr	r2, [pc, #76]	; (80036b4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003668:	fb82 1203 	smull	r1, r2, r2, r3
 800366c:	1052      	asrs	r2, r2, #1
 800366e:	17db      	asrs	r3, r3, #31
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	b25b      	sxtb	r3, r3
 8003674:	b2da      	uxtb	r2, r3
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 800367a:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 800367e:	4b0d      	ldr	r3, [pc, #52]	; (80036b4 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003680:	fb83 1302 	smull	r1, r3, r3, r2
 8003684:	1059      	asrs	r1, r3, #1
 8003686:	17d3      	asrs	r3, r2, #31
 8003688:	1ac9      	subs	r1, r1, r3
 800368a:	460b      	mov	r3, r1
 800368c:	00db      	lsls	r3, r3, #3
 800368e:	440b      	add	r3, r1
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	b25b      	sxtb	r3, r3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	701a      	strb	r2, [r3, #0]
  
}
 800369a:	bf00      	nop
 800369c:	3728      	adds	r7, #40	; 0x28
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	200021ec 	.word	0x200021ec
 80036a8:	51eb851f 	.word	0x51eb851f
 80036ac:	0800baf0 	.word	0x0800baf0
 80036b0:	c9a633fd 	.word	0xc9a633fd
 80036b4:	38e38e39 	.word	0x38e38e39

080036b8 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 80036b8:	b5b0      	push	{r4, r5, r7, lr}
 80036ba:	b08a      	sub	sp, #40	; 0x28
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 80036c8:	4b53      	ldr	r3, [pc, #332]	; (8003818 <SpiritRadioSearchFreqDevME+0x160>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d4:	eddf 6a51 	vldr	s13, [pc, #324]	; 800381c <SpiritRadioSearchFreqDevME+0x164>
 80036d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036dc:	edc7 7a06 	vstr	s15, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036e6:	e028      	b.n	800373a <SpiritRadioSearchFreqDevME+0x82>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80036e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ec:	2201      	movs	r2, #1
 80036ee:	fa02 f303 	lsl.w	r3, r2, r3
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff16 	bl	8000524 <__aeabi_i2d>
 80036f8:	f04f 0200 	mov.w	r2, #0
 80036fc:	4b48      	ldr	r3, [pc, #288]	; (8003820 <SpiritRadioSearchFreqDevME+0x168>)
 80036fe:	f7fc ff7b 	bl	80005f8 <__aeabi_dmul>
 8003702:	4602      	mov	r2, r0
 8003704:	460b      	mov	r3, r1
 8003706:	4610      	mov	r0, r2
 8003708:	4619      	mov	r1, r3
 800370a:	f7fd f987 	bl	8000a1c <__aeabi_d2uiz>
 800370e:	ee07 0a90 	vmov	s15, r0
 8003712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003716:	edd7 7a06 	vldr	s15, [r7, #24]
 800371a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800371e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003722:	ee17 3a90 	vmov	r3, s15
 8003726:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	429a      	cmp	r2, r3
 800372e:	d309      	bcc.n	8003744 <SpiritRadioSearchFreqDevME+0x8c>
  for(i=0;i<10;i++)
 8003730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003734:	3301      	adds	r3, #1
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800373a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373e:	2b09      	cmp	r3, #9
 8003740:	d9d2      	bls.n	80036e8 <SpiritRadioSearchFreqDevME+0x30>
 8003742:	e000      	b.n	8003746 <SpiritRadioSearchFreqDevME+0x8e>
      break;
 8003744:	bf00      	nop
  }
  (*pcE) = i;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800374c:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 800374e:	2300      	movs	r3, #0
 8003750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003754:	e043      	b.n	80037de <SpiritRadioSearchFreqDevME+0x126>
  {
    bp=b;
 8003756:	69fb      	ldr	r3, [r7, #28]
 8003758:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800375a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fee0 	bl	8000524 <__aeabi_i2d>
 8003764:	f04f 0200 	mov.w	r2, #0
 8003768:	4b2e      	ldr	r3, [pc, #184]	; (8003824 <SpiritRadioSearchFreqDevME+0x16c>)
 800376a:	f7fc fd8f 	bl	800028c <__adddf3>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	f04f 0200 	mov.w	r2, #0
 800377a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800377e:	f7fd f865 	bl	800084c <__aeabi_ddiv>
 8003782:	4602      	mov	r2, r0
 8003784:	460b      	mov	r3, r1
 8003786:	4614      	mov	r4, r2
 8003788:	461d      	mov	r5, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	781b      	ldrb	r3, [r3, #0]
 800378e:	461a      	mov	r2, r3
 8003790:	2301      	movs	r3, #1
 8003792:	4093      	lsls	r3, r2
 8003794:	4618      	mov	r0, r3
 8003796:	f7fc fec5 	bl	8000524 <__aeabi_i2d>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4620      	mov	r0, r4
 80037a0:	4629      	mov	r1, r5
 80037a2:	f7fc ff29 	bl	80005f8 <__aeabi_dmul>
 80037a6:	4602      	mov	r2, r0
 80037a8:	460b      	mov	r3, r1
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	f7fd f935 	bl	8000a1c <__aeabi_d2uiz>
 80037b2:	ee07 0a90 	vmov	s15, r0
 80037b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037ba:	edd7 7a06 	vldr	s15, [r7, #24]
 80037be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037c6:	ee17 3a90 	vmov	r3, s15
 80037ca:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d309      	bcc.n	80037e8 <SpiritRadioSearchFreqDevME+0x130>
  for(i=0;i<8;i++)
 80037d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037d8:	3301      	adds	r3, #1
 80037da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80037de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037e2:	2b07      	cmp	r3, #7
 80037e4:	d9b7      	bls.n	8003756 <SpiritRadioSearchFreqDevME+0x9e>
 80037e6:	e000      	b.n	80037ea <SpiritRadioSearchFreqDevME+0x132>
      break;
 80037e8:	bf00      	nop
  }
  
  (*pcM)=i;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80037f0:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	1ad2      	subs	r2, r2, r3
 80037f8:	69f9      	ldr	r1, [r7, #28]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1acb      	subs	r3, r1, r3
 80037fe:	429a      	cmp	r2, r3
 8003800:	d205      	bcs.n	800380e <SpiritRadioSearchFreqDevME+0x156>
    (*pcM)--;
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	3b01      	subs	r3, #1
 8003808:	b2da      	uxtb	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	701a      	strb	r2, [r3, #0]
  
}
 800380e:	bf00      	nop
 8003810:	3728      	adds	r7, #40	; 0x28
 8003812:	46bd      	mov	sp, r7
 8003814:	bdb0      	pop	{r4, r5, r7, pc}
 8003816:	bf00      	nop
 8003818:	200021ec 	.word	0x200021ec
 800381c:	48800000 	.word	0x48800000
 8003820:	401e0000 	.word	0x401e0000
 8003824:	40200000 	.word	0x40200000

08003828 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	ed87 0a02 	vstr	s0, [r7, #8]
  uint8_t i=0;
 8003834:	2300      	movs	r3, #0
 8003836:	75fb      	strb	r3, [r7, #23]
  uint8_t j=0;
 8003838:	2300      	movs	r3, #0
 800383a:	75bb      	strb	r3, [r7, #22]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4a74      	ldr	r2, [pc, #464]	; (8003a10 <SpiritRadioGetdBm2Reg+0x1e8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d30c      	bcc.n	800385e <SpiritRadioGetdBm2Reg+0x36>
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d808      	bhi.n	800385e <SpiritRadioGetdBm2Reg+0x36>
  {
    i=0;
 800384c:	2300      	movs	r3, #0
 800384e:	75fb      	strb	r3, [r7, #23]
    if(lFBase<900000000) i=1;// 868   
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4a71      	ldr	r2, [pc, #452]	; (8003a18 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d822      	bhi.n	800389e <SpiritRadioGetdBm2Reg+0x76>
 8003858:	2301      	movs	r3, #1
 800385a:	75fb      	strb	r3, [r7, #23]
 800385c:	e01f      	b.n	800389e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4a6e      	ldr	r2, [pc, #440]	; (8003a1c <SpiritRadioGetdBm2Reg+0x1f4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d906      	bls.n	8003874 <SpiritRadioGetdBm2Reg+0x4c>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <SpiritRadioGetdBm2Reg+0x1f8>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d802      	bhi.n	8003874 <SpiritRadioGetdBm2Reg+0x4c>
  {
    i=2;
 800386e:	2302      	movs	r3, #2
 8003870:	75fb      	strb	r3, [r7, #23]
 8003872:	e014      	b.n	800389e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	4a6b      	ldr	r2, [pc, #428]	; (8003a24 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d906      	bls.n	800388a <SpiritRadioGetdBm2Reg+0x62>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	4a6a      	ldr	r2, [pc, #424]	; (8003a28 <SpiritRadioGetdBm2Reg+0x200>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d802      	bhi.n	800388a <SpiritRadioGetdBm2Reg+0x62>
  {
    i=3;
 8003884:	2303      	movs	r3, #3
 8003886:	75fb      	strb	r3, [r7, #23]
 8003888:	e009      	b.n	800389e <SpiritRadioGetdBm2Reg+0x76>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	4a67      	ldr	r2, [pc, #412]	; (8003a2c <SpiritRadioGetdBm2Reg+0x204>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d905      	bls.n	800389e <SpiritRadioGetdBm2Reg+0x76>
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	4a66      	ldr	r2, [pc, #408]	; (8003a30 <SpiritRadioGetdBm2Reg+0x208>)
 8003896:	4293      	cmp	r3, r2
 8003898:	d801      	bhi.n	800389e <SpiritRadioGetdBm2Reg+0x76>
  {
    i=4;
 800389a:	2304      	movs	r3, #4
 800389c:	75fb      	strb	r3, [r7, #23]
  }
  
  j=1;
 800389e:	2301      	movs	r3, #1
 80038a0:	75bb      	strb	r3, [r7, #22]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 80038a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80038a6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ae:	dd2f      	ble.n	8003910 <SpiritRadioGetdBm2Reg+0xe8>
 80038b0:	7dfa      	ldrb	r2, [r7, #23]
 80038b2:	4960      	ldr	r1, [pc, #384]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 80038b4:	4613      	mov	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4413      	add	r3, r2
 80038ba:	00db      	lsls	r3, r3, #3
 80038bc:	440b      	add	r3, r1
 80038be:	3308      	adds	r3, #8
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	eef2 6a0a 	vmov.f32	s13, #42	; 0x41500000  13.0
 80038c8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80038cc:	7dfa      	ldrb	r2, [r7, #23]
 80038ce:	4959      	ldr	r1, [pc, #356]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 80038d0:	4613      	mov	r3, r2
 80038d2:	005b      	lsls	r3, r3, #1
 80038d4:	4413      	add	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	440b      	add	r3, r1
 80038da:	330c      	adds	r3, #12
 80038dc:	ed93 6a00 	vldr	s12, [r3]
 80038e0:	7dfa      	ldrb	r2, [r7, #23]
 80038e2:	4954      	ldr	r1, [pc, #336]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 80038e4:	4613      	mov	r3, r2
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	4413      	add	r3, r2
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	440b      	add	r3, r1
 80038ee:	3308      	adds	r3, #8
 80038f0:	edd3 6a00 	vldr	s13, [r3]
 80038f4:	eec6 7a26 	vdiv.f32	s15, s12, s13
 80038f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80038fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8003900:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003904:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003908:	dd02      	ble.n	8003910 <SpiritRadioGetdBm2Reg+0xe8>
      j=0;
 800390a:	2300      	movs	r3, #0
 800390c:	75bb      	strb	r3, [r7, #22]
 800390e:	e035      	b.n	800397c <SpiritRadioGetdBm2Reg+0x154>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 8003910:	edd7 7a02 	vldr	s15, [r7, #8]
 8003914:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391c:	d82e      	bhi.n	800397c <SpiritRadioGetdBm2Reg+0x154>
 800391e:	7dfa      	ldrb	r2, [r7, #23]
 8003920:	4944      	ldr	r1, [pc, #272]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003922:	4613      	mov	r3, r2
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	4413      	add	r3, r2
 8003928:	00db      	lsls	r3, r3, #3
 800392a:	440b      	add	r3, r1
 800392c:	3308      	adds	r3, #8
 800392e:	edd3 7a00 	vldr	s15, [r3]
 8003932:	eddf 6a41 	vldr	s13, [pc, #260]	; 8003a38 <SpiritRadioGetdBm2Reg+0x210>
 8003936:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800393a:	7dfa      	ldrb	r2, [r7, #23]
 800393c:	493d      	ldr	r1, [pc, #244]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	00db      	lsls	r3, r3, #3
 8003946:	440b      	add	r3, r1
 8003948:	330c      	adds	r3, #12
 800394a:	ed93 6a00 	vldr	s12, [r3]
 800394e:	7dfa      	ldrb	r2, [r7, #23]
 8003950:	4938      	ldr	r1, [pc, #224]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003952:	4613      	mov	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	4413      	add	r3, r2
 8003958:	00db      	lsls	r3, r3, #3
 800395a:	440b      	add	r3, r1
 800395c:	3308      	adds	r3, #8
 800395e:	edd3 6a00 	vldr	s13, [r3]
 8003962:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8003966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800396a:	ed97 7a02 	vldr	s14, [r7, #8]
 800396e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003972:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003976:	d501      	bpl.n	800397c <SpiritRadioGetdBm2Reg+0x154>
      j=2;
 8003978:	2302      	movs	r3, #2
 800397a:	75bb      	strb	r3, [r7, #22]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 800397c:	7dfa      	ldrb	r2, [r7, #23]
 800397e:	7dbb      	ldrb	r3, [r7, #22]
 8003980:	0059      	lsls	r1, r3, #1
 8003982:	482c      	ldr	r0, [pc, #176]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 8003984:	4613      	mov	r3, r2
 8003986:	005b      	lsls	r3, r3, #1
 8003988:	4413      	add	r3, r2
 800398a:	005b      	lsls	r3, r3, #1
 800398c:	440b      	add	r3, r1
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4403      	add	r3, r0
 8003992:	ed93 7a00 	vldr	s14, [r3]
 8003996:	edd7 7a02 	vldr	s15, [r7, #8]
 800399a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800399e:	7dfa      	ldrb	r2, [r7, #23]
 80039a0:	7dbb      	ldrb	r3, [r7, #22]
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	1c59      	adds	r1, r3, #1
 80039a6:	4823      	ldr	r0, [pc, #140]	; (8003a34 <SpiritRadioGetdBm2Reg+0x20c>)
 80039a8:	4613      	mov	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	4413      	add	r3, r2
 80039ae:	005b      	lsls	r3, r3, #1
 80039b0:	440b      	add	r3, r1
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4403      	add	r3, r0
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039be:	edc7 7a04 	vstr	s15, [r7, #16]
  
  if(fReg<1)
 80039c2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80039ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d2:	d503      	bpl.n	80039dc <SpiritRadioGetdBm2Reg+0x1b4>
    fReg=1;
 80039d4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	e00a      	b.n	80039f2 <SpiritRadioGetdBm2Reg+0x1ca>
  else if(fReg>90) 
 80039dc:	edd7 7a04 	vldr	s15, [r7, #16]
 80039e0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8003a3c <SpiritRadioGetdBm2Reg+0x214>
 80039e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80039e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039ec:	dd01      	ble.n	80039f2 <SpiritRadioGetdBm2Reg+0x1ca>
    fReg=90;
 80039ee:	4b14      	ldr	r3, [pc, #80]	; (8003a40 <SpiritRadioGetdBm2Reg+0x218>)
 80039f0:	613b      	str	r3, [r7, #16]
  
  return ((uint8_t)fReg);
 80039f2:	edd7 7a04 	vldr	s15, [r7, #16]
 80039f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039fa:	edc7 7a01 	vstr	s15, [r7, #4]
 80039fe:	793b      	ldrb	r3, [r7, #4]
 8003a00:	b2db      	uxtb	r3, r3
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	2e5f5680 	.word	0x2e5f5680
 8003a14:	390c2fe0 	.word	0x390c2fe0
 8003a18:	35a4e8ff 	.word	0x35a4e8ff
 8003a1c:	1701e47f 	.word	0x1701e47f
 8003a20:	1c146a60 	.word	0x1c146a60
 8003a24:	11d260bf 	.word	0x11d260bf
 8003a28:	14ced7e0 	.word	0x14ced7e0
 8003a2c:	08e18f3f 	.word	0x08e18f3f
 8003a30:	0a6fd060 	.word	0x0a6fd060
 8003a34:	0800bbc4 	.word	0x0800bbc4
 8003a38:	42200000 	.word	0x42200000
 8003a3c:	42b40000 	.word	0x42b40000
 8003a40:	42b40000 	.word	0x42b40000

08003a44 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	ed87 0a00 	vstr	s0, [r7]
 8003a50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003a52:	f7ff fc4d 	bl	80032f0 <SpiritRadioGetFrequencyBase>
 8003a56:	4603      	mov	r3, r0
 8003a58:	ed97 0a00 	vldr	s0, [r7]
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f7ff fee3 	bl	8003828 <SpiritRadioGetdBm2Reg>
 8003a62:	4603      	mov	r3, r0
 8003a64:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	f1c3 0317 	rsb	r3, r3, #23
 8003a6c:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 8003a6e:	f107 020e 	add.w	r2, r7, #14
 8003a72:	7bfb      	ldrb	r3, [r7, #15]
 8003a74:	2101      	movs	r1, #1
 8003a76:	4618      	mov	r0, r3
 8003a78:	f000 fb2c 	bl	80040d4 <RadioSpiWriteRegisters>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	4b05      	ldr	r3, [pc, #20]	; (8003a94 <SpiritRadioSetPALeveldBm+0x50>)
 8003a80:	b212      	sxth	r2, r2
 8003a82:	4611      	mov	r1, r2
 8003a84:	7019      	strb	r1, [r3, #0]
 8003a86:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a8a:	705a      	strb	r2, [r3, #1]
  
}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200021f0 	.word	0x200021f0

08003a98 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003aa2:	f107 030f 	add.w	r3, r7, #15
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	2018      	movs	r0, #24
 8003aac:	f000 fb5e 	bl	800416c <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 8003ab0:	7bfb      	ldrb	r3, [r7, #15]
 8003ab2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003aba:	7bfa      	ldrb	r2, [r7, #15]
 8003abc:	79fb      	ldrb	r3, [r7, #7]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003ac4:	f107 030f 	add.w	r3, r7, #15
 8003ac8:	461a      	mov	r2, r3
 8003aca:	2101      	movs	r1, #1
 8003acc:	2018      	movs	r0, #24
 8003ace:	f000 fb01 	bl	80040d4 <RadioSpiWriteRegisters>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <SpiritRadioSetPACwc+0x54>)
 8003ad6:	b212      	sxth	r2, r2
 8003ad8:	4611      	mov	r1, r2
 8003ada:	7019      	strb	r1, [r3, #0]
 8003adc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ae0:	705a      	strb	r2, [r3, #1]
  
}
 8003ae2:	bf00      	nop
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	200021f0 	.word	0x200021f0

08003af0 <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003afa:	f107 030f 	add.w	r3, r7, #15
 8003afe:	461a      	mov	r2, r3
 8003b00:	2101      	movs	r1, #1
 8003b02:	2018      	movs	r0, #24
 8003b04:	f000 fb32 	bl	800416c <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
 8003b0a:	f023 0307 	bic.w	r3, r3, #7
 8003b0e:	b2db      	uxtb	r3, r3
 8003b10:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 8003b12:	7bfa      	ldrb	r2, [r7, #15]
 8003b14:	79fb      	ldrb	r3, [r7, #7]
 8003b16:	4313      	orrs	r3, r2
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 8003b1c:	f107 030f 	add.w	r3, r7, #15
 8003b20:	461a      	mov	r2, r3
 8003b22:	2101      	movs	r1, #1
 8003b24:	2018      	movs	r0, #24
 8003b26:	f000 fad5 	bl	80040d4 <RadioSpiWriteRegisters>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	4b05      	ldr	r3, [pc, #20]	; (8003b44 <SpiritRadioSetPALevelMaxIndex+0x54>)
 8003b2e:	b212      	sxth	r2, r2
 8003b30:	4611      	mov	r1, r2
 8003b32:	7019      	strb	r1, [r3, #0]
 8003b34:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b38:	705a      	strb	r2, [r3, #1]
  
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200021f0 	.word	0x200021f0

08003b48 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003b56:	f107 030f 	add.w	r3, r7, #15
 8003b5a:	461a      	mov	r2, r3
 8003b5c:	2101      	movs	r1, #1
 8003b5e:	201e      	movs	r0, #30
 8003b60:	f000 fb04 	bl	800416c <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003b64:	79fb      	ldrb	r3, [r7, #7]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d105      	bne.n	8003b76 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003b6a:	7bfb      	ldrb	r3, [r7, #15]
 8003b6c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	e004      	b.n	8003b80 <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003b76:	7bfb      	ldrb	r3, [r7, #15]
 8003b78:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 8003b80:	f107 030f 	add.w	r3, r7, #15
 8003b84:	461a      	mov	r2, r3
 8003b86:	2101      	movs	r1, #1
 8003b88:	201e      	movs	r0, #30
 8003b8a:	f000 faa3 	bl	80040d4 <RadioSpiWriteRegisters>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SpiritRadioAFCFreezeOnSync+0x60>)
 8003b92:	b212      	sxth	r2, r2
 8003b94:	4611      	mov	r1, r2
 8003b96:	7019      	strb	r1, [r3, #0]
 8003b98:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b9c:	705a      	strb	r2, [r3, #1]
  
}
 8003b9e:	bf00      	nop
 8003ba0:	3710      	adds	r7, #16
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	200021f0 	.word	0x200021f0

08003bac <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003bb6:	f107 030f 	add.w	r3, r7, #15
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2101      	movs	r1, #1
 8003bbe:	209e      	movs	r0, #158	; 0x9e
 8003bc0:	f000 fad4 	bl	800416c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003bc4:	79fb      	ldrb	r3, [r7, #7]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	73fb      	strb	r3, [r7, #15]
 8003bd4:	e004      	b.n	8003be0 <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 8003bd6:	7bfb      	ldrb	r3, [r7, #15]
 8003bd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003be0:	f107 030f 	add.w	r3, r7, #15
 8003be4:	461a      	mov	r2, r3
 8003be6:	2101      	movs	r1, #1
 8003be8:	209e      	movs	r0, #158	; 0x9e
 8003bea:	f000 fa73 	bl	80040d4 <RadioSpiWriteRegisters>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	4b05      	ldr	r3, [pc, #20]	; (8003c08 <SpiritRadioSetRefDiv+0x5c>)
 8003bf2:	b212      	sxth	r2, r2
 8003bf4:	4611      	mov	r1, r2
 8003bf6:	7019      	strb	r1, [r3, #0]
 8003bf8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003bfc:	705a      	strb	r2, [r3, #1]
  
}
 8003bfe:	bf00      	nop
 8003c00:	3710      	adds	r7, #16
 8003c02:	46bd      	mov	sp, r7
 8003c04:	bd80      	pop	{r7, pc}
 8003c06:	bf00      	nop
 8003c08:	200021f0 	.word	0x200021f0

08003c0c <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b082      	sub	sp, #8
 8003c10:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003c12:	1dfb      	adds	r3, r7, #7
 8003c14:	461a      	mov	r2, r3
 8003c16:	2101      	movs	r1, #1
 8003c18:	209e      	movs	r0, #158	; 0x9e
 8003c1a:	f000 faa7 	bl	800416c <RadioSpiReadRegisters>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	4b0a      	ldr	r3, [pc, #40]	; (8003c4c <SpiritRadioGetRefDiv+0x40>)
 8003c22:	b212      	sxth	r2, r2
 8003c24:	4611      	mov	r1, r2
 8003c26:	7019      	strb	r1, [r3, #0]
 8003c28:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003c2c:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003c2e:	79fb      	ldrb	r3, [r7, #7]
 8003c30:	09db      	lsrs	r3, r3, #7
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e000      	b.n	8003c42 <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003c40:	2300      	movs	r3, #0
  }
  
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3708      	adds	r7, #8
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}
 8003c4a:	bf00      	nop
 8003c4c:	200021f0 	.word	0x200021f0

08003c50 <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	4603      	mov	r3, r0
 8003c58:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003c5a:	f107 030f 	add.w	r3, r7, #15
 8003c5e:	461a      	mov	r2, r3
 8003c60:	2101      	movs	r1, #1
 8003c62:	20b4      	movs	r0, #180	; 0xb4
 8003c64:	f000 fa82 	bl	800416c <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003c68:	79fb      	ldrb	r3, [r7, #7]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d105      	bne.n	8003c7a <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003c6e:	7bfb      	ldrb	r3, [r7, #15]
 8003c70:	f023 0308 	bic.w	r3, r3, #8
 8003c74:	b2db      	uxtb	r3, r3
 8003c76:	73fb      	strb	r3, [r7, #15]
 8003c78:	e004      	b.n	8003c84 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003c7a:	7bfb      	ldrb	r3, [r7, #15]
 8003c7c:	f043 0308 	orr.w	r3, r3, #8
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003c84:	f107 030f 	add.w	r3, r7, #15
 8003c88:	461a      	mov	r2, r3
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	20b4      	movs	r0, #180	; 0xb4
 8003c8e:	f000 fa21 	bl	80040d4 <RadioSpiWriteRegisters>
 8003c92:	4602      	mov	r2, r0
 8003c94:	4b05      	ldr	r3, [pc, #20]	; (8003cac <SpiritRadioSetDigDiv+0x5c>)
 8003c96:	b212      	sxth	r2, r2
 8003c98:	4611      	mov	r1, r2
 8003c9a:	7019      	strb	r1, [r3, #0]
 8003c9c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003ca0:	705a      	strb	r2, [r3, #1]
  
}
 8003ca2:	bf00      	nop
 8003ca4:	3710      	adds	r7, #16
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	200021f0 	.word	0x200021f0

08003cb0 <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003cb6:	1dfb      	adds	r3, r7, #7
 8003cb8:	461a      	mov	r2, r3
 8003cba:	2101      	movs	r1, #1
 8003cbc:	20b4      	movs	r0, #180	; 0xb4
 8003cbe:	f000 fa55 	bl	800416c <RadioSpiReadRegisters>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	4b0a      	ldr	r3, [pc, #40]	; (8003cf0 <SpiritRadioGetDigDiv+0x40>)
 8003cc6:	b212      	sxth	r2, r2
 8003cc8:	4611      	mov	r1, r2
 8003cca:	7019      	strb	r1, [r3, #0]
 8003ccc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003cd0:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003cd2:	79fb      	ldrb	r3, [r7, #7]
 8003cd4:	08db      	lsrs	r3, r3, #3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f003 0301 	and.w	r3, r3, #1
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	e000      	b.n	8003ce6 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003ce4:	2301      	movs	r3, #1
  }
  
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3708      	adds	r7, #8
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}
 8003cee:	bf00      	nop
 8003cf0:	200021f0 	.word	0x200021f0

08003cf4 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003cf8:	4b03      	ldr	r3, [pc, #12]	; (8003d08 <SpiritRadioGetXtalFrequency+0x14>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	200021ec 	.word	0x200021ec

08003d0c <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003d14:	4a04      	ldr	r2, [pc, #16]	; (8003d28 <SpiritRadioSetXtalFrequency+0x1c>)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6013      	str	r3, [r2, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	200021ec 	.word	0x200021ec

08003d2c <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b084      	sub	sp, #16
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	ed87 0a01 	vstr	s0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003d36:	f107 020c 	add.w	r2, r7, #12
 8003d3a:	f107 030c 	add.w	r3, r7, #12
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4611      	mov	r1, r2
 8003d42:	4618      	mov	r0, r3
 8003d44:	ed97 0a01 	vldr	s0, [r7, #4]
 8003d48:	f000 f816 	bl	8003d78 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003d4c:	f107 030c 	add.w	r3, r7, #12
 8003d50:	461a      	mov	r2, r3
 8003d52:	2102      	movs	r1, #2
 8003d54:	2053      	movs	r0, #83	; 0x53
 8003d56:	f000 f9bd 	bl	80040d4 <RadioSpiWriteRegisters>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	4b05      	ldr	r3, [pc, #20]	; (8003d74 <SpiritTimerSetRxTimeoutMs+0x48>)
 8003d5e:	b212      	sxth	r2, r2
 8003d60:	4611      	mov	r1, r2
 8003d62:	7019      	strb	r1, [r3, #0]
 8003d64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003d68:	705a      	strb	r2, [r3, #1]

}
 8003d6a:	bf00      	nop
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	200021f0 	.word	0x200021f0

08003d78 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	ed87 0a03 	vstr	s0, [r7, #12]
 8003d82:	60b8      	str	r0, [r7, #8]
 8003d84:	6079      	str	r1, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003d86:	f7ff ffb5 	bl	8003cf4 <SpiritRadioGetXtalFrequency>
 8003d8a:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	4a91      	ldr	r2, [pc, #580]	; (8003fd4 <SpiritTimerComputeRxTimeoutValues+0x25c>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d902      	bls.n	8003d9a <SpiritTimerComputeRxTimeoutValues+0x22>
    nXtalFrequency >>= 1;
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	ee07 3a90 	vmov	s15, r3
 8003da0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003da4:	edd7 7a03 	vldr	s15, [r7, #12]
 8003da8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003dac:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003db0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003db4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003db8:	ee17 3a90 	vmov	r3, s15
 8003dbc:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d906      	bls.n	8003dd6 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	22ff      	movs	r2, #255	; 0xff
 8003dcc:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	22ff      	movs	r2, #255	; 0xff
 8003dd2:	701a      	strb	r2, [r3, #0]
    return;
 8003dd4:	e0fa      	b.n	8003fcc <SpiritTimerComputeRxTimeoutValues+0x254>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	4a80      	ldr	r2, [pc, #512]	; (8003fdc <SpiritTimerComputeRxTimeoutValues+0x264>)
 8003dda:	fba2 2303 	umull	r2, r3, r2, r3
 8003dde:	09db      	lsrs	r3, r3, #7
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	3302      	adds	r3, #2
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	461a      	mov	r2, r3
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	fbb3 f3f2 	udiv	r3, r3, r2
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	ee07 3a90 	vmov	s15, r3
 8003e04:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	ee07 3a90 	vmov	s15, r3
 8003e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e18:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e1c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e2e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e3e:	dd1d      	ble.n	8003e7c <SpiritTimerComputeRxTimeoutValues+0x104>
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	ee07 3a90 	vmov	s15, r3
 8003e48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	ee07 3a90 	vmov	s15, r3
 8003e54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e5c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e60:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	ee07 3a90 	vmov	s15, r3
 8003e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e72:	edd7 7a03 	vldr	s15, [r7, #12]
 8003e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7a:	e01e      	b.n	8003eba <SpiritTimerComputeRxTimeoutValues+0x142>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	781b      	ldrb	r3, [r3, #0]
 8003e80:	ee07 3a90 	vmov	s15, r3
 8003e84:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	ee07 3a90 	vmov	s15, r3
 8003e90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e98:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003e9c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	edd7 7a03 	vldr	s15, [r7, #12]
 8003eb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003eb6:	eef1 7a67 	vneg.f32	s15, s15
 8003eba:	edc7 7a05 	vstr	s15, [r7, #20]
  
  if((*pcCounter)<=254)
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	2bff      	cmp	r3, #255	; 0xff
 8003ec4:	d06e      	beq.n	8003fa4 <SpiritTimerComputeRxTimeoutValues+0x22c>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	3301      	adds	r3, #1
 8003ecc:	ee07 3a90 	vmov	s15, r3
 8003ed0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	781b      	ldrb	r3, [r3, #0]
 8003ed8:	ee07 3a90 	vmov	s15, r3
 8003edc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003ee0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ee4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003ee8:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	ee07 3a90 	vmov	s15, r3
 8003ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efa:	edd7 7a03 	vldr	s15, [r7, #12]
 8003efe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f02:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f0a:	dd1e      	ble.n	8003f4a <SpiritTimerComputeRxTimeoutValues+0x1d2>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	3301      	adds	r3, #1
 8003f12:	ee07 3a90 	vmov	s15, r3
 8003f16:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	ee07 3a90 	vmov	s15, r3
 8003f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f2e:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	ee07 3a90 	vmov	s15, r3
 8003f38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f40:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f48:	e01f      	b.n	8003f8a <SpiritTimerComputeRxTimeoutValues+0x212>
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	ee07 3a90 	vmov	s15, r3
 8003f54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f68:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8003fd8 <SpiritTimerComputeRxTimeoutValues+0x260>
 8003f6c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003f70:	69fb      	ldr	r3, [r7, #28]
 8003f72:	ee07 3a90 	vmov	s15, r3
 8003f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7e:	edd7 7a03 	vldr	s15, [r7, #12]
 8003f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f86:	eef1 7a67 	vneg.f32	s15, s15
 8003f8a:	ed97 7a05 	vldr	s14, [r7, #20]
 8003f8e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f96:	d505      	bpl.n	8003fa4 <SpiritTimerComputeRxTimeoutValues+0x22c>
      (*pcCounter)=(*pcCounter)+1;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	781b      	ldrb	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	b2da      	uxtb	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	781b      	ldrb	r3, [r3, #0]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d906      	bls.n	8003fc6 <SpiritTimerComputeRxTimeoutValues+0x24e>
    (*pcCounter)--;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	781b      	ldrb	r3, [r3, #0]
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b2da      	uxtb	r2, r3
 8003fc0:	68bb      	ldr	r3, [r7, #8]
 8003fc2:	701a      	strb	r2, [r3, #0]
 8003fc4:	e002      	b.n	8003fcc <SpiritTimerComputeRxTimeoutValues+0x254>
  else
    (*pcCounter)=1;
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
}
 8003fcc:	3720      	adds	r7, #32
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}
 8003fd2:	bf00      	nop
 8003fd4:	01c9c380 	.word	0x01c9c380
 8003fd8:	4993b480 	.word	0x4993b480
 8003fdc:	80808081 	.word	0x80808081

08003fe0 <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b084      	sub	sp, #16
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003fea:	f107 030c 	add.w	r3, r7, #12
 8003fee:	461a      	mov	r2, r3
 8003ff0:	2102      	movs	r1, #2
 8003ff2:	204f      	movs	r0, #79	; 0x4f
 8003ff4:	f000 f8ba 	bl	800416c <RadioSpiReadRegisters>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	4b1c      	ldr	r3, [pc, #112]	; (800406c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003ffc:	b212      	sxth	r2, r2
 8003ffe:	4611      	mov	r1, r2
 8004000:	7019      	strb	r1, [r3, #0]
 8004002:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004006:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8004008:	7b3b      	ldrb	r3, [r7, #12]
 800400a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800400e:	b2db      	uxtb	r3, r3
 8004010:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8004012:	7b3b      	ldrb	r3, [r7, #12]
 8004014:	b25a      	sxtb	r2, r3
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	00db      	lsls	r3, r3, #3
 800401a:	b25b      	sxtb	r3, r3
 800401c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004020:	b25b      	sxtb	r3, r3
 8004022:	4313      	orrs	r3, r2
 8004024:	b25b      	sxtb	r3, r3
 8004026:	b2db      	uxtb	r3, r3
 8004028:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 800402a:	7b7b      	ldrb	r3, [r7, #13]
 800402c:	f003 031f 	and.w	r3, r3, #31
 8004030:	b2db      	uxtb	r3, r3
 8004032:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8004034:	7b7b      	ldrb	r3, [r7, #13]
 8004036:	b25a      	sxtb	r2, r3
 8004038:	79fb      	ldrb	r3, [r7, #7]
 800403a:	015b      	lsls	r3, r3, #5
 800403c:	b25b      	sxtb	r3, r3
 800403e:	4313      	orrs	r3, r2
 8004040:	b25b      	sxtb	r3, r3
 8004042:	b2db      	uxtb	r3, r3
 8004044:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8004046:	f107 030c 	add.w	r3, r7, #12
 800404a:	461a      	mov	r2, r3
 800404c:	2102      	movs	r1, #2
 800404e:	204f      	movs	r0, #79	; 0x4f
 8004050:	f000 f840 	bl	80040d4 <RadioSpiWriteRegisters>
 8004054:	4602      	mov	r2, r0
 8004056:	4b05      	ldr	r3, [pc, #20]	; (800406c <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8004058:	b212      	sxth	r2, r2
 800405a:	4611      	mov	r1, r2
 800405c:	7019      	strb	r1, [r3, #0]
 800405e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8004062:	705a      	strb	r2, [r3, #1]

}
 8004064:	bf00      	nop
 8004066:	3710      	adds	r7, #16
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	200021f0 	.word	0x200021f0

08004070 <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	461a      	mov	r2, r3
 800407a:	2102      	movs	r1, #2
 800407c:	20c0      	movs	r0, #192	; 0xc0
 800407e:	f000 f875 	bl	800416c <RadioSpiReadRegisters>
 8004082:	4603      	mov	r3, r0
 8004084:	4a09      	ldr	r2, [pc, #36]	; (80040ac <SpiritRefreshStatus+0x3c>)
 8004086:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8004088:	4b08      	ldr	r3, [pc, #32]	; (80040ac <SpiritRefreshStatus+0x3c>)
 800408a:	781a      	ldrb	r2, [r3, #0]
 800408c:	797b      	ldrb	r3, [r7, #5]
 800408e:	429a      	cmp	r2, r3
 8004090:	d1f1      	bne.n	8004076 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8004092:	4b07      	ldr	r3, [pc, #28]	; (80040b0 <SpiritRefreshStatus+0x40>)
 8004094:	781b      	ldrb	r3, [r3, #0]
 8004096:	f003 030f 	and.w	r3, r3, #15
 800409a:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 800409c:	4293      	cmp	r3, r2
 800409e:	d1ea      	bne.n	8004076 <SpiritRefreshStatus+0x6>

}
 80040a0:	bf00      	nop
 80040a2:	bf00      	nop
 80040a4:	3708      	adds	r7, #8
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}
 80040aa:	bf00      	nop
 80040ac:	200021f0 	.word	0x200021f0
 80040b0:	200021f1 	.word	0x200021f1

080040b4 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 80040b8:	4b05      	ldr	r3, [pc, #20]	; (80040d0 <RadioSpiInit+0x1c>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d101      	bne.n	80040ca <RadioSpiInit+0x16>
  {
    Error_Handler();
 80040c6:	f7fd f9b1 	bl	800142c <Error_Handler>
  }
}
 80040ca:	bf00      	nop
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	20000020 	.word	0x20000020

080040d4 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af02      	add	r7, sp, #8
 80040da:	4603      	mov	r3, r0
 80040dc:	603a      	str	r2, [r7, #0]
 80040de:	71fb      	strb	r3, [r7, #7]
 80040e0:	460b      	mov	r3, r1
 80040e2:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 80040e4:	2300      	movs	r3, #0
 80040e6:	743b      	strb	r3, [r7, #16]
 80040e8:	79fb      	ldrb	r3, [r7, #7]
 80040ea:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040ec:	2017      	movs	r0, #23
 80040ee:	f000 faad 	bl	800464c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 80040f2:	2200      	movs	r2, #0
 80040f4:	2140      	movs	r1, #64	; 0x40
 80040f6:	481b      	ldr	r0, [pc, #108]	; (8004164 <RadioSpiWriteRegisters+0x90>)
 80040f8:	f000 fc60 	bl	80049bc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040fc:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <RadioSpiWriteRegisters+0x94>)
 80040fe:	6818      	ldr	r0, [r3, #0]
 8004100:	f107 020c 	add.w	r2, r7, #12
 8004104:	f107 0110 	add.w	r1, r7, #16
 8004108:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800410c:	9300      	str	r3, [sp, #0]
 800410e:	2302      	movs	r3, #2
 8004110:	f002 fb25 	bl	800675e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8004114:	4b14      	ldr	r3, [pc, #80]	; (8004168 <RadioSpiWriteRegisters+0x94>)
 8004116:	6818      	ldr	r0, [r3, #0]
 8004118:	79bb      	ldrb	r3, [r7, #6]
 800411a:	b29a      	uxth	r2, r3
 800411c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004120:	6839      	ldr	r1, [r7, #0]
 8004122:	f002 f870 	bl	8006206 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8004126:	2201      	movs	r2, #1
 8004128:	2140      	movs	r1, #64	; 0x40
 800412a:	480e      	ldr	r0, [pc, #56]	; (8004164 <RadioSpiWriteRegisters+0x90>)
 800412c:	f000 fc46 	bl	80049bc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004130:	2017      	movs	r0, #23
 8004132:	f000 fa7d 	bl	8004630 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004136:	f107 0308 	add.w	r3, r7, #8
 800413a:	3301      	adds	r3, #1
 800413c:	7b3a      	ldrb	r2, [r7, #12]
 800413e:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004140:	f107 0308 	add.w	r3, r7, #8
 8004144:	7b7a      	ldrb	r2, [r7, #13]
 8004146:	701a      	strb	r2, [r3, #0]

  return status;
 8004148:	893b      	ldrh	r3, [r7, #8]
 800414a:	82bb      	strh	r3, [r7, #20]
 800414c:	2300      	movs	r3, #0
 800414e:	7d3a      	ldrb	r2, [r7, #20]
 8004150:	f362 0307 	bfi	r3, r2, #0, #8
 8004154:	7d7a      	ldrb	r2, [r7, #21]
 8004156:	f362 230f 	bfi	r3, r2, #8, #8

}
 800415a:	4618      	mov	r0, r3
 800415c:	3718      	adds	r7, #24
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
 8004162:	bf00      	nop
 8004164:	48000400 	.word	0x48000400
 8004168:	20000020 	.word	0x20000020

0800416c <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b088      	sub	sp, #32
 8004170:	af02      	add	r7, sp, #8
 8004172:	4603      	mov	r3, r0
 8004174:	603a      	str	r2, [r7, #0]
 8004176:	71fb      	strb	r3, [r7, #7]
 8004178:	460b      	mov	r3, r1
 800417a:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 800417c:	2301      	movs	r3, #1
 800417e:	743b      	strb	r3, [r7, #16]
 8004180:	79fb      	ldrb	r3, [r7, #7]
 8004182:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004184:	2017      	movs	r0, #23
 8004186:	f000 fa61 	bl	800464c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800418a:	2200      	movs	r2, #0
 800418c:	2140      	movs	r1, #64	; 0x40
 800418e:	481b      	ldr	r0, [pc, #108]	; (80041fc <RadioSpiReadRegisters+0x90>)
 8004190:	f000 fc14 	bl	80049bc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004194:	4b1a      	ldr	r3, [pc, #104]	; (8004200 <RadioSpiReadRegisters+0x94>)
 8004196:	6818      	ldr	r0, [r3, #0]
 8004198:	f107 020c 	add.w	r2, r7, #12
 800419c:	f107 0110 	add.w	r1, r7, #16
 80041a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	2302      	movs	r3, #2
 80041a8:	f002 fad9 	bl	800675e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80041ac:	4b14      	ldr	r3, [pc, #80]	; (8004200 <RadioSpiReadRegisters+0x94>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	79bb      	ldrb	r3, [r7, #6]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041b8:	6839      	ldr	r1, [r7, #0]
 80041ba:	f002 f999 	bl	80064f0 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80041be:	2201      	movs	r2, #1
 80041c0:	2140      	movs	r1, #64	; 0x40
 80041c2:	480e      	ldr	r0, [pc, #56]	; (80041fc <RadioSpiReadRegisters+0x90>)
 80041c4:	f000 fbfa 	bl	80049bc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80041c8:	2017      	movs	r0, #23
 80041ca:	f000 fa31 	bl	8004630 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80041ce:	f107 0308 	add.w	r3, r7, #8
 80041d2:	3301      	adds	r3, #1
 80041d4:	7b3a      	ldrb	r2, [r7, #12]
 80041d6:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80041d8:	f107 0308 	add.w	r3, r7, #8
 80041dc:	7b7a      	ldrb	r2, [r7, #13]
 80041de:	701a      	strb	r2, [r3, #0]

  return status;
 80041e0:	893b      	ldrh	r3, [r7, #8]
 80041e2:	82bb      	strh	r3, [r7, #20]
 80041e4:	2300      	movs	r3, #0
 80041e6:	7d3a      	ldrb	r2, [r7, #20]
 80041e8:	f362 0307 	bfi	r3, r2, #0, #8
 80041ec:	7d7a      	ldrb	r2, [r7, #21]
 80041ee:	f362 230f 	bfi	r3, r2, #8, #8
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3718      	adds	r7, #24
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	48000400 	.word	0x48000400
 8004200:	20000020 	.word	0x20000020

08004204 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	4603      	mov	r3, r0
 800420c:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800420e:	2380      	movs	r3, #128	; 0x80
 8004210:	743b      	strb	r3, [r7, #16]
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004216:	2017      	movs	r0, #23
 8004218:	f000 fa18 	bl	800464c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800421c:	2200      	movs	r2, #0
 800421e:	2140      	movs	r1, #64	; 0x40
 8004220:	4816      	ldr	r0, [pc, #88]	; (800427c <RadioSpiCommandStrobes+0x78>)
 8004222:	f000 fbcb 	bl	80049bc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004226:	4b16      	ldr	r3, [pc, #88]	; (8004280 <RadioSpiCommandStrobes+0x7c>)
 8004228:	6818      	ldr	r0, [r3, #0]
 800422a:	f107 020c 	add.w	r2, r7, #12
 800422e:	f107 0110 	add.w	r1, r7, #16
 8004232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	2302      	movs	r3, #2
 800423a:	f002 fa90 	bl	800675e <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800423e:	2201      	movs	r2, #1
 8004240:	2140      	movs	r1, #64	; 0x40
 8004242:	480e      	ldr	r0, [pc, #56]	; (800427c <RadioSpiCommandStrobes+0x78>)
 8004244:	f000 fbba 	bl	80049bc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004248:	2017      	movs	r0, #23
 800424a:	f000 f9f1 	bl	8004630 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800424e:	f107 0308 	add.w	r3, r7, #8
 8004252:	3301      	adds	r3, #1
 8004254:	7b3a      	ldrb	r2, [r7, #12]
 8004256:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004258:	f107 0308 	add.w	r3, r7, #8
 800425c:	7b7a      	ldrb	r2, [r7, #13]
 800425e:	701a      	strb	r2, [r3, #0]

  return status;
 8004260:	893b      	ldrh	r3, [r7, #8]
 8004262:	82bb      	strh	r3, [r7, #20]
 8004264:	2300      	movs	r3, #0
 8004266:	7d3a      	ldrb	r2, [r7, #20]
 8004268:	f362 0307 	bfi	r3, r2, #0, #8
 800426c:	7d7a      	ldrb	r2, [r7, #21]
 800426e:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	48000400 	.word	0x48000400
 8004280:	20000020 	.word	0x20000020

08004284 <RadioSpiWriteFifo>:
* @param  cNbBytes: number of bytes to be written into TX FIFO
* @param  pcBuffer: pointer to data to write
* @retval Device status
*/
StatusBytes RadioSpiWriteFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	4603      	mov	r3, r0
 800428c:	6039      	str	r1, [r7, #0]
 800428e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {WRITE_HEADER, LINEAR_FIFO_ADDRESS};
 8004290:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8004294:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004296:	2017      	movs	r0, #23
 8004298:	f000 f9d8 	bl	800464c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800429c:	2200      	movs	r2, #0
 800429e:	2140      	movs	r1, #64	; 0x40
 80042a0:	481a      	ldr	r0, [pc, #104]	; (800430c <RadioSpiWriteFifo+0x88>)
 80042a2:	f000 fb8b 	bl	80049bc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80042a6:	4b1a      	ldr	r3, [pc, #104]	; (8004310 <RadioSpiWriteFifo+0x8c>)
 80042a8:	6818      	ldr	r0, [r3, #0]
 80042aa:	f107 020c 	add.w	r2, r7, #12
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042b6:	9300      	str	r3, [sp, #0]
 80042b8:	2302      	movs	r3, #2
 80042ba:	f002 fa50 	bl	800675e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80042be:	4b14      	ldr	r3, [pc, #80]	; (8004310 <RadioSpiWriteFifo+0x8c>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	79fb      	ldrb	r3, [r7, #7]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80042ca:	6839      	ldr	r1, [r7, #0]
 80042cc:	f001 ff9b 	bl	8006206 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 80042d0:	2201      	movs	r2, #1
 80042d2:	2140      	movs	r1, #64	; 0x40
 80042d4:	480d      	ldr	r0, [pc, #52]	; (800430c <RadioSpiWriteFifo+0x88>)
 80042d6:	f000 fb71 	bl	80049bc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 80042da:	2017      	movs	r0, #23
 80042dc:	f000 f9a8 	bl	8004630 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 80042e0:	f107 0308 	add.w	r3, r7, #8
 80042e4:	3301      	adds	r3, #1
 80042e6:	7b3a      	ldrb	r2, [r7, #12]
 80042e8:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 80042ea:	f107 0308 	add.w	r3, r7, #8
 80042ee:	7b7a      	ldrb	r2, [r7, #13]
 80042f0:	701a      	strb	r2, [r3, #0]

  return status;
 80042f2:	893b      	ldrh	r3, [r7, #8]
 80042f4:	82bb      	strh	r3, [r7, #20]
 80042f6:	2300      	movs	r3, #0
 80042f8:	7d3a      	ldrb	r2, [r7, #20]
 80042fa:	f362 0307 	bfi	r3, r2, #0, #8
 80042fe:	7d7a      	ldrb	r2, [r7, #21]
 8004300:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004304:	4618      	mov	r0, r3
 8004306:	3718      	adds	r7, #24
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}
 800430c:	48000400 	.word	0x48000400
 8004310:	20000020 	.word	0x20000020

08004314 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b088      	sub	sp, #32
 8004318:	af02      	add	r7, sp, #8
 800431a:	4603      	mov	r3, r0
 800431c:	6039      	str	r1, [r7, #0]
 800431e:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 8004320:	f64f 7301 	movw	r3, #65281	; 0xff01
 8004324:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004326:	2017      	movs	r0, #23
 8004328:	f000 f990 	bl	800464c <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 800432c:	2200      	movs	r2, #0
 800432e:	2140      	movs	r1, #64	; 0x40
 8004330:	481a      	ldr	r0, [pc, #104]	; (800439c <RadioSpiReadFifo+0x88>)
 8004332:	f000 fb43 	bl	80049bc <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004336:	4b1a      	ldr	r3, [pc, #104]	; (80043a0 <RadioSpiReadFifo+0x8c>)
 8004338:	6818      	ldr	r0, [r3, #0]
 800433a:	f107 020c 	add.w	r2, r7, #12
 800433e:	f107 0110 	add.w	r1, r7, #16
 8004342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004346:	9300      	str	r3, [sp, #0]
 8004348:	2302      	movs	r3, #2
 800434a:	f002 fa08 	bl	800675e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 800434e:	4b14      	ldr	r3, [pc, #80]	; (80043a0 <RadioSpiReadFifo+0x8c>)
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	b29a      	uxth	r2, r3
 8004356:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800435a:	6839      	ldr	r1, [r7, #0]
 800435c:	f002 f8c8 	bl	80064f0 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 8004360:	2201      	movs	r2, #1
 8004362:	2140      	movs	r1, #64	; 0x40
 8004364:	480d      	ldr	r0, [pc, #52]	; (800439c <RadioSpiReadFifo+0x88>)
 8004366:	f000 fb29 	bl	80049bc <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 800436a:	2017      	movs	r0, #23
 800436c:	f000 f960 	bl	8004630 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8004370:	f107 0308 	add.w	r3, r7, #8
 8004374:	3301      	adds	r3, #1
 8004376:	7b3a      	ldrb	r2, [r7, #12]
 8004378:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 800437a:	f107 0308 	add.w	r3, r7, #8
 800437e:	7b7a      	ldrb	r2, [r7, #13]
 8004380:	701a      	strb	r2, [r3, #0]

  return status;
 8004382:	893b      	ldrh	r3, [r7, #8]
 8004384:	82bb      	strh	r3, [r7, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	7d3a      	ldrb	r2, [r7, #20]
 800438a:	f362 0307 	bfi	r3, r2, #0, #8
 800438e:	7d7a      	ldrb	r2, [r7, #21]
 8004390:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004394:	4618      	mov	r0, r3
 8004396:	3718      	adds	r7, #24
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}
 800439c:	48000400 	.word	0x48000400
 80043a0:	20000020 	.word	0x20000020

080043a4 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 80043a8:	2201      	movs	r2, #1
 80043aa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043b2:	f000 fb03 	bl	80049bc <HAL_GPIO_WritePin>
}
 80043b6:	bf00      	nop
 80043b8:	bd80      	pop	{r7, pc}

080043ba <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 80043ba:	b580      	push	{r7, lr}
 80043bc:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 80043be:	2200      	movs	r2, #0
 80043c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80043c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80043c8:	f000 faf8 	bl	80049bc <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
//  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
}
 80043cc:	bf00      	nop
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b082      	sub	sp, #8
 80043d4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043da:	2003      	movs	r0, #3
 80043dc:	f000 f901 	bl	80045e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80043e0:	200f      	movs	r0, #15
 80043e2:	f7fd f9e5 	bl	80017b0 <HAL_InitTick>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d002      	beq.n	80043f2 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	71fb      	strb	r3, [r7, #7]
 80043f0:	e001      	b.n	80043f6 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80043f2:	f7fd f9b5 	bl	8001760 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80043f6:	79fb      	ldrb	r3, [r7, #7]
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004404:	4b06      	ldr	r3, [pc, #24]	; (8004420 <HAL_IncTick+0x20>)
 8004406:	781b      	ldrb	r3, [r3, #0]
 8004408:	461a      	mov	r2, r3
 800440a:	4b06      	ldr	r3, [pc, #24]	; (8004424 <HAL_IncTick+0x24>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4413      	add	r3, r2
 8004410:	4a04      	ldr	r2, [pc, #16]	; (8004424 <HAL_IncTick+0x24>)
 8004412:	6013      	str	r3, [r2, #0]
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	20000028 	.word	0x20000028
 8004424:	200021f4 	.word	0x200021f4

08004428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b03      	ldr	r3, [pc, #12]	; (800443c <HAL_GetTick+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	200021f4 	.word	0x200021f4

08004440 <__NVIC_SetPriorityGrouping>:
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004450:	4b0c      	ldr	r3, [pc, #48]	; (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800445c:	4013      	ands	r3, r2
 800445e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800446c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004472:	4a04      	ldr	r2, [pc, #16]	; (8004484 <__NVIC_SetPriorityGrouping+0x44>)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	60d3      	str	r3, [r2, #12]
}
 8004478:	bf00      	nop
 800447a:	3714      	adds	r7, #20
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	e000ed00 	.word	0xe000ed00

08004488 <__NVIC_GetPriorityGrouping>:
{
 8004488:	b480      	push	{r7}
 800448a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800448c:	4b04      	ldr	r3, [pc, #16]	; (80044a0 <__NVIC_GetPriorityGrouping+0x18>)
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	0a1b      	lsrs	r3, r3, #8
 8004492:	f003 0307 	and.w	r3, r3, #7
}
 8004496:	4618      	mov	r0, r3
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr
 80044a0:	e000ed00 	.word	0xe000ed00

080044a4 <__NVIC_EnableIRQ>:
{
 80044a4:	b480      	push	{r7}
 80044a6:	b083      	sub	sp, #12
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	4603      	mov	r3, r0
 80044ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	db0b      	blt.n	80044ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044b6:	79fb      	ldrb	r3, [r7, #7]
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	4907      	ldr	r1, [pc, #28]	; (80044dc <__NVIC_EnableIRQ+0x38>)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	2001      	movs	r0, #1
 80044c6:	fa00 f202 	lsl.w	r2, r0, r2
 80044ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
 80044da:	bf00      	nop
 80044dc:	e000e100 	.word	0xe000e100

080044e0 <__NVIC_DisableIRQ>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	4603      	mov	r3, r0
 80044e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	db12      	blt.n	8004518 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044f2:	79fb      	ldrb	r3, [r7, #7]
 80044f4:	f003 021f 	and.w	r2, r3, #31
 80044f8:	490a      	ldr	r1, [pc, #40]	; (8004524 <__NVIC_DisableIRQ+0x44>)
 80044fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2001      	movs	r0, #1
 8004502:	fa00 f202 	lsl.w	r2, r0, r2
 8004506:	3320      	adds	r3, #32
 8004508:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800450c:	f3bf 8f4f 	dsb	sy
}
 8004510:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004512:	f3bf 8f6f 	isb	sy
}
 8004516:	bf00      	nop
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	e000e100 	.word	0xe000e100

08004528 <__NVIC_SetPriority>:
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	4603      	mov	r3, r0
 8004530:	6039      	str	r1, [r7, #0]
 8004532:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004534:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004538:	2b00      	cmp	r3, #0
 800453a:	db0a      	blt.n	8004552 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2da      	uxtb	r2, r3
 8004540:	490c      	ldr	r1, [pc, #48]	; (8004574 <__NVIC_SetPriority+0x4c>)
 8004542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004546:	0112      	lsls	r2, r2, #4
 8004548:	b2d2      	uxtb	r2, r2
 800454a:	440b      	add	r3, r1
 800454c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004550:	e00a      	b.n	8004568 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	b2da      	uxtb	r2, r3
 8004556:	4908      	ldr	r1, [pc, #32]	; (8004578 <__NVIC_SetPriority+0x50>)
 8004558:	79fb      	ldrb	r3, [r7, #7]
 800455a:	f003 030f 	and.w	r3, r3, #15
 800455e:	3b04      	subs	r3, #4
 8004560:	0112      	lsls	r2, r2, #4
 8004562:	b2d2      	uxtb	r2, r2
 8004564:	440b      	add	r3, r1
 8004566:	761a      	strb	r2, [r3, #24]
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000e100 	.word	0xe000e100
 8004578:	e000ed00 	.word	0xe000ed00

0800457c <NVIC_EncodePriority>:
{
 800457c:	b480      	push	{r7}
 800457e:	b089      	sub	sp, #36	; 0x24
 8004580:	af00      	add	r7, sp, #0
 8004582:	60f8      	str	r0, [r7, #12]
 8004584:	60b9      	str	r1, [r7, #8]
 8004586:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004590:	69fb      	ldr	r3, [r7, #28]
 8004592:	f1c3 0307 	rsb	r3, r3, #7
 8004596:	2b04      	cmp	r3, #4
 8004598:	bf28      	it	cs
 800459a:	2304      	movcs	r3, #4
 800459c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	3304      	adds	r3, #4
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d902      	bls.n	80045ac <NVIC_EncodePriority+0x30>
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	3b03      	subs	r3, #3
 80045aa:	e000      	b.n	80045ae <NVIC_EncodePriority+0x32>
 80045ac:	2300      	movs	r3, #0
 80045ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045b0:	f04f 32ff 	mov.w	r2, #4294967295
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	401a      	ands	r2, r3
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c4:	f04f 31ff 	mov.w	r1, #4294967295
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa01 f303 	lsl.w	r3, r1, r3
 80045ce:	43d9      	mvns	r1, r3
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d4:	4313      	orrs	r3, r2
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr

080045e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045e2:	b580      	push	{r7, lr}
 80045e4:	b082      	sub	sp, #8
 80045e6:	af00      	add	r7, sp, #0
 80045e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f7ff ff28 	bl	8004440 <__NVIC_SetPriorityGrouping>
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b086      	sub	sp, #24
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004606:	2300      	movs	r3, #0
 8004608:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800460a:	f7ff ff3d 	bl	8004488 <__NVIC_GetPriorityGrouping>
 800460e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004610:	687a      	ldr	r2, [r7, #4]
 8004612:	68b9      	ldr	r1, [r7, #8]
 8004614:	6978      	ldr	r0, [r7, #20]
 8004616:	f7ff ffb1 	bl	800457c <NVIC_EncodePriority>
 800461a:	4602      	mov	r2, r0
 800461c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004620:	4611      	mov	r1, r2
 8004622:	4618      	mov	r0, r3
 8004624:	f7ff ff80 	bl	8004528 <__NVIC_SetPriority>
}
 8004628:	bf00      	nop
 800462a:	3718      	adds	r7, #24
 800462c:	46bd      	mov	sp, r7
 800462e:	bd80      	pop	{r7, pc}

08004630 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	4603      	mov	r3, r0
 8004638:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff ff30 	bl	80044a4 <__NVIC_EnableIRQ>
}
 8004644:	bf00      	nop
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	4603      	mov	r3, r0
 8004654:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8004656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800465a:	4618      	mov	r0, r3
 800465c:	f7ff ff40 	bl	80044e0 <__NVIC_DisableIRQ>
}
 8004660:	bf00      	nop
 8004662:	3708      	adds	r7, #8
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}

08004668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004672:	2300      	movs	r3, #0
 8004674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004676:	e17f      	b.n	8004978 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	2101      	movs	r1, #1
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	fa01 f303 	lsl.w	r3, r1, r3
 8004684:	4013      	ands	r3, r2
 8004686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8171 	beq.w	8004972 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f003 0303 	and.w	r3, r3, #3
 8004698:	2b01      	cmp	r3, #1
 800469a:	d005      	beq.n	80046a8 <HAL_GPIO_Init+0x40>
 800469c:	683b      	ldr	r3, [r7, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b02      	cmp	r3, #2
 80046a6:	d130      	bne.n	800470a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	005b      	lsls	r3, r3, #1
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	685b      	ldr	r3, [r3, #4]
 80046dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80046de:	2201      	movs	r2, #1
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	fa02 f303 	lsl.w	r3, r2, r3
 80046e6:	43db      	mvns	r3, r3
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	4013      	ands	r3, r2
 80046ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	f003 0201 	and.w	r2, r3, #1
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	fa02 f303 	lsl.w	r3, r2, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	f003 0303 	and.w	r3, r3, #3
 8004712:	2b03      	cmp	r3, #3
 8004714:	d118      	bne.n	8004748 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800471c:	2201      	movs	r2, #1
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	fa02 f303 	lsl.w	r3, r2, r3
 8004724:	43db      	mvns	r3, r3
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	4013      	ands	r3, r2
 800472a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	685b      	ldr	r3, [r3, #4]
 8004730:	08db      	lsrs	r3, r3, #3
 8004732:	f003 0201 	and.w	r2, r3, #1
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	fa02 f303 	lsl.w	r3, r2, r3
 800473c:	693a      	ldr	r2, [r7, #16]
 800473e:	4313      	orrs	r3, r2
 8004740:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f003 0303 	and.w	r3, r3, #3
 8004750:	2b03      	cmp	r3, #3
 8004752:	d017      	beq.n	8004784 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	005b      	lsls	r3, r3, #1
 800475e:	2203      	movs	r2, #3
 8004760:	fa02 f303 	lsl.w	r3, r2, r3
 8004764:	43db      	mvns	r3, r3
 8004766:	693a      	ldr	r2, [r7, #16]
 8004768:	4013      	ands	r3, r2
 800476a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	689a      	ldr	r2, [r3, #8]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	005b      	lsls	r3, r3, #1
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	4313      	orrs	r3, r2
 800477c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	693a      	ldr	r2, [r7, #16]
 8004782:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	f003 0303 	and.w	r3, r3, #3
 800478c:	2b02      	cmp	r3, #2
 800478e:	d123      	bne.n	80047d8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	08da      	lsrs	r2, r3, #3
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3208      	adds	r2, #8
 8004798:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800479c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	f003 0307 	and.w	r3, r3, #7
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	220f      	movs	r2, #15
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	43db      	mvns	r3, r3
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	4013      	ands	r3, r2
 80047b2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	f003 0307 	and.w	r3, r3, #7
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	fa02 f303 	lsl.w	r3, r2, r3
 80047c4:	693a      	ldr	r2, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	08da      	lsrs	r2, r3, #3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	3208      	adds	r2, #8
 80047d2:	6939      	ldr	r1, [r7, #16]
 80047d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	2203      	movs	r2, #3
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	43db      	mvns	r3, r3
 80047ea:	693a      	ldr	r2, [r7, #16]
 80047ec:	4013      	ands	r3, r2
 80047ee:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0203 	and.w	r2, r3, #3
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	005b      	lsls	r3, r3, #1
 80047fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	4313      	orrs	r3, r2
 8004804:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	693a      	ldr	r2, [r7, #16]
 800480a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 80ac 	beq.w	8004972 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_GPIO_Init+0x330>)
 800481c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800481e:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_GPIO_Init+0x330>)
 8004820:	f043 0301 	orr.w	r3, r3, #1
 8004824:	6613      	str	r3, [r2, #96]	; 0x60
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_GPIO_Init+0x330>)
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	60bb      	str	r3, [r7, #8]
 8004830:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004832:	4a5a      	ldr	r2, [pc, #360]	; (800499c <HAL_GPIO_Init+0x334>)
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	089b      	lsrs	r3, r3, #2
 8004838:	3302      	adds	r3, #2
 800483a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800483e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f003 0303 	and.w	r3, r3, #3
 8004846:	009b      	lsls	r3, r3, #2
 8004848:	220f      	movs	r2, #15
 800484a:	fa02 f303 	lsl.w	r3, r2, r3
 800484e:	43db      	mvns	r3, r3
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	4013      	ands	r3, r2
 8004854:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800485c:	d025      	beq.n	80048aa <HAL_GPIO_Init+0x242>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a4f      	ldr	r2, [pc, #316]	; (80049a0 <HAL_GPIO_Init+0x338>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d01f      	beq.n	80048a6 <HAL_GPIO_Init+0x23e>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	4a4e      	ldr	r2, [pc, #312]	; (80049a4 <HAL_GPIO_Init+0x33c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d019      	beq.n	80048a2 <HAL_GPIO_Init+0x23a>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a4d      	ldr	r2, [pc, #308]	; (80049a8 <HAL_GPIO_Init+0x340>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d013      	beq.n	800489e <HAL_GPIO_Init+0x236>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a4c      	ldr	r2, [pc, #304]	; (80049ac <HAL_GPIO_Init+0x344>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00d      	beq.n	800489a <HAL_GPIO_Init+0x232>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a4b      	ldr	r2, [pc, #300]	; (80049b0 <HAL_GPIO_Init+0x348>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d007      	beq.n	8004896 <HAL_GPIO_Init+0x22e>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a4a      	ldr	r2, [pc, #296]	; (80049b4 <HAL_GPIO_Init+0x34c>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d101      	bne.n	8004892 <HAL_GPIO_Init+0x22a>
 800488e:	2306      	movs	r3, #6
 8004890:	e00c      	b.n	80048ac <HAL_GPIO_Init+0x244>
 8004892:	2307      	movs	r3, #7
 8004894:	e00a      	b.n	80048ac <HAL_GPIO_Init+0x244>
 8004896:	2305      	movs	r3, #5
 8004898:	e008      	b.n	80048ac <HAL_GPIO_Init+0x244>
 800489a:	2304      	movs	r3, #4
 800489c:	e006      	b.n	80048ac <HAL_GPIO_Init+0x244>
 800489e:	2303      	movs	r3, #3
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x244>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_Init+0x244>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_Init+0x244>
 80048aa:	2300      	movs	r3, #0
 80048ac:	697a      	ldr	r2, [r7, #20]
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	0092      	lsls	r2, r2, #2
 80048b4:	4093      	lsls	r3, r2
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80048bc:	4937      	ldr	r1, [pc, #220]	; (800499c <HAL_GPIO_Init+0x334>)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048ca:	4b3b      	ldr	r3, [pc, #236]	; (80049b8 <HAL_GPIO_Init+0x350>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4013      	ands	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80048e6:	693a      	ldr	r2, [r7, #16]
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048ee:	4a32      	ldr	r2, [pc, #200]	; (80049b8 <HAL_GPIO_Init+0x350>)
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048f4:	4b30      	ldr	r3, [pc, #192]	; (80049b8 <HAL_GPIO_Init+0x350>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4313      	orrs	r3, r2
 8004916:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004918:	4a27      	ldr	r2, [pc, #156]	; (80049b8 <HAL_GPIO_Init+0x350>)
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800491e:	4b26      	ldr	r3, [pc, #152]	; (80049b8 <HAL_GPIO_Init+0x350>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800493a:	693a      	ldr	r2, [r7, #16]
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004942:	4a1d      	ldr	r2, [pc, #116]	; (80049b8 <HAL_GPIO_Init+0x350>)
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004948:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <HAL_GPIO_Init+0x350>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	43db      	mvns	r3, r3
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	4013      	ands	r3, r2
 8004956:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4313      	orrs	r3, r2
 800496a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800496c:	4a12      	ldr	r2, [pc, #72]	; (80049b8 <HAL_GPIO_Init+0x350>)
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	3301      	adds	r3, #1
 8004976:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa22 f303 	lsr.w	r3, r2, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	f47f ae78 	bne.w	8004678 <HAL_GPIO_Init+0x10>
  }
}
 8004988:	bf00      	nop
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	40010000 	.word	0x40010000
 80049a0:	48000400 	.word	0x48000400
 80049a4:	48000800 	.word	0x48000800
 80049a8:	48000c00 	.word	0x48000c00
 80049ac:	48001000 	.word	0x48001000
 80049b0:	48001400 	.word	0x48001400
 80049b4:	48001800 	.word	0x48001800
 80049b8:	40010400 	.word	0x40010400

080049bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049bc:	b480      	push	{r7}
 80049be:	b083      	sub	sp, #12
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	807b      	strh	r3, [r7, #2]
 80049c8:	4613      	mov	r3, r2
 80049ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049cc:	787b      	ldrb	r3, [r7, #1]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d003      	beq.n	80049da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80049d2:	887a      	ldrh	r2, [r7, #2]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80049d8:	e002      	b.n	80049e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80049da:	887a      	ldrh	r2, [r7, #2]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80049e0:	bf00      	nop
 80049e2:	370c      	adds	r7, #12
 80049e4:	46bd      	mov	sp, r7
 80049e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ea:	4770      	bx	lr

080049ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b082      	sub	sp, #8
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	4603      	mov	r3, r0
 80049f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049f6:	4b08      	ldr	r3, [pc, #32]	; (8004a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f8:	695a      	ldr	r2, [r3, #20]
 80049fa:	88fb      	ldrh	r3, [r7, #6]
 80049fc:	4013      	ands	r3, r2
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d006      	beq.n	8004a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004a02:	4a05      	ldr	r2, [pc, #20]	; (8004a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004a04:	88fb      	ldrh	r3, [r7, #6]
 8004a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fc fb42 	bl	8001094 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a10:	bf00      	nop
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}
 8004a18:	40010400 	.word	0x40010400

08004a1c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004a20:	4b04      	ldr	r3, [pc, #16]	; (8004a34 <HAL_PWREx_GetVoltageRange+0x18>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	40007000 	.word	0x40007000

08004a38 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d130      	bne.n	8004aaa <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004a48:	4b23      	ldr	r3, [pc, #140]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004a50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a54:	d038      	beq.n	8004ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a56:	4b20      	ldr	r3, [pc, #128]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004a5e:	4a1e      	ldr	r2, [pc, #120]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a60:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004a66:	4b1d      	ldr	r3, [pc, #116]	; (8004adc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2232      	movs	r2, #50	; 0x32
 8004a6c:	fb02 f303 	mul.w	r3, r2, r3
 8004a70:	4a1b      	ldr	r2, [pc, #108]	; (8004ae0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004a72:	fba2 2303 	umull	r2, r3, r2, r3
 8004a76:	0c9b      	lsrs	r3, r3, #18
 8004a78:	3301      	adds	r3, #1
 8004a7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a7c:	e002      	b.n	8004a84 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004a84:	4b14      	ldr	r3, [pc, #80]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a86:	695b      	ldr	r3, [r3, #20]
 8004a88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a90:	d102      	bne.n	8004a98 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d1f2      	bne.n	8004a7e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004a9a:	695b      	ldr	r3, [r3, #20]
 8004a9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004aa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aa4:	d110      	bne.n	8004ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004aa6:	2303      	movs	r3, #3
 8004aa8:	e00f      	b.n	8004aca <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aaa:	4b0b      	ldr	r3, [pc, #44]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ab6:	d007      	beq.n	8004ac8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004ac0:	4a05      	ldr	r2, [pc, #20]	; (8004ad8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004ac8:	2300      	movs	r3, #0
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3714      	adds	r7, #20
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40007000 	.word	0x40007000
 8004adc:	20000018 	.word	0x20000018
 8004ae0:	431bde83 	.word	0x431bde83

08004ae4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b088      	sub	sp, #32
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e3ca      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004af6:	4b97      	ldr	r3, [pc, #604]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 030c 	and.w	r3, r3, #12
 8004afe:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b00:	4b94      	ldr	r3, [pc, #592]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0310 	and.w	r3, r3, #16
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	f000 80e4 	beq.w	8004ce0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_RCC_OscConfig+0x4a>
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	2b0c      	cmp	r3, #12
 8004b22:	f040 808b 	bne.w	8004c3c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004b26:	697b      	ldr	r3, [r7, #20]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 8087 	bne.w	8004c3c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b2e:	4b89      	ldr	r3, [pc, #548]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d005      	beq.n	8004b46 <HAL_RCC_OscConfig+0x62>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004b42:	2301      	movs	r3, #1
 8004b44:	e3a2      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1a      	ldr	r2, [r3, #32]
 8004b4a:	4b82      	ldr	r3, [pc, #520]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 0308 	and.w	r3, r3, #8
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d004      	beq.n	8004b60 <HAL_RCC_OscConfig+0x7c>
 8004b56:	4b7f      	ldr	r3, [pc, #508]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b5e:	e005      	b.n	8004b6c <HAL_RCC_OscConfig+0x88>
 8004b60:	4b7c      	ldr	r3, [pc, #496]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d223      	bcs.n	8004bb8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a1b      	ldr	r3, [r3, #32]
 8004b74:	4618      	mov	r0, r3
 8004b76:	f000 fd87 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e383      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b84:	4b73      	ldr	r3, [pc, #460]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a72      	ldr	r2, [pc, #456]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b8a:	f043 0308 	orr.w	r3, r3, #8
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	4b70      	ldr	r3, [pc, #448]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6a1b      	ldr	r3, [r3, #32]
 8004b9c:	496d      	ldr	r1, [pc, #436]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004ba2:	4b6c      	ldr	r3, [pc, #432]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	021b      	lsls	r3, r3, #8
 8004bb0:	4968      	ldr	r1, [pc, #416]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	604b      	str	r3, [r1, #4]
 8004bb6:	e025      	b.n	8004c04 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004bb8:	4b66      	ldr	r3, [pc, #408]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4a65      	ldr	r2, [pc, #404]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bbe:	f043 0308 	orr.w	r3, r3, #8
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	4b63      	ldr	r3, [pc, #396]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a1b      	ldr	r3, [r3, #32]
 8004bd0:	4960      	ldr	r1, [pc, #384]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004bd6:	4b5f      	ldr	r3, [pc, #380]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	69db      	ldr	r3, [r3, #28]
 8004be2:	021b      	lsls	r3, r3, #8
 8004be4:	495b      	ldr	r1, [pc, #364]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d109      	bne.n	8004c04 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fd47 	bl	8005688 <RCC_SetFlashLatencyFromMSIRange>
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d001      	beq.n	8004c04 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e343      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c04:	f000 fc4a 	bl	800549c <HAL_RCC_GetSysClockFreq>
 8004c08:	4602      	mov	r2, r0
 8004c0a:	4b52      	ldr	r3, [pc, #328]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	091b      	lsrs	r3, r3, #4
 8004c10:	f003 030f 	and.w	r3, r3, #15
 8004c14:	4950      	ldr	r1, [pc, #320]	; (8004d58 <HAL_RCC_OscConfig+0x274>)
 8004c16:	5ccb      	ldrb	r3, [r1, r3]
 8004c18:	f003 031f 	and.w	r3, r3, #31
 8004c1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c20:	4a4e      	ldr	r2, [pc, #312]	; (8004d5c <HAL_RCC_OscConfig+0x278>)
 8004c22:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004c24:	4b4e      	ldr	r3, [pc, #312]	; (8004d60 <HAL_RCC_OscConfig+0x27c>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fc fdc1 	bl	80017b0 <HAL_InitTick>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d052      	beq.n	8004cde <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004c38:	7bfb      	ldrb	r3, [r7, #15]
 8004c3a:	e327      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d032      	beq.n	8004caa <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004c44:	4b43      	ldr	r3, [pc, #268]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a42      	ldr	r2, [pc, #264]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c4a:	f043 0301 	orr.w	r3, r3, #1
 8004c4e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004c50:	f7ff fbea 	bl	8004428 <HAL_GetTick>
 8004c54:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c56:	e008      	b.n	8004c6a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004c58:	f7ff fbe6 	bl	8004428 <HAL_GetTick>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	2b02      	cmp	r3, #2
 8004c64:	d901      	bls.n	8004c6a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004c66:	2303      	movs	r3, #3
 8004c68:	e310      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004c6a:	4b3a      	ldr	r3, [pc, #232]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d0f0      	beq.n	8004c58 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004c76:	4b37      	ldr	r3, [pc, #220]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a36      	ldr	r2, [pc, #216]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c7c:	f043 0308 	orr.w	r3, r3, #8
 8004c80:	6013      	str	r3, [r2, #0]
 8004c82:	4b34      	ldr	r3, [pc, #208]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	4931      	ldr	r1, [pc, #196]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004c94:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
 8004ca0:	021b      	lsls	r3, r3, #8
 8004ca2:	492c      	ldr	r1, [pc, #176]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004ca4:	4313      	orrs	r3, r2
 8004ca6:	604b      	str	r3, [r1, #4]
 8004ca8:	e01a      	b.n	8004ce0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004caa:	4b2a      	ldr	r3, [pc, #168]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a29      	ldr	r2, [pc, #164]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004cb0:	f023 0301 	bic.w	r3, r3, #1
 8004cb4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004cb6:	f7ff fbb7 	bl	8004428 <HAL_GetTick>
 8004cba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cbc:	e008      	b.n	8004cd0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004cbe:	f7ff fbb3 	bl	8004428 <HAL_GetTick>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	1ad3      	subs	r3, r2, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e2dd      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004cd0:	4b20      	ldr	r3, [pc, #128]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0302 	and.w	r3, r3, #2
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d1f0      	bne.n	8004cbe <HAL_RCC_OscConfig+0x1da>
 8004cdc:	e000      	b.n	8004ce0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004cde:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0301 	and.w	r3, r3, #1
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d074      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004cec:	69bb      	ldr	r3, [r7, #24]
 8004cee:	2b08      	cmp	r3, #8
 8004cf0:	d005      	beq.n	8004cfe <HAL_RCC_OscConfig+0x21a>
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2b0c      	cmp	r3, #12
 8004cf6:	d10e      	bne.n	8004d16 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d10b      	bne.n	8004d16 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d064      	beq.n	8004dd4 <HAL_RCC_OscConfig+0x2f0>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d160      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e2ba      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d1e:	d106      	bne.n	8004d2e <HAL_RCC_OscConfig+0x24a>
 8004d20:	4b0c      	ldr	r3, [pc, #48]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a0b      	ldr	r2, [pc, #44]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	e026      	b.n	8004d7c <HAL_RCC_OscConfig+0x298>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d36:	d115      	bne.n	8004d64 <HAL_RCC_OscConfig+0x280>
 8004d38:	4b06      	ldr	r3, [pc, #24]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a05      	ldr	r2, [pc, #20]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d42:	6013      	str	r3, [r2, #0]
 8004d44:	4b03      	ldr	r3, [pc, #12]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4a02      	ldr	r2, [pc, #8]	; (8004d54 <HAL_RCC_OscConfig+0x270>)
 8004d4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d4e:	6013      	str	r3, [r2, #0]
 8004d50:	e014      	b.n	8004d7c <HAL_RCC_OscConfig+0x298>
 8004d52:	bf00      	nop
 8004d54:	40021000 	.word	0x40021000
 8004d58:	0800ba98 	.word	0x0800ba98
 8004d5c:	20000018 	.word	0x20000018
 8004d60:	20000024 	.word	0x20000024
 8004d64:	4ba0      	ldr	r3, [pc, #640]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a9f      	ldr	r2, [pc, #636]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004d6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b9d      	ldr	r3, [pc, #628]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a9c      	ldr	r2, [pc, #624]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d013      	beq.n	8004dac <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d84:	f7ff fb50 	bl	8004428 <HAL_GetTick>
 8004d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d8a:	e008      	b.n	8004d9e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d8c:	f7ff fb4c 	bl	8004428 <HAL_GetTick>
 8004d90:	4602      	mov	r2, r0
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	1ad3      	subs	r3, r2, r3
 8004d96:	2b64      	cmp	r3, #100	; 0x64
 8004d98:	d901      	bls.n	8004d9e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e276      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9e:	4b92      	ldr	r3, [pc, #584]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d0f0      	beq.n	8004d8c <HAL_RCC_OscConfig+0x2a8>
 8004daa:	e014      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dac:	f7ff fb3c 	bl	8004428 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7ff fb38 	bl	8004428 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	; 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e262      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc6:	4b88      	ldr	r3, [pc, #544]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1f0      	bne.n	8004db4 <HAL_RCC_OscConfig+0x2d0>
 8004dd2:	e000      	b.n	8004dd6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f003 0302 	and.w	r3, r3, #2
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d060      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	2b04      	cmp	r3, #4
 8004de6:	d005      	beq.n	8004df4 <HAL_RCC_OscConfig+0x310>
 8004de8:	69bb      	ldr	r3, [r7, #24]
 8004dea:	2b0c      	cmp	r3, #12
 8004dec:	d119      	bne.n	8004e22 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d116      	bne.n	8004e22 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004df4:	4b7c      	ldr	r3, [pc, #496]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d005      	beq.n	8004e0c <HAL_RCC_OscConfig+0x328>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d101      	bne.n	8004e0c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e23f      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e0c:	4b76      	ldr	r3, [pc, #472]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	4973      	ldr	r1, [pc, #460]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e20:	e040      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d023      	beq.n	8004e72 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e2a:	4b6f      	ldr	r3, [pc, #444]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a6e      	ldr	r2, [pc, #440]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7ff faf7 	bl	8004428 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7ff faf3 	bl	8004428 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e21d      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e50:	4b65      	ldr	r3, [pc, #404]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e5c:	4b62      	ldr	r3, [pc, #392]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	691b      	ldr	r3, [r3, #16]
 8004e68:	061b      	lsls	r3, r3, #24
 8004e6a:	495f      	ldr	r1, [pc, #380]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	604b      	str	r3, [r1, #4]
 8004e70:	e018      	b.n	8004ea4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e72:	4b5d      	ldr	r3, [pc, #372]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a5c      	ldr	r2, [pc, #368]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e7e:	f7ff fad3 	bl	8004428 <HAL_GetTick>
 8004e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e86:	f7ff facf 	bl	8004428 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e1f9      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e98:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0308 	and.w	r3, r3, #8
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d03c      	beq.n	8004f2a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d01c      	beq.n	8004ef2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004eb8:	4b4b      	ldr	r3, [pc, #300]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004eba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ebe:	4a4a      	ldr	r2, [pc, #296]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ec8:	f7ff faae 	bl	8004428 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ed0:	f7ff faaa 	bl	8004428 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e1d4      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ee2:	4b41      	ldr	r3, [pc, #260]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004ee4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ef      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x3ec>
 8004ef0:	e01b      	b.n	8004f2a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ef2:	4b3d      	ldr	r3, [pc, #244]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ef8:	4a3b      	ldr	r2, [pc, #236]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004efa:	f023 0301 	bic.w	r3, r3, #1
 8004efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f02:	f7ff fa91 	bl	8004428 <HAL_GetTick>
 8004f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f08:	e008      	b.n	8004f1c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f0a:	f7ff fa8d 	bl	8004428 <HAL_GetTick>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	693b      	ldr	r3, [r7, #16]
 8004f12:	1ad3      	subs	r3, r2, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	d901      	bls.n	8004f1c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004f18:	2303      	movs	r3, #3
 8004f1a:	e1b7      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f1c:	4b32      	ldr	r3, [pc, #200]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d1ef      	bne.n	8004f0a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0304 	and.w	r3, r3, #4
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80a6 	beq.w	8005084 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004f3c:	4b2a      	ldr	r3, [pc, #168]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004f3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10d      	bne.n	8004f64 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f48:	4b27      	ldr	r3, [pc, #156]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f52:	6593      	str	r3, [r2, #88]	; 0x58
 8004f54:	4b24      	ldr	r3, [pc, #144]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f5c:	60bb      	str	r3, [r7, #8]
 8004f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f60:	2301      	movs	r3, #1
 8004f62:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f64:	4b21      	ldr	r3, [pc, #132]	; (8004fec <HAL_RCC_OscConfig+0x508>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d118      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f70:	4b1e      	ldr	r3, [pc, #120]	; (8004fec <HAL_RCC_OscConfig+0x508>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a1d      	ldr	r2, [pc, #116]	; (8004fec <HAL_RCC_OscConfig+0x508>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f7c:	f7ff fa54 	bl	8004428 <HAL_GetTick>
 8004f80:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f82:	e008      	b.n	8004f96 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f84:	f7ff fa50 	bl	8004428 <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d901      	bls.n	8004f96 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	e17a      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f96:	4b15      	ldr	r3, [pc, #84]	; (8004fec <HAL_RCC_OscConfig+0x508>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d0f0      	beq.n	8004f84 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d108      	bne.n	8004fbc <HAL_RCC_OscConfig+0x4d8>
 8004faa:	4b0f      	ldr	r3, [pc, #60]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	4a0d      	ldr	r2, [pc, #52]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fb2:	f043 0301 	orr.w	r3, r3, #1
 8004fb6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fba:	e029      	b.n	8005010 <HAL_RCC_OscConfig+0x52c>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	2b05      	cmp	r3, #5
 8004fc2:	d115      	bne.n	8004ff0 <HAL_RCC_OscConfig+0x50c>
 8004fc4:	4b08      	ldr	r3, [pc, #32]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fca:	4a07      	ldr	r2, [pc, #28]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fcc:	f043 0304 	orr.w	r3, r3, #4
 8004fd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fd4:	4b04      	ldr	r3, [pc, #16]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	4a03      	ldr	r2, [pc, #12]	; (8004fe8 <HAL_RCC_OscConfig+0x504>)
 8004fdc:	f043 0301 	orr.w	r3, r3, #1
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004fe4:	e014      	b.n	8005010 <HAL_RCC_OscConfig+0x52c>
 8004fe6:	bf00      	nop
 8004fe8:	40021000 	.word	0x40021000
 8004fec:	40007000 	.word	0x40007000
 8004ff0:	4b9c      	ldr	r3, [pc, #624]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8004ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff6:	4a9b      	ldr	r2, [pc, #620]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8004ff8:	f023 0301 	bic.w	r3, r3, #1
 8004ffc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005000:	4b98      	ldr	r3, [pc, #608]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	4a97      	ldr	r2, [pc, #604]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005008:	f023 0304 	bic.w	r3, r3, #4
 800500c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d016      	beq.n	8005046 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005018:	f7ff fa06 	bl	8004428 <HAL_GetTick>
 800501c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800501e:	e00a      	b.n	8005036 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005020:	f7ff fa02 	bl	8004428 <HAL_GetTick>
 8005024:	4602      	mov	r2, r0
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	f241 3288 	movw	r2, #5000	; 0x1388
 800502e:	4293      	cmp	r3, r2
 8005030:	d901      	bls.n	8005036 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005032:	2303      	movs	r3, #3
 8005034:	e12a      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005036:	4b8b      	ldr	r3, [pc, #556]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0ed      	beq.n	8005020 <HAL_RCC_OscConfig+0x53c>
 8005044:	e015      	b.n	8005072 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005046:	f7ff f9ef 	bl	8004428 <HAL_GetTick>
 800504a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800504c:	e00a      	b.n	8005064 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800504e:	f7ff f9eb 	bl	8004428 <HAL_GetTick>
 8005052:	4602      	mov	r2, r0
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	1ad3      	subs	r3, r2, r3
 8005058:	f241 3288 	movw	r2, #5000	; 0x1388
 800505c:	4293      	cmp	r3, r2
 800505e:	d901      	bls.n	8005064 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e113      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005064:	4b7f      	ldr	r3, [pc, #508]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	d1ed      	bne.n	800504e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005072:	7ffb      	ldrb	r3, [r7, #31]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d105      	bne.n	8005084 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005078:	4b7a      	ldr	r3, [pc, #488]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	4a79      	ldr	r2, [pc, #484]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 800507e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005082:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 80fe 	beq.w	800528a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005092:	2b02      	cmp	r3, #2
 8005094:	f040 80d0 	bne.w	8005238 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005098:	4b72      	ldr	r3, [pc, #456]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	f003 0203 	and.w	r2, r3, #3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d130      	bne.n	800510e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050b6:	3b01      	subs	r3, #1
 80050b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d127      	bne.n	800510e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d11f      	bne.n	800510e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050d4:	687a      	ldr	r2, [r7, #4]
 80050d6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050d8:	2a07      	cmp	r2, #7
 80050da:	bf14      	ite	ne
 80050dc:	2201      	movne	r2, #1
 80050de:	2200      	moveq	r2, #0
 80050e0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d113      	bne.n	800510e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050f0:	085b      	lsrs	r3, r3, #1
 80050f2:	3b01      	subs	r3, #1
 80050f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d109      	bne.n	800510e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800510a:	429a      	cmp	r2, r3
 800510c:	d06e      	beq.n	80051ec <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	2b0c      	cmp	r3, #12
 8005112:	d069      	beq.n	80051e8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005114:	4b53      	ldr	r3, [pc, #332]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d105      	bne.n	800512c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005120:	4b50      	ldr	r3, [pc, #320]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005128:	2b00      	cmp	r3, #0
 800512a:	d001      	beq.n	8005130 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e0ad      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005130:	4b4c      	ldr	r3, [pc, #304]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a4b      	ldr	r2, [pc, #300]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005136:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800513a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800513c:	f7ff f974 	bl	8004428 <HAL_GetTick>
 8005140:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005142:	e008      	b.n	8005156 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005144:	f7ff f970 	bl	8004428 <HAL_GetTick>
 8005148:	4602      	mov	r2, r0
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	1ad3      	subs	r3, r2, r3
 800514e:	2b02      	cmp	r3, #2
 8005150:	d901      	bls.n	8005156 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e09a      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005156:	4b43      	ldr	r3, [pc, #268]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800515e:	2b00      	cmp	r3, #0
 8005160:	d1f0      	bne.n	8005144 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005162:	4b40      	ldr	r3, [pc, #256]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	4b40      	ldr	r3, [pc, #256]	; (8005268 <HAL_RCC_OscConfig+0x784>)
 8005168:	4013      	ands	r3, r2
 800516a:	687a      	ldr	r2, [r7, #4]
 800516c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005172:	3a01      	subs	r2, #1
 8005174:	0112      	lsls	r2, r2, #4
 8005176:	4311      	orrs	r1, r2
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800517c:	0212      	lsls	r2, r2, #8
 800517e:	4311      	orrs	r1, r2
 8005180:	687a      	ldr	r2, [r7, #4]
 8005182:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005184:	0852      	lsrs	r2, r2, #1
 8005186:	3a01      	subs	r2, #1
 8005188:	0552      	lsls	r2, r2, #21
 800518a:	4311      	orrs	r1, r2
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005190:	0852      	lsrs	r2, r2, #1
 8005192:	3a01      	subs	r2, #1
 8005194:	0652      	lsls	r2, r2, #25
 8005196:	4311      	orrs	r1, r2
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800519c:	0912      	lsrs	r2, r2, #4
 800519e:	0452      	lsls	r2, r2, #17
 80051a0:	430a      	orrs	r2, r1
 80051a2:	4930      	ldr	r1, [pc, #192]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051a4:	4313      	orrs	r3, r2
 80051a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80051a8:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	4a2d      	ldr	r2, [pc, #180]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051b4:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051b6:	68db      	ldr	r3, [r3, #12]
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80051c0:	f7ff f932 	bl	8004428 <HAL_GetTick>
 80051c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051c6:	e008      	b.n	80051da <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051c8:	f7ff f92e 	bl	8004428 <HAL_GetTick>
 80051cc:	4602      	mov	r2, r0
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	1ad3      	subs	r3, r2, r3
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d901      	bls.n	80051da <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80051d6:	2303      	movs	r3, #3
 80051d8:	e058      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d0f0      	beq.n	80051c8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80051e6:	e050      	b.n	800528a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e04f      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051ec:	4b1d      	ldr	r3, [pc, #116]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d148      	bne.n	800528a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80051f8:	4b1a      	ldr	r3, [pc, #104]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a19      	ldr	r2, [pc, #100]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 80051fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005202:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005204:	4b17      	ldr	r3, [pc, #92]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	4a16      	ldr	r2, [pc, #88]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 800520a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800520e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005210:	f7ff f90a 	bl	8004428 <HAL_GetTick>
 8005214:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005216:	e008      	b.n	800522a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005218:	f7ff f906 	bl	8004428 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	2b02      	cmp	r3, #2
 8005224:	d901      	bls.n	800522a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8005226:	2303      	movs	r3, #3
 8005228:	e030      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800522a:	4b0e      	ldr	r3, [pc, #56]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d0f0      	beq.n	8005218 <HAL_RCC_OscConfig+0x734>
 8005236:	e028      	b.n	800528a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	2b0c      	cmp	r3, #12
 800523c:	d023      	beq.n	8005286 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800523e:	4b09      	ldr	r3, [pc, #36]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a08      	ldr	r2, [pc, #32]	; (8005264 <HAL_RCC_OscConfig+0x780>)
 8005244:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005248:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800524a:	f7ff f8ed 	bl	8004428 <HAL_GetTick>
 800524e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005250:	e00c      	b.n	800526c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005252:	f7ff f8e9 	bl	8004428 <HAL_GetTick>
 8005256:	4602      	mov	r2, r0
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	1ad3      	subs	r3, r2, r3
 800525c:	2b02      	cmp	r3, #2
 800525e:	d905      	bls.n	800526c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e013      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
 8005264:	40021000 	.word	0x40021000
 8005268:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800526c:	4b09      	ldr	r3, [pc, #36]	; (8005294 <HAL_RCC_OscConfig+0x7b0>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1ec      	bne.n	8005252 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <HAL_RCC_OscConfig+0x7b0>)
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	4905      	ldr	r1, [pc, #20]	; (8005294 <HAL_RCC_OscConfig+0x7b0>)
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <HAL_RCC_OscConfig+0x7b4>)
 8005280:	4013      	ands	r3, r2
 8005282:	60cb      	str	r3, [r1, #12]
 8005284:	e001      	b.n	800528a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e000      	b.n	800528c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3720      	adds	r7, #32
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	40021000 	.word	0x40021000
 8005298:	feeefffc 	.word	0xfeeefffc

0800529c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b084      	sub	sp, #16
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052ac:	2301      	movs	r3, #1
 80052ae:	e0e7      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052b0:	4b75      	ldr	r3, [pc, #468]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	f003 0307 	and.w	r3, r3, #7
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d910      	bls.n	80052e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052be:	4b72      	ldr	r3, [pc, #456]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f023 0207 	bic.w	r2, r3, #7
 80052c6:	4970      	ldr	r1, [pc, #448]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052ce:	4b6e      	ldr	r3, [pc, #440]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d001      	beq.n	80052e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	e0cf      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f003 0302 	and.w	r3, r3, #2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d010      	beq.n	800530e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	689a      	ldr	r2, [r3, #8]
 80052f0:	4b66      	ldr	r3, [pc, #408]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d908      	bls.n	800530e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80052fc:	4b63      	ldr	r3, [pc, #396]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	4960      	ldr	r1, [pc, #384]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 800530a:	4313      	orrs	r3, r2
 800530c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d04c      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d107      	bne.n	8005332 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005322:	4b5a      	ldr	r3, [pc, #360]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d121      	bne.n	8005372 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e0a6      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d107      	bne.n	800534a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800533a:	4b54      	ldr	r3, [pc, #336]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d115      	bne.n	8005372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e09a      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005352:	4b4e      	ldr	r3, [pc, #312]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 0302 	and.w	r3, r3, #2
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e08e      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005362:	4b4a      	ldr	r3, [pc, #296]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e086      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005372:	4b46      	ldr	r3, [pc, #280]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 0203 	bic.w	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4943      	ldr	r1, [pc, #268]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005384:	f7ff f850 	bl	8004428 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7ff f84c 	bl	8004428 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	; 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e06e      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a2:	4b3a      	ldr	r3, [pc, #232]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 020c 	and.w	r2, r3, #12
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d1eb      	bne.n	800538c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0302 	and.w	r3, r3, #2
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d010      	beq.n	80053e2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689a      	ldr	r2, [r3, #8]
 80053c4:	4b31      	ldr	r3, [pc, #196]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d208      	bcs.n	80053e2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053d0:	4b2e      	ldr	r3, [pc, #184]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	492b      	ldr	r1, [pc, #172]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 80053de:	4313      	orrs	r3, r2
 80053e0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053e2:	4b29      	ldr	r3, [pc, #164]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 0307 	and.w	r3, r3, #7
 80053ea:	683a      	ldr	r2, [r7, #0]
 80053ec:	429a      	cmp	r2, r3
 80053ee:	d210      	bcs.n	8005412 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053f0:	4b25      	ldr	r3, [pc, #148]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f023 0207 	bic.w	r2, r3, #7
 80053f8:	4923      	ldr	r1, [pc, #140]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005400:	4b21      	ldr	r3, [pc, #132]	; (8005488 <HAL_RCC_ClockConfig+0x1ec>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	683a      	ldr	r2, [r7, #0]
 800540a:	429a      	cmp	r2, r3
 800540c:	d001      	beq.n	8005412 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800540e:	2301      	movs	r3, #1
 8005410:	e036      	b.n	8005480 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 0304 	and.w	r3, r3, #4
 800541a:	2b00      	cmp	r3, #0
 800541c:	d008      	beq.n	8005430 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800541e:	4b1b      	ldr	r3, [pc, #108]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005420:	689b      	ldr	r3, [r3, #8]
 8005422:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	4918      	ldr	r1, [pc, #96]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 800542c:	4313      	orrs	r3, r2
 800542e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0308 	and.w	r3, r3, #8
 8005438:	2b00      	cmp	r3, #0
 800543a:	d009      	beq.n	8005450 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800543c:	4b13      	ldr	r3, [pc, #76]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 800543e:	689b      	ldr	r3, [r3, #8]
 8005440:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	691b      	ldr	r3, [r3, #16]
 8005448:	00db      	lsls	r3, r3, #3
 800544a:	4910      	ldr	r1, [pc, #64]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 800544c:	4313      	orrs	r3, r2
 800544e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005450:	f000 f824 	bl	800549c <HAL_RCC_GetSysClockFreq>
 8005454:	4602      	mov	r2, r0
 8005456:	4b0d      	ldr	r3, [pc, #52]	; (800548c <HAL_RCC_ClockConfig+0x1f0>)
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	091b      	lsrs	r3, r3, #4
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	490b      	ldr	r1, [pc, #44]	; (8005490 <HAL_RCC_ClockConfig+0x1f4>)
 8005462:	5ccb      	ldrb	r3, [r1, r3]
 8005464:	f003 031f 	and.w	r3, r3, #31
 8005468:	fa22 f303 	lsr.w	r3, r2, r3
 800546c:	4a09      	ldr	r2, [pc, #36]	; (8005494 <HAL_RCC_ClockConfig+0x1f8>)
 800546e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005470:	4b09      	ldr	r3, [pc, #36]	; (8005498 <HAL_RCC_ClockConfig+0x1fc>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4618      	mov	r0, r3
 8005476:	f7fc f99b 	bl	80017b0 <HAL_InitTick>
 800547a:	4603      	mov	r3, r0
 800547c:	72fb      	strb	r3, [r7, #11]

  return status;
 800547e:	7afb      	ldrb	r3, [r7, #11]
}
 8005480:	4618      	mov	r0, r3
 8005482:	3710      	adds	r7, #16
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40022000 	.word	0x40022000
 800548c:	40021000 	.word	0x40021000
 8005490:	0800ba98 	.word	0x0800ba98
 8005494:	20000018 	.word	0x20000018
 8005498:	20000024 	.word	0x20000024

0800549c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800549c:	b480      	push	{r7}
 800549e:	b089      	sub	sp, #36	; 0x24
 80054a0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80054a2:	2300      	movs	r3, #0
 80054a4:	61fb      	str	r3, [r7, #28]
 80054a6:	2300      	movs	r3, #0
 80054a8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054aa:	4b3e      	ldr	r3, [pc, #248]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f003 030c 	and.w	r3, r3, #12
 80054b2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054b4:	4b3b      	ldr	r3, [pc, #236]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0303 	and.w	r3, r3, #3
 80054bc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d005      	beq.n	80054d0 <HAL_RCC_GetSysClockFreq+0x34>
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	2b0c      	cmp	r3, #12
 80054c8:	d121      	bne.n	800550e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2b01      	cmp	r3, #1
 80054ce:	d11e      	bne.n	800550e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80054d0:	4b34      	ldr	r3, [pc, #208]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d107      	bne.n	80054ec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80054dc:	4b31      	ldr	r3, [pc, #196]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80054de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e2:	0a1b      	lsrs	r3, r3, #8
 80054e4:	f003 030f 	and.w	r3, r3, #15
 80054e8:	61fb      	str	r3, [r7, #28]
 80054ea:	e005      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80054ec:	4b2d      	ldr	r3, [pc, #180]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	091b      	lsrs	r3, r3, #4
 80054f2:	f003 030f 	and.w	r3, r3, #15
 80054f6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80054f8:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <HAL_RCC_GetSysClockFreq+0x10c>)
 80054fa:	69fb      	ldr	r3, [r7, #28]
 80054fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005500:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d10d      	bne.n	8005524 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800550c:	e00a      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	2b04      	cmp	r3, #4
 8005512:	d102      	bne.n	800551a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005514:	4b25      	ldr	r3, [pc, #148]	; (80055ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005516:	61bb      	str	r3, [r7, #24]
 8005518:	e004      	b.n	8005524 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	2b08      	cmp	r3, #8
 800551e:	d101      	bne.n	8005524 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005520:	4b23      	ldr	r3, [pc, #140]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x114>)
 8005522:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	2b0c      	cmp	r3, #12
 8005528:	d134      	bne.n	8005594 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800552a:	4b1e      	ldr	r3, [pc, #120]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800552c:	68db      	ldr	r3, [r3, #12]
 800552e:	f003 0303 	and.w	r3, r3, #3
 8005532:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005534:	68bb      	ldr	r3, [r7, #8]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d003      	beq.n	8005542 <HAL_RCC_GetSysClockFreq+0xa6>
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d003      	beq.n	8005548 <HAL_RCC_GetSysClockFreq+0xac>
 8005540:	e005      	b.n	800554e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005542:	4b1a      	ldr	r3, [pc, #104]	; (80055ac <HAL_RCC_GetSysClockFreq+0x110>)
 8005544:	617b      	str	r3, [r7, #20]
      break;
 8005546:	e005      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005548:	4b19      	ldr	r3, [pc, #100]	; (80055b0 <HAL_RCC_GetSysClockFreq+0x114>)
 800554a:	617b      	str	r3, [r7, #20]
      break;
 800554c:	e002      	b.n	8005554 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800554e:	69fb      	ldr	r3, [r7, #28]
 8005550:	617b      	str	r3, [r7, #20]
      break;
 8005552:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005554:	4b13      	ldr	r3, [pc, #76]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	3301      	adds	r3, #1
 8005560:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005562:	4b10      	ldr	r3, [pc, #64]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	0a1b      	lsrs	r3, r3, #8
 8005568:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	fb03 f202 	mul.w	r2, r3, r2
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	fbb2 f3f3 	udiv	r3, r2, r3
 8005578:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800557a:	4b0a      	ldr	r3, [pc, #40]	; (80055a4 <HAL_RCC_GetSysClockFreq+0x108>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	0e5b      	lsrs	r3, r3, #25
 8005580:	f003 0303 	and.w	r3, r3, #3
 8005584:	3301      	adds	r3, #1
 8005586:	005b      	lsls	r3, r3, #1
 8005588:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800558a:	697a      	ldr	r2, [r7, #20]
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005592:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005594:	69bb      	ldr	r3, [r7, #24]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3724      	adds	r7, #36	; 0x24
 800559a:	46bd      	mov	sp, r7
 800559c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a0:	4770      	bx	lr
 80055a2:	bf00      	nop
 80055a4:	40021000 	.word	0x40021000
 80055a8:	0800bab0 	.word	0x0800bab0
 80055ac:	00f42400 	.word	0x00f42400
 80055b0:	007a1200 	.word	0x007a1200

080055b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055b4:	b480      	push	{r7}
 80055b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b8:	4b03      	ldr	r3, [pc, #12]	; (80055c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80055ba:	681b      	ldr	r3, [r3, #0]
}
 80055bc:	4618      	mov	r0, r3
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr
 80055c6:	bf00      	nop
 80055c8:	20000018 	.word	0x20000018

080055cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055d0:	f7ff fff0 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 80055d4:	4602      	mov	r2, r0
 80055d6:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d8:	689b      	ldr	r3, [r3, #8]
 80055da:	0a1b      	lsrs	r3, r3, #8
 80055dc:	f003 0307 	and.w	r3, r3, #7
 80055e0:	4904      	ldr	r1, [pc, #16]	; (80055f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80055e2:	5ccb      	ldrb	r3, [r1, r3]
 80055e4:	f003 031f 	and.w	r3, r3, #31
 80055e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	40021000 	.word	0x40021000
 80055f4:	0800baa8 	.word	0x0800baa8

080055f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055fc:	f7ff ffda 	bl	80055b4 <HAL_RCC_GetHCLKFreq>
 8005600:	4602      	mov	r2, r0
 8005602:	4b06      	ldr	r3, [pc, #24]	; (800561c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005604:	689b      	ldr	r3, [r3, #8]
 8005606:	0adb      	lsrs	r3, r3, #11
 8005608:	f003 0307 	and.w	r3, r3, #7
 800560c:	4904      	ldr	r1, [pc, #16]	; (8005620 <HAL_RCC_GetPCLK2Freq+0x28>)
 800560e:	5ccb      	ldrb	r3, [r1, r3]
 8005610:	f003 031f 	and.w	r3, r3, #31
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40021000 	.word	0x40021000
 8005620:	0800baa8 	.word	0x0800baa8

08005624 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	220f      	movs	r2, #15
 8005632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005634:	4b12      	ldr	r3, [pc, #72]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005640:	4b0f      	ldr	r3, [pc, #60]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800564c:	4b0c      	ldr	r3, [pc, #48]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005658:	4b09      	ldr	r3, [pc, #36]	; (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005666:	4b07      	ldr	r3, [pc, #28]	; (8005684 <HAL_RCC_GetClockConfig+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0207 	and.w	r2, r3, #7
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40021000 	.word	0x40021000
 8005684:	40022000 	.word	0x40022000

08005688 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005690:	2300      	movs	r3, #0
 8005692:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005694:	4b2a      	ldr	r3, [pc, #168]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800569c:	2b00      	cmp	r3, #0
 800569e:	d003      	beq.n	80056a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80056a0:	f7ff f9bc 	bl	8004a1c <HAL_PWREx_GetVoltageRange>
 80056a4:	6178      	str	r0, [r7, #20]
 80056a6:	e014      	b.n	80056d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80056a8:	4b25      	ldr	r3, [pc, #148]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ac:	4a24      	ldr	r2, [pc, #144]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056b2:	6593      	str	r3, [r2, #88]	; 0x58
 80056b4:	4b22      	ldr	r3, [pc, #136]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80056c0:	f7ff f9ac 	bl	8004a1c <HAL_PWREx_GetVoltageRange>
 80056c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80056c6:	4b1e      	ldr	r3, [pc, #120]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056ca:	4a1d      	ldr	r2, [pc, #116]	; (8005740 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80056cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80056d8:	d10b      	bne.n	80056f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2b80      	cmp	r3, #128	; 0x80
 80056de:	d919      	bls.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2ba0      	cmp	r3, #160	; 0xa0
 80056e4:	d902      	bls.n	80056ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80056e6:	2302      	movs	r3, #2
 80056e8:	613b      	str	r3, [r7, #16]
 80056ea:	e013      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80056ec:	2301      	movs	r3, #1
 80056ee:	613b      	str	r3, [r7, #16]
 80056f0:	e010      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2b80      	cmp	r3, #128	; 0x80
 80056f6:	d902      	bls.n	80056fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80056f8:	2303      	movs	r3, #3
 80056fa:	613b      	str	r3, [r7, #16]
 80056fc:	e00a      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2b80      	cmp	r3, #128	; 0x80
 8005702:	d102      	bne.n	800570a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005704:	2302      	movs	r3, #2
 8005706:	613b      	str	r3, [r7, #16]
 8005708:	e004      	b.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2b70      	cmp	r3, #112	; 0x70
 800570e:	d101      	bne.n	8005714 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005710:	2301      	movs	r3, #1
 8005712:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005714:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f023 0207 	bic.w	r2, r3, #7
 800571c:	4909      	ldr	r1, [pc, #36]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	4313      	orrs	r3, r2
 8005722:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005724:	4b07      	ldr	r3, [pc, #28]	; (8005744 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0307 	and.w	r3, r3, #7
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d001      	beq.n	8005736 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	40021000 	.word	0x40021000
 8005744:	40022000 	.word	0x40022000

08005748 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005750:	2300      	movs	r3, #0
 8005752:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005754:	2300      	movs	r3, #0
 8005756:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005760:	2b00      	cmp	r3, #0
 8005762:	d041      	beq.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005768:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800576c:	d02a      	beq.n	80057c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800576e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005772:	d824      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005774:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005778:	d008      	beq.n	800578c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800577a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800577e:	d81e      	bhi.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005780:	2b00      	cmp	r3, #0
 8005782:	d00a      	beq.n	800579a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005784:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005788:	d010      	beq.n	80057ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800578a:	e018      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800578c:	4b86      	ldr	r3, [pc, #536]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	4a85      	ldr	r2, [pc, #532]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005796:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005798:	e015      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	3304      	adds	r3, #4
 800579e:	2100      	movs	r1, #0
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 fabb 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057aa:	e00c      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	3320      	adds	r3, #32
 80057b0:	2100      	movs	r1, #0
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fba6 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 80057b8:	4603      	mov	r3, r0
 80057ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80057bc:	e003      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	74fb      	strb	r3, [r7, #19]
      break;
 80057c2:	e000      	b.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80057c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80057c6:	7cfb      	ldrb	r3, [r7, #19]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10b      	bne.n	80057e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057cc:	4b76      	ldr	r3, [pc, #472]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80057da:	4973      	ldr	r1, [pc, #460]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80057e2:	e001      	b.n	80057e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057e4:	7cfb      	ldrb	r3, [r7, #19]
 80057e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d041      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80057fc:	d02a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80057fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005802:	d824      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005804:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005808:	d008      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800580a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800580e:	d81e      	bhi.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00a      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005814:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005818:	d010      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800581a:	e018      	b.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800581c:	4b62      	ldr	r3, [pc, #392]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	4a61      	ldr	r2, [pc, #388]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005826:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005828:	e015      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	3304      	adds	r3, #4
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f000 fa73 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800583a:	e00c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	3320      	adds	r3, #32
 8005840:	2100      	movs	r1, #0
 8005842:	4618      	mov	r0, r3
 8005844:	f000 fb5e 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 8005848:	4603      	mov	r3, r0
 800584a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800584c:	e003      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800584e:	2301      	movs	r3, #1
 8005850:	74fb      	strb	r3, [r7, #19]
      break;
 8005852:	e000      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8005854:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005856:	7cfb      	ldrb	r3, [r7, #19]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10b      	bne.n	8005874 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800585c:	4b52      	ldr	r3, [pc, #328]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800586a:	494f      	ldr	r1, [pc, #316]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800586c:	4313      	orrs	r3, r2
 800586e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005872:	e001      	b.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005874:	7cfb      	ldrb	r3, [r7, #19]
 8005876:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80a0 	beq.w	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005886:	2300      	movs	r3, #0
 8005888:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800588a:	4b47      	ldr	r3, [pc, #284]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800588c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800588e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005892:	2b00      	cmp	r3, #0
 8005894:	d101      	bne.n	800589a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005896:	2301      	movs	r3, #1
 8005898:	e000      	b.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800589a:	2300      	movs	r3, #0
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00d      	beq.n	80058bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80058a0:	4b41      	ldr	r3, [pc, #260]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	4a40      	ldr	r2, [pc, #256]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058aa:	6593      	str	r3, [r2, #88]	; 0x58
 80058ac:	4b3e      	ldr	r3, [pc, #248]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058b4:	60bb      	str	r3, [r7, #8]
 80058b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80058b8:	2301      	movs	r3, #1
 80058ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80058bc:	4b3b      	ldr	r3, [pc, #236]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a3a      	ldr	r2, [pc, #232]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80058c8:	f7fe fdae 	bl	8004428 <HAL_GetTick>
 80058cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058ce:	e009      	b.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058d0:	f7fe fdaa 	bl	8004428 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d902      	bls.n	80058e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	74fb      	strb	r3, [r7, #19]
        break;
 80058e2:	e005      	b.n	80058f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80058e4:	4b31      	ldr	r3, [pc, #196]	; (80059ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0ef      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80058f0:	7cfb      	ldrb	r3, [r7, #19]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d15c      	bne.n	80059b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80058f6:	4b2c      	ldr	r3, [pc, #176]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80058f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005900:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d01f      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	429a      	cmp	r2, r3
 8005912:	d019      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005914:	4b24      	ldr	r3, [pc, #144]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005916:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800591a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005920:	4b21      	ldr	r3, [pc, #132]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	4a20      	ldr	r2, [pc, #128]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005928:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800592c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005930:	4b1d      	ldr	r3, [pc, #116]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005936:	4a1c      	ldr	r2, [pc, #112]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800593c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005940:	4a19      	ldr	r2, [pc, #100]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f003 0301 	and.w	r3, r3, #1
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005952:	f7fe fd69 	bl	8004428 <HAL_GetTick>
 8005956:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005958:	e00b      	b.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595a:	f7fe fd65 	bl	8004428 <HAL_GetTick>
 800595e:	4602      	mov	r2, r0
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	1ad3      	subs	r3, r2, r3
 8005964:	f241 3288 	movw	r2, #5000	; 0x1388
 8005968:	4293      	cmp	r3, r2
 800596a:	d902      	bls.n	8005972 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	74fb      	strb	r3, [r7, #19]
            break;
 8005970:	e006      	b.n	8005980 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005972:	4b0d      	ldr	r3, [pc, #52]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005978:	f003 0302 	and.w	r3, r3, #2
 800597c:	2b00      	cmp	r3, #0
 800597e:	d0ec      	beq.n	800595a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005980:	7cfb      	ldrb	r3, [r7, #19]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d10c      	bne.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005986:	4b08      	ldr	r3, [pc, #32]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005996:	4904      	ldr	r1, [pc, #16]	; (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005998:	4313      	orrs	r3, r2
 800599a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800599e:	e009      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80059a0:	7cfb      	ldrb	r3, [r7, #19]
 80059a2:	74bb      	strb	r3, [r7, #18]
 80059a4:	e006      	b.n	80059b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80059a6:	bf00      	nop
 80059a8:	40021000 	.word	0x40021000
 80059ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059b0:	7cfb      	ldrb	r3, [r7, #19]
 80059b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80059b4:	7c7b      	ldrb	r3, [r7, #17]
 80059b6:	2b01      	cmp	r3, #1
 80059b8:	d105      	bne.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80059ba:	4b9e      	ldr	r3, [pc, #632]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059be:	4a9d      	ldr	r2, [pc, #628]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d00a      	beq.n	80059e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80059d2:	4b98      	ldr	r3, [pc, #608]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059d8:	f023 0203 	bic.w	r2, r3, #3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e0:	4994      	ldr	r1, [pc, #592]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d00a      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80059f4:	4b8f      	ldr	r3, [pc, #572]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059fa:	f023 020c 	bic.w	r2, r3, #12
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	498c      	ldr	r1, [pc, #560]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a04:	4313      	orrs	r3, r2
 8005a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00a      	beq.n	8005a2c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005a16:	4b87      	ldr	r3, [pc, #540]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a24:	4983      	ldr	r1, [pc, #524]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d00a      	beq.n	8005a4e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005a38:	4b7e      	ldr	r3, [pc, #504]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a46:	497b      	ldr	r1, [pc, #492]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0310 	and.w	r3, r3, #16
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d00a      	beq.n	8005a70 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005a5a:	4b76      	ldr	r3, [pc, #472]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a68:	4972      	ldr	r1, [pc, #456]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 0320 	and.w	r3, r3, #32
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00a      	beq.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005a7c:	4b6d      	ldr	r3, [pc, #436]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a8a:	496a      	ldr	r1, [pc, #424]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a9e:	4b65      	ldr	r3, [pc, #404]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aac:	4961      	ldr	r1, [pc, #388]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ac0:	4b5c      	ldr	r3, [pc, #368]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ac6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ace:	4959      	ldr	r1, [pc, #356]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d00a      	beq.n	8005af8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ae2:	4b54      	ldr	r3, [pc, #336]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ae8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af0:	4950      	ldr	r1, [pc, #320]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005af2:	4313      	orrs	r3, r2
 8005af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00a      	beq.n	8005b1a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b04:	4b4b      	ldr	r3, [pc, #300]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b0a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b12:	4948      	ldr	r1, [pc, #288]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b14:	4313      	orrs	r3, r2
 8005b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d00a      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005b26:	4b43      	ldr	r3, [pc, #268]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b34:	493f      	ldr	r1, [pc, #252]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b36:	4313      	orrs	r3, r2
 8005b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d028      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b48:	4b3a      	ldr	r3, [pc, #232]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b56:	4937      	ldr	r1, [pc, #220]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b62:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b66:	d106      	bne.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b68:	4b32      	ldr	r3, [pc, #200]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	4a31      	ldr	r2, [pc, #196]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005b6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b72:	60d3      	str	r3, [r2, #12]
 8005b74:	e011      	b.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b7a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005b7e:	d10c      	bne.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	3304      	adds	r3, #4
 8005b84:	2101      	movs	r1, #1
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f8c8 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005b90:	7cfb      	ldrb	r3, [r7, #19]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d001      	beq.n	8005b9a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005b96:	7cfb      	ldrb	r3, [r7, #19]
 8005b98:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d028      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005ba6:	4b23      	ldr	r3, [pc, #140]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bb4:	491f      	ldr	r1, [pc, #124]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bc4:	d106      	bne.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005bc6:	4b1b      	ldr	r3, [pc, #108]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	4a1a      	ldr	r2, [pc, #104]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005bcc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005bd0:	60d3      	str	r3, [r2, #12]
 8005bd2:	e011      	b.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bd8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005bdc:	d10c      	bne.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	3304      	adds	r3, #4
 8005be2:	2101      	movs	r1, #1
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f899 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005bea:	4603      	mov	r3, r0
 8005bec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005bee:	7cfb      	ldrb	r3, [r7, #19]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005bf4:	7cfb      	ldrb	r3, [r7, #19]
 8005bf6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d02b      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005c04:	4b0b      	ldr	r3, [pc, #44]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c0a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c12:	4908      	ldr	r1, [pc, #32]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c14:	4313      	orrs	r3, r2
 8005c16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005c22:	d109      	bne.n	8005c38 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c24:	4b03      	ldr	r3, [pc, #12]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c26:	68db      	ldr	r3, [r3, #12]
 8005c28:	4a02      	ldr	r2, [pc, #8]	; (8005c34 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005c2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c2e:	60d3      	str	r3, [r2, #12]
 8005c30:	e014      	b.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005c32:	bf00      	nop
 8005c34:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005c40:	d10c      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2101      	movs	r1, #1
 8005c48:	4618      	mov	r0, r3
 8005c4a:	f000 f867 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c52:	7cfb      	ldrb	r3, [r7, #19]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005c58:	7cfb      	ldrb	r3, [r7, #19]
 8005c5a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d02f      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005c68:	4b2b      	ldr	r3, [pc, #172]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c6e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c76:	4928      	ldr	r1, [pc, #160]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005c78:	4313      	orrs	r3, r2
 8005c7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005c82:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c86:	d10d      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	3304      	adds	r3, #4
 8005c8c:	2102      	movs	r1, #2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 f844 	bl	8005d1c <RCCEx_PLLSAI1_Config>
 8005c94:	4603      	mov	r3, r0
 8005c96:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005c98:	7cfb      	ldrb	r3, [r7, #19]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d014      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005c9e:	7cfb      	ldrb	r3, [r7, #19]
 8005ca0:	74bb      	strb	r3, [r7, #18]
 8005ca2:	e011      	b.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ca8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cac:	d10c      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	3320      	adds	r3, #32
 8005cb2:	2102      	movs	r1, #2
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f000 f925 	bl	8005f04 <RCCEx_PLLSAI2_Config>
 8005cba:	4603      	mov	r3, r0
 8005cbc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005cbe:	7cfb      	ldrb	r3, [r7, #19]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005cc4:	7cfb      	ldrb	r3, [r7, #19]
 8005cc6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00a      	beq.n	8005cea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005cd4:	4b10      	ldr	r3, [pc, #64]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cda:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ce2:	490d      	ldr	r1, [pc, #52]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005cf6:	4b08      	ldr	r3, [pc, #32]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cfc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d06:	4904      	ldr	r1, [pc, #16]	; (8005d18 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005d0e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3718      	adds	r7, #24
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40021000 	.word	0x40021000

08005d1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d26:	2300      	movs	r3, #0
 8005d28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d2a:	4b75      	ldr	r3, [pc, #468]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d018      	beq.n	8005d68 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005d36:	4b72      	ldr	r3, [pc, #456]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d38:	68db      	ldr	r3, [r3, #12]
 8005d3a:	f003 0203 	and.w	r2, r3, #3
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	429a      	cmp	r2, r3
 8005d44:	d10d      	bne.n	8005d62 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
       ||
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d009      	beq.n	8005d62 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005d4e:	4b6c      	ldr	r3, [pc, #432]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	091b      	lsrs	r3, r3, #4
 8005d54:	f003 0307 	and.w	r3, r3, #7
 8005d58:	1c5a      	adds	r2, r3, #1
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
       ||
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d047      	beq.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	73fb      	strb	r3, [r7, #15]
 8005d66:	e044      	b.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b03      	cmp	r3, #3
 8005d6e:	d018      	beq.n	8005da2 <RCCEx_PLLSAI1_Config+0x86>
 8005d70:	2b03      	cmp	r3, #3
 8005d72:	d825      	bhi.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa4>
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d002      	beq.n	8005d7e <RCCEx_PLLSAI1_Config+0x62>
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d009      	beq.n	8005d90 <RCCEx_PLLSAI1_Config+0x74>
 8005d7c:	e020      	b.n	8005dc0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005d7e:	4b60      	ldr	r3, [pc, #384]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0302 	and.w	r3, r3, #2
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d11d      	bne.n	8005dc6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d8e:	e01a      	b.n	8005dc6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005d90:	4b5b      	ldr	r3, [pc, #364]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d116      	bne.n	8005dca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005da0:	e013      	b.n	8005dca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005da2:	4b57      	ldr	r3, [pc, #348]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d10f      	bne.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005dae:	4b54      	ldr	r3, [pc, #336]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d109      	bne.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005dbe:	e006      	b.n	8005dce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8005dc4:	e004      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dc6:	bf00      	nop
 8005dc8:	e002      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dca:	bf00      	nop
 8005dcc:	e000      	b.n	8005dd0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005dce:	bf00      	nop
    }

    if(status == HAL_OK)
 8005dd0:	7bfb      	ldrb	r3, [r7, #15]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005dd6:	4b4a      	ldr	r3, [pc, #296]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6819      	ldr	r1, [r3, #0]
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	3b01      	subs	r3, #1
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	430b      	orrs	r3, r1
 8005dec:	4944      	ldr	r1, [pc, #272]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005df2:	7bfb      	ldrb	r3, [r7, #15]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d17d      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005df8:	4b41      	ldr	r3, [pc, #260]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4a40      	ldr	r2, [pc, #256]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005dfe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005e02:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e04:	f7fe fb10 	bl	8004428 <HAL_GetTick>
 8005e08:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e0a:	e009      	b.n	8005e20 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005e0c:	f7fe fb0c 	bl	8004428 <HAL_GetTick>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	2b02      	cmp	r3, #2
 8005e18:	d902      	bls.n	8005e20 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	73fb      	strb	r3, [r7, #15]
        break;
 8005e1e:	e005      	b.n	8005e2c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005e20:	4b37      	ldr	r3, [pc, #220]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1ef      	bne.n	8005e0c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d160      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d111      	bne.n	8005e5c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e38:	4b31      	ldr	r3, [pc, #196]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e44:	687a      	ldr	r2, [r7, #4]
 8005e46:	6892      	ldr	r2, [r2, #8]
 8005e48:	0211      	lsls	r1, r2, #8
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	68d2      	ldr	r2, [r2, #12]
 8005e4e:	0912      	lsrs	r2, r2, #4
 8005e50:	0452      	lsls	r2, r2, #17
 8005e52:	430a      	orrs	r2, r1
 8005e54:	492a      	ldr	r1, [pc, #168]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e56:	4313      	orrs	r3, r2
 8005e58:	610b      	str	r3, [r1, #16]
 8005e5a:	e027      	b.n	8005eac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d112      	bne.n	8005e88 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e62:	4b27      	ldr	r3, [pc, #156]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e64:	691b      	ldr	r3, [r3, #16]
 8005e66:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005e6a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e6e:	687a      	ldr	r2, [r7, #4]
 8005e70:	6892      	ldr	r2, [r2, #8]
 8005e72:	0211      	lsls	r1, r2, #8
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	6912      	ldr	r2, [r2, #16]
 8005e78:	0852      	lsrs	r2, r2, #1
 8005e7a:	3a01      	subs	r2, #1
 8005e7c:	0552      	lsls	r2, r2, #21
 8005e7e:	430a      	orrs	r2, r1
 8005e80:	491f      	ldr	r1, [pc, #124]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	610b      	str	r3, [r1, #16]
 8005e86:	e011      	b.n	8005eac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005e88:	4b1d      	ldr	r3, [pc, #116]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005e90:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	6892      	ldr	r2, [r2, #8]
 8005e98:	0211      	lsls	r1, r2, #8
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	6952      	ldr	r2, [r2, #20]
 8005e9e:	0852      	lsrs	r2, r2, #1
 8005ea0:	3a01      	subs	r2, #1
 8005ea2:	0652      	lsls	r2, r2, #25
 8005ea4:	430a      	orrs	r2, r1
 8005ea6:	4916      	ldr	r1, [pc, #88]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005eac:	4b14      	ldr	r3, [pc, #80]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a13      	ldr	r2, [pc, #76]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005eb2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005eb6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005eb8:	f7fe fab6 	bl	8004428 <HAL_GetTick>
 8005ebc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ebe:	e009      	b.n	8005ed4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005ec0:	f7fe fab2 	bl	8004428 <HAL_GetTick>
 8005ec4:	4602      	mov	r2, r0
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	1ad3      	subs	r3, r2, r3
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d902      	bls.n	8005ed4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005ece:	2303      	movs	r3, #3
 8005ed0:	73fb      	strb	r3, [r7, #15]
          break;
 8005ed2:	e005      	b.n	8005ee0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005ed4:	4b0a      	ldr	r3, [pc, #40]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d0ef      	beq.n	8005ec0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ee8:	691a      	ldr	r2, [r3, #16]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	699b      	ldr	r3, [r3, #24]
 8005eee:	4904      	ldr	r1, [pc, #16]	; (8005f00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3710      	adds	r7, #16
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	bf00      	nop
 8005f00:	40021000 	.word	0x40021000

08005f04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b084      	sub	sp, #16
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005f12:	4b6a      	ldr	r3, [pc, #424]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f14:	68db      	ldr	r3, [r3, #12]
 8005f16:	f003 0303 	and.w	r3, r3, #3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d018      	beq.n	8005f50 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005f1e:	4b67      	ldr	r3, [pc, #412]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0203 	and.w	r2, r3, #3
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	429a      	cmp	r2, r3
 8005f2c:	d10d      	bne.n	8005f4a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
       ||
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d009      	beq.n	8005f4a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005f36:	4b61      	ldr	r3, [pc, #388]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	091b      	lsrs	r3, r3, #4
 8005f3c:	f003 0307 	and.w	r3, r3, #7
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	685b      	ldr	r3, [r3, #4]
       ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d047      	beq.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	73fb      	strb	r3, [r7, #15]
 8005f4e:	e044      	b.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d018      	beq.n	8005f8a <RCCEx_PLLSAI2_Config+0x86>
 8005f58:	2b03      	cmp	r3, #3
 8005f5a:	d825      	bhi.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa4>
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d002      	beq.n	8005f66 <RCCEx_PLLSAI2_Config+0x62>
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d009      	beq.n	8005f78 <RCCEx_PLLSAI2_Config+0x74>
 8005f64:	e020      	b.n	8005fa8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005f66:	4b55      	ldr	r3, [pc, #340]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f003 0302 	and.w	r3, r3, #2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d11d      	bne.n	8005fae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f76:	e01a      	b.n	8005fae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005f78:	4b50      	ldr	r3, [pc, #320]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d116      	bne.n	8005fb2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005f84:	2301      	movs	r3, #1
 8005f86:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f88:	e013      	b.n	8005fb2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005f8a:	4b4c      	ldr	r3, [pc, #304]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d10f      	bne.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005f96:	4b49      	ldr	r3, [pc, #292]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d109      	bne.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005fa6:	e006      	b.n	8005fb6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e004      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fae:	bf00      	nop
 8005fb0:	e002      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fb2:	bf00      	nop
 8005fb4:	e000      	b.n	8005fb8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005fb6:	bf00      	nop
    }

    if(status == HAL_OK)
 8005fb8:	7bfb      	ldrb	r3, [r7, #15]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10d      	bne.n	8005fda <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005fbe:	4b3f      	ldr	r3, [pc, #252]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fc0:	68db      	ldr	r3, [r3, #12]
 8005fc2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6819      	ldr	r1, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	011b      	lsls	r3, r3, #4
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	4939      	ldr	r1, [pc, #228]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d167      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005fe0:	4b36      	ldr	r3, [pc, #216]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a35      	ldr	r2, [pc, #212]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8005fe6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005fec:	f7fe fa1c 	bl	8004428 <HAL_GetTick>
 8005ff0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005ff2:	e009      	b.n	8006008 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ff4:	f7fe fa18 	bl	8004428 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d902      	bls.n	8006008 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	73fb      	strb	r3, [r7, #15]
        break;
 8006006:	e005      	b.n	8006014 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006008:	4b2c      	ldr	r3, [pc, #176]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006010:	2b00      	cmp	r3, #0
 8006012:	d1ef      	bne.n	8005ff4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8006014:	7bfb      	ldrb	r3, [r7, #15]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d14a      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d111      	bne.n	8006044 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006020:	4b26      	ldr	r3, [pc, #152]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006022:	695b      	ldr	r3, [r3, #20]
 8006024:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006028:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800602c:	687a      	ldr	r2, [r7, #4]
 800602e:	6892      	ldr	r2, [r2, #8]
 8006030:	0211      	lsls	r1, r2, #8
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68d2      	ldr	r2, [r2, #12]
 8006036:	0912      	lsrs	r2, r2, #4
 8006038:	0452      	lsls	r2, r2, #17
 800603a:	430a      	orrs	r2, r1
 800603c:	491f      	ldr	r1, [pc, #124]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800603e:	4313      	orrs	r3, r2
 8006040:	614b      	str	r3, [r1, #20]
 8006042:	e011      	b.n	8006068 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006044:	4b1d      	ldr	r3, [pc, #116]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006046:	695b      	ldr	r3, [r3, #20]
 8006048:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800604c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006050:	687a      	ldr	r2, [r7, #4]
 8006052:	6892      	ldr	r2, [r2, #8]
 8006054:	0211      	lsls	r1, r2, #8
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	6912      	ldr	r2, [r2, #16]
 800605a:	0852      	lsrs	r2, r2, #1
 800605c:	3a01      	subs	r2, #1
 800605e:	0652      	lsls	r2, r2, #25
 8006060:	430a      	orrs	r2, r1
 8006062:	4916      	ldr	r1, [pc, #88]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006064:	4313      	orrs	r3, r2
 8006066:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8006068:	4b14      	ldr	r3, [pc, #80]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4a13      	ldr	r2, [pc, #76]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800606e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006072:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006074:	f7fe f9d8 	bl	8004428 <HAL_GetTick>
 8006078:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800607a:	e009      	b.n	8006090 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800607c:	f7fe f9d4 	bl	8004428 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	2b02      	cmp	r3, #2
 8006088:	d902      	bls.n	8006090 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800608a:	2303      	movs	r3, #3
 800608c:	73fb      	strb	r3, [r7, #15]
          break;
 800608e:	e005      	b.n	800609c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8006090:	4b0a      	ldr	r3, [pc, #40]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d0ef      	beq.n	800607c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800609c:	7bfb      	ldrb	r3, [r7, #15]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d106      	bne.n	80060b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80060a2:	4b06      	ldr	r3, [pc, #24]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060a4:	695a      	ldr	r2, [r3, #20]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
 80060aa:	4904      	ldr	r1, [pc, #16]	; (80060bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80060b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	3710      	adds	r7, #16
 80060b6:	46bd      	mov	sp, r7
 80060b8:	bd80      	pop	{r7, pc}
 80060ba:	bf00      	nop
 80060bc:	40021000 	.word	0x40021000

080060c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e095      	b.n	80061fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d108      	bne.n	80060ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685b      	ldr	r3, [r3, #4]
 80060de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060e2:	d009      	beq.n	80060f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	61da      	str	r2, [r3, #28]
 80060ea:	e005      	b.n	80060f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2200      	movs	r2, #0
 80060f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d106      	bne.n	8006118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2200      	movs	r2, #0
 800610e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f7fb f9ce 	bl	80014b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	681a      	ldr	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800612e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006138:	d902      	bls.n	8006140 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800613a:	2300      	movs	r3, #0
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e002      	b.n	8006146 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006140:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006144:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800614e:	d007      	beq.n	8006160 <HAL_SPI_Init+0xa0>
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2200      	movs	r2, #0
 800615e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	685b      	ldr	r3, [r3, #4]
 8006164:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006170:	431a      	orrs	r2, r3
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	431a      	orrs	r2, r3
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	f003 0301 	and.w	r3, r3, #1
 8006184:	431a      	orrs	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	699b      	ldr	r3, [r3, #24]
 800618a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800618e:	431a      	orrs	r2, r3
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	69db      	ldr	r3, [r3, #28]
 8006194:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006198:	431a      	orrs	r2, r3
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	ea42 0103 	orr.w	r1, r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061aa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	699b      	ldr	r3, [r3, #24]
 80061ba:	0c1b      	lsrs	r3, r3, #16
 80061bc:	f003 0204 	and.w	r2, r3, #4
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	431a      	orrs	r2, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ce:	f003 0308 	and.w	r3, r3, #8
 80061d2:	431a      	orrs	r2, r3
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80061dc:	ea42 0103 	orr.w	r1, r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	430a      	orrs	r2, r1
 80061ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b088      	sub	sp, #32
 800620a:	af00      	add	r7, sp, #0
 800620c:	60f8      	str	r0, [r7, #12]
 800620e:	60b9      	str	r1, [r7, #8]
 8006210:	603b      	str	r3, [r7, #0]
 8006212:	4613      	mov	r3, r2
 8006214:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006216:	2300      	movs	r3, #0
 8006218:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006220:	2b01      	cmp	r3, #1
 8006222:	d101      	bne.n	8006228 <HAL_SPI_Transmit+0x22>
 8006224:	2302      	movs	r3, #2
 8006226:	e15f      	b.n	80064e8 <HAL_SPI_Transmit+0x2e2>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006230:	f7fe f8fa 	bl	8004428 <HAL_GetTick>
 8006234:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006236:	88fb      	ldrh	r3, [r7, #6]
 8006238:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	d002      	beq.n	800624c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006246:	2302      	movs	r3, #2
 8006248:	77fb      	strb	r3, [r7, #31]
    goto error;
 800624a:	e148      	b.n	80064de <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d002      	beq.n	8006258 <HAL_SPI_Transmit+0x52>
 8006252:	88fb      	ldrh	r3, [r7, #6]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d102      	bne.n	800625e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800625c:	e13f      	b.n	80064de <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2203      	movs	r2, #3
 8006262:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689b      	ldr	r3, [r3, #8]
 80062a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062a8:	d10f      	bne.n	80062ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80062c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d4:	2b40      	cmp	r3, #64	; 0x40
 80062d6:	d007      	beq.n	80062e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68db      	ldr	r3, [r3, #12]
 80062ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062f0:	d94f      	bls.n	8006392 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d002      	beq.n	8006300 <HAL_SPI_Transmit+0xfa>
 80062fa:	8afb      	ldrh	r3, [r7, #22]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d142      	bne.n	8006386 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006304:	881a      	ldrh	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006310:	1c9a      	adds	r2, r3, #2
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800631a:	b29b      	uxth	r3, r3
 800631c:	3b01      	subs	r3, #1
 800631e:	b29a      	uxth	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006324:	e02f      	b.n	8006386 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	f003 0302 	and.w	r3, r3, #2
 8006330:	2b02      	cmp	r3, #2
 8006332:	d112      	bne.n	800635a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	881a      	ldrh	r2, [r3, #0]
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	1c9a      	adds	r2, r3, #2
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800634e:	b29b      	uxth	r3, r3
 8006350:	3b01      	subs	r3, #1
 8006352:	b29a      	uxth	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006358:	e015      	b.n	8006386 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800635a:	f7fe f865 	bl	8004428 <HAL_GetTick>
 800635e:	4602      	mov	r2, r0
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	1ad3      	subs	r3, r2, r3
 8006364:	683a      	ldr	r2, [r7, #0]
 8006366:	429a      	cmp	r2, r3
 8006368:	d803      	bhi.n	8006372 <HAL_SPI_Transmit+0x16c>
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006370:	d102      	bne.n	8006378 <HAL_SPI_Transmit+0x172>
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d106      	bne.n	8006386 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8006378:	2303      	movs	r3, #3
 800637a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2201      	movs	r2, #1
 8006380:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006384:	e0ab      	b.n	80064de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800638a:	b29b      	uxth	r3, r3
 800638c:	2b00      	cmp	r3, #0
 800638e:	d1ca      	bne.n	8006326 <HAL_SPI_Transmit+0x120>
 8006390:	e080      	b.n	8006494 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_SPI_Transmit+0x19a>
 800639a:	8afb      	ldrh	r3, [r7, #22]
 800639c:	2b01      	cmp	r3, #1
 800639e:	d174      	bne.n	800648a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d912      	bls.n	80063d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ae:	881a      	ldrh	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063ba:	1c9a      	adds	r2, r3, #2
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063c4:	b29b      	uxth	r3, r3
 80063c6:	3b02      	subs	r3, #2
 80063c8:	b29a      	uxth	r2, r3
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063ce:	e05c      	b.n	800648a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	330c      	adds	r3, #12
 80063da:	7812      	ldrb	r2, [r2, #0]
 80063dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e2:	1c5a      	adds	r2, r3, #1
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063ec:	b29b      	uxth	r3, r3
 80063ee:	3b01      	subs	r3, #1
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80063f6:	e048      	b.n	800648a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	f003 0302 	and.w	r3, r3, #2
 8006402:	2b02      	cmp	r3, #2
 8006404:	d12b      	bne.n	800645e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800640a:	b29b      	uxth	r3, r3
 800640c:	2b01      	cmp	r3, #1
 800640e:	d912      	bls.n	8006436 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006414:	881a      	ldrh	r2, [r3, #0]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006420:	1c9a      	adds	r2, r3, #2
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800642a:	b29b      	uxth	r3, r3
 800642c:	3b02      	subs	r3, #2
 800642e:	b29a      	uxth	r2, r3
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006434:	e029      	b.n	800648a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	330c      	adds	r3, #12
 8006440:	7812      	ldrb	r2, [r2, #0]
 8006442:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006448:	1c5a      	adds	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006452:	b29b      	uxth	r3, r3
 8006454:	3b01      	subs	r3, #1
 8006456:	b29a      	uxth	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800645c:	e015      	b.n	800648a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800645e:	f7fd ffe3 	bl	8004428 <HAL_GetTick>
 8006462:	4602      	mov	r2, r0
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	1ad3      	subs	r3, r2, r3
 8006468:	683a      	ldr	r2, [r7, #0]
 800646a:	429a      	cmp	r2, r3
 800646c:	d803      	bhi.n	8006476 <HAL_SPI_Transmit+0x270>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006474:	d102      	bne.n	800647c <HAL_SPI_Transmit+0x276>
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d106      	bne.n	800648a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800647c:	2303      	movs	r3, #3
 800647e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006488:	e029      	b.n	80064de <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800648e:	b29b      	uxth	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	d1b1      	bne.n	80063f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006494:	69ba      	ldr	r2, [r7, #24]
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	68f8      	ldr	r0, [r7, #12]
 800649a:	f000 fcf9 	bl	8006e90 <SPI_EndRxTxTransaction>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d002      	beq.n	80064aa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2220      	movs	r2, #32
 80064a8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	613b      	str	r3, [r7, #16]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	77fb      	strb	r3, [r7, #31]
 80064d4:	e003      	b.n	80064de <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80064e6:	7ffb      	ldrb	r3, [r7, #31]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3720      	adds	r7, #32
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b088      	sub	sp, #32
 80064f4:	af02      	add	r7, sp, #8
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	603b      	str	r3, [r7, #0]
 80064fc:	4613      	mov	r3, r2
 80064fe:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006500:	2300      	movs	r3, #0
 8006502:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800650a:	b2db      	uxtb	r3, r3
 800650c:	2b01      	cmp	r3, #1
 800650e:	d002      	beq.n	8006516 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8006510:	2302      	movs	r3, #2
 8006512:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006514:	e11a      	b.n	800674c <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800651e:	d112      	bne.n	8006546 <HAL_SPI_Receive+0x56>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10e      	bne.n	8006546 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2204      	movs	r2, #4
 800652c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006530:	88fa      	ldrh	r2, [r7, #6]
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	9300      	str	r3, [sp, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	68b9      	ldr	r1, [r7, #8]
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	f000 f90e 	bl	800675e <HAL_SPI_TransmitReceive>
 8006542:	4603      	mov	r3, r0
 8006544:	e107      	b.n	8006756 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800654c:	2b01      	cmp	r3, #1
 800654e:	d101      	bne.n	8006554 <HAL_SPI_Receive+0x64>
 8006550:	2302      	movs	r3, #2
 8006552:	e100      	b.n	8006756 <HAL_SPI_Receive+0x266>
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2201      	movs	r2, #1
 8006558:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800655c:	f7fd ff64 	bl	8004428 <HAL_GetTick>
 8006560:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <HAL_SPI_Receive+0x7e>
 8006568:	88fb      	ldrh	r3, [r7, #6]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d102      	bne.n	8006574 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006572:	e0eb      	b.n	800674c <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2204      	movs	r2, #4
 8006578:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	68ba      	ldr	r2, [r7, #8]
 8006586:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	88fa      	ldrh	r2, [r7, #6]
 800658c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	88fa      	ldrh	r2, [r7, #6]
 8006594:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	2200      	movs	r2, #0
 80065a2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68db      	ldr	r3, [r3, #12]
 80065ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80065be:	d908      	bls.n	80065d2 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ce:	605a      	str	r2, [r3, #4]
 80065d0:	e007      	b.n	80065e2 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	689b      	ldr	r3, [r3, #8]
 80065e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ea:	d10f      	bne.n	800660c <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065fa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	681a      	ldr	r2, [r3, #0]
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800660a:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006616:	2b40      	cmp	r3, #64	; 0x40
 8006618:	d007      	beq.n	800662a <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	681a      	ldr	r2, [r3, #0]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006628:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006632:	d86f      	bhi.n	8006714 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006634:	e034      	b.n	80066a0 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	f003 0301 	and.w	r3, r3, #1
 8006640:	2b01      	cmp	r3, #1
 8006642:	d117      	bne.n	8006674 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f103 020c 	add.w	r2, r3, #12
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	b2d2      	uxtb	r2, r2
 8006654:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800665a:	1c5a      	adds	r2, r3, #1
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b01      	subs	r3, #1
 800666a:	b29a      	uxth	r2, r3
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006672:	e015      	b.n	80066a0 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006674:	f7fd fed8 	bl	8004428 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	683a      	ldr	r2, [r7, #0]
 8006680:	429a      	cmp	r2, r3
 8006682:	d803      	bhi.n	800668c <HAL_SPI_Receive+0x19c>
 8006684:	683b      	ldr	r3, [r7, #0]
 8006686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800668a:	d102      	bne.n	8006692 <HAL_SPI_Receive+0x1a2>
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d106      	bne.n	80066a0 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	2201      	movs	r2, #1
 800669a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 800669e:	e055      	b.n	800674c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d1c4      	bne.n	8006636 <HAL_SPI_Receive+0x146>
 80066ac:	e038      	b.n	8006720 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d115      	bne.n	80066e8 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68da      	ldr	r2, [r3, #12]
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c6:	b292      	uxth	r2, r2
 80066c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ce:	1c9a      	adds	r2, r3, #2
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80066da:	b29b      	uxth	r3, r3
 80066dc:	3b01      	subs	r3, #1
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80066e6:	e015      	b.n	8006714 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066e8:	f7fd fe9e 	bl	8004428 <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	683a      	ldr	r2, [r7, #0]
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d803      	bhi.n	8006700 <HAL_SPI_Receive+0x210>
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066fe:	d102      	bne.n	8006706 <HAL_SPI_Receive+0x216>
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8006706:	2303      	movs	r3, #3
 8006708:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2201      	movs	r2, #1
 800670e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8006712:	e01b      	b.n	800674c <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800671a:	b29b      	uxth	r3, r3
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1c6      	bne.n	80066ae <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	6839      	ldr	r1, [r7, #0]
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f000 fb5b 	bl	8006de0 <SPI_EndRxTransaction>
 800672a:	4603      	mov	r3, r0
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2220      	movs	r2, #32
 8006734:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	75fb      	strb	r3, [r7, #23]
 8006742:	e003      	b.n	800674c <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2200      	movs	r2, #0
 8006750:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
}
 8006756:	4618      	mov	r0, r3
 8006758:	3718      	adds	r7, #24
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b08a      	sub	sp, #40	; 0x28
 8006762:	af00      	add	r7, sp, #0
 8006764:	60f8      	str	r0, [r7, #12]
 8006766:	60b9      	str	r1, [r7, #8]
 8006768:	607a      	str	r2, [r7, #4]
 800676a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800676c:	2301      	movs	r3, #1
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006770:	2300      	movs	r3, #0
 8006772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800677c:	2b01      	cmp	r3, #1
 800677e:	d101      	bne.n	8006784 <HAL_SPI_TransmitReceive+0x26>
 8006780:	2302      	movs	r3, #2
 8006782:	e20a      	b.n	8006b9a <HAL_SPI_TransmitReceive+0x43c>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2201      	movs	r2, #1
 8006788:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800678c:	f7fd fe4c 	bl	8004428 <HAL_GetTick>
 8006790:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006798:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80067a0:	887b      	ldrh	r3, [r7, #2]
 80067a2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80067a4:	887b      	ldrh	r3, [r7, #2]
 80067a6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80067a8:	7efb      	ldrb	r3, [r7, #27]
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d00e      	beq.n	80067cc <HAL_SPI_TransmitReceive+0x6e>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067b4:	d106      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_SPI_TransmitReceive+0x66>
 80067be:	7efb      	ldrb	r3, [r7, #27]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d003      	beq.n	80067cc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80067c4:	2302      	movs	r3, #2
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067ca:	e1e0      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d005      	beq.n	80067de <HAL_SPI_TransmitReceive+0x80>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <HAL_SPI_TransmitReceive+0x80>
 80067d8:	887b      	ldrh	r3, [r7, #2]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d103      	bne.n	80067e6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80067e4:	e1d3      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b04      	cmp	r3, #4
 80067f0:	d003      	beq.n	80067fa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2205      	movs	r2, #5
 80067f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2200      	movs	r2, #0
 80067fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	887a      	ldrh	r2, [r7, #2]
 800680a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	887a      	ldrh	r2, [r7, #2]
 8006812:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	887a      	ldrh	r2, [r7, #2]
 8006820:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	887a      	ldrh	r2, [r7, #2]
 8006826:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2200      	movs	r2, #0
 800682c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2200      	movs	r2, #0
 8006832:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800683c:	d802      	bhi.n	8006844 <HAL_SPI_TransmitReceive+0xe6>
 800683e:	8a3b      	ldrh	r3, [r7, #16]
 8006840:	2b01      	cmp	r3, #1
 8006842:	d908      	bls.n	8006856 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006852:	605a      	str	r2, [r3, #4]
 8006854:	e007      	b.n	8006866 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006864:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	d007      	beq.n	8006884 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006882:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800688c:	f240 8081 	bls.w	8006992 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d002      	beq.n	800689e <HAL_SPI_TransmitReceive+0x140>
 8006898:	8a7b      	ldrh	r3, [r7, #18]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d16d      	bne.n	800697a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	881a      	ldrh	r2, [r3, #0]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068ae:	1c9a      	adds	r2, r3, #2
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	3b01      	subs	r3, #1
 80068bc:	b29a      	uxth	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80068c2:	e05a      	b.n	800697a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	689b      	ldr	r3, [r3, #8]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b02      	cmp	r3, #2
 80068d0:	d11b      	bne.n	800690a <HAL_SPI_TransmitReceive+0x1ac>
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d016      	beq.n	800690a <HAL_SPI_TransmitReceive+0x1ac>
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	2b01      	cmp	r3, #1
 80068e0:	d113      	bne.n	800690a <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e6:	881a      	ldrh	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f2:	1c9a      	adds	r2, r3, #2
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	3b01      	subs	r3, #1
 8006900:	b29a      	uxth	r2, r3
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006906:	2300      	movs	r3, #0
 8006908:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	f003 0301 	and.w	r3, r3, #1
 8006914:	2b01      	cmp	r3, #1
 8006916:	d11c      	bne.n	8006952 <HAL_SPI_TransmitReceive+0x1f4>
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800691e:	b29b      	uxth	r3, r3
 8006920:	2b00      	cmp	r3, #0
 8006922:	d016      	beq.n	8006952 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	68da      	ldr	r2, [r3, #12]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	b292      	uxth	r2, r2
 8006930:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006936:	1c9a      	adds	r2, r3, #2
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800694e:	2301      	movs	r3, #1
 8006950:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006952:	f7fd fd69 	bl	8004428 <HAL_GetTick>
 8006956:	4602      	mov	r2, r0
 8006958:	69fb      	ldr	r3, [r7, #28]
 800695a:	1ad3      	subs	r3, r2, r3
 800695c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800695e:	429a      	cmp	r2, r3
 8006960:	d80b      	bhi.n	800697a <HAL_SPI_TransmitReceive+0x21c>
 8006962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006968:	d007      	beq.n	800697a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 800696a:	2303      	movs	r3, #3
 800696c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2201      	movs	r2, #1
 8006974:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006978:	e109      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800697e:	b29b      	uxth	r3, r3
 8006980:	2b00      	cmp	r3, #0
 8006982:	d19f      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x166>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800698a:	b29b      	uxth	r3, r3
 800698c:	2b00      	cmp	r3, #0
 800698e:	d199      	bne.n	80068c4 <HAL_SPI_TransmitReceive+0x166>
 8006990:	e0e3      	b.n	8006b5a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d003      	beq.n	80069a2 <HAL_SPI_TransmitReceive+0x244>
 800699a:	8a7b      	ldrh	r3, [r7, #18]
 800699c:	2b01      	cmp	r3, #1
 800699e:	f040 80cf 	bne.w	8006b40 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d912      	bls.n	80069d2 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069b0:	881a      	ldrh	r2, [r3, #0]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069bc:	1c9a      	adds	r2, r3, #2
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069c6:	b29b      	uxth	r3, r3
 80069c8:	3b02      	subs	r3, #2
 80069ca:	b29a      	uxth	r2, r3
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80069d0:	e0b6      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	330c      	adds	r3, #12
 80069dc:	7812      	ldrb	r2, [r2, #0]
 80069de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e4:	1c5a      	adds	r2, r3, #1
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	3b01      	subs	r3, #1
 80069f2:	b29a      	uxth	r2, r3
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80069f8:	e0a2      	b.n	8006b40 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d134      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x314>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a0c:	b29b      	uxth	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d02f      	beq.n	8006a72 <HAL_SPI_TransmitReceive+0x314>
 8006a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d12c      	bne.n	8006a72 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d912      	bls.n	8006a48 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a26:	881a      	ldrh	r2, [r3, #0]
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a3c:	b29b      	uxth	r3, r3
 8006a3e:	3b02      	subs	r3, #2
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a46:	e012      	b.n	8006a6e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	330c      	adds	r3, #12
 8006a52:	7812      	ldrb	r2, [r2, #0]
 8006a54:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	1c5a      	adds	r2, r3, #1
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29a      	uxth	r2, r3
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	f003 0301 	and.w	r3, r3, #1
 8006a7c:	2b01      	cmp	r3, #1
 8006a7e:	d148      	bne.n	8006b12 <HAL_SPI_TransmitReceive+0x3b4>
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d042      	beq.n	8006b12 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	2b01      	cmp	r3, #1
 8006a96:	d923      	bls.n	8006ae0 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	68da      	ldr	r2, [r3, #12]
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aa2:	b292      	uxth	r2, r2
 8006aa4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aaa:	1c9a      	adds	r2, r3, #2
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	3b02      	subs	r3, #2
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ac8:	b29b      	uxth	r3, r3
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d81f      	bhi.n	8006b0e <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685a      	ldr	r2, [r3, #4]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006adc:	605a      	str	r2, [r3, #4]
 8006ade:	e016      	b.n	8006b0e <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f103 020c 	add.w	r2, r3, #12
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aec:	7812      	ldrb	r2, [r2, #0]
 8006aee:	b2d2      	uxtb	r2, r2
 8006af0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b02:	b29b      	uxth	r3, r3
 8006b04:	3b01      	subs	r3, #1
 8006b06:	b29a      	uxth	r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006b12:	f7fd fc89 	bl	8004428 <HAL_GetTick>
 8006b16:	4602      	mov	r2, r0
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d803      	bhi.n	8006b2a <HAL_SPI_TransmitReceive+0x3cc>
 8006b22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b28:	d102      	bne.n	8006b30 <HAL_SPI_TransmitReceive+0x3d2>
 8006b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d107      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8006b3e:	e026      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b44:	b29b      	uxth	r3, r3
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	f47f af57 	bne.w	80069fa <HAL_SPI_TransmitReceive+0x29c>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b52:	b29b      	uxth	r3, r3
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f47f af50 	bne.w	80069fa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b5a:	69fa      	ldr	r2, [r7, #28]
 8006b5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f000 f996 	bl	8006e90 <SPI_EndRxTxTransaction>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d005      	beq.n	8006b76 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	2220      	movs	r2, #32
 8006b74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006b84:	e003      	b.n	8006b8e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	2201      	movs	r2, #1
 8006b8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	2200      	movs	r2, #0
 8006b92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006b96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	3728      	adds	r7, #40	; 0x28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
	...

08006ba4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b088      	sub	sp, #32
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	60f8      	str	r0, [r7, #12]
 8006bac:	60b9      	str	r1, [r7, #8]
 8006bae:	603b      	str	r3, [r7, #0]
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006bb4:	f7fd fc38 	bl	8004428 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4413      	add	r3, r2
 8006bc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006bc4:	f7fd fc30 	bl	8004428 <HAL_GetTick>
 8006bc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006bca:	4b39      	ldr	r3, [pc, #228]	; (8006cb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	015b      	lsls	r3, r3, #5
 8006bd0:	0d1b      	lsrs	r3, r3, #20
 8006bd2:	69fa      	ldr	r2, [r7, #28]
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
 8006bd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006bda:	e054      	b.n	8006c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006be2:	d050      	beq.n	8006c86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006be4:	f7fd fc20 	bl	8004428 <HAL_GetTick>
 8006be8:	4602      	mov	r2, r0
 8006bea:	69bb      	ldr	r3, [r7, #24]
 8006bec:	1ad3      	subs	r3, r2, r3
 8006bee:	69fa      	ldr	r2, [r7, #28]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d902      	bls.n	8006bfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d13d      	bne.n	8006c76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c12:	d111      	bne.n	8006c38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c1c:	d004      	beq.n	8006c28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c26:	d107      	bne.n	8006c38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c40:	d10f      	bne.n	8006c62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2201      	movs	r2, #1
 8006c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e017      	b.n	8006ca6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d101      	bne.n	8006c80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	3b01      	subs	r3, #1
 8006c84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689a      	ldr	r2, [r3, #8]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4013      	ands	r3, r2
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	429a      	cmp	r2, r3
 8006c94:	bf0c      	ite	eq
 8006c96:	2301      	moveq	r3, #1
 8006c98:	2300      	movne	r3, #0
 8006c9a:	b2db      	uxtb	r3, r3
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	79fb      	ldrb	r3, [r7, #7]
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d19b      	bne.n	8006bdc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006ca4:	2300      	movs	r3, #0
}
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	3720      	adds	r7, #32
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000018 	.word	0x20000018

08006cb4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b08a      	sub	sp, #40	; 0x28
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
 8006cc0:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006cc6:	f7fd fbaf 	bl	8004428 <HAL_GetTick>
 8006cca:	4602      	mov	r2, r0
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	1a9b      	subs	r3, r3, r2
 8006cd0:	683a      	ldr	r2, [r7, #0]
 8006cd2:	4413      	add	r3, r2
 8006cd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006cd6:	f7fd fba7 	bl	8004428 <HAL_GetTick>
 8006cda:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	330c      	adds	r3, #12
 8006ce2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006ce4:	4b3d      	ldr	r3, [pc, #244]	; (8006ddc <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	4613      	mov	r3, r2
 8006cea:	009b      	lsls	r3, r3, #2
 8006cec:	4413      	add	r3, r2
 8006cee:	00da      	lsls	r2, r3, #3
 8006cf0:	1ad3      	subs	r3, r2, r3
 8006cf2:	0d1b      	lsrs	r3, r3, #20
 8006cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
 8006cfa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006cfc:	e060      	b.n	8006dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d04:	d107      	bne.n	8006d16 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d104      	bne.n	8006d16 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d0c:	69fb      	ldr	r3, [r7, #28]
 8006d0e:	781b      	ldrb	r3, [r3, #0]
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006d14:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006d16:	683b      	ldr	r3, [r7, #0]
 8006d18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d1c:	d050      	beq.n	8006dc0 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006d1e:	f7fd fb83 	bl	8004428 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	6a3b      	ldr	r3, [r7, #32]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d902      	bls.n	8006d34 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d13d      	bne.n	8006db0 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	685a      	ldr	r2, [r3, #4]
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006d42:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d4c:	d111      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d56:	d004      	beq.n	8006d62 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d60:	d107      	bne.n	8006d72 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681a      	ldr	r2, [r3, #0]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d70:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d7a:	d10f      	bne.n	8006d9c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d8a:	601a      	str	r2, [r3, #0]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006d9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	2200      	movs	r2, #0
 8006da8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006dac:	2303      	movs	r3, #3
 8006dae:	e010      	b.n	8006dd2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d101      	bne.n	8006dba <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006db6:	2300      	movs	r3, #0
 8006db8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	3b01      	subs	r3, #1
 8006dbe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	689a      	ldr	r2, [r3, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	4013      	ands	r3, r2
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d196      	bne.n	8006cfe <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3728      	adds	r7, #40	; 0x28
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}
 8006dda:	bf00      	nop
 8006ddc:	20000018 	.word	0x20000018

08006de0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b086      	sub	sp, #24
 8006de4:	af02      	add	r7, sp, #8
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006df4:	d111      	bne.n	8006e1a <SPI_EndRxTransaction+0x3a>
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dfe:	d004      	beq.n	8006e0a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e08:	d107      	bne.n	8006e1a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e18:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	9300      	str	r3, [sp, #0]
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	2200      	movs	r2, #0
 8006e22:	2180      	movs	r1, #128	; 0x80
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f7ff febd 	bl	8006ba4 <SPI_WaitFlagStateUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d007      	beq.n	8006e40 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e34:	f043 0220 	orr.w	r2, r3, #32
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e023      	b.n	8006e88 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	685b      	ldr	r3, [r3, #4]
 8006e44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e48:	d11d      	bne.n	8006e86 <SPI_EndRxTransaction+0xa6>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e52:	d004      	beq.n	8006e5e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5c:	d113      	bne.n	8006e86 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f7ff ff22 	bl	8006cb4 <SPI_WaitFifoStateUntilTimeout>
 8006e70:	4603      	mov	r3, r0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d007      	beq.n	8006e86 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7a:	f043 0220 	orr.w	r2, r3, #32
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006e82:	2303      	movs	r3, #3
 8006e84:	e000      	b.n	8006e88 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006e86:	2300      	movs	r3, #0
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af02      	add	r7, sp, #8
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	9300      	str	r3, [sp, #0]
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f7ff ff03 	bl	8006cb4 <SPI_WaitFifoStateUntilTimeout>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d007      	beq.n	8006ec4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eb8:	f043 0220 	orr.w	r2, r3, #32
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ec0:	2303      	movs	r3, #3
 8006ec2:	e027      	b.n	8006f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	9300      	str	r3, [sp, #0]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	2180      	movs	r1, #128	; 0x80
 8006ece:	68f8      	ldr	r0, [r7, #12]
 8006ed0:	f7ff fe68 	bl	8006ba4 <SPI_WaitFlagStateUntilTimeout>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d007      	beq.n	8006eea <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ede:	f043 0220 	orr.w	r2, r3, #32
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e014      	b.n	8006f14 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	9300      	str	r3, [sp, #0]
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ef6:	68f8      	ldr	r0, [r7, #12]
 8006ef8:	f7ff fedc 	bl	8006cb4 <SPI_WaitFifoStateUntilTimeout>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d007      	beq.n	8006f12 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f06:	f043 0220 	orr.w	r2, r3, #32
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e000      	b.n	8006f14 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006f12:	2300      	movs	r3, #0
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3710      	adds	r7, #16
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	bd80      	pop	{r7, pc}

08006f1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d101      	bne.n	8006f2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	e049      	b.n	8006fc2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f34:	b2db      	uxtb	r3, r3
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d106      	bne.n	8006f48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	2200      	movs	r2, #0
 8006f3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f000 f841 	bl	8006fca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	3304      	adds	r3, #4
 8006f58:	4619      	mov	r1, r3
 8006f5a:	4610      	mov	r0, r2
 8006f5c:	f000 f9da 	bl	8007314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2201      	movs	r2, #1
 8006f6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2201      	movs	r2, #1
 8006f74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	2201      	movs	r2, #1
 8006f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006fc0:	2300      	movs	r3, #0
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	3708      	adds	r7, #8
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}

08006fca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006fca:	b480      	push	{r7}
 8006fcc:	b083      	sub	sp, #12
 8006fce:	af00      	add	r7, sp, #0
 8006fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006fd2:	bf00      	nop
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr
	...

08006fe0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d001      	beq.n	8006ff8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	e04f      	b.n	8007098 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2202      	movs	r2, #2
 8006ffc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	f042 0201 	orr.w	r2, r2, #1
 800700e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	4a23      	ldr	r2, [pc, #140]	; (80070a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d01d      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007022:	d018      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1f      	ldr	r2, [pc, #124]	; (80070a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800702a:	4293      	cmp	r3, r2
 800702c:	d013      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a1e      	ldr	r2, [pc, #120]	; (80070ac <HAL_TIM_Base_Start_IT+0xcc>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d00e      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a1c      	ldr	r2, [pc, #112]	; (80070b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d009      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a1b      	ldr	r2, [pc, #108]	; (80070b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d004      	beq.n	8007056 <HAL_TIM_Base_Start_IT+0x76>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a19      	ldr	r2, [pc, #100]	; (80070b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d115      	bne.n	8007082 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	4b17      	ldr	r3, [pc, #92]	; (80070bc <HAL_TIM_Base_Start_IT+0xdc>)
 800705e:	4013      	ands	r3, r2
 8007060:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	2b06      	cmp	r3, #6
 8007066:	d015      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0xb4>
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800706e:	d011      	beq.n	8007094 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f042 0201 	orr.w	r2, r2, #1
 800707e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007080:	e008      	b.n	8007094 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	681a      	ldr	r2, [r3, #0]
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f042 0201 	orr.w	r2, r2, #1
 8007090:	601a      	str	r2, [r3, #0]
 8007092:	e000      	b.n	8007096 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007094:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007096:	2300      	movs	r3, #0
}
 8007098:	4618      	mov	r0, r3
 800709a:	3714      	adds	r7, #20
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	40012c00 	.word	0x40012c00
 80070a8:	40000400 	.word	0x40000400
 80070ac:	40000800 	.word	0x40000800
 80070b0:	40000c00 	.word	0x40000c00
 80070b4:	40013400 	.word	0x40013400
 80070b8:	40014000 	.word	0x40014000
 80070bc:	00010007 	.word	0x00010007

080070c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68db      	ldr	r3, [r3, #12]
 80070ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	691b      	ldr	r3, [r3, #16]
 80070d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	f003 0302 	and.w	r3, r3, #2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d020      	beq.n	8007124 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d01b      	beq.n	8007124 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f06f 0202 	mvn.w	r2, #2
 80070f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f003 0303 	and.w	r3, r3, #3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d003      	beq.n	8007112 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f000 f8e4 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 8007110:	e005      	b.n	800711e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8d6 	bl	80072c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 f8e7 	bl	80072ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2200      	movs	r2, #0
 8007122:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007124:	68bb      	ldr	r3, [r7, #8]
 8007126:	f003 0304 	and.w	r3, r3, #4
 800712a:	2b00      	cmp	r3, #0
 800712c:	d020      	beq.n	8007170 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f003 0304 	and.w	r3, r3, #4
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01b      	beq.n	8007170 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f06f 0204 	mvn.w	r2, #4
 8007140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2202      	movs	r2, #2
 8007146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	699b      	ldr	r3, [r3, #24]
 800714e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f8be 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 800715c:	e005      	b.n	800716a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800715e:	6878      	ldr	r0, [r7, #4]
 8007160:	f000 f8b0 	bl	80072c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007164:	6878      	ldr	r0, [r7, #4]
 8007166:	f000 f8c1 	bl	80072ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2200      	movs	r2, #0
 800716e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	f003 0308 	and.w	r3, r3, #8
 8007176:	2b00      	cmp	r3, #0
 8007178:	d020      	beq.n	80071bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f003 0308 	and.w	r3, r3, #8
 8007180:	2b00      	cmp	r3, #0
 8007182:	d01b      	beq.n	80071bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f06f 0208 	mvn.w	r2, #8
 800718c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	2204      	movs	r2, #4
 8007192:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	69db      	ldr	r3, [r3, #28]
 800719a:	f003 0303 	and.w	r3, r3, #3
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d003      	beq.n	80071aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071a2:	6878      	ldr	r0, [r7, #4]
 80071a4:	f000 f898 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 80071a8:	e005      	b.n	80071b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 f88a 	bl	80072c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f89b 	bl	80072ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	f003 0310 	and.w	r3, r3, #16
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d020      	beq.n	8007208 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	f003 0310 	and.w	r3, r3, #16
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d01b      	beq.n	8007208 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	f06f 0210 	mvn.w	r2, #16
 80071d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2208      	movs	r2, #8
 80071de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	69db      	ldr	r3, [r3, #28]
 80071e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f872 	bl	80072d8 <HAL_TIM_IC_CaptureCallback>
 80071f4:	e005      	b.n	8007202 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f864 	bl	80072c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f000 f875 	bl	80072ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	2200      	movs	r2, #0
 8007206:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	f003 0301 	and.w	r3, r3, #1
 800720e:	2b00      	cmp	r3, #0
 8007210:	d00c      	beq.n	800722c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f003 0301 	and.w	r3, r3, #1
 8007218:	2b00      	cmp	r3, #0
 800721a:	d007      	beq.n	800722c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f06f 0201 	mvn.w	r2, #1
 8007224:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007226:	6878      	ldr	r0, [r7, #4]
 8007228:	f7fa f8ee 	bl	8001408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800722c:	68bb      	ldr	r3, [r7, #8]
 800722e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00c      	beq.n	8007250 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800723c:	2b00      	cmp	r3, #0
 800723e:	d007      	beq.n	8007250 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f000 f906 	bl	800745c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00c      	beq.n	8007274 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007260:	2b00      	cmp	r3, #0
 8007262:	d007      	beq.n	8007274 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800726c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 f8fe 	bl	8007470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d00c      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d007      	beq.n	8007298 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007292:	6878      	ldr	r0, [r7, #4]
 8007294:	f000 f834 	bl	8007300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	f003 0320 	and.w	r3, r3, #32
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00c      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	f003 0320 	and.w	r3, r3, #32
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d007      	beq.n	80072bc <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f06f 0220 	mvn.w	r2, #32
 80072b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f000 f8c6 	bl	8007448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80072bc:	bf00      	nop
 80072be:	3710      	adds	r7, #16
 80072c0:	46bd      	mov	sp, r7
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072cc:	bf00      	nop
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072d8:	b480      	push	{r7}
 80072da:	b083      	sub	sp, #12
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072ec:	b480      	push	{r7}
 80072ee:	b083      	sub	sp, #12
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072f4:	bf00      	nop
 80072f6:	370c      	adds	r7, #12
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007314:	b480      	push	{r7}
 8007316:	b085      	sub	sp, #20
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a40      	ldr	r2, [pc, #256]	; (8007428 <TIM_Base_SetConfig+0x114>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007332:	d00f      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a3d      	ldr	r2, [pc, #244]	; (800742c <TIM_Base_SetConfig+0x118>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00b      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a3c      	ldr	r2, [pc, #240]	; (8007430 <TIM_Base_SetConfig+0x11c>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a3b      	ldr	r2, [pc, #236]	; (8007434 <TIM_Base_SetConfig+0x120>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_Base_SetConfig+0x40>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a3a      	ldr	r2, [pc, #232]	; (8007438 <TIM_Base_SetConfig+0x124>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d108      	bne.n	8007366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800735a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4313      	orrs	r3, r2
 8007364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a2f      	ldr	r2, [pc, #188]	; (8007428 <TIM_Base_SetConfig+0x114>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d01f      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007374:	d01b      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a2c      	ldr	r2, [pc, #176]	; (800742c <TIM_Base_SetConfig+0x118>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d017      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a2b      	ldr	r2, [pc, #172]	; (8007430 <TIM_Base_SetConfig+0x11c>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <TIM_Base_SetConfig+0x120>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00f      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a29      	ldr	r2, [pc, #164]	; (8007438 <TIM_Base_SetConfig+0x124>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d00b      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a28      	ldr	r2, [pc, #160]	; (800743c <TIM_Base_SetConfig+0x128>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d007      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	4a27      	ldr	r2, [pc, #156]	; (8007440 <TIM_Base_SetConfig+0x12c>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d003      	beq.n	80073ae <TIM_Base_SetConfig+0x9a>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a26      	ldr	r2, [pc, #152]	; (8007444 <TIM_Base_SetConfig+0x130>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d108      	bne.n	80073c0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	695b      	ldr	r3, [r3, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	689a      	ldr	r2, [r3, #8]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80073dc:	683b      	ldr	r3, [r7, #0]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	4a10      	ldr	r2, [pc, #64]	; (8007428 <TIM_Base_SetConfig+0x114>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d00f      	beq.n	800740c <TIM_Base_SetConfig+0xf8>
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	4a12      	ldr	r2, [pc, #72]	; (8007438 <TIM_Base_SetConfig+0x124>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d00b      	beq.n	800740c <TIM_Base_SetConfig+0xf8>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	4a11      	ldr	r2, [pc, #68]	; (800743c <TIM_Base_SetConfig+0x128>)
 80073f8:	4293      	cmp	r3, r2
 80073fa:	d007      	beq.n	800740c <TIM_Base_SetConfig+0xf8>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a10      	ldr	r2, [pc, #64]	; (8007440 <TIM_Base_SetConfig+0x12c>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d003      	beq.n	800740c <TIM_Base_SetConfig+0xf8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a0f      	ldr	r2, [pc, #60]	; (8007444 <TIM_Base_SetConfig+0x130>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d103      	bne.n	8007414 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	691a      	ldr	r2, [r3, #16]
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	615a      	str	r2, [r3, #20]
}
 800741a:	bf00      	nop
 800741c:	3714      	adds	r7, #20
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	40012c00 	.word	0x40012c00
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40013400 	.word	0x40013400
 800743c:	40014000 	.word	0x40014000
 8007440:	40014400 	.word	0x40014400
 8007444:	40014800 	.word	0x40014800

08007448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007450:	bf00      	nop
 8007452:	370c      	adds	r7, #12
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800745c:	b480      	push	{r7}
 800745e:	b083      	sub	sp, #12
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007464:	bf00      	nop
 8007466:	370c      	adds	r7, #12
 8007468:	46bd      	mov	sp, r7
 800746a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746e:	4770      	bx	lr

08007470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007478:	bf00      	nop
 800747a:	370c      	adds	r7, #12
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b082      	sub	sp, #8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d101      	bne.n	8007496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e040      	b.n	8007518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800749a:	2b00      	cmp	r3, #0
 800749c:	d106      	bne.n	80074ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fa fa98 	bl	80019dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2224      	movs	r2, #36	; 0x24
 80074b0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	681a      	ldr	r2, [r3, #0]
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f022 0201 	bic.w	r2, r2, #1
 80074c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d002      	beq.n	80074d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fb6a 	bl	8007ba4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074d0:	6878      	ldr	r0, [r7, #4]
 80074d2:	f000 f8af 	bl	8007634 <UART_SetConfig>
 80074d6:	4603      	mov	r3, r0
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d101      	bne.n	80074e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	e01b      	b.n	8007518 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685a      	ldr	r2, [r3, #4]
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689a      	ldr	r2, [r3, #8]
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681a      	ldr	r2, [r3, #0]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f042 0201 	orr.w	r2, r2, #1
 800750e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f000 fbe9 	bl	8007ce8 <UART_CheckIdleState>
 8007516:	4603      	mov	r3, r0
}
 8007518:	4618      	mov	r0, r3
 800751a:	3708      	adds	r7, #8
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	; 0x28
 8007524:	af02      	add	r7, sp, #8
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	603b      	str	r3, [r7, #0]
 800752c:	4613      	mov	r3, r2
 800752e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007534:	2b20      	cmp	r3, #32
 8007536:	d178      	bne.n	800762a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_UART_Transmit+0x24>
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e071      	b.n	800762c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2221      	movs	r2, #33	; 0x21
 8007554:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007556:	f7fc ff67 	bl	8004428 <HAL_GetTick>
 800755a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	88fa      	ldrh	r2, [r7, #6]
 8007560:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	88fa      	ldrh	r2, [r7, #6]
 8007568:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007574:	d108      	bne.n	8007588 <HAL_UART_Transmit+0x68>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	691b      	ldr	r3, [r3, #16]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d104      	bne.n	8007588 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	61bb      	str	r3, [r7, #24]
 8007586:	e003      	b.n	8007590 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800758c:	2300      	movs	r3, #0
 800758e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007590:	e030      	b.n	80075f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	9300      	str	r3, [sp, #0]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	2200      	movs	r2, #0
 800759a:	2180      	movs	r1, #128	; 0x80
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fc4b 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2220      	movs	r2, #32
 80075ac:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e03c      	b.n	800762c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10b      	bne.n	80075d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075b8:	69bb      	ldr	r3, [r7, #24]
 80075ba:	881a      	ldrh	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075c4:	b292      	uxth	r2, r2
 80075c6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	3302      	adds	r3, #2
 80075cc:	61bb      	str	r3, [r7, #24]
 80075ce:	e008      	b.n	80075e2 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	b292      	uxth	r2, r2
 80075da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075dc:	69fb      	ldr	r3, [r7, #28]
 80075de:	3301      	adds	r3, #1
 80075e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3b01      	subs	r3, #1
 80075ec:	b29a      	uxth	r2, r3
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1c8      	bne.n	8007592 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	9300      	str	r3, [sp, #0]
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	2200      	movs	r2, #0
 8007608:	2140      	movs	r1, #64	; 0x40
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fc14 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d004      	beq.n	8007620 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2220      	movs	r2, #32
 800761a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e005      	b.n	800762c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2220      	movs	r2, #32
 8007624:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007626:	2300      	movs	r3, #0
 8007628:	e000      	b.n	800762c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800762a:	2302      	movs	r3, #2
  }
}
 800762c:	4618      	mov	r0, r3
 800762e:	3720      	adds	r7, #32
 8007630:	46bd      	mov	sp, r7
 8007632:	bd80      	pop	{r7, pc}

08007634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007638:	b08a      	sub	sp, #40	; 0x28
 800763a:	af00      	add	r7, sp, #0
 800763c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800763e:	2300      	movs	r3, #0
 8007640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	691b      	ldr	r3, [r3, #16]
 800764c:	431a      	orrs	r2, r3
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	695b      	ldr	r3, [r3, #20]
 8007652:	431a      	orrs	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	69db      	ldr	r3, [r3, #28]
 8007658:	4313      	orrs	r3, r2
 800765a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	681a      	ldr	r2, [r3, #0]
 8007662:	4ba4      	ldr	r3, [pc, #656]	; (80078f4 <UART_SetConfig+0x2c0>)
 8007664:	4013      	ands	r3, r2
 8007666:	68fa      	ldr	r2, [r7, #12]
 8007668:	6812      	ldr	r2, [r2, #0]
 800766a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800766c:	430b      	orrs	r3, r1
 800766e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	68da      	ldr	r2, [r3, #12]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	430a      	orrs	r2, r1
 8007684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a99      	ldr	r2, [pc, #612]	; (80078f8 <UART_SetConfig+0x2c4>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d004      	beq.n	80076a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	6a1b      	ldr	r3, [r3, #32]
 800769a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769c:	4313      	orrs	r3, r2
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	689b      	ldr	r3, [r3, #8]
 80076a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	4a90      	ldr	r2, [pc, #576]	; (80078fc <UART_SetConfig+0x2c8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d126      	bne.n	800770c <UART_SetConfig+0xd8>
 80076be:	4b90      	ldr	r3, [pc, #576]	; (8007900 <UART_SetConfig+0x2cc>)
 80076c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076c4:	f003 0303 	and.w	r3, r3, #3
 80076c8:	2b03      	cmp	r3, #3
 80076ca:	d81b      	bhi.n	8007704 <UART_SetConfig+0xd0>
 80076cc:	a201      	add	r2, pc, #4	; (adr r2, 80076d4 <UART_SetConfig+0xa0>)
 80076ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d2:	bf00      	nop
 80076d4:	080076e5 	.word	0x080076e5
 80076d8:	080076f5 	.word	0x080076f5
 80076dc:	080076ed 	.word	0x080076ed
 80076e0:	080076fd 	.word	0x080076fd
 80076e4:	2301      	movs	r3, #1
 80076e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076ea:	e116      	b.n	800791a <UART_SetConfig+0x2e6>
 80076ec:	2302      	movs	r3, #2
 80076ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076f2:	e112      	b.n	800791a <UART_SetConfig+0x2e6>
 80076f4:	2304      	movs	r3, #4
 80076f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80076fa:	e10e      	b.n	800791a <UART_SetConfig+0x2e6>
 80076fc:	2308      	movs	r3, #8
 80076fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007702:	e10a      	b.n	800791a <UART_SetConfig+0x2e6>
 8007704:	2310      	movs	r3, #16
 8007706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800770a:	e106      	b.n	800791a <UART_SetConfig+0x2e6>
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a7c      	ldr	r2, [pc, #496]	; (8007904 <UART_SetConfig+0x2d0>)
 8007712:	4293      	cmp	r3, r2
 8007714:	d138      	bne.n	8007788 <UART_SetConfig+0x154>
 8007716:	4b7a      	ldr	r3, [pc, #488]	; (8007900 <UART_SetConfig+0x2cc>)
 8007718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800771c:	f003 030c 	and.w	r3, r3, #12
 8007720:	2b0c      	cmp	r3, #12
 8007722:	d82d      	bhi.n	8007780 <UART_SetConfig+0x14c>
 8007724:	a201      	add	r2, pc, #4	; (adr r2, 800772c <UART_SetConfig+0xf8>)
 8007726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800772a:	bf00      	nop
 800772c:	08007761 	.word	0x08007761
 8007730:	08007781 	.word	0x08007781
 8007734:	08007781 	.word	0x08007781
 8007738:	08007781 	.word	0x08007781
 800773c:	08007771 	.word	0x08007771
 8007740:	08007781 	.word	0x08007781
 8007744:	08007781 	.word	0x08007781
 8007748:	08007781 	.word	0x08007781
 800774c:	08007769 	.word	0x08007769
 8007750:	08007781 	.word	0x08007781
 8007754:	08007781 	.word	0x08007781
 8007758:	08007781 	.word	0x08007781
 800775c:	08007779 	.word	0x08007779
 8007760:	2300      	movs	r3, #0
 8007762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007766:	e0d8      	b.n	800791a <UART_SetConfig+0x2e6>
 8007768:	2302      	movs	r3, #2
 800776a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800776e:	e0d4      	b.n	800791a <UART_SetConfig+0x2e6>
 8007770:	2304      	movs	r3, #4
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007776:	e0d0      	b.n	800791a <UART_SetConfig+0x2e6>
 8007778:	2308      	movs	r3, #8
 800777a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800777e:	e0cc      	b.n	800791a <UART_SetConfig+0x2e6>
 8007780:	2310      	movs	r3, #16
 8007782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007786:	e0c8      	b.n	800791a <UART_SetConfig+0x2e6>
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a5e      	ldr	r2, [pc, #376]	; (8007908 <UART_SetConfig+0x2d4>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d125      	bne.n	80077de <UART_SetConfig+0x1aa>
 8007792:	4b5b      	ldr	r3, [pc, #364]	; (8007900 <UART_SetConfig+0x2cc>)
 8007794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007798:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800779c:	2b30      	cmp	r3, #48	; 0x30
 800779e:	d016      	beq.n	80077ce <UART_SetConfig+0x19a>
 80077a0:	2b30      	cmp	r3, #48	; 0x30
 80077a2:	d818      	bhi.n	80077d6 <UART_SetConfig+0x1a2>
 80077a4:	2b20      	cmp	r3, #32
 80077a6:	d00a      	beq.n	80077be <UART_SetConfig+0x18a>
 80077a8:	2b20      	cmp	r3, #32
 80077aa:	d814      	bhi.n	80077d6 <UART_SetConfig+0x1a2>
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d002      	beq.n	80077b6 <UART_SetConfig+0x182>
 80077b0:	2b10      	cmp	r3, #16
 80077b2:	d008      	beq.n	80077c6 <UART_SetConfig+0x192>
 80077b4:	e00f      	b.n	80077d6 <UART_SetConfig+0x1a2>
 80077b6:	2300      	movs	r3, #0
 80077b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077bc:	e0ad      	b.n	800791a <UART_SetConfig+0x2e6>
 80077be:	2302      	movs	r3, #2
 80077c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077c4:	e0a9      	b.n	800791a <UART_SetConfig+0x2e6>
 80077c6:	2304      	movs	r3, #4
 80077c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077cc:	e0a5      	b.n	800791a <UART_SetConfig+0x2e6>
 80077ce:	2308      	movs	r3, #8
 80077d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077d4:	e0a1      	b.n	800791a <UART_SetConfig+0x2e6>
 80077d6:	2310      	movs	r3, #16
 80077d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80077dc:	e09d      	b.n	800791a <UART_SetConfig+0x2e6>
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a4a      	ldr	r2, [pc, #296]	; (800790c <UART_SetConfig+0x2d8>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d125      	bne.n	8007834 <UART_SetConfig+0x200>
 80077e8:	4b45      	ldr	r3, [pc, #276]	; (8007900 <UART_SetConfig+0x2cc>)
 80077ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077f2:	2bc0      	cmp	r3, #192	; 0xc0
 80077f4:	d016      	beq.n	8007824 <UART_SetConfig+0x1f0>
 80077f6:	2bc0      	cmp	r3, #192	; 0xc0
 80077f8:	d818      	bhi.n	800782c <UART_SetConfig+0x1f8>
 80077fa:	2b80      	cmp	r3, #128	; 0x80
 80077fc:	d00a      	beq.n	8007814 <UART_SetConfig+0x1e0>
 80077fe:	2b80      	cmp	r3, #128	; 0x80
 8007800:	d814      	bhi.n	800782c <UART_SetConfig+0x1f8>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d002      	beq.n	800780c <UART_SetConfig+0x1d8>
 8007806:	2b40      	cmp	r3, #64	; 0x40
 8007808:	d008      	beq.n	800781c <UART_SetConfig+0x1e8>
 800780a:	e00f      	b.n	800782c <UART_SetConfig+0x1f8>
 800780c:	2300      	movs	r3, #0
 800780e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007812:	e082      	b.n	800791a <UART_SetConfig+0x2e6>
 8007814:	2302      	movs	r3, #2
 8007816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800781a:	e07e      	b.n	800791a <UART_SetConfig+0x2e6>
 800781c:	2304      	movs	r3, #4
 800781e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007822:	e07a      	b.n	800791a <UART_SetConfig+0x2e6>
 8007824:	2308      	movs	r3, #8
 8007826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800782a:	e076      	b.n	800791a <UART_SetConfig+0x2e6>
 800782c:	2310      	movs	r3, #16
 800782e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007832:	e072      	b.n	800791a <UART_SetConfig+0x2e6>
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a35      	ldr	r2, [pc, #212]	; (8007910 <UART_SetConfig+0x2dc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d12a      	bne.n	8007894 <UART_SetConfig+0x260>
 800783e:	4b30      	ldr	r3, [pc, #192]	; (8007900 <UART_SetConfig+0x2cc>)
 8007840:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007848:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800784c:	d01a      	beq.n	8007884 <UART_SetConfig+0x250>
 800784e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007852:	d81b      	bhi.n	800788c <UART_SetConfig+0x258>
 8007854:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007858:	d00c      	beq.n	8007874 <UART_SetConfig+0x240>
 800785a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800785e:	d815      	bhi.n	800788c <UART_SetConfig+0x258>
 8007860:	2b00      	cmp	r3, #0
 8007862:	d003      	beq.n	800786c <UART_SetConfig+0x238>
 8007864:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007868:	d008      	beq.n	800787c <UART_SetConfig+0x248>
 800786a:	e00f      	b.n	800788c <UART_SetConfig+0x258>
 800786c:	2300      	movs	r3, #0
 800786e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007872:	e052      	b.n	800791a <UART_SetConfig+0x2e6>
 8007874:	2302      	movs	r3, #2
 8007876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800787a:	e04e      	b.n	800791a <UART_SetConfig+0x2e6>
 800787c:	2304      	movs	r3, #4
 800787e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007882:	e04a      	b.n	800791a <UART_SetConfig+0x2e6>
 8007884:	2308      	movs	r3, #8
 8007886:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800788a:	e046      	b.n	800791a <UART_SetConfig+0x2e6>
 800788c:	2310      	movs	r3, #16
 800788e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8007892:	e042      	b.n	800791a <UART_SetConfig+0x2e6>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4a17      	ldr	r2, [pc, #92]	; (80078f8 <UART_SetConfig+0x2c4>)
 800789a:	4293      	cmp	r3, r2
 800789c:	d13a      	bne.n	8007914 <UART_SetConfig+0x2e0>
 800789e:	4b18      	ldr	r3, [pc, #96]	; (8007900 <UART_SetConfig+0x2cc>)
 80078a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80078a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078ac:	d01a      	beq.n	80078e4 <UART_SetConfig+0x2b0>
 80078ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078b2:	d81b      	bhi.n	80078ec <UART_SetConfig+0x2b8>
 80078b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b8:	d00c      	beq.n	80078d4 <UART_SetConfig+0x2a0>
 80078ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078be:	d815      	bhi.n	80078ec <UART_SetConfig+0x2b8>
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d003      	beq.n	80078cc <UART_SetConfig+0x298>
 80078c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078c8:	d008      	beq.n	80078dc <UART_SetConfig+0x2a8>
 80078ca:	e00f      	b.n	80078ec <UART_SetConfig+0x2b8>
 80078cc:	2300      	movs	r3, #0
 80078ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078d2:	e022      	b.n	800791a <UART_SetConfig+0x2e6>
 80078d4:	2302      	movs	r3, #2
 80078d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078da:	e01e      	b.n	800791a <UART_SetConfig+0x2e6>
 80078dc:	2304      	movs	r3, #4
 80078de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078e2:	e01a      	b.n	800791a <UART_SetConfig+0x2e6>
 80078e4:	2308      	movs	r3, #8
 80078e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078ea:	e016      	b.n	800791a <UART_SetConfig+0x2e6>
 80078ec:	2310      	movs	r3, #16
 80078ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80078f2:	e012      	b.n	800791a <UART_SetConfig+0x2e6>
 80078f4:	efff69f3 	.word	0xefff69f3
 80078f8:	40008000 	.word	0x40008000
 80078fc:	40013800 	.word	0x40013800
 8007900:	40021000 	.word	0x40021000
 8007904:	40004400 	.word	0x40004400
 8007908:	40004800 	.word	0x40004800
 800790c:	40004c00 	.word	0x40004c00
 8007910:	40005000 	.word	0x40005000
 8007914:	2310      	movs	r3, #16
 8007916:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	4a9f      	ldr	r2, [pc, #636]	; (8007b9c <UART_SetConfig+0x568>)
 8007920:	4293      	cmp	r3, r2
 8007922:	d17a      	bne.n	8007a1a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007928:	2b08      	cmp	r3, #8
 800792a:	d824      	bhi.n	8007976 <UART_SetConfig+0x342>
 800792c:	a201      	add	r2, pc, #4	; (adr r2, 8007934 <UART_SetConfig+0x300>)
 800792e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007932:	bf00      	nop
 8007934:	08007959 	.word	0x08007959
 8007938:	08007977 	.word	0x08007977
 800793c:	08007961 	.word	0x08007961
 8007940:	08007977 	.word	0x08007977
 8007944:	08007967 	.word	0x08007967
 8007948:	08007977 	.word	0x08007977
 800794c:	08007977 	.word	0x08007977
 8007950:	08007977 	.word	0x08007977
 8007954:	0800796f 	.word	0x0800796f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007958:	f7fd fe38 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 800795c:	61f8      	str	r0, [r7, #28]
        break;
 800795e:	e010      	b.n	8007982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007960:	4b8f      	ldr	r3, [pc, #572]	; (8007ba0 <UART_SetConfig+0x56c>)
 8007962:	61fb      	str	r3, [r7, #28]
        break;
 8007964:	e00d      	b.n	8007982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007966:	f7fd fd99 	bl	800549c <HAL_RCC_GetSysClockFreq>
 800796a:	61f8      	str	r0, [r7, #28]
        break;
 800796c:	e009      	b.n	8007982 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800796e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007972:	61fb      	str	r3, [r7, #28]
        break;
 8007974:	e005      	b.n	8007982 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8007976:	2300      	movs	r3, #0
 8007978:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007980:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007982:	69fb      	ldr	r3, [r7, #28]
 8007984:	2b00      	cmp	r3, #0
 8007986:	f000 80fb 	beq.w	8007b80 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	005b      	lsls	r3, r3, #1
 8007992:	4413      	add	r3, r2
 8007994:	69fa      	ldr	r2, [r7, #28]
 8007996:	429a      	cmp	r2, r3
 8007998:	d305      	bcc.n	80079a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80079a0:	69fa      	ldr	r2, [r7, #28]
 80079a2:	429a      	cmp	r2, r3
 80079a4:	d903      	bls.n	80079ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80079ac:	e0e8      	b.n	8007b80 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	2200      	movs	r2, #0
 80079b2:	461c      	mov	r4, r3
 80079b4:	4615      	mov	r5, r2
 80079b6:	f04f 0200 	mov.w	r2, #0
 80079ba:	f04f 0300 	mov.w	r3, #0
 80079be:	022b      	lsls	r3, r5, #8
 80079c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80079c4:	0222      	lsls	r2, r4, #8
 80079c6:	68f9      	ldr	r1, [r7, #12]
 80079c8:	6849      	ldr	r1, [r1, #4]
 80079ca:	0849      	lsrs	r1, r1, #1
 80079cc:	2000      	movs	r0, #0
 80079ce:	4688      	mov	r8, r1
 80079d0:	4681      	mov	r9, r0
 80079d2:	eb12 0a08 	adds.w	sl, r2, r8
 80079d6:	eb43 0b09 	adc.w	fp, r3, r9
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	603b      	str	r3, [r7, #0]
 80079e2:	607a      	str	r2, [r7, #4]
 80079e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80079e8:	4650      	mov	r0, sl
 80079ea:	4659      	mov	r1, fp
 80079ec:	f7f9 f836 	bl	8000a5c <__aeabi_uldivmod>
 80079f0:	4602      	mov	r2, r0
 80079f2:	460b      	mov	r3, r1
 80079f4:	4613      	mov	r3, r2
 80079f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079f8:	69bb      	ldr	r3, [r7, #24]
 80079fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079fe:	d308      	bcc.n	8007a12 <UART_SetConfig+0x3de>
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a06:	d204      	bcs.n	8007a12 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	60da      	str	r2, [r3, #12]
 8007a10:	e0b6      	b.n	8007b80 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007a18:	e0b2      	b.n	8007b80 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	69db      	ldr	r3, [r3, #28]
 8007a1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007a22:	d15e      	bne.n	8007ae2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8007a24:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007a28:	2b08      	cmp	r3, #8
 8007a2a:	d828      	bhi.n	8007a7e <UART_SetConfig+0x44a>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <UART_SetConfig+0x400>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a59 	.word	0x08007a59
 8007a38:	08007a61 	.word	0x08007a61
 8007a3c:	08007a69 	.word	0x08007a69
 8007a40:	08007a7f 	.word	0x08007a7f
 8007a44:	08007a6f 	.word	0x08007a6f
 8007a48:	08007a7f 	.word	0x08007a7f
 8007a4c:	08007a7f 	.word	0x08007a7f
 8007a50:	08007a7f 	.word	0x08007a7f
 8007a54:	08007a77 	.word	0x08007a77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a58:	f7fd fdb8 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 8007a5c:	61f8      	str	r0, [r7, #28]
        break;
 8007a5e:	e014      	b.n	8007a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a60:	f7fd fdca 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 8007a64:	61f8      	str	r0, [r7, #28]
        break;
 8007a66:	e010      	b.n	8007a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a68:	4b4d      	ldr	r3, [pc, #308]	; (8007ba0 <UART_SetConfig+0x56c>)
 8007a6a:	61fb      	str	r3, [r7, #28]
        break;
 8007a6c:	e00d      	b.n	8007a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a6e:	f7fd fd15 	bl	800549c <HAL_RCC_GetSysClockFreq>
 8007a72:	61f8      	str	r0, [r7, #28]
        break;
 8007a74:	e009      	b.n	8007a8a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a7a:	61fb      	str	r3, [r7, #28]
        break;
 8007a7c:	e005      	b.n	8007a8a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007a88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d077      	beq.n	8007b80 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	005a      	lsls	r2, r3, #1
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	685b      	ldr	r3, [r3, #4]
 8007a98:	085b      	lsrs	r3, r3, #1
 8007a9a:	441a      	add	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007aa4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	2b0f      	cmp	r3, #15
 8007aaa:	d916      	bls.n	8007ada <UART_SetConfig+0x4a6>
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ab2:	d212      	bcs.n	8007ada <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007ab4:	69bb      	ldr	r3, [r7, #24]
 8007ab6:	b29b      	uxth	r3, r3
 8007ab8:	f023 030f 	bic.w	r3, r3, #15
 8007abc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	085b      	lsrs	r3, r3, #1
 8007ac2:	b29b      	uxth	r3, r3
 8007ac4:	f003 0307 	and.w	r3, r3, #7
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	8afb      	ldrh	r3, [r7, #22]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	8afa      	ldrh	r2, [r7, #22]
 8007ad6:	60da      	str	r2, [r3, #12]
 8007ad8:	e052      	b.n	8007b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007ada:	2301      	movs	r3, #1
 8007adc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8007ae0:	e04e      	b.n	8007b80 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ae2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007ae6:	2b08      	cmp	r3, #8
 8007ae8:	d827      	bhi.n	8007b3a <UART_SetConfig+0x506>
 8007aea:	a201      	add	r2, pc, #4	; (adr r2, 8007af0 <UART_SetConfig+0x4bc>)
 8007aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007af0:	08007b15 	.word	0x08007b15
 8007af4:	08007b1d 	.word	0x08007b1d
 8007af8:	08007b25 	.word	0x08007b25
 8007afc:	08007b3b 	.word	0x08007b3b
 8007b00:	08007b2b 	.word	0x08007b2b
 8007b04:	08007b3b 	.word	0x08007b3b
 8007b08:	08007b3b 	.word	0x08007b3b
 8007b0c:	08007b3b 	.word	0x08007b3b
 8007b10:	08007b33 	.word	0x08007b33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007b14:	f7fd fd5a 	bl	80055cc <HAL_RCC_GetPCLK1Freq>
 8007b18:	61f8      	str	r0, [r7, #28]
        break;
 8007b1a:	e014      	b.n	8007b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007b1c:	f7fd fd6c 	bl	80055f8 <HAL_RCC_GetPCLK2Freq>
 8007b20:	61f8      	str	r0, [r7, #28]
        break;
 8007b22:	e010      	b.n	8007b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007b24:	4b1e      	ldr	r3, [pc, #120]	; (8007ba0 <UART_SetConfig+0x56c>)
 8007b26:	61fb      	str	r3, [r7, #28]
        break;
 8007b28:	e00d      	b.n	8007b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007b2a:	f7fd fcb7 	bl	800549c <HAL_RCC_GetSysClockFreq>
 8007b2e:	61f8      	str	r0, [r7, #28]
        break;
 8007b30:	e009      	b.n	8007b46 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b36:	61fb      	str	r3, [r7, #28]
        break;
 8007b38:	e005      	b.n	8007b46 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8007b44:	bf00      	nop
    }

    if (pclk != 0U)
 8007b46:	69fb      	ldr	r3, [r7, #28]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d019      	beq.n	8007b80 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	085a      	lsrs	r2, r3, #1
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b60:	69bb      	ldr	r3, [r7, #24]
 8007b62:	2b0f      	cmp	r3, #15
 8007b64:	d909      	bls.n	8007b7a <UART_SetConfig+0x546>
 8007b66:	69bb      	ldr	r3, [r7, #24]
 8007b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b6c:	d205      	bcs.n	8007b7a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b6e:	69bb      	ldr	r3, [r7, #24]
 8007b70:	b29a      	uxth	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	60da      	str	r2, [r3, #12]
 8007b78:	e002      	b.n	8007b80 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8007b7a:	2301      	movs	r3, #1
 8007b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2200      	movs	r2, #0
 8007b84:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007b8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3728      	adds	r7, #40	; 0x28
 8007b94:	46bd      	mov	sp, r7
 8007b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007b9a:	bf00      	nop
 8007b9c:	40008000 	.word	0x40008000
 8007ba0:	00f42400 	.word	0x00f42400

08007ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b083      	sub	sp, #12
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb0:	f003 0308 	and.w	r3, r3, #8
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d00a      	beq.n	8007bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	430a      	orrs	r2, r1
 8007bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd2:	f003 0301 	and.w	r3, r3, #1
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d00a      	beq.n	8007bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	430a      	orrs	r2, r1
 8007bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	f003 0302 	and.w	r3, r3, #2
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d00a      	beq.n	8007c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d00a      	beq.n	8007c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	430a      	orrs	r2, r1
 8007c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c38:	f003 0310 	and.w	r3, r3, #16
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d00a      	beq.n	8007c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	430a      	orrs	r2, r1
 8007c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d00a      	beq.n	8007c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	430a      	orrs	r2, r1
 8007c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d01a      	beq.n	8007cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	430a      	orrs	r2, r1
 8007c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ca2:	d10a      	bne.n	8007cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	430a      	orrs	r2, r1
 8007cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	605a      	str	r2, [r3, #4]
  }
}
 8007cdc:	bf00      	nop
 8007cde:	370c      	adds	r7, #12
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b098      	sub	sp, #96	; 0x60
 8007cec:	af02      	add	r7, sp, #8
 8007cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cf8:	f7fc fb96 	bl	8004428 <HAL_GetTick>
 8007cfc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	f003 0308 	and.w	r3, r3, #8
 8007d08:	2b08      	cmp	r3, #8
 8007d0a:	d12e      	bne.n	8007d6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d0c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d14:	2200      	movs	r2, #0
 8007d16:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007d1a:	6878      	ldr	r0, [r7, #4]
 8007d1c:	f000 f88c 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d021      	beq.n	8007d6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d2e:	e853 3f00 	ldrex	r3, [r3]
 8007d32:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d3a:	653b      	str	r3, [r7, #80]	; 0x50
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	461a      	mov	r2, r3
 8007d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d44:	647b      	str	r3, [r7, #68]	; 0x44
 8007d46:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d4c:	e841 2300 	strex	r3, r2, [r1]
 8007d50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d1e6      	bne.n	8007d26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2220      	movs	r2, #32
 8007d5c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d66:	2303      	movs	r3, #3
 8007d68:	e062      	b.n	8007e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 0304 	and.w	r3, r3, #4
 8007d74:	2b04      	cmp	r3, #4
 8007d76:	d149      	bne.n	8007e0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007d7c:	9300      	str	r3, [sp, #0]
 8007d7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d80:	2200      	movs	r2, #0
 8007d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f000 f856 	bl	8007e38 <UART_WaitOnFlagUntilTimeout>
 8007d8c:	4603      	mov	r3, r0
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d03c      	beq.n	8007e0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	e853 3f00 	ldrex	r3, [r3]
 8007d9e:	623b      	str	r3, [r7, #32]
   return(result);
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007da6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007db0:	633b      	str	r3, [r7, #48]	; 0x30
 8007db2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007db6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007db8:	e841 2300 	strex	r3, r2, [r1]
 8007dbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007dbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d1e6      	bne.n	8007d92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3308      	adds	r3, #8
 8007dca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	e853 3f00 	ldrex	r3, [r3]
 8007dd2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	f023 0301 	bic.w	r3, r3, #1
 8007dda:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3308      	adds	r3, #8
 8007de2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007de4:	61fa      	str	r2, [r7, #28]
 8007de6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de8:	69b9      	ldr	r1, [r7, #24]
 8007dea:	69fa      	ldr	r2, [r7, #28]
 8007dec:	e841 2300 	strex	r3, r2, [r1]
 8007df0:	617b      	str	r3, [r7, #20]
   return(result);
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d1e5      	bne.n	8007dc4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2220      	movs	r2, #32
 8007dfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007e08:	2303      	movs	r3, #3
 8007e0a:	e011      	b.n	8007e30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2220      	movs	r2, #32
 8007e10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2220      	movs	r2, #32
 8007e16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3758      	adds	r7, #88	; 0x58
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	603b      	str	r3, [r7, #0]
 8007e44:	4613      	mov	r3, r2
 8007e46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e48:	e049      	b.n	8007ede <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007e4a:	69bb      	ldr	r3, [r7, #24]
 8007e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e50:	d045      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e52:	f7fc fae9 	bl	8004428 <HAL_GetTick>
 8007e56:	4602      	mov	r2, r0
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	1ad3      	subs	r3, r2, r3
 8007e5c:	69ba      	ldr	r2, [r7, #24]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d302      	bcc.n	8007e68 <UART_WaitOnFlagUntilTimeout+0x30>
 8007e62:	69bb      	ldr	r3, [r7, #24]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d101      	bne.n	8007e6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007e68:	2303      	movs	r3, #3
 8007e6a:	e048      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 0304 	and.w	r3, r3, #4
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d031      	beq.n	8007ede <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	69db      	ldr	r3, [r3, #28]
 8007e80:	f003 0308 	and.w	r3, r3, #8
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d110      	bne.n	8007eaa <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	2208      	movs	r2, #8
 8007e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f000 f838 	bl	8007f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2208      	movs	r2, #8
 8007e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e029      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	69db      	ldr	r3, [r3, #28]
 8007eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007eb8:	d111      	bne.n	8007ede <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ec2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f81e 	bl	8007f06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2220      	movs	r2, #32
 8007ece:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007eda:	2303      	movs	r3, #3
 8007edc:	e00f      	b.n	8007efe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	69da      	ldr	r2, [r3, #28]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	4013      	ands	r3, r2
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	bf0c      	ite	eq
 8007eee:	2301      	moveq	r3, #1
 8007ef0:	2300      	movne	r3, #0
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	79fb      	ldrb	r3, [r7, #7]
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d0a6      	beq.n	8007e4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f06:	b480      	push	{r7}
 8007f08:	b095      	sub	sp, #84	; 0x54
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f16:	e853 3f00 	ldrex	r3, [r3]
 8007f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	461a      	mov	r2, r3
 8007f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f2e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f34:	e841 2300 	strex	r3, r2, [r1]
 8007f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1e6      	bne.n	8007f0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	3308      	adds	r3, #8
 8007f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	6a3b      	ldr	r3, [r7, #32]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	f023 0301 	bic.w	r3, r3, #1
 8007f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	3308      	adds	r3, #8
 8007f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f68:	e841 2300 	strex	r3, r2, [r1]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d1e5      	bne.n	8007f40 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d118      	bne.n	8007fae <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	e853 3f00 	ldrex	r3, [r3]
 8007f88:	60bb      	str	r3, [r7, #8]
   return(result);
 8007f8a:	68bb      	ldr	r3, [r7, #8]
 8007f8c:	f023 0310 	bic.w	r3, r3, #16
 8007f90:	647b      	str	r3, [r7, #68]	; 0x44
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	461a      	mov	r2, r3
 8007f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f9a:	61bb      	str	r3, [r7, #24]
 8007f9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9e:	6979      	ldr	r1, [r7, #20]
 8007fa0:	69ba      	ldr	r2, [r7, #24]
 8007fa2:	e841 2300 	strex	r3, r2, [r1]
 8007fa6:	613b      	str	r3, [r7, #16]
   return(result);
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1e6      	bne.n	8007f7c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007fc2:	bf00      	nop
 8007fc4:	3754      	adds	r7, #84	; 0x54
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr
	...

08007fd0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <SysTick_Handler+0x1c>)
 8007fd6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007fd8:	f001 fe32 	bl	8009c40 <xTaskGetSchedulerState>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b01      	cmp	r3, #1
 8007fe0:	d001      	beq.n	8007fe6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007fe2:	f002 fd19 	bl	800aa18 <xPortSysTickHandler>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	e000e010 	.word	0xe000e010

08007ff0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	4a07      	ldr	r2, [pc, #28]	; (800801c <vApplicationGetIdleTaskMemory+0x2c>)
 8008000:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	4a06      	ldr	r2, [pc, #24]	; (8008020 <vApplicationGetIdleTaskMemory+0x30>)
 8008006:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2280      	movs	r2, #128	; 0x80
 800800c:	601a      	str	r2, [r3, #0]
}
 800800e:	bf00      	nop
 8008010:	3714      	adds	r7, #20
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
 800801a:	bf00      	nop
 800801c:	200021f8 	.word	0x200021f8
 8008020:	200022a4 	.word	0x200022a4

08008024 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	60f8      	str	r0, [r7, #12]
 800802c:	60b9      	str	r1, [r7, #8]
 800802e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4a07      	ldr	r2, [pc, #28]	; (8008050 <vApplicationGetTimerTaskMemory+0x2c>)
 8008034:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	4a06      	ldr	r2, [pc, #24]	; (8008054 <vApplicationGetTimerTaskMemory+0x30>)
 800803a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008042:	601a      	str	r2, [r3, #0]
}
 8008044:	bf00      	nop
 8008046:	3714      	adds	r7, #20
 8008048:	46bd      	mov	sp, r7
 800804a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804e:	4770      	bx	lr
 8008050:	200024a4 	.word	0x200024a4
 8008054:	20002550 	.word	0x20002550

08008058 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f103 0208 	add.w	r2, r3, #8
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f04f 32ff 	mov.w	r2, #4294967295
 8008070:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	f103 0208 	add.w	r2, r3, #8
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f103 0208 	add.w	r2, r3, #8
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2200      	movs	r2, #0
 80080a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80080a6:	bf00      	nop
 80080a8:	370c      	adds	r7, #12
 80080aa:	46bd      	mov	sp, r7
 80080ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b0:	4770      	bx	lr

080080b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080b2:	b480      	push	{r7}
 80080b4:	b085      	sub	sp, #20
 80080b6:	af00      	add	r7, sp, #0
 80080b8:	6078      	str	r0, [r7, #4]
 80080ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	68fa      	ldr	r2, [r7, #12]
 80080c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	689b      	ldr	r3, [r3, #8]
 80080d4:	683a      	ldr	r2, [r7, #0]
 80080d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	687a      	ldr	r2, [r7, #4]
 80080e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	1c5a      	adds	r2, r3, #1
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	601a      	str	r2, [r3, #0]
}
 80080ee:	bf00      	nop
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80080fa:	b480      	push	{r7}
 80080fc:	b085      	sub	sp, #20
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
 8008102:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008110:	d103      	bne.n	800811a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	691b      	ldr	r3, [r3, #16]
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	e00c      	b.n	8008134 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	3308      	adds	r3, #8
 800811e:	60fb      	str	r3, [r7, #12]
 8008120:	e002      	b.n	8008128 <vListInsert+0x2e>
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	68ba      	ldr	r2, [r7, #8]
 8008130:	429a      	cmp	r2, r3
 8008132:	d2f6      	bcs.n	8008122 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	683b      	ldr	r3, [r7, #0]
 800813a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	68fa      	ldr	r2, [r7, #12]
 8008148:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	683a      	ldr	r2, [r7, #0]
 800814e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	687a      	ldr	r2, [r7, #4]
 8008154:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	1c5a      	adds	r2, r3, #1
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	601a      	str	r2, [r3, #0]
}
 8008160:	bf00      	nop
 8008162:	3714      	adds	r7, #20
 8008164:	46bd      	mov	sp, r7
 8008166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816a:	4770      	bx	lr

0800816c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	691b      	ldr	r3, [r3, #16]
 8008178:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685b      	ldr	r3, [r3, #4]
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	6892      	ldr	r2, [r2, #8]
 8008182:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	6852      	ldr	r2, [r2, #4]
 800818c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	687a      	ldr	r2, [r7, #4]
 8008194:	429a      	cmp	r2, r3
 8008196:	d103      	bne.n	80081a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689a      	ldr	r2, [r3, #8]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	1e5a      	subs	r2, r3, #1
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3714      	adds	r7, #20
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b084      	sub	sp, #16
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	6078      	str	r0, [r7, #4]
 80081c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d10a      	bne.n	80081ea <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80081d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80081e6:	bf00      	nop
 80081e8:	e7fe      	b.n	80081e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80081ea:	f002 fb83 	bl	800a8f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681a      	ldr	r2, [r3, #0]
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f6:	68f9      	ldr	r1, [r7, #12]
 80081f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80081fa:	fb01 f303 	mul.w	r3, r1, r3
 80081fe:	441a      	add	r2, r3
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2200      	movs	r2, #0
 8008208:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800821a:	3b01      	subs	r3, #1
 800821c:	68f9      	ldr	r1, [r7, #12]
 800821e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008220:	fb01 f303 	mul.w	r3, r1, r3
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	22ff      	movs	r2, #255	; 0xff
 800822e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	22ff      	movs	r2, #255	; 0xff
 8008236:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d114      	bne.n	800826a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	691b      	ldr	r3, [r3, #16]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d01a      	beq.n	800827e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	3310      	adds	r3, #16
 800824c:	4618      	mov	r0, r3
 800824e:	f001 fb35 	bl	80098bc <xTaskRemoveFromEventList>
 8008252:	4603      	mov	r3, r0
 8008254:	2b00      	cmp	r3, #0
 8008256:	d012      	beq.n	800827e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <xQueueGenericReset+0xcc>)
 800825a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800825e:	601a      	str	r2, [r3, #0]
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	f3bf 8f6f 	isb	sy
 8008268:	e009      	b.n	800827e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3310      	adds	r3, #16
 800826e:	4618      	mov	r0, r3
 8008270:	f7ff fef2 	bl	8008058 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	3324      	adds	r3, #36	; 0x24
 8008278:	4618      	mov	r0, r3
 800827a:	f7ff feed 	bl	8008058 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800827e:	f002 fb69 	bl	800a954 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008282:	2301      	movs	r3, #1
}
 8008284:	4618      	mov	r0, r3
 8008286:	3710      	adds	r7, #16
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	e000ed04 	.word	0xe000ed04

08008290 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008290:	b580      	push	{r7, lr}
 8008292:	b08e      	sub	sp, #56	; 0x38
 8008294:	af02      	add	r7, sp, #8
 8008296:	60f8      	str	r0, [r7, #12]
 8008298:	60b9      	str	r1, [r7, #8]
 800829a:	607a      	str	r2, [r7, #4]
 800829c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10a      	bne.n	80082ba <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80082a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082a8:	f383 8811 	msr	BASEPRI, r3
 80082ac:	f3bf 8f6f 	isb	sy
 80082b0:	f3bf 8f4f 	dsb	sy
 80082b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80082b6:	bf00      	nop
 80082b8:	e7fe      	b.n	80082b8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10a      	bne.n	80082d6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80082c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082c4:	f383 8811 	msr	BASEPRI, r3
 80082c8:	f3bf 8f6f 	isb	sy
 80082cc:	f3bf 8f4f 	dsb	sy
 80082d0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80082d2:	bf00      	nop
 80082d4:	e7fe      	b.n	80082d4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d002      	beq.n	80082e2 <xQueueGenericCreateStatic+0x52>
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d001      	beq.n	80082e6 <xQueueGenericCreateStatic+0x56>
 80082e2:	2301      	movs	r3, #1
 80082e4:	e000      	b.n	80082e8 <xQueueGenericCreateStatic+0x58>
 80082e6:	2300      	movs	r3, #0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d10a      	bne.n	8008302 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80082ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082f0:	f383 8811 	msr	BASEPRI, r3
 80082f4:	f3bf 8f6f 	isb	sy
 80082f8:	f3bf 8f4f 	dsb	sy
 80082fc:	623b      	str	r3, [r7, #32]
}
 80082fe:	bf00      	nop
 8008300:	e7fe      	b.n	8008300 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d102      	bne.n	800830e <xQueueGenericCreateStatic+0x7e>
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <xQueueGenericCreateStatic+0x82>
 800830e:	2301      	movs	r3, #1
 8008310:	e000      	b.n	8008314 <xQueueGenericCreateStatic+0x84>
 8008312:	2300      	movs	r3, #0
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	61fb      	str	r3, [r7, #28]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800832e:	2350      	movs	r3, #80	; 0x50
 8008330:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008332:	697b      	ldr	r3, [r7, #20]
 8008334:	2b50      	cmp	r3, #80	; 0x50
 8008336:	d00a      	beq.n	800834e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008338:	f04f 0350 	mov.w	r3, #80	; 0x50
 800833c:	f383 8811 	msr	BASEPRI, r3
 8008340:	f3bf 8f6f 	isb	sy
 8008344:	f3bf 8f4f 	dsb	sy
 8008348:	61bb      	str	r3, [r7, #24]
}
 800834a:	bf00      	nop
 800834c:	e7fe      	b.n	800834c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800834e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008356:	2b00      	cmp	r3, #0
 8008358:	d00d      	beq.n	8008376 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800835a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008362:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	4613      	mov	r3, r2
 800836c:	687a      	ldr	r2, [r7, #4]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f000 f83f 	bl	80083f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008378:	4618      	mov	r0, r3
 800837a:	3730      	adds	r7, #48	; 0x30
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008380:	b580      	push	{r7, lr}
 8008382:	b08a      	sub	sp, #40	; 0x28
 8008384:	af02      	add	r7, sp, #8
 8008386:	60f8      	str	r0, [r7, #12]
 8008388:	60b9      	str	r1, [r7, #8]
 800838a:	4613      	mov	r3, r2
 800838c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2b00      	cmp	r3, #0
 8008392:	d10a      	bne.n	80083aa <xQueueGenericCreate+0x2a>
	__asm volatile
 8008394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008398:	f383 8811 	msr	BASEPRI, r3
 800839c:	f3bf 8f6f 	isb	sy
 80083a0:	f3bf 8f4f 	dsb	sy
 80083a4:	613b      	str	r3, [r7, #16]
}
 80083a6:	bf00      	nop
 80083a8:	e7fe      	b.n	80083a8 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
 80083b2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80083b4:	69fb      	ldr	r3, [r7, #28]
 80083b6:	3350      	adds	r3, #80	; 0x50
 80083b8:	4618      	mov	r0, r3
 80083ba:	f002 fbbd 	bl	800ab38 <pvPortMalloc>
 80083be:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80083c0:	69bb      	ldr	r3, [r7, #24]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d011      	beq.n	80083ea <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	3350      	adds	r3, #80	; 0x50
 80083ce:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80083d0:	69bb      	ldr	r3, [r7, #24]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80083d8:	79fa      	ldrb	r2, [r7, #7]
 80083da:	69bb      	ldr	r3, [r7, #24]
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	4613      	mov	r3, r2
 80083e0:	697a      	ldr	r2, [r7, #20]
 80083e2:	68b9      	ldr	r1, [r7, #8]
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f000 f805 	bl	80083f4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80083ea:	69bb      	ldr	r3, [r7, #24]
	}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3720      	adds	r7, #32
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d103      	bne.n	8008410 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	69ba      	ldr	r2, [r7, #24]
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	e002      	b.n	8008416 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008410:	69bb      	ldr	r3, [r7, #24]
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008416:	69bb      	ldr	r3, [r7, #24]
 8008418:	68fa      	ldr	r2, [r7, #12]
 800841a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800841c:	69bb      	ldr	r3, [r7, #24]
 800841e:	68ba      	ldr	r2, [r7, #8]
 8008420:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008422:	2101      	movs	r1, #1
 8008424:	69b8      	ldr	r0, [r7, #24]
 8008426:	f7ff fecb 	bl	80081c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	78fa      	ldrb	r2, [r7, #3]
 800842e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008432:	bf00      	nop
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}
	...

0800843c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b08e      	sub	sp, #56	; 0x38
 8008440:	af00      	add	r7, sp, #0
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	607a      	str	r2, [r7, #4]
 8008448:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800844a:	2300      	movs	r3, #0
 800844c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008454:	2b00      	cmp	r3, #0
 8008456:	d10a      	bne.n	800846e <xQueueGenericSend+0x32>
	__asm volatile
 8008458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845c:	f383 8811 	msr	BASEPRI, r3
 8008460:	f3bf 8f6f 	isb	sy
 8008464:	f3bf 8f4f 	dsb	sy
 8008468:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800846a:	bf00      	nop
 800846c:	e7fe      	b.n	800846c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <xQueueGenericSend+0x40>
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <xQueueGenericSend+0x44>
 800847c:	2301      	movs	r3, #1
 800847e:	e000      	b.n	8008482 <xQueueGenericSend+0x46>
 8008480:	2300      	movs	r3, #0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d10a      	bne.n	800849c <xQueueGenericSend+0x60>
	__asm volatile
 8008486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848a:	f383 8811 	msr	BASEPRI, r3
 800848e:	f3bf 8f6f 	isb	sy
 8008492:	f3bf 8f4f 	dsb	sy
 8008496:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008498:	bf00      	nop
 800849a:	e7fe      	b.n	800849a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	2b02      	cmp	r3, #2
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x6e>
 80084a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084a6:	2b01      	cmp	r3, #1
 80084a8:	d101      	bne.n	80084ae <xQueueGenericSend+0x72>
 80084aa:	2301      	movs	r3, #1
 80084ac:	e000      	b.n	80084b0 <xQueueGenericSend+0x74>
 80084ae:	2300      	movs	r3, #0
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d10a      	bne.n	80084ca <xQueueGenericSend+0x8e>
	__asm volatile
 80084b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084b8:	f383 8811 	msr	BASEPRI, r3
 80084bc:	f3bf 8f6f 	isb	sy
 80084c0:	f3bf 8f4f 	dsb	sy
 80084c4:	623b      	str	r3, [r7, #32]
}
 80084c6:	bf00      	nop
 80084c8:	e7fe      	b.n	80084c8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80084ca:	f001 fbb9 	bl	8009c40 <xTaskGetSchedulerState>
 80084ce:	4603      	mov	r3, r0
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	d102      	bne.n	80084da <xQueueGenericSend+0x9e>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d101      	bne.n	80084de <xQueueGenericSend+0xa2>
 80084da:	2301      	movs	r3, #1
 80084dc:	e000      	b.n	80084e0 <xQueueGenericSend+0xa4>
 80084de:	2300      	movs	r3, #0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <xQueueGenericSend+0xbe>
	__asm volatile
 80084e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084e8:	f383 8811 	msr	BASEPRI, r3
 80084ec:	f3bf 8f6f 	isb	sy
 80084f0:	f3bf 8f4f 	dsb	sy
 80084f4:	61fb      	str	r3, [r7, #28]
}
 80084f6:	bf00      	nop
 80084f8:	e7fe      	b.n	80084f8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80084fa:	f002 f9fb 	bl	800a8f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008506:	429a      	cmp	r2, r3
 8008508:	d302      	bcc.n	8008510 <xQueueGenericSend+0xd4>
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d129      	bne.n	8008564 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008516:	f000 fbbb 	bl	8008c90 <prvCopyDataToQueue>
 800851a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008520:	2b00      	cmp	r3, #0
 8008522:	d010      	beq.n	8008546 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008526:	3324      	adds	r3, #36	; 0x24
 8008528:	4618      	mov	r0, r3
 800852a:	f001 f9c7 	bl	80098bc <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d013      	beq.n	800855c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008534:	4b3f      	ldr	r3, [pc, #252]	; (8008634 <xQueueGenericSend+0x1f8>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e00a      	b.n	800855c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008548:	2b00      	cmp	r3, #0
 800854a:	d007      	beq.n	800855c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800854c:	4b39      	ldr	r3, [pc, #228]	; (8008634 <xQueueGenericSend+0x1f8>)
 800854e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008552:	601a      	str	r2, [r3, #0]
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800855c:	f002 f9fa 	bl	800a954 <vPortExitCritical>
				return pdPASS;
 8008560:	2301      	movs	r3, #1
 8008562:	e063      	b.n	800862c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d103      	bne.n	8008572 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800856a:	f002 f9f3 	bl	800a954 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800856e:	2300      	movs	r3, #0
 8008570:	e05c      	b.n	800862c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008572:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008574:	2b00      	cmp	r3, #0
 8008576:	d106      	bne.n	8008586 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008578:	f107 0314 	add.w	r3, r7, #20
 800857c:	4618      	mov	r0, r3
 800857e:	f001 fa01 	bl	8009984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008582:	2301      	movs	r3, #1
 8008584:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008586:	f002 f9e5 	bl	800a954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800858a:	f000 ff51 	bl	8009430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800858e:	f002 f9b1 	bl	800a8f4 <vPortEnterCritical>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008598:	b25b      	sxtb	r3, r3
 800859a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800859e:	d103      	bne.n	80085a8 <xQueueGenericSend+0x16c>
 80085a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085a2:	2200      	movs	r2, #0
 80085a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80085ae:	b25b      	sxtb	r3, r3
 80085b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085b4:	d103      	bne.n	80085be <xQueueGenericSend+0x182>
 80085b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085b8:	2200      	movs	r2, #0
 80085ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80085be:	f002 f9c9 	bl	800a954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085c2:	1d3a      	adds	r2, r7, #4
 80085c4:	f107 0314 	add.w	r3, r7, #20
 80085c8:	4611      	mov	r1, r2
 80085ca:	4618      	mov	r0, r3
 80085cc:	f001 f9f0 	bl	80099b0 <xTaskCheckForTimeOut>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d124      	bne.n	8008620 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80085d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085d8:	f000 fc52 	bl	8008e80 <prvIsQueueFull>
 80085dc:	4603      	mov	r3, r0
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d018      	beq.n	8008614 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e4:	3310      	adds	r3, #16
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	4611      	mov	r1, r2
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f916 	bl	800981c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80085f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80085f2:	f000 fbdd 	bl	8008db0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80085f6:	f000 ff29 	bl	800944c <xTaskResumeAll>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f47f af7c 	bne.w	80084fa <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008602:	4b0c      	ldr	r3, [pc, #48]	; (8008634 <xQueueGenericSend+0x1f8>)
 8008604:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008608:	601a      	str	r2, [r3, #0]
 800860a:	f3bf 8f4f 	dsb	sy
 800860e:	f3bf 8f6f 	isb	sy
 8008612:	e772      	b.n	80084fa <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008614:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008616:	f000 fbcb 	bl	8008db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800861a:	f000 ff17 	bl	800944c <xTaskResumeAll>
 800861e:	e76c      	b.n	80084fa <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008620:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008622:	f000 fbc5 	bl	8008db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008626:	f000 ff11 	bl	800944c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800862a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800862c:	4618      	mov	r0, r3
 800862e:	3738      	adds	r7, #56	; 0x38
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	e000ed04 	.word	0xe000ed04

08008638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b090      	sub	sp, #64	; 0x40
 800863c:	af00      	add	r7, sp, #0
 800863e:	60f8      	str	r0, [r7, #12]
 8008640:	60b9      	str	r1, [r7, #8]
 8008642:	607a      	str	r2, [r7, #4]
 8008644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800864a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800864c:	2b00      	cmp	r3, #0
 800864e:	d10a      	bne.n	8008666 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008650:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008654:	f383 8811 	msr	BASEPRI, r3
 8008658:	f3bf 8f6f 	isb	sy
 800865c:	f3bf 8f4f 	dsb	sy
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008662:	bf00      	nop
 8008664:	e7fe      	b.n	8008664 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d103      	bne.n	8008674 <xQueueGenericSendFromISR+0x3c>
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008670:	2b00      	cmp	r3, #0
 8008672:	d101      	bne.n	8008678 <xQueueGenericSendFromISR+0x40>
 8008674:	2301      	movs	r3, #1
 8008676:	e000      	b.n	800867a <xQueueGenericSendFromISR+0x42>
 8008678:	2300      	movs	r3, #0
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10a      	bne.n	8008694 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008690:	bf00      	nop
 8008692:	e7fe      	b.n	8008692 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008694:	683b      	ldr	r3, [r7, #0]
 8008696:	2b02      	cmp	r3, #2
 8008698:	d103      	bne.n	80086a2 <xQueueGenericSendFromISR+0x6a>
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800869e:	2b01      	cmp	r3, #1
 80086a0:	d101      	bne.n	80086a6 <xQueueGenericSendFromISR+0x6e>
 80086a2:	2301      	movs	r3, #1
 80086a4:	e000      	b.n	80086a8 <xQueueGenericSendFromISR+0x70>
 80086a6:	2300      	movs	r3, #0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d10a      	bne.n	80086c2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80086ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086b0:	f383 8811 	msr	BASEPRI, r3
 80086b4:	f3bf 8f6f 	isb	sy
 80086b8:	f3bf 8f4f 	dsb	sy
 80086bc:	623b      	str	r3, [r7, #32]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086c2:	f002 f9f9 	bl	800aab8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086c6:	f3ef 8211 	mrs	r2, BASEPRI
 80086ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ce:	f383 8811 	msr	BASEPRI, r3
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	f3bf 8f4f 	dsb	sy
 80086da:	61fa      	str	r2, [r7, #28]
 80086dc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80086de:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80086e0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086ea:	429a      	cmp	r2, r3
 80086ec:	d302      	bcc.n	80086f4 <xQueueGenericSendFromISR+0xbc>
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	2b02      	cmp	r3, #2
 80086f2:	d12f      	bne.n	8008754 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80086f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80086fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008704:	683a      	ldr	r2, [r7, #0]
 8008706:	68b9      	ldr	r1, [r7, #8]
 8008708:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800870a:	f000 fac1 	bl	8008c90 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800870e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8008712:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008716:	d112      	bne.n	800873e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800871a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800871c:	2b00      	cmp	r3, #0
 800871e:	d016      	beq.n	800874e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008722:	3324      	adds	r3, #36	; 0x24
 8008724:	4618      	mov	r0, r3
 8008726:	f001 f8c9 	bl	80098bc <xTaskRemoveFromEventList>
 800872a:	4603      	mov	r3, r0
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00e      	beq.n	800874e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d00b      	beq.n	800874e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2201      	movs	r2, #1
 800873a:	601a      	str	r2, [r3, #0]
 800873c:	e007      	b.n	800874e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800873e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8008742:	3301      	adds	r3, #1
 8008744:	b2db      	uxtb	r3, r3
 8008746:	b25a      	sxtb	r2, r3
 8008748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800874a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800874e:	2301      	movs	r3, #1
 8008750:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8008752:	e001      	b.n	8008758 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008754:	2300      	movs	r3, #0
 8008756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800875a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008762:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8008766:	4618      	mov	r0, r3
 8008768:	3740      	adds	r7, #64	; 0x40
 800876a:	46bd      	mov	sp, r7
 800876c:	bd80      	pop	{r7, pc}

0800876e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b08e      	sub	sp, #56	; 0x38
 8008772:	af00      	add	r7, sp, #0
 8008774:	6078      	str	r0, [r7, #4]
 8008776:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800877c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10a      	bne.n	8008798 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	623b      	str	r3, [r7, #32]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800879a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800879c:	2b00      	cmp	r3, #0
 800879e:	d00a      	beq.n	80087b6 <xQueueGiveFromISR+0x48>
	__asm volatile
 80087a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087a4:	f383 8811 	msr	BASEPRI, r3
 80087a8:	f3bf 8f6f 	isb	sy
 80087ac:	f3bf 8f4f 	dsb	sy
 80087b0:	61fb      	str	r3, [r7, #28]
}
 80087b2:	bf00      	nop
 80087b4:	e7fe      	b.n	80087b4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d103      	bne.n	80087c6 <xQueueGiveFromISR+0x58>
 80087be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d101      	bne.n	80087ca <xQueueGiveFromISR+0x5c>
 80087c6:	2301      	movs	r3, #1
 80087c8:	e000      	b.n	80087cc <xQueueGiveFromISR+0x5e>
 80087ca:	2300      	movs	r3, #0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d10a      	bne.n	80087e6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80087d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087d4:	f383 8811 	msr	BASEPRI, r3
 80087d8:	f3bf 8f6f 	isb	sy
 80087dc:	f3bf 8f4f 	dsb	sy
 80087e0:	61bb      	str	r3, [r7, #24]
}
 80087e2:	bf00      	nop
 80087e4:	e7fe      	b.n	80087e4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80087e6:	f002 f967 	bl	800aab8 <vPortValidateInterruptPriority>
	__asm volatile
 80087ea:	f3ef 8211 	mrs	r2, BASEPRI
 80087ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087f2:	f383 8811 	msr	BASEPRI, r3
 80087f6:	f3bf 8f6f 	isb	sy
 80087fa:	f3bf 8f4f 	dsb	sy
 80087fe:	617a      	str	r2, [r7, #20]
 8008800:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8008802:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008804:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800880a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800880c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800880e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008810:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008812:	429a      	cmp	r2, r3
 8008814:	d22b      	bcs.n	800886e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008818:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800881c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008822:	1c5a      	adds	r2, r3, #1
 8008824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008826:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008828:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008830:	d112      	bne.n	8008858 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	2b00      	cmp	r3, #0
 8008838:	d016      	beq.n	8008868 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800883a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883c:	3324      	adds	r3, #36	; 0x24
 800883e:	4618      	mov	r0, r3
 8008840:	f001 f83c 	bl	80098bc <xTaskRemoveFromEventList>
 8008844:	4603      	mov	r3, r0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00e      	beq.n	8008868 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
 8008856:	e007      	b.n	8008868 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008858:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800885c:	3301      	adds	r3, #1
 800885e:	b2db      	uxtb	r3, r3
 8008860:	b25a      	sxtb	r2, r3
 8008862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008864:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8008868:	2301      	movs	r3, #1
 800886a:	637b      	str	r3, [r7, #52]	; 0x34
 800886c:	e001      	b.n	8008872 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800886e:	2300      	movs	r3, #0
 8008870:	637b      	str	r3, [r7, #52]	; 0x34
 8008872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008874:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	f383 8811 	msr	BASEPRI, r3
}
 800887c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800887e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8008880:	4618      	mov	r0, r3
 8008882:	3738      	adds	r7, #56	; 0x38
 8008884:	46bd      	mov	sp, r7
 8008886:	bd80      	pop	{r7, pc}

08008888 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b08c      	sub	sp, #48	; 0x30
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008894:	2300      	movs	r3, #0
 8008896:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800889c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d10a      	bne.n	80088b8 <xQueueReceive+0x30>
	__asm volatile
 80088a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a6:	f383 8811 	msr	BASEPRI, r3
 80088aa:	f3bf 8f6f 	isb	sy
 80088ae:	f3bf 8f4f 	dsb	sy
 80088b2:	623b      	str	r3, [r7, #32]
}
 80088b4:	bf00      	nop
 80088b6:	e7fe      	b.n	80088b6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d103      	bne.n	80088c6 <xQueueReceive+0x3e>
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d101      	bne.n	80088ca <xQueueReceive+0x42>
 80088c6:	2301      	movs	r3, #1
 80088c8:	e000      	b.n	80088cc <xQueueReceive+0x44>
 80088ca:	2300      	movs	r3, #0
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d10a      	bne.n	80088e6 <xQueueReceive+0x5e>
	__asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	61fb      	str	r3, [r7, #28]
}
 80088e2:	bf00      	nop
 80088e4:	e7fe      	b.n	80088e4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088e6:	f001 f9ab 	bl	8009c40 <xTaskGetSchedulerState>
 80088ea:	4603      	mov	r3, r0
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d102      	bne.n	80088f6 <xQueueReceive+0x6e>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d101      	bne.n	80088fa <xQueueReceive+0x72>
 80088f6:	2301      	movs	r3, #1
 80088f8:	e000      	b.n	80088fc <xQueueReceive+0x74>
 80088fa:	2300      	movs	r3, #0
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d10a      	bne.n	8008916 <xQueueReceive+0x8e>
	__asm volatile
 8008900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008904:	f383 8811 	msr	BASEPRI, r3
 8008908:	f3bf 8f6f 	isb	sy
 800890c:	f3bf 8f4f 	dsb	sy
 8008910:	61bb      	str	r3, [r7, #24]
}
 8008912:	bf00      	nop
 8008914:	e7fe      	b.n	8008914 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008916:	f001 ffed 	bl	800a8f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800891a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800891c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800891e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008922:	2b00      	cmp	r3, #0
 8008924:	d01f      	beq.n	8008966 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008926:	68b9      	ldr	r1, [r7, #8]
 8008928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800892a:	f000 fa1b 	bl	8008d64 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800892e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008930:	1e5a      	subs	r2, r3, #1
 8008932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008934:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008938:	691b      	ldr	r3, [r3, #16]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00f      	beq.n	800895e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008940:	3310      	adds	r3, #16
 8008942:	4618      	mov	r0, r3
 8008944:	f000 ffba 	bl	80098bc <xTaskRemoveFromEventList>
 8008948:	4603      	mov	r3, r0
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800894e:	4b3d      	ldr	r3, [pc, #244]	; (8008a44 <xQueueReceive+0x1bc>)
 8008950:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008954:	601a      	str	r2, [r3, #0]
 8008956:	f3bf 8f4f 	dsb	sy
 800895a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800895e:	f001 fff9 	bl	800a954 <vPortExitCritical>
				return pdPASS;
 8008962:	2301      	movs	r3, #1
 8008964:	e069      	b.n	8008a3a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800896c:	f001 fff2 	bl	800a954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008970:	2300      	movs	r3, #0
 8008972:	e062      	b.n	8008a3a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d106      	bne.n	8008988 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800897a:	f107 0310 	add.w	r3, r7, #16
 800897e:	4618      	mov	r0, r3
 8008980:	f001 f800 	bl	8009984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008988:	f001 ffe4 	bl	800a954 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800898c:	f000 fd50 	bl	8009430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008990:	f001 ffb0 	bl	800a8f4 <vPortEnterCritical>
 8008994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008996:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800899a:	b25b      	sxtb	r3, r3
 800899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089a0:	d103      	bne.n	80089aa <xQueueReceive+0x122>
 80089a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089a4:	2200      	movs	r2, #0
 80089a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80089aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80089b0:	b25b      	sxtb	r3, r3
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d103      	bne.n	80089c0 <xQueueReceive+0x138>
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	2200      	movs	r2, #0
 80089bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80089c0:	f001 ffc8 	bl	800a954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80089c4:	1d3a      	adds	r2, r7, #4
 80089c6:	f107 0310 	add.w	r3, r7, #16
 80089ca:	4611      	mov	r1, r2
 80089cc:	4618      	mov	r0, r3
 80089ce:	f000 ffef 	bl	80099b0 <xTaskCheckForTimeOut>
 80089d2:	4603      	mov	r3, r0
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d123      	bne.n	8008a20 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089da:	f000 fa3b 	bl	8008e54 <prvIsQueueEmpty>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d017      	beq.n	8008a14 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80089e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089e6:	3324      	adds	r3, #36	; 0x24
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	4611      	mov	r1, r2
 80089ec:	4618      	mov	r0, r3
 80089ee:	f000 ff15 	bl	800981c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80089f2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80089f4:	f000 f9dc 	bl	8008db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80089f8:	f000 fd28 	bl	800944c <xTaskResumeAll>
 80089fc:	4603      	mov	r3, r0
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d189      	bne.n	8008916 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008a02:	4b10      	ldr	r3, [pc, #64]	; (8008a44 <xQueueReceive+0x1bc>)
 8008a04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a08:	601a      	str	r2, [r3, #0]
 8008a0a:	f3bf 8f4f 	dsb	sy
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	e780      	b.n	8008916 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008a14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a16:	f000 f9cb 	bl	8008db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008a1a:	f000 fd17 	bl	800944c <xTaskResumeAll>
 8008a1e:	e77a      	b.n	8008916 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008a20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a22:	f000 f9c5 	bl	8008db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008a26:	f000 fd11 	bl	800944c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008a2c:	f000 fa12 	bl	8008e54 <prvIsQueueEmpty>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f43f af6f 	beq.w	8008916 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008a38:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3730      	adds	r7, #48	; 0x30
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	e000ed04 	.word	0xe000ed04

08008a48 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08e      	sub	sp, #56	; 0x38
 8008a4c:	af00      	add	r7, sp, #0
 8008a4e:	6078      	str	r0, [r7, #4]
 8008a50:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008a52:	2300      	movs	r3, #0
 8008a54:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d10a      	bne.n	8008a7a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8008a64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a68:	f383 8811 	msr	BASEPRI, r3
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f3bf 8f4f 	dsb	sy
 8008a74:	623b      	str	r3, [r7, #32]
}
 8008a76:	bf00      	nop
 8008a78:	e7fe      	b.n	8008a78 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8008a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a86:	f383 8811 	msr	BASEPRI, r3
 8008a8a:	f3bf 8f6f 	isb	sy
 8008a8e:	f3bf 8f4f 	dsb	sy
 8008a92:	61fb      	str	r3, [r7, #28]
}
 8008a94:	bf00      	nop
 8008a96:	e7fe      	b.n	8008a96 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008a98:	f001 f8d2 	bl	8009c40 <xTaskGetSchedulerState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d102      	bne.n	8008aa8 <xQueueSemaphoreTake+0x60>
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d101      	bne.n	8008aac <xQueueSemaphoreTake+0x64>
 8008aa8:	2301      	movs	r3, #1
 8008aaa:	e000      	b.n	8008aae <xQueueSemaphoreTake+0x66>
 8008aac:	2300      	movs	r3, #0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d10a      	bne.n	8008ac8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8008ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab6:	f383 8811 	msr	BASEPRI, r3
 8008aba:	f3bf 8f6f 	isb	sy
 8008abe:	f3bf 8f4f 	dsb	sy
 8008ac2:	61bb      	str	r3, [r7, #24]
}
 8008ac4:	bf00      	nop
 8008ac6:	e7fe      	b.n	8008ac6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008ac8:	f001 ff14 	bl	800a8f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008ad2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d024      	beq.n	8008b22 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ada:	1e5a      	subs	r2, r3, #1
 8008adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d104      	bne.n	8008af2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008ae8:	f001 fa20 	bl	8009f2c <pvTaskIncrementMutexHeldCount>
 8008aec:	4602      	mov	r2, r0
 8008aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008af2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008af4:	691b      	ldr	r3, [r3, #16]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00f      	beq.n	8008b1a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008afa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008afc:	3310      	adds	r3, #16
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fedc 	bl	80098bc <xTaskRemoveFromEventList>
 8008b04:	4603      	mov	r3, r0
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d007      	beq.n	8008b1a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b0a:	4b54      	ldr	r3, [pc, #336]	; (8008c5c <xQueueSemaphoreTake+0x214>)
 8008b0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b10:	601a      	str	r2, [r3, #0]
 8008b12:	f3bf 8f4f 	dsb	sy
 8008b16:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b1a:	f001 ff1b 	bl	800a954 <vPortExitCritical>
				return pdPASS;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e097      	b.n	8008c52 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d111      	bne.n	8008b4c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d00a      	beq.n	8008b44 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8008b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b32:	f383 8811 	msr	BASEPRI, r3
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	f3bf 8f4f 	dsb	sy
 8008b3e:	617b      	str	r3, [r7, #20]
}
 8008b40:	bf00      	nop
 8008b42:	e7fe      	b.n	8008b42 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008b44:	f001 ff06 	bl	800a954 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	e082      	b.n	8008c52 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d106      	bne.n	8008b60 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008b52:	f107 030c 	add.w	r3, r7, #12
 8008b56:	4618      	mov	r0, r3
 8008b58:	f000 ff14 	bl	8009984 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008b60:	f001 fef8 	bl	800a954 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008b64:	f000 fc64 	bl	8009430 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008b68:	f001 fec4 	bl	800a8f4 <vPortEnterCritical>
 8008b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008b72:	b25b      	sxtb	r3, r3
 8008b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b78:	d103      	bne.n	8008b82 <xQueueSemaphoreTake+0x13a>
 8008b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008b88:	b25b      	sxtb	r3, r3
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b8e:	d103      	bne.n	8008b98 <xQueueSemaphoreTake+0x150>
 8008b90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b92:	2200      	movs	r2, #0
 8008b94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008b98:	f001 fedc 	bl	800a954 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008b9c:	463a      	mov	r2, r7
 8008b9e:	f107 030c 	add.w	r3, r7, #12
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 ff03 	bl	80099b0 <xTaskCheckForTimeOut>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d132      	bne.n	8008c16 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008bb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008bb2:	f000 f94f 	bl	8008e54 <prvIsQueueEmpty>
 8008bb6:	4603      	mov	r3, r0
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d026      	beq.n	8008c0a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d109      	bne.n	8008bd8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8008bc4:	f001 fe96 	bl	800a8f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f001 f855 	bl	8009c7c <xTaskPriorityInherit>
 8008bd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8008bd4:	f001 febe 	bl	800a954 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008bda:	3324      	adds	r3, #36	; 0x24
 8008bdc:	683a      	ldr	r2, [r7, #0]
 8008bde:	4611      	mov	r1, r2
 8008be0:	4618      	mov	r0, r3
 8008be2:	f000 fe1b 	bl	800981c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008be6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008be8:	f000 f8e2 	bl	8008db0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008bec:	f000 fc2e 	bl	800944c <xTaskResumeAll>
 8008bf0:	4603      	mov	r3, r0
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	f47f af68 	bne.w	8008ac8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8008bf8:	4b18      	ldr	r3, [pc, #96]	; (8008c5c <xQueueSemaphoreTake+0x214>)
 8008bfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	f3bf 8f4f 	dsb	sy
 8008c04:	f3bf 8f6f 	isb	sy
 8008c08:	e75e      	b.n	8008ac8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008c0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c0c:	f000 f8d0 	bl	8008db0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c10:	f000 fc1c 	bl	800944c <xTaskResumeAll>
 8008c14:	e758      	b.n	8008ac8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008c16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c18:	f000 f8ca 	bl	8008db0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c1c:	f000 fc16 	bl	800944c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c22:	f000 f917 	bl	8008e54 <prvIsQueueEmpty>
 8008c26:	4603      	mov	r3, r0
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f43f af4d 	beq.w	8008ac8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00d      	beq.n	8008c50 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8008c34:	f001 fe5e 	bl	800a8f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008c3a:	f000 f811 	bl	8008c60 <prvGetDisinheritPriorityAfterTimeout>
 8008c3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c42:	689b      	ldr	r3, [r3, #8]
 8008c44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008c46:	4618      	mov	r0, r3
 8008c48:	f001 f8ee 	bl	8009e28 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008c4c:	f001 fe82 	bl	800a954 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c52:	4618      	mov	r0, r3
 8008c54:	3738      	adds	r7, #56	; 0x38
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}
 8008c5a:	bf00      	nop
 8008c5c:	e000ed04 	.word	0xe000ed04

08008c60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008c60:	b480      	push	{r7}
 8008c62:	b085      	sub	sp, #20
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d006      	beq.n	8008c7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8008c7a:	60fb      	str	r3, [r7, #12]
 8008c7c:	e001      	b.n	8008c82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008c7e:	2300      	movs	r3, #0
 8008c80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008c82:	68fb      	ldr	r3, [r7, #12]
	}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b086      	sub	sp, #24
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	60f8      	str	r0, [r7, #12]
 8008c98:	60b9      	str	r1, [r7, #8]
 8008c9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ca4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d10d      	bne.n	8008cca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d14d      	bne.n	8008d52 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f001 f846 	bl	8009d4c <xTaskPriorityDisinherit>
 8008cc0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	609a      	str	r2, [r3, #8]
 8008cc8:	e043      	b.n	8008d52 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d119      	bne.n	8008d04 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6858      	ldr	r0, [r3, #4]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd8:	461a      	mov	r2, r3
 8008cda:	68b9      	ldr	r1, [r7, #8]
 8008cdc:	f002 f9da 	bl	800b094 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	685a      	ldr	r2, [r3, #4]
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ce8:	441a      	add	r2, r3
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	685a      	ldr	r2, [r3, #4]
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d32b      	bcc.n	8008d52 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681a      	ldr	r2, [r3, #0]
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	605a      	str	r2, [r3, #4]
 8008d02:	e026      	b.n	8008d52 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	68d8      	ldr	r0, [r3, #12]
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	68b9      	ldr	r1, [r7, #8]
 8008d10:	f002 f9c0 	bl	800b094 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	68da      	ldr	r2, [r3, #12]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1c:	425b      	negs	r3, r3
 8008d1e:	441a      	add	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	68da      	ldr	r2, [r3, #12]
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	429a      	cmp	r2, r3
 8008d2e:	d207      	bcs.n	8008d40 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	689a      	ldr	r2, [r3, #8]
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d38:	425b      	negs	r3, r3
 8008d3a:	441a      	add	r2, r3
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2b02      	cmp	r3, #2
 8008d44:	d105      	bne.n	8008d52 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d002      	beq.n	8008d52 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008d5a:	697b      	ldr	r3, [r7, #20]
}
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	3718      	adds	r7, #24
 8008d60:	46bd      	mov	sp, r7
 8008d62:	bd80      	pop	{r7, pc}

08008d64 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b082      	sub	sp, #8
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
 8008d6c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d018      	beq.n	8008da8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68da      	ldr	r2, [r3, #12]
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d7e:	441a      	add	r2, r3
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68da      	ldr	r2, [r3, #12]
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d303      	bcc.n	8008d98 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	68d9      	ldr	r1, [r3, #12]
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008da0:	461a      	mov	r2, r3
 8008da2:	6838      	ldr	r0, [r7, #0]
 8008da4:	f002 f976 	bl	800b094 <memcpy>
	}
}
 8008da8:	bf00      	nop
 8008daa:	3708      	adds	r7, #8
 8008dac:	46bd      	mov	sp, r7
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b084      	sub	sp, #16
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008db8:	f001 fd9c 	bl	800a8f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008dc2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dc4:	e011      	b.n	8008dea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d012      	beq.n	8008df4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	3324      	adds	r3, #36	; 0x24
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fd72 	bl	80098bc <xTaskRemoveFromEventList>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d001      	beq.n	8008de2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dde:	f000 fe49 	bl	8009a74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008de2:	7bfb      	ldrb	r3, [r7, #15]
 8008de4:	3b01      	subs	r3, #1
 8008de6:	b2db      	uxtb	r3, r3
 8008de8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	dce9      	bgt.n	8008dc6 <prvUnlockQueue+0x16>
 8008df2:	e000      	b.n	8008df6 <prvUnlockQueue+0x46>
					break;
 8008df4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	22ff      	movs	r2, #255	; 0xff
 8008dfa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008dfe:	f001 fda9 	bl	800a954 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008e02:	f001 fd77 	bl	800a8f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e0c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e0e:	e011      	b.n	8008e34 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	691b      	ldr	r3, [r3, #16]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d012      	beq.n	8008e3e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3310      	adds	r3, #16
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f000 fd4d 	bl	80098bc <xTaskRemoveFromEventList>
 8008e22:	4603      	mov	r3, r0
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d001      	beq.n	8008e2c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e28:	f000 fe24 	bl	8009a74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	b2db      	uxtb	r3, r3
 8008e32:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	dce9      	bgt.n	8008e10 <prvUnlockQueue+0x60>
 8008e3c:	e000      	b.n	8008e40 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e3e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	22ff      	movs	r2, #255	; 0xff
 8008e44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008e48:	f001 fd84 	bl	800a954 <vPortExitCritical>
}
 8008e4c:	bf00      	nop
 8008e4e:	3710      	adds	r7, #16
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b084      	sub	sp, #16
 8008e58:	af00      	add	r7, sp, #0
 8008e5a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e5c:	f001 fd4a 	bl	800a8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d102      	bne.n	8008e6e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	60fb      	str	r3, [r7, #12]
 8008e6c:	e001      	b.n	8008e72 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e72:	f001 fd6f 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8008e76:	68fb      	ldr	r3, [r7, #12]
}
 8008e78:	4618      	mov	r0, r3
 8008e7a:	3710      	adds	r7, #16
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bd80      	pop	{r7, pc}

08008e80 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e80:	b580      	push	{r7, lr}
 8008e82:	b084      	sub	sp, #16
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e88:	f001 fd34 	bl	800a8f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e94:	429a      	cmp	r2, r3
 8008e96:	d102      	bne.n	8008e9e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	60fb      	str	r3, [r7, #12]
 8008e9c:	e001      	b.n	8008ea2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008ea2:	f001 fd57 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
}
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	3710      	adds	r7, #16
 8008eac:	46bd      	mov	sp, r7
 8008eae:	bd80      	pop	{r7, pc}

08008eb0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008eba:	2300      	movs	r3, #0
 8008ebc:	60fb      	str	r3, [r7, #12]
 8008ebe:	e014      	b.n	8008eea <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ec0:	4a0f      	ldr	r2, [pc, #60]	; (8008f00 <vQueueAddToRegistry+0x50>)
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d10b      	bne.n	8008ee4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008ecc:	490c      	ldr	r1, [pc, #48]	; (8008f00 <vQueueAddToRegistry+0x50>)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ed6:	4a0a      	ldr	r2, [pc, #40]	; (8008f00 <vQueueAddToRegistry+0x50>)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	00db      	lsls	r3, r3, #3
 8008edc:	4413      	add	r3, r2
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ee2:	e006      	b.n	8008ef2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	3301      	adds	r3, #1
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	2b07      	cmp	r3, #7
 8008eee:	d9e7      	bls.n	8008ec0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	3714      	adds	r7, #20
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efc:	4770      	bx	lr
 8008efe:	bf00      	nop
 8008f00:	20002950 	.word	0x20002950

08008f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b086      	sub	sp, #24
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	60f8      	str	r0, [r7, #12]
 8008f0c:	60b9      	str	r1, [r7, #8]
 8008f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008f14:	f001 fcee 	bl	800a8f4 <vPortEnterCritical>
 8008f18:	697b      	ldr	r3, [r7, #20]
 8008f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008f1e:	b25b      	sxtb	r3, r3
 8008f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f24:	d103      	bne.n	8008f2e <vQueueWaitForMessageRestricted+0x2a>
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008f2e:	697b      	ldr	r3, [r7, #20]
 8008f30:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008f34:	b25b      	sxtb	r3, r3
 8008f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f3a:	d103      	bne.n	8008f44 <vQueueWaitForMessageRestricted+0x40>
 8008f3c:	697b      	ldr	r3, [r7, #20]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008f44:	f001 fd06 	bl	800a954 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d106      	bne.n	8008f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	3324      	adds	r3, #36	; 0x24
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f000 fc83 	bl	8009864 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f5e:	6978      	ldr	r0, [r7, #20]
 8008f60:	f7ff ff26 	bl	8008db0 <prvUnlockQueue>
	}
 8008f64:	bf00      	nop
 8008f66:	3718      	adds	r7, #24
 8008f68:	46bd      	mov	sp, r7
 8008f6a:	bd80      	pop	{r7, pc}

08008f6c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b08e      	sub	sp, #56	; 0x38
 8008f70:	af04      	add	r7, sp, #16
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	607a      	str	r2, [r7, #4]
 8008f78:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d10a      	bne.n	8008f96 <xTaskCreateStatic+0x2a>
	__asm volatile
 8008f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f84:	f383 8811 	msr	BASEPRI, r3
 8008f88:	f3bf 8f6f 	isb	sy
 8008f8c:	f3bf 8f4f 	dsb	sy
 8008f90:	623b      	str	r3, [r7, #32]
}
 8008f92:	bf00      	nop
 8008f94:	e7fe      	b.n	8008f94 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d10a      	bne.n	8008fb2 <xTaskCreateStatic+0x46>
	__asm volatile
 8008f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa0:	f383 8811 	msr	BASEPRI, r3
 8008fa4:	f3bf 8f6f 	isb	sy
 8008fa8:	f3bf 8f4f 	dsb	sy
 8008fac:	61fb      	str	r3, [r7, #28]
}
 8008fae:	bf00      	nop
 8008fb0:	e7fe      	b.n	8008fb0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008fb2:	23ac      	movs	r3, #172	; 0xac
 8008fb4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008fb6:	693b      	ldr	r3, [r7, #16]
 8008fb8:	2bac      	cmp	r3, #172	; 0xac
 8008fba:	d00a      	beq.n	8008fd2 <xTaskCreateStatic+0x66>
	__asm volatile
 8008fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc0:	f383 8811 	msr	BASEPRI, r3
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	f3bf 8f4f 	dsb	sy
 8008fcc:	61bb      	str	r3, [r7, #24]
}
 8008fce:	bf00      	nop
 8008fd0:	e7fe      	b.n	8008fd0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fd2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d01e      	beq.n	8009018 <xTaskCreateStatic+0xac>
 8008fda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d01b      	beq.n	8009018 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fe6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008fe8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fec:	2202      	movs	r2, #2
 8008fee:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	9303      	str	r3, [sp, #12]
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	9302      	str	r3, [sp, #8]
 8008ffa:	f107 0314 	add.w	r3, r7, #20
 8008ffe:	9301      	str	r3, [sp, #4]
 8009000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009002:	9300      	str	r3, [sp, #0]
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	687a      	ldr	r2, [r7, #4]
 8009008:	68b9      	ldr	r1, [r7, #8]
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f000 f850 	bl	80090b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009010:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009012:	f000 f8f7 	bl	8009204 <prvAddNewTaskToReadyList>
 8009016:	e001      	b.n	800901c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009018:	2300      	movs	r3, #0
 800901a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800901c:	697b      	ldr	r3, [r7, #20]
	}
 800901e:	4618      	mov	r0, r3
 8009020:	3728      	adds	r7, #40	; 0x28
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}

08009026 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009026:	b580      	push	{r7, lr}
 8009028:	b08c      	sub	sp, #48	; 0x30
 800902a:	af04      	add	r7, sp, #16
 800902c:	60f8      	str	r0, [r7, #12]
 800902e:	60b9      	str	r1, [r7, #8]
 8009030:	603b      	str	r3, [r7, #0]
 8009032:	4613      	mov	r3, r2
 8009034:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009036:	88fb      	ldrh	r3, [r7, #6]
 8009038:	009b      	lsls	r3, r3, #2
 800903a:	4618      	mov	r0, r3
 800903c:	f001 fd7c 	bl	800ab38 <pvPortMalloc>
 8009040:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	2b00      	cmp	r3, #0
 8009046:	d00e      	beq.n	8009066 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009048:	20ac      	movs	r0, #172	; 0xac
 800904a:	f001 fd75 	bl	800ab38 <pvPortMalloc>
 800904e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	2b00      	cmp	r3, #0
 8009054:	d003      	beq.n	800905e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009056:	69fb      	ldr	r3, [r7, #28]
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	631a      	str	r2, [r3, #48]	; 0x30
 800905c:	e005      	b.n	800906a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800905e:	6978      	ldr	r0, [r7, #20]
 8009060:	f001 fe36 	bl	800acd0 <vPortFree>
 8009064:	e001      	b.n	800906a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009066:	2300      	movs	r3, #0
 8009068:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800906a:	69fb      	ldr	r3, [r7, #28]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d017      	beq.n	80090a0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009070:	69fb      	ldr	r3, [r7, #28]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009078:	88fa      	ldrh	r2, [r7, #6]
 800907a:	2300      	movs	r3, #0
 800907c:	9303      	str	r3, [sp, #12]
 800907e:	69fb      	ldr	r3, [r7, #28]
 8009080:	9302      	str	r3, [sp, #8]
 8009082:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009084:	9301      	str	r3, [sp, #4]
 8009086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009088:	9300      	str	r3, [sp, #0]
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	68b9      	ldr	r1, [r7, #8]
 800908e:	68f8      	ldr	r0, [r7, #12]
 8009090:	f000 f80e 	bl	80090b0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009094:	69f8      	ldr	r0, [r7, #28]
 8009096:	f000 f8b5 	bl	8009204 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800909a:	2301      	movs	r3, #1
 800909c:	61bb      	str	r3, [r7, #24]
 800909e:	e002      	b.n	80090a6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80090a0:	f04f 33ff 	mov.w	r3, #4294967295
 80090a4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80090a6:	69bb      	ldr	r3, [r7, #24]
	}
 80090a8:	4618      	mov	r0, r3
 80090aa:	3720      	adds	r7, #32
 80090ac:	46bd      	mov	sp, r7
 80090ae:	bd80      	pop	{r7, pc}

080090b0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b088      	sub	sp, #32
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	607a      	str	r2, [r7, #4]
 80090bc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	461a      	mov	r2, r3
 80090c8:	21a5      	movs	r1, #165	; 0xa5
 80090ca:	f001 ff59 	bl	800af80 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80090d8:	3b01      	subs	r3, #1
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090e0:	69bb      	ldr	r3, [r7, #24]
 80090e2:	f023 0307 	bic.w	r3, r3, #7
 80090e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	f003 0307 	and.w	r3, r3, #7
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d00a      	beq.n	8009108 <prvInitialiseNewTask+0x58>
	__asm volatile
 80090f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f6:	f383 8811 	msr	BASEPRI, r3
 80090fa:	f3bf 8f6f 	isb	sy
 80090fe:	f3bf 8f4f 	dsb	sy
 8009102:	617b      	str	r3, [r7, #20]
}
 8009104:	bf00      	nop
 8009106:	e7fe      	b.n	8009106 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d01f      	beq.n	800914e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800910e:	2300      	movs	r3, #0
 8009110:	61fb      	str	r3, [r7, #28]
 8009112:	e012      	b.n	800913a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	7819      	ldrb	r1, [r3, #0]
 800911c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800911e:	69fb      	ldr	r3, [r7, #28]
 8009120:	4413      	add	r3, r2
 8009122:	3334      	adds	r3, #52	; 0x34
 8009124:	460a      	mov	r2, r1
 8009126:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009128:	68ba      	ldr	r2, [r7, #8]
 800912a:	69fb      	ldr	r3, [r7, #28]
 800912c:	4413      	add	r3, r2
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d006      	beq.n	8009142 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	3301      	adds	r3, #1
 8009138:	61fb      	str	r3, [r7, #28]
 800913a:	69fb      	ldr	r3, [r7, #28]
 800913c:	2b0f      	cmp	r3, #15
 800913e:	d9e9      	bls.n	8009114 <prvInitialiseNewTask+0x64>
 8009140:	e000      	b.n	8009144 <prvInitialiseNewTask+0x94>
			{
				break;
 8009142:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009146:	2200      	movs	r2, #0
 8009148:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800914c:	e003      	b.n	8009156 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800914e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009158:	2b37      	cmp	r3, #55	; 0x37
 800915a:	d901      	bls.n	8009160 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800915c:	2337      	movs	r3, #55	; 0x37
 800915e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009162:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009164:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800916a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800916c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916e:	2200      	movs	r2, #0
 8009170:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	3304      	adds	r3, #4
 8009176:	4618      	mov	r0, r3
 8009178:	f7fe ff8e 	bl	8008098 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800917c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917e:	3318      	adds	r3, #24
 8009180:	4618      	mov	r0, r3
 8009182:	f7fe ff89 	bl	8008098 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800918a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800918c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800918e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009198:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800919a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 800919c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919e:	2200      	movs	r2, #0
 80091a0:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80091a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091a4:	2200      	movs	r2, #0
 80091a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80091aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80091b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091b4:	3358      	adds	r3, #88	; 0x58
 80091b6:	224c      	movs	r2, #76	; 0x4c
 80091b8:	2100      	movs	r1, #0
 80091ba:	4618      	mov	r0, r3
 80091bc:	f001 fee0 	bl	800af80 <memset>
 80091c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c2:	4a0d      	ldr	r2, [pc, #52]	; (80091f8 <prvInitialiseNewTask+0x148>)
 80091c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80091c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091c8:	4a0c      	ldr	r2, [pc, #48]	; (80091fc <prvInitialiseNewTask+0x14c>)
 80091ca:	661a      	str	r2, [r3, #96]	; 0x60
 80091cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091ce:	4a0c      	ldr	r2, [pc, #48]	; (8009200 <prvInitialiseNewTask+0x150>)
 80091d0:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80091d2:	683a      	ldr	r2, [r7, #0]
 80091d4:	68f9      	ldr	r1, [r7, #12]
 80091d6:	69b8      	ldr	r0, [r7, #24]
 80091d8:	f001 fa5e 	bl	800a698 <pxPortInitialiseStack>
 80091dc:	4602      	mov	r2, r0
 80091de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d002      	beq.n	80091ee <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091ee:	bf00      	nop
 80091f0:	3720      	adds	r7, #32
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}
 80091f6:	bf00      	nop
 80091f8:	20003ba4 	.word	0x20003ba4
 80091fc:	20003c0c 	.word	0x20003c0c
 8009200:	20003c74 	.word	0x20003c74

08009204 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800920c:	f001 fb72 	bl	800a8f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009210:	4b2d      	ldr	r3, [pc, #180]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	3301      	adds	r3, #1
 8009216:	4a2c      	ldr	r2, [pc, #176]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 8009218:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800921a:	4b2c      	ldr	r3, [pc, #176]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d109      	bne.n	8009236 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009222:	4a2a      	ldr	r2, [pc, #168]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009228:	4b27      	ldr	r3, [pc, #156]	; (80092c8 <prvAddNewTaskToReadyList+0xc4>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	2b01      	cmp	r3, #1
 800922e:	d110      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009230:	f000 fc44 	bl	8009abc <prvInitialiseTaskLists>
 8009234:	e00d      	b.n	8009252 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009236:	4b26      	ldr	r3, [pc, #152]	; (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2b00      	cmp	r3, #0
 800923c:	d109      	bne.n	8009252 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800923e:	4b23      	ldr	r3, [pc, #140]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009248:	429a      	cmp	r2, r3
 800924a:	d802      	bhi.n	8009252 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800924c:	4a1f      	ldr	r2, [pc, #124]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009252:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	3301      	adds	r3, #1
 8009258:	4a1e      	ldr	r2, [pc, #120]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800925c:	4b1d      	ldr	r3, [pc, #116]	; (80092d4 <prvAddNewTaskToReadyList+0xd0>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009268:	4b1b      	ldr	r3, [pc, #108]	; (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d903      	bls.n	8009278 <prvAddNewTaskToReadyList+0x74>
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009274:	4a18      	ldr	r2, [pc, #96]	; (80092d8 <prvAddNewTaskToReadyList+0xd4>)
 8009276:	6013      	str	r3, [r2, #0]
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800927c:	4613      	mov	r3, r2
 800927e:	009b      	lsls	r3, r3, #2
 8009280:	4413      	add	r3, r2
 8009282:	009b      	lsls	r3, r3, #2
 8009284:	4a15      	ldr	r2, [pc, #84]	; (80092dc <prvAddNewTaskToReadyList+0xd8>)
 8009286:	441a      	add	r2, r3
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	3304      	adds	r3, #4
 800928c:	4619      	mov	r1, r3
 800928e:	4610      	mov	r0, r2
 8009290:	f7fe ff0f 	bl	80080b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009294:	f001 fb5e 	bl	800a954 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009298:	4b0d      	ldr	r3, [pc, #52]	; (80092d0 <prvAddNewTaskToReadyList+0xcc>)
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d00e      	beq.n	80092be <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80092a0:	4b0a      	ldr	r3, [pc, #40]	; (80092cc <prvAddNewTaskToReadyList+0xc8>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d207      	bcs.n	80092be <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80092ae:	4b0c      	ldr	r3, [pc, #48]	; (80092e0 <prvAddNewTaskToReadyList+0xdc>)
 80092b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	f3bf 8f4f 	dsb	sy
 80092ba:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80092be:	bf00      	nop
 80092c0:	3708      	adds	r7, #8
 80092c2:	46bd      	mov	sp, r7
 80092c4:	bd80      	pop	{r7, pc}
 80092c6:	bf00      	nop
 80092c8:	20002e64 	.word	0x20002e64
 80092cc:	20002990 	.word	0x20002990
 80092d0:	20002e70 	.word	0x20002e70
 80092d4:	20002e80 	.word	0x20002e80
 80092d8:	20002e6c 	.word	0x20002e6c
 80092dc:	20002994 	.word	0x20002994
 80092e0:	e000ed04 	.word	0xe000ed04

080092e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b084      	sub	sp, #16
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d017      	beq.n	8009326 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092f6:	4b13      	ldr	r3, [pc, #76]	; (8009344 <vTaskDelay+0x60>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d00a      	beq.n	8009314 <vTaskDelay+0x30>
	__asm volatile
 80092fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009302:	f383 8811 	msr	BASEPRI, r3
 8009306:	f3bf 8f6f 	isb	sy
 800930a:	f3bf 8f4f 	dsb	sy
 800930e:	60bb      	str	r3, [r7, #8]
}
 8009310:	bf00      	nop
 8009312:	e7fe      	b.n	8009312 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009314:	f000 f88c 	bl	8009430 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009318:	2100      	movs	r1, #0
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f000 fe1a 	bl	8009f54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009320:	f000 f894 	bl	800944c <xTaskResumeAll>
 8009324:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d107      	bne.n	800933c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800932c:	4b06      	ldr	r3, [pc, #24]	; (8009348 <vTaskDelay+0x64>)
 800932e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009332:	601a      	str	r2, [r3, #0]
 8009334:	f3bf 8f4f 	dsb	sy
 8009338:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800933c:	bf00      	nop
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	20002e8c 	.word	0x20002e8c
 8009348:	e000ed04 	.word	0xe000ed04

0800934c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b08a      	sub	sp, #40	; 0x28
 8009350:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009352:	2300      	movs	r3, #0
 8009354:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009356:	2300      	movs	r3, #0
 8009358:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800935a:	463a      	mov	r2, r7
 800935c:	1d39      	adds	r1, r7, #4
 800935e:	f107 0308 	add.w	r3, r7, #8
 8009362:	4618      	mov	r0, r3
 8009364:	f7fe fe44 	bl	8007ff0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009368:	6839      	ldr	r1, [r7, #0]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	68ba      	ldr	r2, [r7, #8]
 800936e:	9202      	str	r2, [sp, #8]
 8009370:	9301      	str	r3, [sp, #4]
 8009372:	2300      	movs	r3, #0
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	2300      	movs	r3, #0
 8009378:	460a      	mov	r2, r1
 800937a:	4925      	ldr	r1, [pc, #148]	; (8009410 <vTaskStartScheduler+0xc4>)
 800937c:	4825      	ldr	r0, [pc, #148]	; (8009414 <vTaskStartScheduler+0xc8>)
 800937e:	f7ff fdf5 	bl	8008f6c <xTaskCreateStatic>
 8009382:	4603      	mov	r3, r0
 8009384:	4a24      	ldr	r2, [pc, #144]	; (8009418 <vTaskStartScheduler+0xcc>)
 8009386:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009388:	4b23      	ldr	r3, [pc, #140]	; (8009418 <vTaskStartScheduler+0xcc>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009390:	2301      	movs	r3, #1
 8009392:	617b      	str	r3, [r7, #20]
 8009394:	e001      	b.n	800939a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009396:	2300      	movs	r3, #0
 8009398:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800939a:	697b      	ldr	r3, [r7, #20]
 800939c:	2b01      	cmp	r3, #1
 800939e:	d102      	bne.n	80093a6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80093a0:	f000 fe2c 	bl	8009ffc <xTimerCreateTimerTask>
 80093a4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80093a6:	697b      	ldr	r3, [r7, #20]
 80093a8:	2b01      	cmp	r3, #1
 80093aa:	d11d      	bne.n	80093e8 <vTaskStartScheduler+0x9c>
	__asm volatile
 80093ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093b0:	f383 8811 	msr	BASEPRI, r3
 80093b4:	f3bf 8f6f 	isb	sy
 80093b8:	f3bf 8f4f 	dsb	sy
 80093bc:	613b      	str	r3, [r7, #16]
}
 80093be:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80093c0:	4b16      	ldr	r3, [pc, #88]	; (800941c <vTaskStartScheduler+0xd0>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	3358      	adds	r3, #88	; 0x58
 80093c6:	4a16      	ldr	r2, [pc, #88]	; (8009420 <vTaskStartScheduler+0xd4>)
 80093c8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80093ca:	4b16      	ldr	r3, [pc, #88]	; (8009424 <vTaskStartScheduler+0xd8>)
 80093cc:	f04f 32ff 	mov.w	r2, #4294967295
 80093d0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80093d2:	4b15      	ldr	r3, [pc, #84]	; (8009428 <vTaskStartScheduler+0xdc>)
 80093d4:	2201      	movs	r2, #1
 80093d6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80093d8:	4b14      	ldr	r3, [pc, #80]	; (800942c <vTaskStartScheduler+0xe0>)
 80093da:	2200      	movs	r2, #0
 80093dc:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 80093de:	f7f7 fcbb 	bl	8000d58 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80093e2:	f001 f9e5 	bl	800a7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80093e6:	e00e      	b.n	8009406 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ee:	d10a      	bne.n	8009406 <vTaskStartScheduler+0xba>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	60fb      	str	r3, [r7, #12]
}
 8009402:	bf00      	nop
 8009404:	e7fe      	b.n	8009404 <vTaskStartScheduler+0xb8>
}
 8009406:	bf00      	nop
 8009408:	3718      	adds	r7, #24
 800940a:	46bd      	mov	sp, r7
 800940c:	bd80      	pop	{r7, pc}
 800940e:	bf00      	nop
 8009410:	0800ba80 	.word	0x0800ba80
 8009414:	08009a8d 	.word	0x08009a8d
 8009418:	20002e88 	.word	0x20002e88
 800941c:	20002990 	.word	0x20002990
 8009420:	2000007c 	.word	0x2000007c
 8009424:	20002e84 	.word	0x20002e84
 8009428:	20002e70 	.word	0x20002e70
 800942c:	20002e68 	.word	0x20002e68

08009430 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009434:	4b04      	ldr	r3, [pc, #16]	; (8009448 <vTaskSuspendAll+0x18>)
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	3301      	adds	r3, #1
 800943a:	4a03      	ldr	r2, [pc, #12]	; (8009448 <vTaskSuspendAll+0x18>)
 800943c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800943e:	bf00      	nop
 8009440:	46bd      	mov	sp, r7
 8009442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009446:	4770      	bx	lr
 8009448:	20002e8c 	.word	0x20002e8c

0800944c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b084      	sub	sp, #16
 8009450:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009452:	2300      	movs	r3, #0
 8009454:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009456:	2300      	movs	r3, #0
 8009458:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800945a:	4b42      	ldr	r3, [pc, #264]	; (8009564 <xTaskResumeAll+0x118>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10a      	bne.n	8009478 <xTaskResumeAll+0x2c>
	__asm volatile
 8009462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009466:	f383 8811 	msr	BASEPRI, r3
 800946a:	f3bf 8f6f 	isb	sy
 800946e:	f3bf 8f4f 	dsb	sy
 8009472:	603b      	str	r3, [r7, #0]
}
 8009474:	bf00      	nop
 8009476:	e7fe      	b.n	8009476 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009478:	f001 fa3c 	bl	800a8f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800947c:	4b39      	ldr	r3, [pc, #228]	; (8009564 <xTaskResumeAll+0x118>)
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	3b01      	subs	r3, #1
 8009482:	4a38      	ldr	r2, [pc, #224]	; (8009564 <xTaskResumeAll+0x118>)
 8009484:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009486:	4b37      	ldr	r3, [pc, #220]	; (8009564 <xTaskResumeAll+0x118>)
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d162      	bne.n	8009554 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800948e:	4b36      	ldr	r3, [pc, #216]	; (8009568 <xTaskResumeAll+0x11c>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d05e      	beq.n	8009554 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009496:	e02f      	b.n	80094f8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009498:	4b34      	ldr	r3, [pc, #208]	; (800956c <xTaskResumeAll+0x120>)
 800949a:	68db      	ldr	r3, [r3, #12]
 800949c:	68db      	ldr	r3, [r3, #12]
 800949e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	3318      	adds	r3, #24
 80094a4:	4618      	mov	r0, r3
 80094a6:	f7fe fe61 	bl	800816c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3304      	adds	r3, #4
 80094ae:	4618      	mov	r0, r3
 80094b0:	f7fe fe5c 	bl	800816c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094b8:	4b2d      	ldr	r3, [pc, #180]	; (8009570 <xTaskResumeAll+0x124>)
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	429a      	cmp	r2, r3
 80094be:	d903      	bls.n	80094c8 <xTaskResumeAll+0x7c>
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094c4:	4a2a      	ldr	r2, [pc, #168]	; (8009570 <xTaskResumeAll+0x124>)
 80094c6:	6013      	str	r3, [r2, #0]
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094cc:	4613      	mov	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	4413      	add	r3, r2
 80094d2:	009b      	lsls	r3, r3, #2
 80094d4:	4a27      	ldr	r2, [pc, #156]	; (8009574 <xTaskResumeAll+0x128>)
 80094d6:	441a      	add	r2, r3
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	3304      	adds	r3, #4
 80094dc:	4619      	mov	r1, r3
 80094de:	4610      	mov	r0, r2
 80094e0:	f7fe fde7 	bl	80080b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094e8:	4b23      	ldr	r3, [pc, #140]	; (8009578 <xTaskResumeAll+0x12c>)
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d302      	bcc.n	80094f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80094f2:	4b22      	ldr	r3, [pc, #136]	; (800957c <xTaskResumeAll+0x130>)
 80094f4:	2201      	movs	r2, #1
 80094f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094f8:	4b1c      	ldr	r3, [pc, #112]	; (800956c <xTaskResumeAll+0x120>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1cb      	bne.n	8009498 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	2b00      	cmp	r3, #0
 8009504:	d001      	beq.n	800950a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009506:	f000 fb7b 	bl	8009c00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800950a:	4b1d      	ldr	r3, [pc, #116]	; (8009580 <xTaskResumeAll+0x134>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2b00      	cmp	r3, #0
 8009514:	d010      	beq.n	8009538 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009516:	f000 f847 	bl	80095a8 <xTaskIncrementTick>
 800951a:	4603      	mov	r3, r0
 800951c:	2b00      	cmp	r3, #0
 800951e:	d002      	beq.n	8009526 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009520:	4b16      	ldr	r3, [pc, #88]	; (800957c <xTaskResumeAll+0x130>)
 8009522:	2201      	movs	r2, #1
 8009524:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	3b01      	subs	r3, #1
 800952a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	2b00      	cmp	r3, #0
 8009530:	d1f1      	bne.n	8009516 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009532:	4b13      	ldr	r3, [pc, #76]	; (8009580 <xTaskResumeAll+0x134>)
 8009534:	2200      	movs	r2, #0
 8009536:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009538:	4b10      	ldr	r3, [pc, #64]	; (800957c <xTaskResumeAll+0x130>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d009      	beq.n	8009554 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009540:	2301      	movs	r3, #1
 8009542:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009544:	4b0f      	ldr	r3, [pc, #60]	; (8009584 <xTaskResumeAll+0x138>)
 8009546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800954a:	601a      	str	r2, [r3, #0]
 800954c:	f3bf 8f4f 	dsb	sy
 8009550:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009554:	f001 f9fe 	bl	800a954 <vPortExitCritical>

	return xAlreadyYielded;
 8009558:	68bb      	ldr	r3, [r7, #8]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3710      	adds	r7, #16
 800955e:	46bd      	mov	sp, r7
 8009560:	bd80      	pop	{r7, pc}
 8009562:	bf00      	nop
 8009564:	20002e8c 	.word	0x20002e8c
 8009568:	20002e64 	.word	0x20002e64
 800956c:	20002e24 	.word	0x20002e24
 8009570:	20002e6c 	.word	0x20002e6c
 8009574:	20002994 	.word	0x20002994
 8009578:	20002990 	.word	0x20002990
 800957c:	20002e78 	.word	0x20002e78
 8009580:	20002e74 	.word	0x20002e74
 8009584:	e000ed04 	.word	0xe000ed04

08009588 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800958e:	4b05      	ldr	r3, [pc, #20]	; (80095a4 <xTaskGetTickCount+0x1c>)
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009594:	687b      	ldr	r3, [r7, #4]
}
 8009596:	4618      	mov	r0, r3
 8009598:	370c      	adds	r7, #12
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	20002e68 	.word	0x20002e68

080095a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b086      	sub	sp, #24
 80095ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80095ae:	2300      	movs	r3, #0
 80095b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b2:	4b4f      	ldr	r3, [pc, #316]	; (80096f0 <xTaskIncrementTick+0x148>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f040 808f 	bne.w	80096da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80095bc:	4b4d      	ldr	r3, [pc, #308]	; (80096f4 <xTaskIncrementTick+0x14c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	3301      	adds	r3, #1
 80095c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80095c4:	4a4b      	ldr	r2, [pc, #300]	; (80096f4 <xTaskIncrementTick+0x14c>)
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d120      	bne.n	8009612 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80095d0:	4b49      	ldr	r3, [pc, #292]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d00a      	beq.n	80095f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	603b      	str	r3, [r7, #0]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <xTaskIncrementTick+0x46>
 80095f0:	4b41      	ldr	r3, [pc, #260]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	60fb      	str	r3, [r7, #12]
 80095f6:	4b41      	ldr	r3, [pc, #260]	; (80096fc <xTaskIncrementTick+0x154>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	4a3f      	ldr	r2, [pc, #252]	; (80096f8 <xTaskIncrementTick+0x150>)
 80095fc:	6013      	str	r3, [r2, #0]
 80095fe:	4a3f      	ldr	r2, [pc, #252]	; (80096fc <xTaskIncrementTick+0x154>)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6013      	str	r3, [r2, #0]
 8009604:	4b3e      	ldr	r3, [pc, #248]	; (8009700 <xTaskIncrementTick+0x158>)
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	3301      	adds	r3, #1
 800960a:	4a3d      	ldr	r2, [pc, #244]	; (8009700 <xTaskIncrementTick+0x158>)
 800960c:	6013      	str	r3, [r2, #0]
 800960e:	f000 faf7 	bl	8009c00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009612:	4b3c      	ldr	r3, [pc, #240]	; (8009704 <xTaskIncrementTick+0x15c>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	429a      	cmp	r2, r3
 800961a:	d349      	bcc.n	80096b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800961c:	4b36      	ldr	r3, [pc, #216]	; (80096f8 <xTaskIncrementTick+0x150>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d104      	bne.n	8009630 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	4b37      	ldr	r3, [pc, #220]	; (8009704 <xTaskIncrementTick+0x15c>)
 8009628:	f04f 32ff 	mov.w	r2, #4294967295
 800962c:	601a      	str	r2, [r3, #0]
					break;
 800962e:	e03f      	b.n	80096b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009630:	4b31      	ldr	r3, [pc, #196]	; (80096f8 <xTaskIncrementTick+0x150>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	68db      	ldr	r3, [r3, #12]
 8009636:	68db      	ldr	r3, [r3, #12]
 8009638:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	685b      	ldr	r3, [r3, #4]
 800963e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009640:	693a      	ldr	r2, [r7, #16]
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	429a      	cmp	r2, r3
 8009646:	d203      	bcs.n	8009650 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009648:	4a2e      	ldr	r2, [pc, #184]	; (8009704 <xTaskIncrementTick+0x15c>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800964e:	e02f      	b.n	80096b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009650:	68bb      	ldr	r3, [r7, #8]
 8009652:	3304      	adds	r3, #4
 8009654:	4618      	mov	r0, r3
 8009656:	f7fe fd89 	bl	800816c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800965e:	2b00      	cmp	r3, #0
 8009660:	d004      	beq.n	800966c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009662:	68bb      	ldr	r3, [r7, #8]
 8009664:	3318      	adds	r3, #24
 8009666:	4618      	mov	r0, r3
 8009668:	f7fe fd80 	bl	800816c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009670:	4b25      	ldr	r3, [pc, #148]	; (8009708 <xTaskIncrementTick+0x160>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	429a      	cmp	r2, r3
 8009676:	d903      	bls.n	8009680 <xTaskIncrementTick+0xd8>
 8009678:	68bb      	ldr	r3, [r7, #8]
 800967a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800967c:	4a22      	ldr	r2, [pc, #136]	; (8009708 <xTaskIncrementTick+0x160>)
 800967e:	6013      	str	r3, [r2, #0]
 8009680:	68bb      	ldr	r3, [r7, #8]
 8009682:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009684:	4613      	mov	r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	4413      	add	r3, r2
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4a1f      	ldr	r2, [pc, #124]	; (800970c <xTaskIncrementTick+0x164>)
 800968e:	441a      	add	r2, r3
 8009690:	68bb      	ldr	r3, [r7, #8]
 8009692:	3304      	adds	r3, #4
 8009694:	4619      	mov	r1, r3
 8009696:	4610      	mov	r0, r2
 8009698:	f7fe fd0b 	bl	80080b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800969c:	68bb      	ldr	r3, [r7, #8]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	4b1b      	ldr	r3, [pc, #108]	; (8009710 <xTaskIncrementTick+0x168>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096a6:	429a      	cmp	r2, r3
 80096a8:	d3b8      	bcc.n	800961c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80096aa:	2301      	movs	r3, #1
 80096ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80096ae:	e7b5      	b.n	800961c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80096b0:	4b17      	ldr	r3, [pc, #92]	; (8009710 <xTaskIncrementTick+0x168>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b6:	4915      	ldr	r1, [pc, #84]	; (800970c <xTaskIncrementTick+0x164>)
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	440b      	add	r3, r1
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	2b01      	cmp	r3, #1
 80096c6:	d901      	bls.n	80096cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80096c8:	2301      	movs	r3, #1
 80096ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80096cc:	4b11      	ldr	r3, [pc, #68]	; (8009714 <xTaskIncrementTick+0x16c>)
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d007      	beq.n	80096e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	e004      	b.n	80096e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80096da:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <xTaskIncrementTick+0x170>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	3301      	adds	r3, #1
 80096e0:	4a0d      	ldr	r2, [pc, #52]	; (8009718 <xTaskIncrementTick+0x170>)
 80096e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80096e4:	697b      	ldr	r3, [r7, #20]
}
 80096e6:	4618      	mov	r0, r3
 80096e8:	3718      	adds	r7, #24
 80096ea:	46bd      	mov	sp, r7
 80096ec:	bd80      	pop	{r7, pc}
 80096ee:	bf00      	nop
 80096f0:	20002e8c 	.word	0x20002e8c
 80096f4:	20002e68 	.word	0x20002e68
 80096f8:	20002e1c 	.word	0x20002e1c
 80096fc:	20002e20 	.word	0x20002e20
 8009700:	20002e7c 	.word	0x20002e7c
 8009704:	20002e84 	.word	0x20002e84
 8009708:	20002e6c 	.word	0x20002e6c
 800970c:	20002994 	.word	0x20002994
 8009710:	20002990 	.word	0x20002990
 8009714:	20002e78 	.word	0x20002e78
 8009718:	20002e74 	.word	0x20002e74

0800971c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800971c:	b580      	push	{r7, lr}
 800971e:	b084      	sub	sp, #16
 8009720:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009722:	4b36      	ldr	r3, [pc, #216]	; (80097fc <vTaskSwitchContext+0xe0>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d003      	beq.n	8009732 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800972a:	4b35      	ldr	r3, [pc, #212]	; (8009800 <vTaskSwitchContext+0xe4>)
 800972c:	2201      	movs	r2, #1
 800972e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009730:	e05f      	b.n	80097f2 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8009732:	4b33      	ldr	r3, [pc, #204]	; (8009800 <vTaskSwitchContext+0xe4>)
 8009734:	2200      	movs	r2, #0
 8009736:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8009738:	f7f7 fb15 	bl	8000d66 <getRunTimeCounterValue>
 800973c:	4603      	mov	r3, r0
 800973e:	4a31      	ldr	r2, [pc, #196]	; (8009804 <vTaskSwitchContext+0xe8>)
 8009740:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8009742:	4b30      	ldr	r3, [pc, #192]	; (8009804 <vTaskSwitchContext+0xe8>)
 8009744:	681a      	ldr	r2, [r3, #0]
 8009746:	4b30      	ldr	r3, [pc, #192]	; (8009808 <vTaskSwitchContext+0xec>)
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d909      	bls.n	8009762 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 800974e:	4b2f      	ldr	r3, [pc, #188]	; (800980c <vTaskSwitchContext+0xf0>)
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009754:	4a2b      	ldr	r2, [pc, #172]	; (8009804 <vTaskSwitchContext+0xe8>)
 8009756:	6810      	ldr	r0, [r2, #0]
 8009758:	4a2b      	ldr	r2, [pc, #172]	; (8009808 <vTaskSwitchContext+0xec>)
 800975a:	6812      	ldr	r2, [r2, #0]
 800975c:	1a82      	subs	r2, r0, r2
 800975e:	440a      	add	r2, r1
 8009760:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8009762:	4b28      	ldr	r3, [pc, #160]	; (8009804 <vTaskSwitchContext+0xe8>)
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	4a28      	ldr	r2, [pc, #160]	; (8009808 <vTaskSwitchContext+0xec>)
 8009768:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800976a:	4b29      	ldr	r3, [pc, #164]	; (8009810 <vTaskSwitchContext+0xf4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	60fb      	str	r3, [r7, #12]
 8009770:	e010      	b.n	8009794 <vTaskSwitchContext+0x78>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d10a      	bne.n	800978e <vTaskSwitchContext+0x72>
	__asm volatile
 8009778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977c:	f383 8811 	msr	BASEPRI, r3
 8009780:	f3bf 8f6f 	isb	sy
 8009784:	f3bf 8f4f 	dsb	sy
 8009788:	607b      	str	r3, [r7, #4]
}
 800978a:	bf00      	nop
 800978c:	e7fe      	b.n	800978c <vTaskSwitchContext+0x70>
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	3b01      	subs	r3, #1
 8009792:	60fb      	str	r3, [r7, #12]
 8009794:	491f      	ldr	r1, [pc, #124]	; (8009814 <vTaskSwitchContext+0xf8>)
 8009796:	68fa      	ldr	r2, [r7, #12]
 8009798:	4613      	mov	r3, r2
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	009b      	lsls	r3, r3, #2
 80097a0:	440b      	add	r3, r1
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d0e4      	beq.n	8009772 <vTaskSwitchContext+0x56>
 80097a8:	68fa      	ldr	r2, [r7, #12]
 80097aa:	4613      	mov	r3, r2
 80097ac:	009b      	lsls	r3, r3, #2
 80097ae:	4413      	add	r3, r2
 80097b0:	009b      	lsls	r3, r3, #2
 80097b2:	4a18      	ldr	r2, [pc, #96]	; (8009814 <vTaskSwitchContext+0xf8>)
 80097b4:	4413      	add	r3, r2
 80097b6:	60bb      	str	r3, [r7, #8]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	685b      	ldr	r3, [r3, #4]
 80097bc:	685a      	ldr	r2, [r3, #4]
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	605a      	str	r2, [r3, #4]
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	685a      	ldr	r2, [r3, #4]
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3308      	adds	r3, #8
 80097ca:	429a      	cmp	r2, r3
 80097cc:	d104      	bne.n	80097d8 <vTaskSwitchContext+0xbc>
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	685a      	ldr	r2, [r3, #4]
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	605a      	str	r2, [r3, #4]
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	68db      	ldr	r3, [r3, #12]
 80097de:	4a0b      	ldr	r2, [pc, #44]	; (800980c <vTaskSwitchContext+0xf0>)
 80097e0:	6013      	str	r3, [r2, #0]
 80097e2:	4a0b      	ldr	r2, [pc, #44]	; (8009810 <vTaskSwitchContext+0xf4>)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80097e8:	4b08      	ldr	r3, [pc, #32]	; (800980c <vTaskSwitchContext+0xf0>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	3358      	adds	r3, #88	; 0x58
 80097ee:	4a0a      	ldr	r2, [pc, #40]	; (8009818 <vTaskSwitchContext+0xfc>)
 80097f0:	6013      	str	r3, [r2, #0]
}
 80097f2:	bf00      	nop
 80097f4:	3710      	adds	r7, #16
 80097f6:	46bd      	mov	sp, r7
 80097f8:	bd80      	pop	{r7, pc}
 80097fa:	bf00      	nop
 80097fc:	20002e8c 	.word	0x20002e8c
 8009800:	20002e78 	.word	0x20002e78
 8009804:	20002e94 	.word	0x20002e94
 8009808:	20002e90 	.word	0x20002e90
 800980c:	20002990 	.word	0x20002990
 8009810:	20002e6c 	.word	0x20002e6c
 8009814:	20002994 	.word	0x20002994
 8009818:	2000007c 	.word	0x2000007c

0800981c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800981c:	b580      	push	{r7, lr}
 800981e:	b084      	sub	sp, #16
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
 8009824:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d10a      	bne.n	8009842 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800982c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009830:	f383 8811 	msr	BASEPRI, r3
 8009834:	f3bf 8f6f 	isb	sy
 8009838:	f3bf 8f4f 	dsb	sy
 800983c:	60fb      	str	r3, [r7, #12]
}
 800983e:	bf00      	nop
 8009840:	e7fe      	b.n	8009840 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009842:	4b07      	ldr	r3, [pc, #28]	; (8009860 <vTaskPlaceOnEventList+0x44>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	3318      	adds	r3, #24
 8009848:	4619      	mov	r1, r3
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f7fe fc55 	bl	80080fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009850:	2101      	movs	r1, #1
 8009852:	6838      	ldr	r0, [r7, #0]
 8009854:	f000 fb7e 	bl	8009f54 <prvAddCurrentTaskToDelayedList>
}
 8009858:	bf00      	nop
 800985a:	3710      	adds	r7, #16
 800985c:	46bd      	mov	sp, r7
 800985e:	bd80      	pop	{r7, pc}
 8009860:	20002990 	.word	0x20002990

08009864 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009864:	b580      	push	{r7, lr}
 8009866:	b086      	sub	sp, #24
 8009868:	af00      	add	r7, sp, #0
 800986a:	60f8      	str	r0, [r7, #12]
 800986c:	60b9      	str	r1, [r7, #8]
 800986e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d10a      	bne.n	800988c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	617b      	str	r3, [r7, #20]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800988c:	4b0a      	ldr	r3, [pc, #40]	; (80098b8 <vTaskPlaceOnEventListRestricted+0x54>)
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	3318      	adds	r3, #24
 8009892:	4619      	mov	r1, r3
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f7fe fc0c 	bl	80080b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d002      	beq.n	80098a6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80098a0:	f04f 33ff 	mov.w	r3, #4294967295
 80098a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80098a6:	6879      	ldr	r1, [r7, #4]
 80098a8:	68b8      	ldr	r0, [r7, #8]
 80098aa:	f000 fb53 	bl	8009f54 <prvAddCurrentTaskToDelayedList>
	}
 80098ae:	bf00      	nop
 80098b0:	3718      	adds	r7, #24
 80098b2:	46bd      	mov	sp, r7
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	bf00      	nop
 80098b8:	20002990 	.word	0x20002990

080098bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b086      	sub	sp, #24
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d10a      	bne.n	80098e8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80098d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098d6:	f383 8811 	msr	BASEPRI, r3
 80098da:	f3bf 8f6f 	isb	sy
 80098de:	f3bf 8f4f 	dsb	sy
 80098e2:	60fb      	str	r3, [r7, #12]
}
 80098e4:	bf00      	nop
 80098e6:	e7fe      	b.n	80098e6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	3318      	adds	r3, #24
 80098ec:	4618      	mov	r0, r3
 80098ee:	f7fe fc3d 	bl	800816c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80098f2:	4b1e      	ldr	r3, [pc, #120]	; (800996c <xTaskRemoveFromEventList+0xb0>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d11d      	bne.n	8009936 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	3304      	adds	r3, #4
 80098fe:	4618      	mov	r0, r3
 8009900:	f7fe fc34 	bl	800816c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009904:	693b      	ldr	r3, [r7, #16]
 8009906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009908:	4b19      	ldr	r3, [pc, #100]	; (8009970 <xTaskRemoveFromEventList+0xb4>)
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	429a      	cmp	r2, r3
 800990e:	d903      	bls.n	8009918 <xTaskRemoveFromEventList+0x5c>
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009914:	4a16      	ldr	r2, [pc, #88]	; (8009970 <xTaskRemoveFromEventList+0xb4>)
 8009916:	6013      	str	r3, [r2, #0]
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800991c:	4613      	mov	r3, r2
 800991e:	009b      	lsls	r3, r3, #2
 8009920:	4413      	add	r3, r2
 8009922:	009b      	lsls	r3, r3, #2
 8009924:	4a13      	ldr	r2, [pc, #76]	; (8009974 <xTaskRemoveFromEventList+0xb8>)
 8009926:	441a      	add	r2, r3
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	3304      	adds	r3, #4
 800992c:	4619      	mov	r1, r3
 800992e:	4610      	mov	r0, r2
 8009930:	f7fe fbbf 	bl	80080b2 <vListInsertEnd>
 8009934:	e005      	b.n	8009942 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009936:	693b      	ldr	r3, [r7, #16]
 8009938:	3318      	adds	r3, #24
 800993a:	4619      	mov	r1, r3
 800993c:	480e      	ldr	r0, [pc, #56]	; (8009978 <xTaskRemoveFromEventList+0xbc>)
 800993e:	f7fe fbb8 	bl	80080b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009942:	693b      	ldr	r3, [r7, #16]
 8009944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009946:	4b0d      	ldr	r3, [pc, #52]	; (800997c <xTaskRemoveFromEventList+0xc0>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800994c:	429a      	cmp	r2, r3
 800994e:	d905      	bls.n	800995c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009950:	2301      	movs	r3, #1
 8009952:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009954:	4b0a      	ldr	r3, [pc, #40]	; (8009980 <xTaskRemoveFromEventList+0xc4>)
 8009956:	2201      	movs	r2, #1
 8009958:	601a      	str	r2, [r3, #0]
 800995a:	e001      	b.n	8009960 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800995c:	2300      	movs	r3, #0
 800995e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009960:	697b      	ldr	r3, [r7, #20]
}
 8009962:	4618      	mov	r0, r3
 8009964:	3718      	adds	r7, #24
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	bf00      	nop
 800996c:	20002e8c 	.word	0x20002e8c
 8009970:	20002e6c 	.word	0x20002e6c
 8009974:	20002994 	.word	0x20002994
 8009978:	20002e24 	.word	0x20002e24
 800997c:	20002990 	.word	0x20002990
 8009980:	20002e78 	.word	0x20002e78

08009984 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009984:	b480      	push	{r7}
 8009986:	b083      	sub	sp, #12
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800998c:	4b06      	ldr	r3, [pc, #24]	; (80099a8 <vTaskInternalSetTimeOutState+0x24>)
 800998e:	681a      	ldr	r2, [r3, #0]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009994:	4b05      	ldr	r3, [pc, #20]	; (80099ac <vTaskInternalSetTimeOutState+0x28>)
 8009996:	681a      	ldr	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	605a      	str	r2, [r3, #4]
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr
 80099a8:	20002e7c 	.word	0x20002e7c
 80099ac:	20002e68 	.word	0x20002e68

080099b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b088      	sub	sp, #32
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d10a      	bne.n	80099d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80099c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099c4:	f383 8811 	msr	BASEPRI, r3
 80099c8:	f3bf 8f6f 	isb	sy
 80099cc:	f3bf 8f4f 	dsb	sy
 80099d0:	613b      	str	r3, [r7, #16]
}
 80099d2:	bf00      	nop
 80099d4:	e7fe      	b.n	80099d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80099d6:	683b      	ldr	r3, [r7, #0]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d10a      	bne.n	80099f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80099dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e0:	f383 8811 	msr	BASEPRI, r3
 80099e4:	f3bf 8f6f 	isb	sy
 80099e8:	f3bf 8f4f 	dsb	sy
 80099ec:	60fb      	str	r3, [r7, #12]
}
 80099ee:	bf00      	nop
 80099f0:	e7fe      	b.n	80099f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80099f2:	f000 ff7f 	bl	800a8f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80099f6:	4b1d      	ldr	r3, [pc, #116]	; (8009a6c <xTaskCheckForTimeOut+0xbc>)
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	69ba      	ldr	r2, [r7, #24]
 8009a02:	1ad3      	subs	r3, r2, r3
 8009a04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0e:	d102      	bne.n	8009a16 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009a10:	2300      	movs	r3, #0
 8009a12:	61fb      	str	r3, [r7, #28]
 8009a14:	e023      	b.n	8009a5e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b15      	ldr	r3, [pc, #84]	; (8009a70 <xTaskCheckForTimeOut+0xc0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d007      	beq.n	8009a32 <xTaskCheckForTimeOut+0x82>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	69ba      	ldr	r2, [r7, #24]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d302      	bcc.n	8009a32 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009a2c:	2301      	movs	r3, #1
 8009a2e:	61fb      	str	r3, [r7, #28]
 8009a30:	e015      	b.n	8009a5e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	697a      	ldr	r2, [r7, #20]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d20b      	bcs.n	8009a54 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009a3c:	683b      	ldr	r3, [r7, #0]
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff ff9b 	bl	8009984 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	61fb      	str	r3, [r7, #28]
 8009a52:	e004      	b.n	8009a5e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	2200      	movs	r2, #0
 8009a58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009a5e:	f000 ff79 	bl	800a954 <vPortExitCritical>

	return xReturn;
 8009a62:	69fb      	ldr	r3, [r7, #28]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3720      	adds	r7, #32
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20002e68 	.word	0x20002e68
 8009a70:	20002e7c 	.word	0x20002e7c

08009a74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009a74:	b480      	push	{r7}
 8009a76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009a78:	4b03      	ldr	r3, [pc, #12]	; (8009a88 <vTaskMissedYield+0x14>)
 8009a7a:	2201      	movs	r2, #1
 8009a7c:	601a      	str	r2, [r3, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	20002e78 	.word	0x20002e78

08009a8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b082      	sub	sp, #8
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a94:	f000 f852 	bl	8009b3c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a98:	4b06      	ldr	r3, [pc, #24]	; (8009ab4 <prvIdleTask+0x28>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	2b01      	cmp	r3, #1
 8009a9e:	d9f9      	bls.n	8009a94 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009aa0:	4b05      	ldr	r3, [pc, #20]	; (8009ab8 <prvIdleTask+0x2c>)
 8009aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	f3bf 8f4f 	dsb	sy
 8009aac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009ab0:	e7f0      	b.n	8009a94 <prvIdleTask+0x8>
 8009ab2:	bf00      	nop
 8009ab4:	20002994 	.word	0x20002994
 8009ab8:	e000ed04 	.word	0xe000ed04

08009abc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	607b      	str	r3, [r7, #4]
 8009ac6:	e00c      	b.n	8009ae2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009ac8:	687a      	ldr	r2, [r7, #4]
 8009aca:	4613      	mov	r3, r2
 8009acc:	009b      	lsls	r3, r3, #2
 8009ace:	4413      	add	r3, r2
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	4a12      	ldr	r2, [pc, #72]	; (8009b1c <prvInitialiseTaskLists+0x60>)
 8009ad4:	4413      	add	r3, r2
 8009ad6:	4618      	mov	r0, r3
 8009ad8:	f7fe fabe 	bl	8008058 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	607b      	str	r3, [r7, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	2b37      	cmp	r3, #55	; 0x37
 8009ae6:	d9ef      	bls.n	8009ac8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009ae8:	480d      	ldr	r0, [pc, #52]	; (8009b20 <prvInitialiseTaskLists+0x64>)
 8009aea:	f7fe fab5 	bl	8008058 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009aee:	480d      	ldr	r0, [pc, #52]	; (8009b24 <prvInitialiseTaskLists+0x68>)
 8009af0:	f7fe fab2 	bl	8008058 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009af4:	480c      	ldr	r0, [pc, #48]	; (8009b28 <prvInitialiseTaskLists+0x6c>)
 8009af6:	f7fe faaf 	bl	8008058 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009afa:	480c      	ldr	r0, [pc, #48]	; (8009b2c <prvInitialiseTaskLists+0x70>)
 8009afc:	f7fe faac 	bl	8008058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009b00:	480b      	ldr	r0, [pc, #44]	; (8009b30 <prvInitialiseTaskLists+0x74>)
 8009b02:	f7fe faa9 	bl	8008058 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009b06:	4b0b      	ldr	r3, [pc, #44]	; (8009b34 <prvInitialiseTaskLists+0x78>)
 8009b08:	4a05      	ldr	r2, [pc, #20]	; (8009b20 <prvInitialiseTaskLists+0x64>)
 8009b0a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <prvInitialiseTaskLists+0x7c>)
 8009b0e:	4a05      	ldr	r2, [pc, #20]	; (8009b24 <prvInitialiseTaskLists+0x68>)
 8009b10:	601a      	str	r2, [r3, #0]
}
 8009b12:	bf00      	nop
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	20002994 	.word	0x20002994
 8009b20:	20002df4 	.word	0x20002df4
 8009b24:	20002e08 	.word	0x20002e08
 8009b28:	20002e24 	.word	0x20002e24
 8009b2c:	20002e38 	.word	0x20002e38
 8009b30:	20002e50 	.word	0x20002e50
 8009b34:	20002e1c 	.word	0x20002e1c
 8009b38:	20002e20 	.word	0x20002e20

08009b3c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b082      	sub	sp, #8
 8009b40:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b42:	e019      	b.n	8009b78 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009b44:	f000 fed6 	bl	800a8f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b48:	4b10      	ldr	r3, [pc, #64]	; (8009b8c <prvCheckTasksWaitingTermination+0x50>)
 8009b4a:	68db      	ldr	r3, [r3, #12]
 8009b4c:	68db      	ldr	r3, [r3, #12]
 8009b4e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
 8009b54:	4618      	mov	r0, r3
 8009b56:	f7fe fb09 	bl	800816c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009b5a:	4b0d      	ldr	r3, [pc, #52]	; (8009b90 <prvCheckTasksWaitingTermination+0x54>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	3b01      	subs	r3, #1
 8009b60:	4a0b      	ldr	r2, [pc, #44]	; (8009b90 <prvCheckTasksWaitingTermination+0x54>)
 8009b62:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009b64:	4b0b      	ldr	r3, [pc, #44]	; (8009b94 <prvCheckTasksWaitingTermination+0x58>)
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	4a0a      	ldr	r2, [pc, #40]	; (8009b94 <prvCheckTasksWaitingTermination+0x58>)
 8009b6c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009b6e:	f000 fef1 	bl	800a954 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 f810 	bl	8009b98 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009b78:	4b06      	ldr	r3, [pc, #24]	; (8009b94 <prvCheckTasksWaitingTermination+0x58>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d1e1      	bne.n	8009b44 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009b80:	bf00      	nop
 8009b82:	bf00      	nop
 8009b84:	3708      	adds	r7, #8
 8009b86:	46bd      	mov	sp, r7
 8009b88:	bd80      	pop	{r7, pc}
 8009b8a:	bf00      	nop
 8009b8c:	20002e38 	.word	0x20002e38
 8009b90:	20002e64 	.word	0x20002e64
 8009b94:	20002e4c 	.word	0x20002e4c

08009b98 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	3358      	adds	r3, #88	; 0x58
 8009ba4:	4618      	mov	r0, r3
 8009ba6:	f001 f9f3 	bl	800af90 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d108      	bne.n	8009bc6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bb8:	4618      	mov	r0, r3
 8009bba:	f001 f889 	bl	800acd0 <vPortFree>
				vPortFree( pxTCB );
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f001 f886 	bl	800acd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009bc4:	e018      	b.n	8009bf8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009bcc:	2b01      	cmp	r3, #1
 8009bce:	d103      	bne.n	8009bd8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f87d 	bl	800acd0 <vPortFree>
	}
 8009bd6:	e00f      	b.n	8009bf8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8009bde:	2b02      	cmp	r3, #2
 8009be0:	d00a      	beq.n	8009bf8 <prvDeleteTCB+0x60>
	__asm volatile
 8009be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be6:	f383 8811 	msr	BASEPRI, r3
 8009bea:	f3bf 8f6f 	isb	sy
 8009bee:	f3bf 8f4f 	dsb	sy
 8009bf2:	60fb      	str	r3, [r7, #12]
}
 8009bf4:	bf00      	nop
 8009bf6:	e7fe      	b.n	8009bf6 <prvDeleteTCB+0x5e>
	}
 8009bf8:	bf00      	nop
 8009bfa:	3710      	adds	r7, #16
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	bd80      	pop	{r7, pc}

08009c00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009c00:	b480      	push	{r7}
 8009c02:	b083      	sub	sp, #12
 8009c04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009c06:	4b0c      	ldr	r3, [pc, #48]	; (8009c38 <prvResetNextTaskUnblockTime+0x38>)
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d104      	bne.n	8009c1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009c10:	4b0a      	ldr	r3, [pc, #40]	; (8009c3c <prvResetNextTaskUnblockTime+0x3c>)
 8009c12:	f04f 32ff 	mov.w	r2, #4294967295
 8009c16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009c18:	e008      	b.n	8009c2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c1a:	4b07      	ldr	r3, [pc, #28]	; (8009c38 <prvResetNextTaskUnblockTime+0x38>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	68db      	ldr	r3, [r3, #12]
 8009c20:	68db      	ldr	r3, [r3, #12]
 8009c22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	685b      	ldr	r3, [r3, #4]
 8009c28:	4a04      	ldr	r2, [pc, #16]	; (8009c3c <prvResetNextTaskUnblockTime+0x3c>)
 8009c2a:	6013      	str	r3, [r2, #0]
}
 8009c2c:	bf00      	nop
 8009c2e:	370c      	adds	r7, #12
 8009c30:	46bd      	mov	sp, r7
 8009c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c36:	4770      	bx	lr
 8009c38:	20002e1c 	.word	0x20002e1c
 8009c3c:	20002e84 	.word	0x20002e84

08009c40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009c46:	4b0b      	ldr	r3, [pc, #44]	; (8009c74 <xTaskGetSchedulerState+0x34>)
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d102      	bne.n	8009c54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009c4e:	2301      	movs	r3, #1
 8009c50:	607b      	str	r3, [r7, #4]
 8009c52:	e008      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009c54:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <xTaskGetSchedulerState+0x38>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d102      	bne.n	8009c62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009c5c:	2302      	movs	r3, #2
 8009c5e:	607b      	str	r3, [r7, #4]
 8009c60:	e001      	b.n	8009c66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009c62:	2300      	movs	r3, #0
 8009c64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009c66:	687b      	ldr	r3, [r7, #4]
	}
 8009c68:	4618      	mov	r0, r3
 8009c6a:	370c      	adds	r7, #12
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c72:	4770      	bx	lr
 8009c74:	20002e70 	.word	0x20002e70
 8009c78:	20002e8c 	.word	0x20002e8c

08009c7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8009c7c:	b580      	push	{r7, lr}
 8009c7e:	b084      	sub	sp, #16
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d051      	beq.n	8009d36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009c92:	68bb      	ldr	r3, [r7, #8]
 8009c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009c96:	4b2a      	ldr	r3, [pc, #168]	; (8009d40 <xTaskPriorityInherit+0xc4>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d241      	bcs.n	8009d24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	699b      	ldr	r3, [r3, #24]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	db06      	blt.n	8009cb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ca8:	4b25      	ldr	r3, [pc, #148]	; (8009d40 <xTaskPriorityInherit+0xc4>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	6959      	ldr	r1, [r3, #20]
 8009cba:	68bb      	ldr	r3, [r7, #8]
 8009cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cbe:	4613      	mov	r3, r2
 8009cc0:	009b      	lsls	r3, r3, #2
 8009cc2:	4413      	add	r3, r2
 8009cc4:	009b      	lsls	r3, r3, #2
 8009cc6:	4a1f      	ldr	r2, [pc, #124]	; (8009d44 <xTaskPriorityInherit+0xc8>)
 8009cc8:	4413      	add	r3, r2
 8009cca:	4299      	cmp	r1, r3
 8009ccc:	d122      	bne.n	8009d14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	3304      	adds	r3, #4
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f7fe fa4a 	bl	800816c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009cd8:	4b19      	ldr	r3, [pc, #100]	; (8009d40 <xTaskPriorityInherit+0xc4>)
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cde:	68bb      	ldr	r3, [r7, #8]
 8009ce0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009ce2:	68bb      	ldr	r3, [r7, #8]
 8009ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ce6:	4b18      	ldr	r3, [pc, #96]	; (8009d48 <xTaskPriorityInherit+0xcc>)
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d903      	bls.n	8009cf6 <xTaskPriorityInherit+0x7a>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf2:	4a15      	ldr	r2, [pc, #84]	; (8009d48 <xTaskPriorityInherit+0xcc>)
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cfa:	4613      	mov	r3, r2
 8009cfc:	009b      	lsls	r3, r3, #2
 8009cfe:	4413      	add	r3, r2
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4a10      	ldr	r2, [pc, #64]	; (8009d44 <xTaskPriorityInherit+0xc8>)
 8009d04:	441a      	add	r2, r3
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fe f9d0 	bl	80080b2 <vListInsertEnd>
 8009d12:	e004      	b.n	8009d1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009d14:	4b0a      	ldr	r3, [pc, #40]	; (8009d40 <xTaskPriorityInherit+0xc4>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009d1e:	2301      	movs	r3, #1
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e008      	b.n	8009d36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009d24:	68bb      	ldr	r3, [r7, #8]
 8009d26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009d28:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <xTaskPriorityInherit+0xc4>)
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d201      	bcs.n	8009d36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009d32:	2301      	movs	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009d36:	68fb      	ldr	r3, [r7, #12]
	}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3710      	adds	r7, #16
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	20002990 	.word	0x20002990
 8009d44:	20002994 	.word	0x20002994
 8009d48:	20002e6c 	.word	0x20002e6c

08009d4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b086      	sub	sp, #24
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d056      	beq.n	8009e10 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009d62:	4b2e      	ldr	r3, [pc, #184]	; (8009e1c <xTaskPriorityDisinherit+0xd0>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	693a      	ldr	r2, [r7, #16]
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d00a      	beq.n	8009d82 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	60fb      	str	r3, [r7, #12]
}
 8009d7e:	bf00      	nop
 8009d80:	e7fe      	b.n	8009d80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009d82:	693b      	ldr	r3, [r7, #16]
 8009d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d10a      	bne.n	8009da0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d8e:	f383 8811 	msr	BASEPRI, r3
 8009d92:	f3bf 8f6f 	isb	sy
 8009d96:	f3bf 8f4f 	dsb	sy
 8009d9a:	60bb      	str	r3, [r7, #8]
}
 8009d9c:	bf00      	nop
 8009d9e:	e7fe      	b.n	8009d9e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009da0:	693b      	ldr	r3, [r7, #16]
 8009da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009da4:	1e5a      	subs	r2, r3, #1
 8009da6:	693b      	ldr	r3, [r7, #16]
 8009da8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d02c      	beq.n	8009e10 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009db6:	693b      	ldr	r3, [r7, #16]
 8009db8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d128      	bne.n	8009e10 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009dbe:	693b      	ldr	r3, [r7, #16]
 8009dc0:	3304      	adds	r3, #4
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	f7fe f9d2 	bl	800816c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009dc8:	693b      	ldr	r3, [r7, #16]
 8009dca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009ddc:	693b      	ldr	r3, [r7, #16]
 8009dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009de0:	4b0f      	ldr	r3, [pc, #60]	; (8009e20 <xTaskPriorityDisinherit+0xd4>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	429a      	cmp	r2, r3
 8009de6:	d903      	bls.n	8009df0 <xTaskPriorityDisinherit+0xa4>
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dec:	4a0c      	ldr	r2, [pc, #48]	; (8009e20 <xTaskPriorityDisinherit+0xd4>)
 8009dee:	6013      	str	r3, [r2, #0]
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009df4:	4613      	mov	r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	4413      	add	r3, r2
 8009dfa:	009b      	lsls	r3, r3, #2
 8009dfc:	4a09      	ldr	r2, [pc, #36]	; (8009e24 <xTaskPriorityDisinherit+0xd8>)
 8009dfe:	441a      	add	r2, r3
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	3304      	adds	r3, #4
 8009e04:	4619      	mov	r1, r3
 8009e06:	4610      	mov	r0, r2
 8009e08:	f7fe f953 	bl	80080b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009e10:	697b      	ldr	r3, [r7, #20]
	}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3718      	adds	r7, #24
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}
 8009e1a:	bf00      	nop
 8009e1c:	20002990 	.word	0x20002990
 8009e20:	20002e6c 	.word	0x20002e6c
 8009e24:	20002994 	.word	0x20002994

08009e28 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
 8009e30:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009e36:	2301      	movs	r3, #1
 8009e38:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d06a      	beq.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009e40:	69bb      	ldr	r3, [r7, #24]
 8009e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d10a      	bne.n	8009e5e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8009e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	60fb      	str	r3, [r7, #12]
}
 8009e5a:	bf00      	nop
 8009e5c:	e7fe      	b.n	8009e5c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009e5e:	69bb      	ldr	r3, [r7, #24]
 8009e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e62:	683a      	ldr	r2, [r7, #0]
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d902      	bls.n	8009e6e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	61fb      	str	r3, [r7, #28]
 8009e6c:	e002      	b.n	8009e74 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009e6e:	69bb      	ldr	r3, [r7, #24]
 8009e70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e72:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8009e74:	69bb      	ldr	r3, [r7, #24]
 8009e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	429a      	cmp	r2, r3
 8009e7c:	d04b      	beq.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009e7e:	69bb      	ldr	r3, [r7, #24]
 8009e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e82:	697a      	ldr	r2, [r7, #20]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d146      	bne.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009e88:	4b25      	ldr	r3, [pc, #148]	; (8009f20 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	69ba      	ldr	r2, [r7, #24]
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d10a      	bne.n	8009ea8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8009e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e96:	f383 8811 	msr	BASEPRI, r3
 8009e9a:	f3bf 8f6f 	isb	sy
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	60bb      	str	r3, [r7, #8]
}
 8009ea4:	bf00      	nop
 8009ea6:	e7fe      	b.n	8009ea6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eac:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8009eae:	69bb      	ldr	r3, [r7, #24]
 8009eb0:	69fa      	ldr	r2, [r7, #28]
 8009eb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009eb4:	69bb      	ldr	r3, [r7, #24]
 8009eb6:	699b      	ldr	r3, [r3, #24]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	db04      	blt.n	8009ec6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009ec2:	69bb      	ldr	r3, [r7, #24]
 8009ec4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	6959      	ldr	r1, [r3, #20]
 8009eca:	693a      	ldr	r2, [r7, #16]
 8009ecc:	4613      	mov	r3, r2
 8009ece:	009b      	lsls	r3, r3, #2
 8009ed0:	4413      	add	r3, r2
 8009ed2:	009b      	lsls	r3, r3, #2
 8009ed4:	4a13      	ldr	r2, [pc, #76]	; (8009f24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009ed6:	4413      	add	r3, r2
 8009ed8:	4299      	cmp	r1, r3
 8009eda:	d11c      	bne.n	8009f16 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	3304      	adds	r3, #4
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	f7fe f943 	bl	800816c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009ee6:	69bb      	ldr	r3, [r7, #24]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4b0f      	ldr	r3, [pc, #60]	; (8009f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d903      	bls.n	8009efa <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8009ef2:	69bb      	ldr	r3, [r7, #24]
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	4a0c      	ldr	r2, [pc, #48]	; (8009f28 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009ef8:	6013      	str	r3, [r2, #0]
 8009efa:	69bb      	ldr	r3, [r7, #24]
 8009efc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009efe:	4613      	mov	r3, r2
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	4413      	add	r3, r2
 8009f04:	009b      	lsls	r3, r3, #2
 8009f06:	4a07      	ldr	r2, [pc, #28]	; (8009f24 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8009f08:	441a      	add	r2, r3
 8009f0a:	69bb      	ldr	r3, [r7, #24]
 8009f0c:	3304      	adds	r3, #4
 8009f0e:	4619      	mov	r1, r3
 8009f10:	4610      	mov	r0, r2
 8009f12:	f7fe f8ce 	bl	80080b2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f16:	bf00      	nop
 8009f18:	3720      	adds	r7, #32
 8009f1a:	46bd      	mov	sp, r7
 8009f1c:	bd80      	pop	{r7, pc}
 8009f1e:	bf00      	nop
 8009f20:	20002990 	.word	0x20002990
 8009f24:	20002994 	.word	0x20002994
 8009f28:	20002e6c 	.word	0x20002e6c

08009f2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009f2c:	b480      	push	{r7}
 8009f2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009f30:	4b07      	ldr	r3, [pc, #28]	; (8009f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d004      	beq.n	8009f42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009f38:	4b05      	ldr	r3, [pc, #20]	; (8009f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009f3e:	3201      	adds	r2, #1
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009f42:	4b03      	ldr	r3, [pc, #12]	; (8009f50 <pvTaskIncrementMutexHeldCount+0x24>)
 8009f44:	681b      	ldr	r3, [r3, #0]
	}
 8009f46:	4618      	mov	r0, r3
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr
 8009f50:	20002990 	.word	0x20002990

08009f54 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b084      	sub	sp, #16
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009f5e:	4b21      	ldr	r3, [pc, #132]	; (8009fe4 <prvAddCurrentTaskToDelayedList+0x90>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009f64:	4b20      	ldr	r3, [pc, #128]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	3304      	adds	r3, #4
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f7fe f8fe 	bl	800816c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009f76:	d10a      	bne.n	8009f8e <prvAddCurrentTaskToDelayedList+0x3a>
 8009f78:	683b      	ldr	r3, [r7, #0]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d007      	beq.n	8009f8e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009f7e:	4b1a      	ldr	r3, [pc, #104]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	3304      	adds	r3, #4
 8009f84:	4619      	mov	r1, r3
 8009f86:	4819      	ldr	r0, [pc, #100]	; (8009fec <prvAddCurrentTaskToDelayedList+0x98>)
 8009f88:	f7fe f893 	bl	80080b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009f8c:	e026      	b.n	8009fdc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009f8e:	68fa      	ldr	r2, [r7, #12]
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	4413      	add	r3, r2
 8009f94:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009f96:	4b14      	ldr	r3, [pc, #80]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d209      	bcs.n	8009fba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fa6:	4b12      	ldr	r3, [pc, #72]	; (8009ff0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009fa8:	681a      	ldr	r2, [r3, #0]
 8009faa:	4b0f      	ldr	r3, [pc, #60]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	3304      	adds	r3, #4
 8009fb0:	4619      	mov	r1, r3
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	f7fe f8a1 	bl	80080fa <vListInsert>
}
 8009fb8:	e010      	b.n	8009fdc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009fba:	4b0e      	ldr	r3, [pc, #56]	; (8009ff4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009fbc:	681a      	ldr	r2, [r3, #0]
 8009fbe:	4b0a      	ldr	r3, [pc, #40]	; (8009fe8 <prvAddCurrentTaskToDelayedList+0x94>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	3304      	adds	r3, #4
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	4610      	mov	r0, r2
 8009fc8:	f7fe f897 	bl	80080fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009fcc:	4b0a      	ldr	r3, [pc, #40]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	429a      	cmp	r2, r3
 8009fd4:	d202      	bcs.n	8009fdc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009fd6:	4a08      	ldr	r2, [pc, #32]	; (8009ff8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009fd8:	68bb      	ldr	r3, [r7, #8]
 8009fda:	6013      	str	r3, [r2, #0]
}
 8009fdc:	bf00      	nop
 8009fde:	3710      	adds	r7, #16
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}
 8009fe4:	20002e68 	.word	0x20002e68
 8009fe8:	20002990 	.word	0x20002990
 8009fec:	20002e50 	.word	0x20002e50
 8009ff0:	20002e20 	.word	0x20002e20
 8009ff4:	20002e1c 	.word	0x20002e1c
 8009ff8:	20002e84 	.word	0x20002e84

08009ffc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b08a      	sub	sp, #40	; 0x28
 800a000:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a002:	2300      	movs	r3, #0
 800a004:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a006:	f000 fb07 	bl	800a618 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a00a:	4b1c      	ldr	r3, [pc, #112]	; (800a07c <xTimerCreateTimerTask+0x80>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d021      	beq.n	800a056 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a012:	2300      	movs	r3, #0
 800a014:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a016:	2300      	movs	r3, #0
 800a018:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a01a:	1d3a      	adds	r2, r7, #4
 800a01c:	f107 0108 	add.w	r1, r7, #8
 800a020:	f107 030c 	add.w	r3, r7, #12
 800a024:	4618      	mov	r0, r3
 800a026:	f7fd fffd 	bl	8008024 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a02a:	6879      	ldr	r1, [r7, #4]
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	68fa      	ldr	r2, [r7, #12]
 800a030:	9202      	str	r2, [sp, #8]
 800a032:	9301      	str	r3, [sp, #4]
 800a034:	2302      	movs	r3, #2
 800a036:	9300      	str	r3, [sp, #0]
 800a038:	2300      	movs	r3, #0
 800a03a:	460a      	mov	r2, r1
 800a03c:	4910      	ldr	r1, [pc, #64]	; (800a080 <xTimerCreateTimerTask+0x84>)
 800a03e:	4811      	ldr	r0, [pc, #68]	; (800a084 <xTimerCreateTimerTask+0x88>)
 800a040:	f7fe ff94 	bl	8008f6c <xTaskCreateStatic>
 800a044:	4603      	mov	r3, r0
 800a046:	4a10      	ldr	r2, [pc, #64]	; (800a088 <xTimerCreateTimerTask+0x8c>)
 800a048:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a04a:	4b0f      	ldr	r3, [pc, #60]	; (800a088 <xTimerCreateTimerTask+0x8c>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d001      	beq.n	800a056 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a052:	2301      	movs	r3, #1
 800a054:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a056:	697b      	ldr	r3, [r7, #20]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	613b      	str	r3, [r7, #16]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a072:	697b      	ldr	r3, [r7, #20]
}
 800a074:	4618      	mov	r0, r3
 800a076:	3718      	adds	r7, #24
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}
 800a07c:	20002ec8 	.word	0x20002ec8
 800a080:	0800ba88 	.word	0x0800ba88
 800a084:	0800a1c1 	.word	0x0800a1c1
 800a088:	20002ecc 	.word	0x20002ecc

0800a08c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b08a      	sub	sp, #40	; 0x28
 800a090:	af00      	add	r7, sp, #0
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
 800a098:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a09a:	2300      	movs	r3, #0
 800a09c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d10a      	bne.n	800a0ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800a0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0a8:	f383 8811 	msr	BASEPRI, r3
 800a0ac:	f3bf 8f6f 	isb	sy
 800a0b0:	f3bf 8f4f 	dsb	sy
 800a0b4:	623b      	str	r3, [r7, #32]
}
 800a0b6:	bf00      	nop
 800a0b8:	e7fe      	b.n	800a0b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a0ba:	4b1a      	ldr	r3, [pc, #104]	; (800a124 <xTimerGenericCommand+0x98>)
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d02a      	beq.n	800a118 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b05      	cmp	r3, #5
 800a0d2:	dc18      	bgt.n	800a106 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a0d4:	f7ff fdb4 	bl	8009c40 <xTaskGetSchedulerState>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	2b02      	cmp	r3, #2
 800a0dc:	d109      	bne.n	800a0f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a0de:	4b11      	ldr	r3, [pc, #68]	; (800a124 <xTimerGenericCommand+0x98>)
 800a0e0:	6818      	ldr	r0, [r3, #0]
 800a0e2:	f107 0110 	add.w	r1, r7, #16
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a0ea:	f7fe f9a7 	bl	800843c <xQueueGenericSend>
 800a0ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a0f0:	e012      	b.n	800a118 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a0f2:	4b0c      	ldr	r3, [pc, #48]	; (800a124 <xTimerGenericCommand+0x98>)
 800a0f4:	6818      	ldr	r0, [r3, #0]
 800a0f6:	f107 0110 	add.w	r1, r7, #16
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	2200      	movs	r2, #0
 800a0fe:	f7fe f99d 	bl	800843c <xQueueGenericSend>
 800a102:	6278      	str	r0, [r7, #36]	; 0x24
 800a104:	e008      	b.n	800a118 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a106:	4b07      	ldr	r3, [pc, #28]	; (800a124 <xTimerGenericCommand+0x98>)
 800a108:	6818      	ldr	r0, [r3, #0]
 800a10a:	f107 0110 	add.w	r1, r7, #16
 800a10e:	2300      	movs	r3, #0
 800a110:	683a      	ldr	r2, [r7, #0]
 800a112:	f7fe fa91 	bl	8008638 <xQueueGenericSendFromISR>
 800a116:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3728      	adds	r7, #40	; 0x28
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	20002ec8 	.word	0x20002ec8

0800a128 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b088      	sub	sp, #32
 800a12c:	af02      	add	r7, sp, #8
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a132:	4b22      	ldr	r3, [pc, #136]	; (800a1bc <prvProcessExpiredTimer+0x94>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a13c:	697b      	ldr	r3, [r7, #20]
 800a13e:	3304      	adds	r3, #4
 800a140:	4618      	mov	r0, r3
 800a142:	f7fe f813 	bl	800816c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a14c:	f003 0304 	and.w	r3, r3, #4
 800a150:	2b00      	cmp	r3, #0
 800a152:	d022      	beq.n	800a19a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a154:	697b      	ldr	r3, [r7, #20]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	18d1      	adds	r1, r2, r3
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	683a      	ldr	r2, [r7, #0]
 800a160:	6978      	ldr	r0, [r7, #20]
 800a162:	f000 f8d1 	bl	800a308 <prvInsertTimerInActiveList>
 800a166:	4603      	mov	r3, r0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d01f      	beq.n	800a1ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a16c:	2300      	movs	r3, #0
 800a16e:	9300      	str	r3, [sp, #0]
 800a170:	2300      	movs	r3, #0
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	2100      	movs	r1, #0
 800a176:	6978      	ldr	r0, [r7, #20]
 800a178:	f7ff ff88 	bl	800a08c <xTimerGenericCommand>
 800a17c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a17e:	693b      	ldr	r3, [r7, #16]
 800a180:	2b00      	cmp	r3, #0
 800a182:	d113      	bne.n	800a1ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a188:	f383 8811 	msr	BASEPRI, r3
 800a18c:	f3bf 8f6f 	isb	sy
 800a190:	f3bf 8f4f 	dsb	sy
 800a194:	60fb      	str	r3, [r7, #12]
}
 800a196:	bf00      	nop
 800a198:	e7fe      	b.n	800a198 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a19a:	697b      	ldr	r3, [r7, #20]
 800a19c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1a0:	f023 0301 	bic.w	r3, r3, #1
 800a1a4:	b2da      	uxtb	r2, r3
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ac:	697b      	ldr	r3, [r7, #20]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	6978      	ldr	r0, [r7, #20]
 800a1b2:	4798      	blx	r3
}
 800a1b4:	bf00      	nop
 800a1b6:	3718      	adds	r7, #24
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}
 800a1bc:	20002ec0 	.word	0x20002ec0

0800a1c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1c8:	f107 0308 	add.w	r3, r7, #8
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	f000 f857 	bl	800a280 <prvGetNextExpireTime>
 800a1d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a1d4:	68bb      	ldr	r3, [r7, #8]
 800a1d6:	4619      	mov	r1, r3
 800a1d8:	68f8      	ldr	r0, [r7, #12]
 800a1da:	f000 f803 	bl	800a1e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a1de:	f000 f8d5 	bl	800a38c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a1e2:	e7f1      	b.n	800a1c8 <prvTimerTask+0x8>

0800a1e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a1e4:	b580      	push	{r7, lr}
 800a1e6:	b084      	sub	sp, #16
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
 800a1ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a1ee:	f7ff f91f 	bl	8009430 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a1f2:	f107 0308 	add.w	r3, r7, #8
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	f000 f866 	bl	800a2c8 <prvSampleTimeNow>
 800a1fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d130      	bne.n	800a266 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d10a      	bne.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
 800a20a:	687a      	ldr	r2, [r7, #4]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	429a      	cmp	r2, r3
 800a210:	d806      	bhi.n	800a220 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a212:	f7ff f91b 	bl	800944c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a216:	68f9      	ldr	r1, [r7, #12]
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	f7ff ff85 	bl	800a128 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a21e:	e024      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	2b00      	cmp	r3, #0
 800a224:	d008      	beq.n	800a238 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a226:	4b13      	ldr	r3, [pc, #76]	; (800a274 <prvProcessTimerOrBlockTask+0x90>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d101      	bne.n	800a234 <prvProcessTimerOrBlockTask+0x50>
 800a230:	2301      	movs	r3, #1
 800a232:	e000      	b.n	800a236 <prvProcessTimerOrBlockTask+0x52>
 800a234:	2300      	movs	r3, #0
 800a236:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a238:	4b0f      	ldr	r3, [pc, #60]	; (800a278 <prvProcessTimerOrBlockTask+0x94>)
 800a23a:	6818      	ldr	r0, [r3, #0]
 800a23c:	687a      	ldr	r2, [r7, #4]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	683a      	ldr	r2, [r7, #0]
 800a244:	4619      	mov	r1, r3
 800a246:	f7fe fe5d 	bl	8008f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a24a:	f7ff f8ff 	bl	800944c <xTaskResumeAll>
 800a24e:	4603      	mov	r3, r0
 800a250:	2b00      	cmp	r3, #0
 800a252:	d10a      	bne.n	800a26a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a254:	4b09      	ldr	r3, [pc, #36]	; (800a27c <prvProcessTimerOrBlockTask+0x98>)
 800a256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a25a:	601a      	str	r2, [r3, #0]
 800a25c:	f3bf 8f4f 	dsb	sy
 800a260:	f3bf 8f6f 	isb	sy
}
 800a264:	e001      	b.n	800a26a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a266:	f7ff f8f1 	bl	800944c <xTaskResumeAll>
}
 800a26a:	bf00      	nop
 800a26c:	3710      	adds	r7, #16
 800a26e:	46bd      	mov	sp, r7
 800a270:	bd80      	pop	{r7, pc}
 800a272:	bf00      	nop
 800a274:	20002ec4 	.word	0x20002ec4
 800a278:	20002ec8 	.word	0x20002ec8
 800a27c:	e000ed04 	.word	0xe000ed04

0800a280 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a280:	b480      	push	{r7}
 800a282:	b085      	sub	sp, #20
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a288:	4b0e      	ldr	r3, [pc, #56]	; (800a2c4 <prvGetNextExpireTime+0x44>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d101      	bne.n	800a296 <prvGetNextExpireTime+0x16>
 800a292:	2201      	movs	r2, #1
 800a294:	e000      	b.n	800a298 <prvGetNextExpireTime+0x18>
 800a296:	2200      	movs	r2, #0
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d105      	bne.n	800a2b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2a4:	4b07      	ldr	r3, [pc, #28]	; (800a2c4 <prvGetNextExpireTime+0x44>)
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	68db      	ldr	r3, [r3, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	60fb      	str	r3, [r7, #12]
 800a2ae:	e001      	b.n	800a2b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3714      	adds	r7, #20
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr
 800a2c2:	bf00      	nop
 800a2c4:	20002ec0 	.word	0x20002ec0

0800a2c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a2c8:	b580      	push	{r7, lr}
 800a2ca:	b084      	sub	sp, #16
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a2d0:	f7ff f95a 	bl	8009588 <xTaskGetTickCount>
 800a2d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a2d6:	4b0b      	ldr	r3, [pc, #44]	; (800a304 <prvSampleTimeNow+0x3c>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	429a      	cmp	r2, r3
 800a2de:	d205      	bcs.n	800a2ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a2e0:	f000 f936 	bl	800a550 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	2201      	movs	r2, #1
 800a2e8:	601a      	str	r2, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2200      	movs	r2, #0
 800a2f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a2f2:	4a04      	ldr	r2, [pc, #16]	; (800a304 <prvSampleTimeNow+0x3c>)
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a2f8:	68fb      	ldr	r3, [r7, #12]
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3710      	adds	r7, #16
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20002ed0 	.word	0x20002ed0

0800a308 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b086      	sub	sp, #24
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
 800a314:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a316:	2300      	movs	r3, #0
 800a318:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	68ba      	ldr	r2, [r7, #8]
 800a31e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	68fa      	ldr	r2, [r7, #12]
 800a324:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a326:	68ba      	ldr	r2, [r7, #8]
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	429a      	cmp	r2, r3
 800a32c:	d812      	bhi.n	800a354 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a32e:	687a      	ldr	r2, [r7, #4]
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	1ad2      	subs	r2, r2, r3
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	699b      	ldr	r3, [r3, #24]
 800a338:	429a      	cmp	r2, r3
 800a33a:	d302      	bcc.n	800a342 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a33c:	2301      	movs	r3, #1
 800a33e:	617b      	str	r3, [r7, #20]
 800a340:	e01b      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a342:	4b10      	ldr	r3, [pc, #64]	; (800a384 <prvInsertTimerInActiveList+0x7c>)
 800a344:	681a      	ldr	r2, [r3, #0]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	3304      	adds	r3, #4
 800a34a:	4619      	mov	r1, r3
 800a34c:	4610      	mov	r0, r2
 800a34e:	f7fd fed4 	bl	80080fa <vListInsert>
 800a352:	e012      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a354:	687a      	ldr	r2, [r7, #4]
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d206      	bcs.n	800a36a <prvInsertTimerInActiveList+0x62>
 800a35c:	68ba      	ldr	r2, [r7, #8]
 800a35e:	683b      	ldr	r3, [r7, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d302      	bcc.n	800a36a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a364:	2301      	movs	r3, #1
 800a366:	617b      	str	r3, [r7, #20]
 800a368:	e007      	b.n	800a37a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a36a:	4b07      	ldr	r3, [pc, #28]	; (800a388 <prvInsertTimerInActiveList+0x80>)
 800a36c:	681a      	ldr	r2, [r3, #0]
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	3304      	adds	r3, #4
 800a372:	4619      	mov	r1, r3
 800a374:	4610      	mov	r0, r2
 800a376:	f7fd fec0 	bl	80080fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a37a:	697b      	ldr	r3, [r7, #20]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	3718      	adds	r7, #24
 800a380:	46bd      	mov	sp, r7
 800a382:	bd80      	pop	{r7, pc}
 800a384:	20002ec4 	.word	0x20002ec4
 800a388:	20002ec0 	.word	0x20002ec0

0800a38c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a38c:	b580      	push	{r7, lr}
 800a38e:	b08e      	sub	sp, #56	; 0x38
 800a390:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a392:	e0ca      	b.n	800a52a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	da18      	bge.n	800a3cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a39a:	1d3b      	adds	r3, r7, #4
 800a39c:	3304      	adds	r3, #4
 800a39e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d10a      	bne.n	800a3bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3aa:	f383 8811 	msr	BASEPRI, r3
 800a3ae:	f3bf 8f6f 	isb	sy
 800a3b2:	f3bf 8f4f 	dsb	sy
 800a3b6:	61fb      	str	r3, [r7, #28]
}
 800a3b8:	bf00      	nop
 800a3ba:	e7fe      	b.n	800a3ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c2:	6850      	ldr	r0, [r2, #4]
 800a3c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3c6:	6892      	ldr	r2, [r2, #8]
 800a3c8:	4611      	mov	r1, r2
 800a3ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	f2c0 80ab 	blt.w	800a52a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a3d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3da:	695b      	ldr	r3, [r3, #20]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d004      	beq.n	800a3ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a3e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3e2:	3304      	adds	r3, #4
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f7fd fec1 	bl	800816c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a3ea:	463b      	mov	r3, r7
 800a3ec:	4618      	mov	r0, r3
 800a3ee:	f7ff ff6b 	bl	800a2c8 <prvSampleTimeNow>
 800a3f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	2b09      	cmp	r3, #9
 800a3f8:	f200 8096 	bhi.w	800a528 <prvProcessReceivedCommands+0x19c>
 800a3fc:	a201      	add	r2, pc, #4	; (adr r2, 800a404 <prvProcessReceivedCommands+0x78>)
 800a3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a402:	bf00      	nop
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a42d 	.word	0x0800a42d
 800a40c:	0800a42d 	.word	0x0800a42d
 800a410:	0800a4a1 	.word	0x0800a4a1
 800a414:	0800a4b5 	.word	0x0800a4b5
 800a418:	0800a4ff 	.word	0x0800a4ff
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a42d 	.word	0x0800a42d
 800a424:	0800a4a1 	.word	0x0800a4a1
 800a428:	0800a4b5 	.word	0x0800a4b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a42e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a432:	f043 0301 	orr.w	r3, r3, #1
 800a436:	b2da      	uxtb	r2, r3
 800a438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a43e:	68ba      	ldr	r2, [r7, #8]
 800a440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a442:	699b      	ldr	r3, [r3, #24]
 800a444:	18d1      	adds	r1, r2, r3
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a44a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a44c:	f7ff ff5c 	bl	800a308 <prvInsertTimerInActiveList>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d069      	beq.n	800a52a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	6a1b      	ldr	r3, [r3, #32]
 800a45a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a45c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a45e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d05e      	beq.n	800a52a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a46c:	68ba      	ldr	r2, [r7, #8]
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	441a      	add	r2, r3
 800a474:	2300      	movs	r3, #0
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	2100      	movs	r1, #0
 800a47c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a47e:	f7ff fe05 	bl	800a08c <xTimerGenericCommand>
 800a482:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	2b00      	cmp	r3, #0
 800a488:	d14f      	bne.n	800a52a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800a48a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a48e:	f383 8811 	msr	BASEPRI, r3
 800a492:	f3bf 8f6f 	isb	sy
 800a496:	f3bf 8f4f 	dsb	sy
 800a49a:	61bb      	str	r3, [r7, #24]
}
 800a49c:	bf00      	nop
 800a49e:	e7fe      	b.n	800a49e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4a6:	f023 0301 	bic.w	r3, r3, #1
 800a4aa:	b2da      	uxtb	r2, r3
 800a4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800a4b2:	e03a      	b.n	800a52a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a4b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a4ba:	f043 0301 	orr.w	r3, r3, #1
 800a4be:	b2da      	uxtb	r2, r3
 800a4c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a4c6:	68ba      	ldr	r2, [r7, #8]
 800a4c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a4cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ce:	699b      	ldr	r3, [r3, #24]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d10a      	bne.n	800a4ea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800a4d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d8:	f383 8811 	msr	BASEPRI, r3
 800a4dc:	f3bf 8f6f 	isb	sy
 800a4e0:	f3bf 8f4f 	dsb	sy
 800a4e4:	617b      	str	r3, [r7, #20]
}
 800a4e6:	bf00      	nop
 800a4e8:	e7fe      	b.n	800a4e8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	699a      	ldr	r2, [r3, #24]
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f0:	18d1      	adds	r1, r2, r3
 800a4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4f8:	f7ff ff06 	bl	800a308 <prvInsertTimerInActiveList>
					break;
 800a4fc:	e015      	b.n	800a52a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a500:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a504:	f003 0302 	and.w	r3, r3, #2
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d103      	bne.n	800a514 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800a50c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a50e:	f000 fbdf 	bl	800acd0 <vPortFree>
 800a512:	e00a      	b.n	800a52a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a51a:	f023 0301 	bic.w	r3, r3, #1
 800a51e:	b2da      	uxtb	r2, r3
 800a520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a526:	e000      	b.n	800a52a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800a528:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a52a:	4b08      	ldr	r3, [pc, #32]	; (800a54c <prvProcessReceivedCommands+0x1c0>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	1d39      	adds	r1, r7, #4
 800a530:	2200      	movs	r2, #0
 800a532:	4618      	mov	r0, r3
 800a534:	f7fe f9a8 	bl	8008888 <xQueueReceive>
 800a538:	4603      	mov	r3, r0
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	f47f af2a 	bne.w	800a394 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a540:	bf00      	nop
 800a542:	bf00      	nop
 800a544:	3730      	adds	r7, #48	; 0x30
 800a546:	46bd      	mov	sp, r7
 800a548:	bd80      	pop	{r7, pc}
 800a54a:	bf00      	nop
 800a54c:	20002ec8 	.word	0x20002ec8

0800a550 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a550:	b580      	push	{r7, lr}
 800a552:	b088      	sub	sp, #32
 800a554:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a556:	e048      	b.n	800a5ea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a558:	4b2d      	ldr	r3, [pc, #180]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a562:	4b2b      	ldr	r3, [pc, #172]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	68db      	ldr	r3, [r3, #12]
 800a568:	68db      	ldr	r3, [r3, #12]
 800a56a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	3304      	adds	r3, #4
 800a570:	4618      	mov	r0, r3
 800a572:	f7fd fdfb 	bl	800816c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6a1b      	ldr	r3, [r3, #32]
 800a57a:	68f8      	ldr	r0, [r7, #12]
 800a57c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a584:	f003 0304 	and.w	r3, r3, #4
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d02e      	beq.n	800a5ea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	693a      	ldr	r2, [r7, #16]
 800a592:	4413      	add	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a596:	68ba      	ldr	r2, [r7, #8]
 800a598:	693b      	ldr	r3, [r7, #16]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d90e      	bls.n	800a5bc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	68ba      	ldr	r2, [r7, #8]
 800a5a2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	68fa      	ldr	r2, [r7, #12]
 800a5a8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a5aa:	4b19      	ldr	r3, [pc, #100]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a5ac:	681a      	ldr	r2, [r3, #0]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	3304      	adds	r3, #4
 800a5b2:	4619      	mov	r1, r3
 800a5b4:	4610      	mov	r0, r2
 800a5b6:	f7fd fda0 	bl	80080fa <vListInsert>
 800a5ba:	e016      	b.n	800a5ea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9300      	str	r3, [sp, #0]
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	693a      	ldr	r2, [r7, #16]
 800a5c4:	2100      	movs	r1, #0
 800a5c6:	68f8      	ldr	r0, [r7, #12]
 800a5c8:	f7ff fd60 	bl	800a08c <xTimerGenericCommand>
 800a5cc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d10a      	bne.n	800a5ea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800a5d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5d8:	f383 8811 	msr	BASEPRI, r3
 800a5dc:	f3bf 8f6f 	isb	sy
 800a5e0:	f3bf 8f4f 	dsb	sy
 800a5e4:	603b      	str	r3, [r7, #0]
}
 800a5e6:	bf00      	nop
 800a5e8:	e7fe      	b.n	800a5e8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a5ea:	4b09      	ldr	r3, [pc, #36]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d1b1      	bne.n	800a558 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a5f4:	4b06      	ldr	r3, [pc, #24]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a5fa:	4b06      	ldr	r3, [pc, #24]	; (800a614 <prvSwitchTimerLists+0xc4>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a04      	ldr	r2, [pc, #16]	; (800a610 <prvSwitchTimerLists+0xc0>)
 800a600:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a602:	4a04      	ldr	r2, [pc, #16]	; (800a614 <prvSwitchTimerLists+0xc4>)
 800a604:	697b      	ldr	r3, [r7, #20]
 800a606:	6013      	str	r3, [r2, #0]
}
 800a608:	bf00      	nop
 800a60a:	3718      	adds	r7, #24
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}
 800a610:	20002ec0 	.word	0x20002ec0
 800a614:	20002ec4 	.word	0x20002ec4

0800a618 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a61e:	f000 f969 	bl	800a8f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a622:	4b15      	ldr	r3, [pc, #84]	; (800a678 <prvCheckForValidListAndQueue+0x60>)
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d120      	bne.n	800a66c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a62a:	4814      	ldr	r0, [pc, #80]	; (800a67c <prvCheckForValidListAndQueue+0x64>)
 800a62c:	f7fd fd14 	bl	8008058 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a630:	4813      	ldr	r0, [pc, #76]	; (800a680 <prvCheckForValidListAndQueue+0x68>)
 800a632:	f7fd fd11 	bl	8008058 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a636:	4b13      	ldr	r3, [pc, #76]	; (800a684 <prvCheckForValidListAndQueue+0x6c>)
 800a638:	4a10      	ldr	r2, [pc, #64]	; (800a67c <prvCheckForValidListAndQueue+0x64>)
 800a63a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a63c:	4b12      	ldr	r3, [pc, #72]	; (800a688 <prvCheckForValidListAndQueue+0x70>)
 800a63e:	4a10      	ldr	r2, [pc, #64]	; (800a680 <prvCheckForValidListAndQueue+0x68>)
 800a640:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a642:	2300      	movs	r3, #0
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	4b11      	ldr	r3, [pc, #68]	; (800a68c <prvCheckForValidListAndQueue+0x74>)
 800a648:	4a11      	ldr	r2, [pc, #68]	; (800a690 <prvCheckForValidListAndQueue+0x78>)
 800a64a:	2110      	movs	r1, #16
 800a64c:	200a      	movs	r0, #10
 800a64e:	f7fd fe1f 	bl	8008290 <xQueueGenericCreateStatic>
 800a652:	4603      	mov	r3, r0
 800a654:	4a08      	ldr	r2, [pc, #32]	; (800a678 <prvCheckForValidListAndQueue+0x60>)
 800a656:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a658:	4b07      	ldr	r3, [pc, #28]	; (800a678 <prvCheckForValidListAndQueue+0x60>)
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d005      	beq.n	800a66c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a660:	4b05      	ldr	r3, [pc, #20]	; (800a678 <prvCheckForValidListAndQueue+0x60>)
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	490b      	ldr	r1, [pc, #44]	; (800a694 <prvCheckForValidListAndQueue+0x7c>)
 800a666:	4618      	mov	r0, r3
 800a668:	f7fe fc22 	bl	8008eb0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a66c:	f000 f972 	bl	800a954 <vPortExitCritical>
}
 800a670:	bf00      	nop
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}
 800a676:	bf00      	nop
 800a678:	20002ec8 	.word	0x20002ec8
 800a67c:	20002e98 	.word	0x20002e98
 800a680:	20002eac 	.word	0x20002eac
 800a684:	20002ec0 	.word	0x20002ec0
 800a688:	20002ec4 	.word	0x20002ec4
 800a68c:	20002f74 	.word	0x20002f74
 800a690:	20002ed4 	.word	0x20002ed4
 800a694:	0800ba90 	.word	0x0800ba90

0800a698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a698:	b480      	push	{r7}
 800a69a:	b085      	sub	sp, #20
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	3b04      	subs	r3, #4
 800a6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f023 0201 	bic.w	r2, r3, #1
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	3b04      	subs	r3, #4
 800a6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a6c8:	4a0c      	ldr	r2, [pc, #48]	; (800a6fc <pxPortInitialiseStack+0x64>)
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3b14      	subs	r3, #20
 800a6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	3b04      	subs	r3, #4
 800a6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	f06f 0202 	mvn.w	r2, #2
 800a6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	3b20      	subs	r3, #32
 800a6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3714      	adds	r7, #20
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fa:	4770      	bx	lr
 800a6fc:	0800a701 	.word	0x0800a701

0800a700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a700:	b480      	push	{r7}
 800a702:	b085      	sub	sp, #20
 800a704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a70a:	4b12      	ldr	r3, [pc, #72]	; (800a754 <prvTaskExitError+0x54>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a712:	d00a      	beq.n	800a72a <prvTaskExitError+0x2a>
	__asm volatile
 800a714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a718:	f383 8811 	msr	BASEPRI, r3
 800a71c:	f3bf 8f6f 	isb	sy
 800a720:	f3bf 8f4f 	dsb	sy
 800a724:	60fb      	str	r3, [r7, #12]
}
 800a726:	bf00      	nop
 800a728:	e7fe      	b.n	800a728 <prvTaskExitError+0x28>
	__asm volatile
 800a72a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a72e:	f383 8811 	msr	BASEPRI, r3
 800a732:	f3bf 8f6f 	isb	sy
 800a736:	f3bf 8f4f 	dsb	sy
 800a73a:	60bb      	str	r3, [r7, #8]
}
 800a73c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a73e:	bf00      	nop
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2b00      	cmp	r3, #0
 800a744:	d0fc      	beq.n	800a740 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a746:	bf00      	nop
 800a748:	bf00      	nop
 800a74a:	3714      	adds	r7, #20
 800a74c:	46bd      	mov	sp, r7
 800a74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a752:	4770      	bx	lr
 800a754:	2000002c 	.word	0x2000002c
	...

0800a760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a760:	4b07      	ldr	r3, [pc, #28]	; (800a780 <pxCurrentTCBConst2>)
 800a762:	6819      	ldr	r1, [r3, #0]
 800a764:	6808      	ldr	r0, [r1, #0]
 800a766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a76a:	f380 8809 	msr	PSP, r0
 800a76e:	f3bf 8f6f 	isb	sy
 800a772:	f04f 0000 	mov.w	r0, #0
 800a776:	f380 8811 	msr	BASEPRI, r0
 800a77a:	4770      	bx	lr
 800a77c:	f3af 8000 	nop.w

0800a780 <pxCurrentTCBConst2>:
 800a780:	20002990 	.word	0x20002990
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a784:	bf00      	nop
 800a786:	bf00      	nop

0800a788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a788:	4808      	ldr	r0, [pc, #32]	; (800a7ac <prvPortStartFirstTask+0x24>)
 800a78a:	6800      	ldr	r0, [r0, #0]
 800a78c:	6800      	ldr	r0, [r0, #0]
 800a78e:	f380 8808 	msr	MSP, r0
 800a792:	f04f 0000 	mov.w	r0, #0
 800a796:	f380 8814 	msr	CONTROL, r0
 800a79a:	b662      	cpsie	i
 800a79c:	b661      	cpsie	f
 800a79e:	f3bf 8f4f 	dsb	sy
 800a7a2:	f3bf 8f6f 	isb	sy
 800a7a6:	df00      	svc	0
 800a7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a7aa:	bf00      	nop
 800a7ac:	e000ed08 	.word	0xe000ed08

0800a7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b086      	sub	sp, #24
 800a7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a7b6:	4b46      	ldr	r3, [pc, #280]	; (800a8d0 <xPortStartScheduler+0x120>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	4a46      	ldr	r2, [pc, #280]	; (800a8d4 <xPortStartScheduler+0x124>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d10a      	bne.n	800a7d6 <xPortStartScheduler+0x26>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	613b      	str	r3, [r7, #16]
}
 800a7d2:	bf00      	nop
 800a7d4:	e7fe      	b.n	800a7d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a7d6:	4b3e      	ldr	r3, [pc, #248]	; (800a8d0 <xPortStartScheduler+0x120>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4a3f      	ldr	r2, [pc, #252]	; (800a8d8 <xPortStartScheduler+0x128>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d10a      	bne.n	800a7f6 <xPortStartScheduler+0x46>
	__asm volatile
 800a7e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7e4:	f383 8811 	msr	BASEPRI, r3
 800a7e8:	f3bf 8f6f 	isb	sy
 800a7ec:	f3bf 8f4f 	dsb	sy
 800a7f0:	60fb      	str	r3, [r7, #12]
}
 800a7f2:	bf00      	nop
 800a7f4:	e7fe      	b.n	800a7f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a7f6:	4b39      	ldr	r3, [pc, #228]	; (800a8dc <xPortStartScheduler+0x12c>)
 800a7f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a7fa:	697b      	ldr	r3, [r7, #20]
 800a7fc:	781b      	ldrb	r3, [r3, #0]
 800a7fe:	b2db      	uxtb	r3, r3
 800a800:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	22ff      	movs	r2, #255	; 0xff
 800a806:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	781b      	ldrb	r3, [r3, #0]
 800a80c:	b2db      	uxtb	r3, r3
 800a80e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a810:	78fb      	ldrb	r3, [r7, #3]
 800a812:	b2db      	uxtb	r3, r3
 800a814:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	4b31      	ldr	r3, [pc, #196]	; (800a8e0 <xPortStartScheduler+0x130>)
 800a81c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a81e:	4b31      	ldr	r3, [pc, #196]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a820:	2207      	movs	r2, #7
 800a822:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a824:	e009      	b.n	800a83a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800a826:	4b2f      	ldr	r3, [pc, #188]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	3b01      	subs	r3, #1
 800a82c:	4a2d      	ldr	r2, [pc, #180]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a82e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a830:	78fb      	ldrb	r3, [r7, #3]
 800a832:	b2db      	uxtb	r3, r3
 800a834:	005b      	lsls	r3, r3, #1
 800a836:	b2db      	uxtb	r3, r3
 800a838:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a83a:	78fb      	ldrb	r3, [r7, #3]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a842:	2b80      	cmp	r3, #128	; 0x80
 800a844:	d0ef      	beq.n	800a826 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a846:	4b27      	ldr	r3, [pc, #156]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f1c3 0307 	rsb	r3, r3, #7
 800a84e:	2b04      	cmp	r3, #4
 800a850:	d00a      	beq.n	800a868 <xPortStartScheduler+0xb8>
	__asm volatile
 800a852:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a856:	f383 8811 	msr	BASEPRI, r3
 800a85a:	f3bf 8f6f 	isb	sy
 800a85e:	f3bf 8f4f 	dsb	sy
 800a862:	60bb      	str	r3, [r7, #8]
}
 800a864:	bf00      	nop
 800a866:	e7fe      	b.n	800a866 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a868:	4b1e      	ldr	r3, [pc, #120]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	021b      	lsls	r3, r3, #8
 800a86e:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a870:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a872:	4b1c      	ldr	r3, [pc, #112]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a87a:	4a1a      	ldr	r2, [pc, #104]	; (800a8e4 <xPortStartScheduler+0x134>)
 800a87c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	b2da      	uxtb	r2, r3
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a886:	4b18      	ldr	r3, [pc, #96]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a17      	ldr	r2, [pc, #92]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a88c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800a890:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a892:	4b15      	ldr	r3, [pc, #84]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a14      	ldr	r2, [pc, #80]	; (800a8e8 <xPortStartScheduler+0x138>)
 800a898:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800a89c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a89e:	f000 f8dd 	bl	800aa5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a8a2:	4b12      	ldr	r3, [pc, #72]	; (800a8ec <xPortStartScheduler+0x13c>)
 800a8a4:	2200      	movs	r2, #0
 800a8a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a8a8:	f000 f8fc 	bl	800aaa4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a8ac:	4b10      	ldr	r3, [pc, #64]	; (800a8f0 <xPortStartScheduler+0x140>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	4a0f      	ldr	r2, [pc, #60]	; (800a8f0 <xPortStartScheduler+0x140>)
 800a8b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800a8b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a8b8:	f7ff ff66 	bl	800a788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a8bc:	f7fe ff2e 	bl	800971c <vTaskSwitchContext>
	prvTaskExitError();
 800a8c0:	f7ff ff1e 	bl	800a700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a8c4:	2300      	movs	r3, #0
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3718      	adds	r7, #24
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	e000ed00 	.word	0xe000ed00
 800a8d4:	410fc271 	.word	0x410fc271
 800a8d8:	410fc270 	.word	0x410fc270
 800a8dc:	e000e400 	.word	0xe000e400
 800a8e0:	20002fc4 	.word	0x20002fc4
 800a8e4:	20002fc8 	.word	0x20002fc8
 800a8e8:	e000ed20 	.word	0xe000ed20
 800a8ec:	2000002c 	.word	0x2000002c
 800a8f0:	e000ef34 	.word	0xe000ef34

0800a8f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a8f4:	b480      	push	{r7}
 800a8f6:	b083      	sub	sp, #12
 800a8f8:	af00      	add	r7, sp, #0
	__asm volatile
 800a8fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8fe:	f383 8811 	msr	BASEPRI, r3
 800a902:	f3bf 8f6f 	isb	sy
 800a906:	f3bf 8f4f 	dsb	sy
 800a90a:	607b      	str	r3, [r7, #4]
}
 800a90c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a90e:	4b0f      	ldr	r3, [pc, #60]	; (800a94c <vPortEnterCritical+0x58>)
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	3301      	adds	r3, #1
 800a914:	4a0d      	ldr	r2, [pc, #52]	; (800a94c <vPortEnterCritical+0x58>)
 800a916:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a918:	4b0c      	ldr	r3, [pc, #48]	; (800a94c <vPortEnterCritical+0x58>)
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	2b01      	cmp	r3, #1
 800a91e:	d10f      	bne.n	800a940 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a920:	4b0b      	ldr	r3, [pc, #44]	; (800a950 <vPortEnterCritical+0x5c>)
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	b2db      	uxtb	r3, r3
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00a      	beq.n	800a940 <vPortEnterCritical+0x4c>
	__asm volatile
 800a92a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92e:	f383 8811 	msr	BASEPRI, r3
 800a932:	f3bf 8f6f 	isb	sy
 800a936:	f3bf 8f4f 	dsb	sy
 800a93a:	603b      	str	r3, [r7, #0]
}
 800a93c:	bf00      	nop
 800a93e:	e7fe      	b.n	800a93e <vPortEnterCritical+0x4a>
	}
}
 800a940:	bf00      	nop
 800a942:	370c      	adds	r7, #12
 800a944:	46bd      	mov	sp, r7
 800a946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94a:	4770      	bx	lr
 800a94c:	2000002c 	.word	0x2000002c
 800a950:	e000ed04 	.word	0xe000ed04

0800a954 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a95a:	4b12      	ldr	r3, [pc, #72]	; (800a9a4 <vPortExitCritical+0x50>)
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d10a      	bne.n	800a978 <vPortExitCritical+0x24>
	__asm volatile
 800a962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a966:	f383 8811 	msr	BASEPRI, r3
 800a96a:	f3bf 8f6f 	isb	sy
 800a96e:	f3bf 8f4f 	dsb	sy
 800a972:	607b      	str	r3, [r7, #4]
}
 800a974:	bf00      	nop
 800a976:	e7fe      	b.n	800a976 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a978:	4b0a      	ldr	r3, [pc, #40]	; (800a9a4 <vPortExitCritical+0x50>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	4a09      	ldr	r2, [pc, #36]	; (800a9a4 <vPortExitCritical+0x50>)
 800a980:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a982:	4b08      	ldr	r3, [pc, #32]	; (800a9a4 <vPortExitCritical+0x50>)
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	2b00      	cmp	r3, #0
 800a988:	d105      	bne.n	800a996 <vPortExitCritical+0x42>
 800a98a:	2300      	movs	r3, #0
 800a98c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	f383 8811 	msr	BASEPRI, r3
}
 800a994:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a996:	bf00      	nop
 800a998:	370c      	adds	r7, #12
 800a99a:	46bd      	mov	sp, r7
 800a99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a0:	4770      	bx	lr
 800a9a2:	bf00      	nop
 800a9a4:	2000002c 	.word	0x2000002c
	...

0800a9b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a9b0:	f3ef 8009 	mrs	r0, PSP
 800a9b4:	f3bf 8f6f 	isb	sy
 800a9b8:	4b15      	ldr	r3, [pc, #84]	; (800aa10 <pxCurrentTCBConst>)
 800a9ba:	681a      	ldr	r2, [r3, #0]
 800a9bc:	f01e 0f10 	tst.w	lr, #16
 800a9c0:	bf08      	it	eq
 800a9c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a9c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9ca:	6010      	str	r0, [r2, #0]
 800a9cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a9d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800a9d4:	f380 8811 	msr	BASEPRI, r0
 800a9d8:	f3bf 8f4f 	dsb	sy
 800a9dc:	f3bf 8f6f 	isb	sy
 800a9e0:	f7fe fe9c 	bl	800971c <vTaskSwitchContext>
 800a9e4:	f04f 0000 	mov.w	r0, #0
 800a9e8:	f380 8811 	msr	BASEPRI, r0
 800a9ec:	bc09      	pop	{r0, r3}
 800a9ee:	6819      	ldr	r1, [r3, #0]
 800a9f0:	6808      	ldr	r0, [r1, #0]
 800a9f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f6:	f01e 0f10 	tst.w	lr, #16
 800a9fa:	bf08      	it	eq
 800a9fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800aa00:	f380 8809 	msr	PSP, r0
 800aa04:	f3bf 8f6f 	isb	sy
 800aa08:	4770      	bx	lr
 800aa0a:	bf00      	nop
 800aa0c:	f3af 8000 	nop.w

0800aa10 <pxCurrentTCBConst>:
 800aa10:	20002990 	.word	0x20002990
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800aa14:	bf00      	nop
 800aa16:	bf00      	nop

0800aa18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	607b      	str	r3, [r7, #4]
}
 800aa30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800aa32:	f7fe fdb9 	bl	80095a8 <xTaskIncrementTick>
 800aa36:	4603      	mov	r3, r0
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d003      	beq.n	800aa44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800aa3c:	4b06      	ldr	r3, [pc, #24]	; (800aa58 <xPortSysTickHandler+0x40>)
 800aa3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa42:	601a      	str	r2, [r3, #0]
 800aa44:	2300      	movs	r3, #0
 800aa46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	f383 8811 	msr	BASEPRI, r3
}
 800aa4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	e000ed04 	.word	0xe000ed04

0800aa5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800aa60:	4b0b      	ldr	r3, [pc, #44]	; (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa62:	2200      	movs	r2, #0
 800aa64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800aa66:	4b0b      	ldr	r3, [pc, #44]	; (800aa94 <vPortSetupTimerInterrupt+0x38>)
 800aa68:	2200      	movs	r2, #0
 800aa6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800aa6c:	4b0a      	ldr	r3, [pc, #40]	; (800aa98 <vPortSetupTimerInterrupt+0x3c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	4a0a      	ldr	r2, [pc, #40]	; (800aa9c <vPortSetupTimerInterrupt+0x40>)
 800aa72:	fba2 2303 	umull	r2, r3, r2, r3
 800aa76:	099b      	lsrs	r3, r3, #6
 800aa78:	4a09      	ldr	r2, [pc, #36]	; (800aaa0 <vPortSetupTimerInterrupt+0x44>)
 800aa7a:	3b01      	subs	r3, #1
 800aa7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800aa7e:	4b04      	ldr	r3, [pc, #16]	; (800aa90 <vPortSetupTimerInterrupt+0x34>)
 800aa80:	2207      	movs	r2, #7
 800aa82:	601a      	str	r2, [r3, #0]
}
 800aa84:	bf00      	nop
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr
 800aa8e:	bf00      	nop
 800aa90:	e000e010 	.word	0xe000e010
 800aa94:	e000e018 	.word	0xe000e018
 800aa98:	20000018 	.word	0x20000018
 800aa9c:	10624dd3 	.word	0x10624dd3
 800aaa0:	e000e014 	.word	0xe000e014

0800aaa4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800aaa4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800aab4 <vPortEnableVFP+0x10>
 800aaa8:	6801      	ldr	r1, [r0, #0]
 800aaaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800aaae:	6001      	str	r1, [r0, #0]
 800aab0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800aab2:	bf00      	nop
 800aab4:	e000ed88 	.word	0xe000ed88

0800aab8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800aab8:	b480      	push	{r7}
 800aaba:	b085      	sub	sp, #20
 800aabc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800aabe:	f3ef 8305 	mrs	r3, IPSR
 800aac2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2b0f      	cmp	r3, #15
 800aac8:	d914      	bls.n	800aaf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800aaca:	4a17      	ldr	r2, [pc, #92]	; (800ab28 <vPortValidateInterruptPriority+0x70>)
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	4413      	add	r3, r2
 800aad0:	781b      	ldrb	r3, [r3, #0]
 800aad2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800aad4:	4b15      	ldr	r3, [pc, #84]	; (800ab2c <vPortValidateInterruptPriority+0x74>)
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	7afa      	ldrb	r2, [r7, #11]
 800aada:	429a      	cmp	r2, r3
 800aadc:	d20a      	bcs.n	800aaf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800aade:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aae2:	f383 8811 	msr	BASEPRI, r3
 800aae6:	f3bf 8f6f 	isb	sy
 800aaea:	f3bf 8f4f 	dsb	sy
 800aaee:	607b      	str	r3, [r7, #4]
}
 800aaf0:	bf00      	nop
 800aaf2:	e7fe      	b.n	800aaf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800aaf4:	4b0e      	ldr	r3, [pc, #56]	; (800ab30 <vPortValidateInterruptPriority+0x78>)
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800aafc:	4b0d      	ldr	r3, [pc, #52]	; (800ab34 <vPortValidateInterruptPriority+0x7c>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	429a      	cmp	r2, r3
 800ab02:	d90a      	bls.n	800ab1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ab04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab08:	f383 8811 	msr	BASEPRI, r3
 800ab0c:	f3bf 8f6f 	isb	sy
 800ab10:	f3bf 8f4f 	dsb	sy
 800ab14:	603b      	str	r3, [r7, #0]
}
 800ab16:	bf00      	nop
 800ab18:	e7fe      	b.n	800ab18 <vPortValidateInterruptPriority+0x60>
	}
 800ab1a:	bf00      	nop
 800ab1c:	3714      	adds	r7, #20
 800ab1e:	46bd      	mov	sp, r7
 800ab20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab24:	4770      	bx	lr
 800ab26:	bf00      	nop
 800ab28:	e000e3f0 	.word	0xe000e3f0
 800ab2c:	20002fc4 	.word	0x20002fc4
 800ab30:	e000ed0c 	.word	0xe000ed0c
 800ab34:	20002fc8 	.word	0x20002fc8

0800ab38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ab38:	b580      	push	{r7, lr}
 800ab3a:	b08a      	sub	sp, #40	; 0x28
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ab40:	2300      	movs	r3, #0
 800ab42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ab44:	f7fe fc74 	bl	8009430 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ab48:	4b5b      	ldr	r3, [pc, #364]	; (800acb8 <pvPortMalloc+0x180>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d101      	bne.n	800ab54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ab50:	f000 f920 	bl	800ad94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ab54:	4b59      	ldr	r3, [pc, #356]	; (800acbc <pvPortMalloc+0x184>)
 800ab56:	681a      	ldr	r2, [r3, #0]
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f040 8093 	bne.w	800ac88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d01d      	beq.n	800aba4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ab68:	2208      	movs	r2, #8
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f003 0307 	and.w	r3, r3, #7
 800ab76:	2b00      	cmp	r3, #0
 800ab78:	d014      	beq.n	800aba4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f023 0307 	bic.w	r3, r3, #7
 800ab80:	3308      	adds	r3, #8
 800ab82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f003 0307 	and.w	r3, r3, #7
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d00a      	beq.n	800aba4 <pvPortMalloc+0x6c>
	__asm volatile
 800ab8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab92:	f383 8811 	msr	BASEPRI, r3
 800ab96:	f3bf 8f6f 	isb	sy
 800ab9a:	f3bf 8f4f 	dsb	sy
 800ab9e:	617b      	str	r3, [r7, #20]
}
 800aba0:	bf00      	nop
 800aba2:	e7fe      	b.n	800aba2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d06e      	beq.n	800ac88 <pvPortMalloc+0x150>
 800abaa:	4b45      	ldr	r3, [pc, #276]	; (800acc0 <pvPortMalloc+0x188>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d869      	bhi.n	800ac88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800abb4:	4b43      	ldr	r3, [pc, #268]	; (800acc4 <pvPortMalloc+0x18c>)
 800abb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800abb8:	4b42      	ldr	r3, [pc, #264]	; (800acc4 <pvPortMalloc+0x18c>)
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abbe:	e004      	b.n	800abca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800abc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800abc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800abca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	687a      	ldr	r2, [r7, #4]
 800abd0:	429a      	cmp	r2, r3
 800abd2:	d903      	bls.n	800abdc <pvPortMalloc+0xa4>
 800abd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d1f1      	bne.n	800abc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800abdc:	4b36      	ldr	r3, [pc, #216]	; (800acb8 <pvPortMalloc+0x180>)
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d050      	beq.n	800ac88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800abe6:	6a3b      	ldr	r3, [r7, #32]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	2208      	movs	r2, #8
 800abec:	4413      	add	r3, r2
 800abee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800abf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	6a3b      	ldr	r3, [r7, #32]
 800abf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800abf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abfa:	685a      	ldr	r2, [r3, #4]
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	1ad2      	subs	r2, r2, r3
 800ac00:	2308      	movs	r3, #8
 800ac02:	005b      	lsls	r3, r3, #1
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d91f      	bls.n	800ac48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ac08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	f003 0307 	and.w	r3, r3, #7
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d00a      	beq.n	800ac30 <pvPortMalloc+0xf8>
	__asm volatile
 800ac1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac1e:	f383 8811 	msr	BASEPRI, r3
 800ac22:	f3bf 8f6f 	isb	sy
 800ac26:	f3bf 8f4f 	dsb	sy
 800ac2a:	613b      	str	r3, [r7, #16]
}
 800ac2c:	bf00      	nop
 800ac2e:	e7fe      	b.n	800ac2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	685a      	ldr	r2, [r3, #4]
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	1ad2      	subs	r2, r2, r3
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ac3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac3e:	687a      	ldr	r2, [r7, #4]
 800ac40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ac42:	69b8      	ldr	r0, [r7, #24]
 800ac44:	f000 f908 	bl	800ae58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ac48:	4b1d      	ldr	r3, [pc, #116]	; (800acc0 <pvPortMalloc+0x188>)
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	4a1b      	ldr	r2, [pc, #108]	; (800acc0 <pvPortMalloc+0x188>)
 800ac54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ac56:	4b1a      	ldr	r3, [pc, #104]	; (800acc0 <pvPortMalloc+0x188>)
 800ac58:	681a      	ldr	r2, [r3, #0]
 800ac5a:	4b1b      	ldr	r3, [pc, #108]	; (800acc8 <pvPortMalloc+0x190>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d203      	bcs.n	800ac6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ac62:	4b17      	ldr	r3, [pc, #92]	; (800acc0 <pvPortMalloc+0x188>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a18      	ldr	r2, [pc, #96]	; (800acc8 <pvPortMalloc+0x190>)
 800ac68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ac6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	4b13      	ldr	r3, [pc, #76]	; (800acbc <pvPortMalloc+0x184>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	431a      	orrs	r2, r3
 800ac74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ac78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ac7e:	4b13      	ldr	r3, [pc, #76]	; (800accc <pvPortMalloc+0x194>)
 800ac80:	681b      	ldr	r3, [r3, #0]
 800ac82:	3301      	adds	r3, #1
 800ac84:	4a11      	ldr	r2, [pc, #68]	; (800accc <pvPortMalloc+0x194>)
 800ac86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ac88:	f7fe fbe0 	bl	800944c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ac8c:	69fb      	ldr	r3, [r7, #28]
 800ac8e:	f003 0307 	and.w	r3, r3, #7
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d00a      	beq.n	800acac <pvPortMalloc+0x174>
	__asm volatile
 800ac96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac9a:	f383 8811 	msr	BASEPRI, r3
 800ac9e:	f3bf 8f6f 	isb	sy
 800aca2:	f3bf 8f4f 	dsb	sy
 800aca6:	60fb      	str	r3, [r7, #12]
}
 800aca8:	bf00      	nop
 800acaa:	e7fe      	b.n	800acaa <pvPortMalloc+0x172>
	return pvReturn;
 800acac:	69fb      	ldr	r3, [r7, #28]
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3728      	adds	r7, #40	; 0x28
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	20003b8c 	.word	0x20003b8c
 800acbc:	20003ba0 	.word	0x20003ba0
 800acc0:	20003b90 	.word	0x20003b90
 800acc4:	20003b84 	.word	0x20003b84
 800acc8:	20003b94 	.word	0x20003b94
 800accc:	20003b98 	.word	0x20003b98

0800acd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b086      	sub	sp, #24
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d04d      	beq.n	800ad7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ace2:	2308      	movs	r3, #8
 800ace4:	425b      	negs	r3, r3
 800ace6:	697a      	ldr	r2, [r7, #20]
 800ace8:	4413      	add	r3, r2
 800acea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	685a      	ldr	r2, [r3, #4]
 800acf4:	4b24      	ldr	r3, [pc, #144]	; (800ad88 <vPortFree+0xb8>)
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	4013      	ands	r3, r2
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d10a      	bne.n	800ad14 <vPortFree+0x44>
	__asm volatile
 800acfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad02:	f383 8811 	msr	BASEPRI, r3
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	f3bf 8f4f 	dsb	sy
 800ad0e:	60fb      	str	r3, [r7, #12]
}
 800ad10:	bf00      	nop
 800ad12:	e7fe      	b.n	800ad12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	d00a      	beq.n	800ad32 <vPortFree+0x62>
	__asm volatile
 800ad1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad20:	f383 8811 	msr	BASEPRI, r3
 800ad24:	f3bf 8f6f 	isb	sy
 800ad28:	f3bf 8f4f 	dsb	sy
 800ad2c:	60bb      	str	r3, [r7, #8]
}
 800ad2e:	bf00      	nop
 800ad30:	e7fe      	b.n	800ad30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	685a      	ldr	r2, [r3, #4]
 800ad36:	4b14      	ldr	r3, [pc, #80]	; (800ad88 <vPortFree+0xb8>)
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d01e      	beq.n	800ad7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ad40:	693b      	ldr	r3, [r7, #16]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d11a      	bne.n	800ad7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	685a      	ldr	r2, [r3, #4]
 800ad4c:	4b0e      	ldr	r3, [pc, #56]	; (800ad88 <vPortFree+0xb8>)
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	43db      	mvns	r3, r3
 800ad52:	401a      	ands	r2, r3
 800ad54:	693b      	ldr	r3, [r7, #16]
 800ad56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ad58:	f7fe fb6a 	bl	8009430 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ad5c:	693b      	ldr	r3, [r7, #16]
 800ad5e:	685a      	ldr	r2, [r3, #4]
 800ad60:	4b0a      	ldr	r3, [pc, #40]	; (800ad8c <vPortFree+0xbc>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4413      	add	r3, r2
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <vPortFree+0xbc>)
 800ad68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ad6a:	6938      	ldr	r0, [r7, #16]
 800ad6c:	f000 f874 	bl	800ae58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ad70:	4b07      	ldr	r3, [pc, #28]	; (800ad90 <vPortFree+0xc0>)
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	3301      	adds	r3, #1
 800ad76:	4a06      	ldr	r2, [pc, #24]	; (800ad90 <vPortFree+0xc0>)
 800ad78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ad7a:	f7fe fb67 	bl	800944c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ad7e:	bf00      	nop
 800ad80:	3718      	adds	r7, #24
 800ad82:	46bd      	mov	sp, r7
 800ad84:	bd80      	pop	{r7, pc}
 800ad86:	bf00      	nop
 800ad88:	20003ba0 	.word	0x20003ba0
 800ad8c:	20003b90 	.word	0x20003b90
 800ad90:	20003b9c 	.word	0x20003b9c

0800ad94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ad9a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800ad9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ada0:	4b27      	ldr	r3, [pc, #156]	; (800ae40 <prvHeapInit+0xac>)
 800ada2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	f003 0307 	and.w	r3, r3, #7
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d00c      	beq.n	800adc8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	3307      	adds	r3, #7
 800adb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	f023 0307 	bic.w	r3, r3, #7
 800adba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800adbc:	68ba      	ldr	r2, [r7, #8]
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	1ad3      	subs	r3, r2, r3
 800adc2:	4a1f      	ldr	r2, [pc, #124]	; (800ae40 <prvHeapInit+0xac>)
 800adc4:	4413      	add	r3, r2
 800adc6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800adcc:	4a1d      	ldr	r2, [pc, #116]	; (800ae44 <prvHeapInit+0xb0>)
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800add2:	4b1c      	ldr	r3, [pc, #112]	; (800ae44 <prvHeapInit+0xb0>)
 800add4:	2200      	movs	r2, #0
 800add6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	68ba      	ldr	r2, [r7, #8]
 800addc:	4413      	add	r3, r2
 800adde:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ade0:	2208      	movs	r2, #8
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	1a9b      	subs	r3, r3, r2
 800ade6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	f023 0307 	bic.w	r3, r3, #7
 800adee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	4a15      	ldr	r2, [pc, #84]	; (800ae48 <prvHeapInit+0xb4>)
 800adf4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800adf6:	4b14      	ldr	r3, [pc, #80]	; (800ae48 <prvHeapInit+0xb4>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	2200      	movs	r2, #0
 800adfc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800adfe:	4b12      	ldr	r3, [pc, #72]	; (800ae48 <prvHeapInit+0xb4>)
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2200      	movs	r2, #0
 800ae04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	68fa      	ldr	r2, [r7, #12]
 800ae0e:	1ad2      	subs	r2, r2, r3
 800ae10:	683b      	ldr	r3, [r7, #0]
 800ae12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ae14:	4b0c      	ldr	r3, [pc, #48]	; (800ae48 <prvHeapInit+0xb4>)
 800ae16:	681a      	ldr	r2, [r3, #0]
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	685b      	ldr	r3, [r3, #4]
 800ae20:	4a0a      	ldr	r2, [pc, #40]	; (800ae4c <prvHeapInit+0xb8>)
 800ae22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	4a09      	ldr	r2, [pc, #36]	; (800ae50 <prvHeapInit+0xbc>)
 800ae2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ae2c:	4b09      	ldr	r3, [pc, #36]	; (800ae54 <prvHeapInit+0xc0>)
 800ae2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ae32:	601a      	str	r2, [r3, #0]
}
 800ae34:	bf00      	nop
 800ae36:	3714      	adds	r7, #20
 800ae38:	46bd      	mov	sp, r7
 800ae3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3e:	4770      	bx	lr
 800ae40:	20002fcc 	.word	0x20002fcc
 800ae44:	20003b84 	.word	0x20003b84
 800ae48:	20003b8c 	.word	0x20003b8c
 800ae4c:	20003b94 	.word	0x20003b94
 800ae50:	20003b90 	.word	0x20003b90
 800ae54:	20003ba0 	.word	0x20003ba0

0800ae58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b085      	sub	sp, #20
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ae60:	4b28      	ldr	r3, [pc, #160]	; (800af04 <prvInsertBlockIntoFreeList+0xac>)
 800ae62:	60fb      	str	r3, [r7, #12]
 800ae64:	e002      	b.n	800ae6c <prvInsertBlockIntoFreeList+0x14>
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	60fb      	str	r3, [r7, #12]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	429a      	cmp	r2, r3
 800ae74:	d8f7      	bhi.n	800ae66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	685b      	ldr	r3, [r3, #4]
 800ae7e:	68ba      	ldr	r2, [r7, #8]
 800ae80:	4413      	add	r3, r2
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	429a      	cmp	r2, r3
 800ae86:	d108      	bne.n	800ae9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	685a      	ldr	r2, [r3, #4]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	685b      	ldr	r3, [r3, #4]
 800ae90:	441a      	add	r2, r3
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	68ba      	ldr	r2, [r7, #8]
 800aea4:	441a      	add	r2, r3
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	429a      	cmp	r2, r3
 800aeac:	d118      	bne.n	800aee0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	681a      	ldr	r2, [r3, #0]
 800aeb2:	4b15      	ldr	r3, [pc, #84]	; (800af08 <prvInsertBlockIntoFreeList+0xb0>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	429a      	cmp	r2, r3
 800aeb8:	d00d      	beq.n	800aed6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	685a      	ldr	r2, [r3, #4]
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	441a      	add	r2, r3
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aeca:	68fb      	ldr	r3, [r7, #12]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	681a      	ldr	r2, [r3, #0]
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	601a      	str	r2, [r3, #0]
 800aed4:	e008      	b.n	800aee8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aed6:	4b0c      	ldr	r3, [pc, #48]	; (800af08 <prvInsertBlockIntoFreeList+0xb0>)
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	601a      	str	r2, [r3, #0]
 800aede:	e003      	b.n	800aee8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	681a      	ldr	r2, [r3, #0]
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aee8:	68fa      	ldr	r2, [r7, #12]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d002      	beq.n	800aef6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef6:	bf00      	nop
 800aef8:	3714      	adds	r7, #20
 800aefa:	46bd      	mov	sp, r7
 800aefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af00:	4770      	bx	lr
 800af02:	bf00      	nop
 800af04:	20003b84 	.word	0x20003b84
 800af08:	20003b8c 	.word	0x20003b8c

0800af0c <_vsniprintf_r>:
 800af0c:	b530      	push	{r4, r5, lr}
 800af0e:	4614      	mov	r4, r2
 800af10:	2c00      	cmp	r4, #0
 800af12:	b09b      	sub	sp, #108	; 0x6c
 800af14:	4605      	mov	r5, r0
 800af16:	461a      	mov	r2, r3
 800af18:	da05      	bge.n	800af26 <_vsniprintf_r+0x1a>
 800af1a:	238b      	movs	r3, #139	; 0x8b
 800af1c:	6003      	str	r3, [r0, #0]
 800af1e:	f04f 30ff 	mov.w	r0, #4294967295
 800af22:	b01b      	add	sp, #108	; 0x6c
 800af24:	bd30      	pop	{r4, r5, pc}
 800af26:	f44f 7302 	mov.w	r3, #520	; 0x208
 800af2a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800af2e:	bf14      	ite	ne
 800af30:	f104 33ff 	addne.w	r3, r4, #4294967295
 800af34:	4623      	moveq	r3, r4
 800af36:	9302      	str	r3, [sp, #8]
 800af38:	9305      	str	r3, [sp, #20]
 800af3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800af3e:	9100      	str	r1, [sp, #0]
 800af40:	9104      	str	r1, [sp, #16]
 800af42:	f8ad 300e 	strh.w	r3, [sp, #14]
 800af46:	4669      	mov	r1, sp
 800af48:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800af4a:	f000 fa03 	bl	800b354 <_svfiprintf_r>
 800af4e:	1c43      	adds	r3, r0, #1
 800af50:	bfbc      	itt	lt
 800af52:	238b      	movlt	r3, #139	; 0x8b
 800af54:	602b      	strlt	r3, [r5, #0]
 800af56:	2c00      	cmp	r4, #0
 800af58:	d0e3      	beq.n	800af22 <_vsniprintf_r+0x16>
 800af5a:	9b00      	ldr	r3, [sp, #0]
 800af5c:	2200      	movs	r2, #0
 800af5e:	701a      	strb	r2, [r3, #0]
 800af60:	e7df      	b.n	800af22 <_vsniprintf_r+0x16>
	...

0800af64 <vsniprintf>:
 800af64:	b507      	push	{r0, r1, r2, lr}
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	4613      	mov	r3, r2
 800af6a:	460a      	mov	r2, r1
 800af6c:	4601      	mov	r1, r0
 800af6e:	4803      	ldr	r0, [pc, #12]	; (800af7c <vsniprintf+0x18>)
 800af70:	6800      	ldr	r0, [r0, #0]
 800af72:	f7ff ffcb 	bl	800af0c <_vsniprintf_r>
 800af76:	b003      	add	sp, #12
 800af78:	f85d fb04 	ldr.w	pc, [sp], #4
 800af7c:	2000007c 	.word	0x2000007c

0800af80 <memset>:
 800af80:	4402      	add	r2, r0
 800af82:	4603      	mov	r3, r0
 800af84:	4293      	cmp	r3, r2
 800af86:	d100      	bne.n	800af8a <memset+0xa>
 800af88:	4770      	bx	lr
 800af8a:	f803 1b01 	strb.w	r1, [r3], #1
 800af8e:	e7f9      	b.n	800af84 <memset+0x4>

0800af90 <_reclaim_reent>:
 800af90:	4b29      	ldr	r3, [pc, #164]	; (800b038 <_reclaim_reent+0xa8>)
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	4283      	cmp	r3, r0
 800af96:	b570      	push	{r4, r5, r6, lr}
 800af98:	4604      	mov	r4, r0
 800af9a:	d04b      	beq.n	800b034 <_reclaim_reent+0xa4>
 800af9c:	69c3      	ldr	r3, [r0, #28]
 800af9e:	b143      	cbz	r3, 800afb2 <_reclaim_reent+0x22>
 800afa0:	68db      	ldr	r3, [r3, #12]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d144      	bne.n	800b030 <_reclaim_reent+0xa0>
 800afa6:	69e3      	ldr	r3, [r4, #28]
 800afa8:	6819      	ldr	r1, [r3, #0]
 800afaa:	b111      	cbz	r1, 800afb2 <_reclaim_reent+0x22>
 800afac:	4620      	mov	r0, r4
 800afae:	f000 f87f 	bl	800b0b0 <_free_r>
 800afb2:	6961      	ldr	r1, [r4, #20]
 800afb4:	b111      	cbz	r1, 800afbc <_reclaim_reent+0x2c>
 800afb6:	4620      	mov	r0, r4
 800afb8:	f000 f87a 	bl	800b0b0 <_free_r>
 800afbc:	69e1      	ldr	r1, [r4, #28]
 800afbe:	b111      	cbz	r1, 800afc6 <_reclaim_reent+0x36>
 800afc0:	4620      	mov	r0, r4
 800afc2:	f000 f875 	bl	800b0b0 <_free_r>
 800afc6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800afc8:	b111      	cbz	r1, 800afd0 <_reclaim_reent+0x40>
 800afca:	4620      	mov	r0, r4
 800afcc:	f000 f870 	bl	800b0b0 <_free_r>
 800afd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800afd2:	b111      	cbz	r1, 800afda <_reclaim_reent+0x4a>
 800afd4:	4620      	mov	r0, r4
 800afd6:	f000 f86b 	bl	800b0b0 <_free_r>
 800afda:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800afdc:	b111      	cbz	r1, 800afe4 <_reclaim_reent+0x54>
 800afde:	4620      	mov	r0, r4
 800afe0:	f000 f866 	bl	800b0b0 <_free_r>
 800afe4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800afe6:	b111      	cbz	r1, 800afee <_reclaim_reent+0x5e>
 800afe8:	4620      	mov	r0, r4
 800afea:	f000 f861 	bl	800b0b0 <_free_r>
 800afee:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800aff0:	b111      	cbz	r1, 800aff8 <_reclaim_reent+0x68>
 800aff2:	4620      	mov	r0, r4
 800aff4:	f000 f85c 	bl	800b0b0 <_free_r>
 800aff8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800affa:	b111      	cbz	r1, 800b002 <_reclaim_reent+0x72>
 800affc:	4620      	mov	r0, r4
 800affe:	f000 f857 	bl	800b0b0 <_free_r>
 800b002:	6a23      	ldr	r3, [r4, #32]
 800b004:	b1b3      	cbz	r3, 800b034 <_reclaim_reent+0xa4>
 800b006:	4620      	mov	r0, r4
 800b008:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b00c:	4718      	bx	r3
 800b00e:	5949      	ldr	r1, [r1, r5]
 800b010:	b941      	cbnz	r1, 800b024 <_reclaim_reent+0x94>
 800b012:	3504      	adds	r5, #4
 800b014:	69e3      	ldr	r3, [r4, #28]
 800b016:	2d80      	cmp	r5, #128	; 0x80
 800b018:	68d9      	ldr	r1, [r3, #12]
 800b01a:	d1f8      	bne.n	800b00e <_reclaim_reent+0x7e>
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 f847 	bl	800b0b0 <_free_r>
 800b022:	e7c0      	b.n	800afa6 <_reclaim_reent+0x16>
 800b024:	680e      	ldr	r6, [r1, #0]
 800b026:	4620      	mov	r0, r4
 800b028:	f000 f842 	bl	800b0b0 <_free_r>
 800b02c:	4631      	mov	r1, r6
 800b02e:	e7ef      	b.n	800b010 <_reclaim_reent+0x80>
 800b030:	2500      	movs	r5, #0
 800b032:	e7ef      	b.n	800b014 <_reclaim_reent+0x84>
 800b034:	bd70      	pop	{r4, r5, r6, pc}
 800b036:	bf00      	nop
 800b038:	2000007c 	.word	0x2000007c

0800b03c <__errno>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	; (800b044 <__errno+0x8>)
 800b03e:	6818      	ldr	r0, [r3, #0]
 800b040:	4770      	bx	lr
 800b042:	bf00      	nop
 800b044:	2000007c 	.word	0x2000007c

0800b048 <__libc_init_array>:
 800b048:	b570      	push	{r4, r5, r6, lr}
 800b04a:	4d0d      	ldr	r5, [pc, #52]	; (800b080 <__libc_init_array+0x38>)
 800b04c:	4c0d      	ldr	r4, [pc, #52]	; (800b084 <__libc_init_array+0x3c>)
 800b04e:	1b64      	subs	r4, r4, r5
 800b050:	10a4      	asrs	r4, r4, #2
 800b052:	2600      	movs	r6, #0
 800b054:	42a6      	cmp	r6, r4
 800b056:	d109      	bne.n	800b06c <__libc_init_array+0x24>
 800b058:	4d0b      	ldr	r5, [pc, #44]	; (800b088 <__libc_init_array+0x40>)
 800b05a:	4c0c      	ldr	r4, [pc, #48]	; (800b08c <__libc_init_array+0x44>)
 800b05c:	f000 fcb2 	bl	800b9c4 <_init>
 800b060:	1b64      	subs	r4, r4, r5
 800b062:	10a4      	asrs	r4, r4, #2
 800b064:	2600      	movs	r6, #0
 800b066:	42a6      	cmp	r6, r4
 800b068:	d105      	bne.n	800b076 <__libc_init_array+0x2e>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	f855 3b04 	ldr.w	r3, [r5], #4
 800b070:	4798      	blx	r3
 800b072:	3601      	adds	r6, #1
 800b074:	e7ee      	b.n	800b054 <__libc_init_array+0xc>
 800b076:	f855 3b04 	ldr.w	r3, [r5], #4
 800b07a:	4798      	blx	r3
 800b07c:	3601      	adds	r6, #1
 800b07e:	e7f2      	b.n	800b066 <__libc_init_array+0x1e>
 800b080:	0800bc78 	.word	0x0800bc78
 800b084:	0800bc78 	.word	0x0800bc78
 800b088:	0800bc78 	.word	0x0800bc78
 800b08c:	0800bc7c 	.word	0x0800bc7c

0800b090 <__retarget_lock_acquire_recursive>:
 800b090:	4770      	bx	lr

0800b092 <__retarget_lock_release_recursive>:
 800b092:	4770      	bx	lr

0800b094 <memcpy>:
 800b094:	440a      	add	r2, r1
 800b096:	4291      	cmp	r1, r2
 800b098:	f100 33ff 	add.w	r3, r0, #4294967295
 800b09c:	d100      	bne.n	800b0a0 <memcpy+0xc>
 800b09e:	4770      	bx	lr
 800b0a0:	b510      	push	{r4, lr}
 800b0a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b0a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b0aa:	4291      	cmp	r1, r2
 800b0ac:	d1f9      	bne.n	800b0a2 <memcpy+0xe>
 800b0ae:	bd10      	pop	{r4, pc}

0800b0b0 <_free_r>:
 800b0b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0b2:	2900      	cmp	r1, #0
 800b0b4:	d044      	beq.n	800b140 <_free_r+0x90>
 800b0b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0ba:	9001      	str	r0, [sp, #4]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	f1a1 0404 	sub.w	r4, r1, #4
 800b0c2:	bfb8      	it	lt
 800b0c4:	18e4      	addlt	r4, r4, r3
 800b0c6:	f000 f8df 	bl	800b288 <__malloc_lock>
 800b0ca:	4a1e      	ldr	r2, [pc, #120]	; (800b144 <_free_r+0x94>)
 800b0cc:	9801      	ldr	r0, [sp, #4]
 800b0ce:	6813      	ldr	r3, [r2, #0]
 800b0d0:	b933      	cbnz	r3, 800b0e0 <_free_r+0x30>
 800b0d2:	6063      	str	r3, [r4, #4]
 800b0d4:	6014      	str	r4, [r2, #0]
 800b0d6:	b003      	add	sp, #12
 800b0d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0dc:	f000 b8da 	b.w	800b294 <__malloc_unlock>
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	d908      	bls.n	800b0f6 <_free_r+0x46>
 800b0e4:	6825      	ldr	r5, [r4, #0]
 800b0e6:	1961      	adds	r1, r4, r5
 800b0e8:	428b      	cmp	r3, r1
 800b0ea:	bf01      	itttt	eq
 800b0ec:	6819      	ldreq	r1, [r3, #0]
 800b0ee:	685b      	ldreq	r3, [r3, #4]
 800b0f0:	1949      	addeq	r1, r1, r5
 800b0f2:	6021      	streq	r1, [r4, #0]
 800b0f4:	e7ed      	b.n	800b0d2 <_free_r+0x22>
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	b10b      	cbz	r3, 800b100 <_free_r+0x50>
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	d9fa      	bls.n	800b0f6 <_free_r+0x46>
 800b100:	6811      	ldr	r1, [r2, #0]
 800b102:	1855      	adds	r5, r2, r1
 800b104:	42a5      	cmp	r5, r4
 800b106:	d10b      	bne.n	800b120 <_free_r+0x70>
 800b108:	6824      	ldr	r4, [r4, #0]
 800b10a:	4421      	add	r1, r4
 800b10c:	1854      	adds	r4, r2, r1
 800b10e:	42a3      	cmp	r3, r4
 800b110:	6011      	str	r1, [r2, #0]
 800b112:	d1e0      	bne.n	800b0d6 <_free_r+0x26>
 800b114:	681c      	ldr	r4, [r3, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	6053      	str	r3, [r2, #4]
 800b11a:	440c      	add	r4, r1
 800b11c:	6014      	str	r4, [r2, #0]
 800b11e:	e7da      	b.n	800b0d6 <_free_r+0x26>
 800b120:	d902      	bls.n	800b128 <_free_r+0x78>
 800b122:	230c      	movs	r3, #12
 800b124:	6003      	str	r3, [r0, #0]
 800b126:	e7d6      	b.n	800b0d6 <_free_r+0x26>
 800b128:	6825      	ldr	r5, [r4, #0]
 800b12a:	1961      	adds	r1, r4, r5
 800b12c:	428b      	cmp	r3, r1
 800b12e:	bf04      	itt	eq
 800b130:	6819      	ldreq	r1, [r3, #0]
 800b132:	685b      	ldreq	r3, [r3, #4]
 800b134:	6063      	str	r3, [r4, #4]
 800b136:	bf04      	itt	eq
 800b138:	1949      	addeq	r1, r1, r5
 800b13a:	6021      	streq	r1, [r4, #0]
 800b13c:	6054      	str	r4, [r2, #4]
 800b13e:	e7ca      	b.n	800b0d6 <_free_r+0x26>
 800b140:	b003      	add	sp, #12
 800b142:	bd30      	pop	{r4, r5, pc}
 800b144:	20003ce4 	.word	0x20003ce4

0800b148 <sbrk_aligned>:
 800b148:	b570      	push	{r4, r5, r6, lr}
 800b14a:	4e0e      	ldr	r6, [pc, #56]	; (800b184 <sbrk_aligned+0x3c>)
 800b14c:	460c      	mov	r4, r1
 800b14e:	6831      	ldr	r1, [r6, #0]
 800b150:	4605      	mov	r5, r0
 800b152:	b911      	cbnz	r1, 800b15a <sbrk_aligned+0x12>
 800b154:	f000 fba6 	bl	800b8a4 <_sbrk_r>
 800b158:	6030      	str	r0, [r6, #0]
 800b15a:	4621      	mov	r1, r4
 800b15c:	4628      	mov	r0, r5
 800b15e:	f000 fba1 	bl	800b8a4 <_sbrk_r>
 800b162:	1c43      	adds	r3, r0, #1
 800b164:	d00a      	beq.n	800b17c <sbrk_aligned+0x34>
 800b166:	1cc4      	adds	r4, r0, #3
 800b168:	f024 0403 	bic.w	r4, r4, #3
 800b16c:	42a0      	cmp	r0, r4
 800b16e:	d007      	beq.n	800b180 <sbrk_aligned+0x38>
 800b170:	1a21      	subs	r1, r4, r0
 800b172:	4628      	mov	r0, r5
 800b174:	f000 fb96 	bl	800b8a4 <_sbrk_r>
 800b178:	3001      	adds	r0, #1
 800b17a:	d101      	bne.n	800b180 <sbrk_aligned+0x38>
 800b17c:	f04f 34ff 	mov.w	r4, #4294967295
 800b180:	4620      	mov	r0, r4
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	20003ce8 	.word	0x20003ce8

0800b188 <_malloc_r>:
 800b188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b18c:	1ccd      	adds	r5, r1, #3
 800b18e:	f025 0503 	bic.w	r5, r5, #3
 800b192:	3508      	adds	r5, #8
 800b194:	2d0c      	cmp	r5, #12
 800b196:	bf38      	it	cc
 800b198:	250c      	movcc	r5, #12
 800b19a:	2d00      	cmp	r5, #0
 800b19c:	4607      	mov	r7, r0
 800b19e:	db01      	blt.n	800b1a4 <_malloc_r+0x1c>
 800b1a0:	42a9      	cmp	r1, r5
 800b1a2:	d905      	bls.n	800b1b0 <_malloc_r+0x28>
 800b1a4:	230c      	movs	r3, #12
 800b1a6:	603b      	str	r3, [r7, #0]
 800b1a8:	2600      	movs	r6, #0
 800b1aa:	4630      	mov	r0, r6
 800b1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b284 <_malloc_r+0xfc>
 800b1b4:	f000 f868 	bl	800b288 <__malloc_lock>
 800b1b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b1bc:	461c      	mov	r4, r3
 800b1be:	bb5c      	cbnz	r4, 800b218 <_malloc_r+0x90>
 800b1c0:	4629      	mov	r1, r5
 800b1c2:	4638      	mov	r0, r7
 800b1c4:	f7ff ffc0 	bl	800b148 <sbrk_aligned>
 800b1c8:	1c43      	adds	r3, r0, #1
 800b1ca:	4604      	mov	r4, r0
 800b1cc:	d155      	bne.n	800b27a <_malloc_r+0xf2>
 800b1ce:	f8d8 4000 	ldr.w	r4, [r8]
 800b1d2:	4626      	mov	r6, r4
 800b1d4:	2e00      	cmp	r6, #0
 800b1d6:	d145      	bne.n	800b264 <_malloc_r+0xdc>
 800b1d8:	2c00      	cmp	r4, #0
 800b1da:	d048      	beq.n	800b26e <_malloc_r+0xe6>
 800b1dc:	6823      	ldr	r3, [r4, #0]
 800b1de:	4631      	mov	r1, r6
 800b1e0:	4638      	mov	r0, r7
 800b1e2:	eb04 0903 	add.w	r9, r4, r3
 800b1e6:	f000 fb5d 	bl	800b8a4 <_sbrk_r>
 800b1ea:	4581      	cmp	r9, r0
 800b1ec:	d13f      	bne.n	800b26e <_malloc_r+0xe6>
 800b1ee:	6821      	ldr	r1, [r4, #0]
 800b1f0:	1a6d      	subs	r5, r5, r1
 800b1f2:	4629      	mov	r1, r5
 800b1f4:	4638      	mov	r0, r7
 800b1f6:	f7ff ffa7 	bl	800b148 <sbrk_aligned>
 800b1fa:	3001      	adds	r0, #1
 800b1fc:	d037      	beq.n	800b26e <_malloc_r+0xe6>
 800b1fe:	6823      	ldr	r3, [r4, #0]
 800b200:	442b      	add	r3, r5
 800b202:	6023      	str	r3, [r4, #0]
 800b204:	f8d8 3000 	ldr.w	r3, [r8]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d038      	beq.n	800b27e <_malloc_r+0xf6>
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	42a2      	cmp	r2, r4
 800b210:	d12b      	bne.n	800b26a <_malloc_r+0xe2>
 800b212:	2200      	movs	r2, #0
 800b214:	605a      	str	r2, [r3, #4]
 800b216:	e00f      	b.n	800b238 <_malloc_r+0xb0>
 800b218:	6822      	ldr	r2, [r4, #0]
 800b21a:	1b52      	subs	r2, r2, r5
 800b21c:	d41f      	bmi.n	800b25e <_malloc_r+0xd6>
 800b21e:	2a0b      	cmp	r2, #11
 800b220:	d917      	bls.n	800b252 <_malloc_r+0xca>
 800b222:	1961      	adds	r1, r4, r5
 800b224:	42a3      	cmp	r3, r4
 800b226:	6025      	str	r5, [r4, #0]
 800b228:	bf18      	it	ne
 800b22a:	6059      	strne	r1, [r3, #4]
 800b22c:	6863      	ldr	r3, [r4, #4]
 800b22e:	bf08      	it	eq
 800b230:	f8c8 1000 	streq.w	r1, [r8]
 800b234:	5162      	str	r2, [r4, r5]
 800b236:	604b      	str	r3, [r1, #4]
 800b238:	4638      	mov	r0, r7
 800b23a:	f104 060b 	add.w	r6, r4, #11
 800b23e:	f000 f829 	bl	800b294 <__malloc_unlock>
 800b242:	f026 0607 	bic.w	r6, r6, #7
 800b246:	1d23      	adds	r3, r4, #4
 800b248:	1af2      	subs	r2, r6, r3
 800b24a:	d0ae      	beq.n	800b1aa <_malloc_r+0x22>
 800b24c:	1b9b      	subs	r3, r3, r6
 800b24e:	50a3      	str	r3, [r4, r2]
 800b250:	e7ab      	b.n	800b1aa <_malloc_r+0x22>
 800b252:	42a3      	cmp	r3, r4
 800b254:	6862      	ldr	r2, [r4, #4]
 800b256:	d1dd      	bne.n	800b214 <_malloc_r+0x8c>
 800b258:	f8c8 2000 	str.w	r2, [r8]
 800b25c:	e7ec      	b.n	800b238 <_malloc_r+0xb0>
 800b25e:	4623      	mov	r3, r4
 800b260:	6864      	ldr	r4, [r4, #4]
 800b262:	e7ac      	b.n	800b1be <_malloc_r+0x36>
 800b264:	4634      	mov	r4, r6
 800b266:	6876      	ldr	r6, [r6, #4]
 800b268:	e7b4      	b.n	800b1d4 <_malloc_r+0x4c>
 800b26a:	4613      	mov	r3, r2
 800b26c:	e7cc      	b.n	800b208 <_malloc_r+0x80>
 800b26e:	230c      	movs	r3, #12
 800b270:	603b      	str	r3, [r7, #0]
 800b272:	4638      	mov	r0, r7
 800b274:	f000 f80e 	bl	800b294 <__malloc_unlock>
 800b278:	e797      	b.n	800b1aa <_malloc_r+0x22>
 800b27a:	6025      	str	r5, [r4, #0]
 800b27c:	e7dc      	b.n	800b238 <_malloc_r+0xb0>
 800b27e:	605b      	str	r3, [r3, #4]
 800b280:	deff      	udf	#255	; 0xff
 800b282:	bf00      	nop
 800b284:	20003ce4 	.word	0x20003ce4

0800b288 <__malloc_lock>:
 800b288:	4801      	ldr	r0, [pc, #4]	; (800b290 <__malloc_lock+0x8>)
 800b28a:	f7ff bf01 	b.w	800b090 <__retarget_lock_acquire_recursive>
 800b28e:	bf00      	nop
 800b290:	20003ce0 	.word	0x20003ce0

0800b294 <__malloc_unlock>:
 800b294:	4801      	ldr	r0, [pc, #4]	; (800b29c <__malloc_unlock+0x8>)
 800b296:	f7ff befc 	b.w	800b092 <__retarget_lock_release_recursive>
 800b29a:	bf00      	nop
 800b29c:	20003ce0 	.word	0x20003ce0

0800b2a0 <__ssputs_r>:
 800b2a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2a4:	688e      	ldr	r6, [r1, #8]
 800b2a6:	461f      	mov	r7, r3
 800b2a8:	42be      	cmp	r6, r7
 800b2aa:	680b      	ldr	r3, [r1, #0]
 800b2ac:	4682      	mov	sl, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	4690      	mov	r8, r2
 800b2b2:	d82c      	bhi.n	800b30e <__ssputs_r+0x6e>
 800b2b4:	898a      	ldrh	r2, [r1, #12]
 800b2b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b2ba:	d026      	beq.n	800b30a <__ssputs_r+0x6a>
 800b2bc:	6965      	ldr	r5, [r4, #20]
 800b2be:	6909      	ldr	r1, [r1, #16]
 800b2c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b2c4:	eba3 0901 	sub.w	r9, r3, r1
 800b2c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b2cc:	1c7b      	adds	r3, r7, #1
 800b2ce:	444b      	add	r3, r9
 800b2d0:	106d      	asrs	r5, r5, #1
 800b2d2:	429d      	cmp	r5, r3
 800b2d4:	bf38      	it	cc
 800b2d6:	461d      	movcc	r5, r3
 800b2d8:	0553      	lsls	r3, r2, #21
 800b2da:	d527      	bpl.n	800b32c <__ssputs_r+0x8c>
 800b2dc:	4629      	mov	r1, r5
 800b2de:	f7ff ff53 	bl	800b188 <_malloc_r>
 800b2e2:	4606      	mov	r6, r0
 800b2e4:	b360      	cbz	r0, 800b340 <__ssputs_r+0xa0>
 800b2e6:	6921      	ldr	r1, [r4, #16]
 800b2e8:	464a      	mov	r2, r9
 800b2ea:	f7ff fed3 	bl	800b094 <memcpy>
 800b2ee:	89a3      	ldrh	r3, [r4, #12]
 800b2f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b2f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2f8:	81a3      	strh	r3, [r4, #12]
 800b2fa:	6126      	str	r6, [r4, #16]
 800b2fc:	6165      	str	r5, [r4, #20]
 800b2fe:	444e      	add	r6, r9
 800b300:	eba5 0509 	sub.w	r5, r5, r9
 800b304:	6026      	str	r6, [r4, #0]
 800b306:	60a5      	str	r5, [r4, #8]
 800b308:	463e      	mov	r6, r7
 800b30a:	42be      	cmp	r6, r7
 800b30c:	d900      	bls.n	800b310 <__ssputs_r+0x70>
 800b30e:	463e      	mov	r6, r7
 800b310:	6820      	ldr	r0, [r4, #0]
 800b312:	4632      	mov	r2, r6
 800b314:	4641      	mov	r1, r8
 800b316:	f000 faab 	bl	800b870 <memmove>
 800b31a:	68a3      	ldr	r3, [r4, #8]
 800b31c:	1b9b      	subs	r3, r3, r6
 800b31e:	60a3      	str	r3, [r4, #8]
 800b320:	6823      	ldr	r3, [r4, #0]
 800b322:	4433      	add	r3, r6
 800b324:	6023      	str	r3, [r4, #0]
 800b326:	2000      	movs	r0, #0
 800b328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b32c:	462a      	mov	r2, r5
 800b32e:	f000 fac9 	bl	800b8c4 <_realloc_r>
 800b332:	4606      	mov	r6, r0
 800b334:	2800      	cmp	r0, #0
 800b336:	d1e0      	bne.n	800b2fa <__ssputs_r+0x5a>
 800b338:	6921      	ldr	r1, [r4, #16]
 800b33a:	4650      	mov	r0, sl
 800b33c:	f7ff feb8 	bl	800b0b0 <_free_r>
 800b340:	230c      	movs	r3, #12
 800b342:	f8ca 3000 	str.w	r3, [sl]
 800b346:	89a3      	ldrh	r3, [r4, #12]
 800b348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b34c:	81a3      	strh	r3, [r4, #12]
 800b34e:	f04f 30ff 	mov.w	r0, #4294967295
 800b352:	e7e9      	b.n	800b328 <__ssputs_r+0x88>

0800b354 <_svfiprintf_r>:
 800b354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b358:	4698      	mov	r8, r3
 800b35a:	898b      	ldrh	r3, [r1, #12]
 800b35c:	061b      	lsls	r3, r3, #24
 800b35e:	b09d      	sub	sp, #116	; 0x74
 800b360:	4607      	mov	r7, r0
 800b362:	460d      	mov	r5, r1
 800b364:	4614      	mov	r4, r2
 800b366:	d50e      	bpl.n	800b386 <_svfiprintf_r+0x32>
 800b368:	690b      	ldr	r3, [r1, #16]
 800b36a:	b963      	cbnz	r3, 800b386 <_svfiprintf_r+0x32>
 800b36c:	2140      	movs	r1, #64	; 0x40
 800b36e:	f7ff ff0b 	bl	800b188 <_malloc_r>
 800b372:	6028      	str	r0, [r5, #0]
 800b374:	6128      	str	r0, [r5, #16]
 800b376:	b920      	cbnz	r0, 800b382 <_svfiprintf_r+0x2e>
 800b378:	230c      	movs	r3, #12
 800b37a:	603b      	str	r3, [r7, #0]
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	e0d0      	b.n	800b524 <_svfiprintf_r+0x1d0>
 800b382:	2340      	movs	r3, #64	; 0x40
 800b384:	616b      	str	r3, [r5, #20]
 800b386:	2300      	movs	r3, #0
 800b388:	9309      	str	r3, [sp, #36]	; 0x24
 800b38a:	2320      	movs	r3, #32
 800b38c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b390:	f8cd 800c 	str.w	r8, [sp, #12]
 800b394:	2330      	movs	r3, #48	; 0x30
 800b396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800b53c <_svfiprintf_r+0x1e8>
 800b39a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b39e:	f04f 0901 	mov.w	r9, #1
 800b3a2:	4623      	mov	r3, r4
 800b3a4:	469a      	mov	sl, r3
 800b3a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b3aa:	b10a      	cbz	r2, 800b3b0 <_svfiprintf_r+0x5c>
 800b3ac:	2a25      	cmp	r2, #37	; 0x25
 800b3ae:	d1f9      	bne.n	800b3a4 <_svfiprintf_r+0x50>
 800b3b0:	ebba 0b04 	subs.w	fp, sl, r4
 800b3b4:	d00b      	beq.n	800b3ce <_svfiprintf_r+0x7a>
 800b3b6:	465b      	mov	r3, fp
 800b3b8:	4622      	mov	r2, r4
 800b3ba:	4629      	mov	r1, r5
 800b3bc:	4638      	mov	r0, r7
 800b3be:	f7ff ff6f 	bl	800b2a0 <__ssputs_r>
 800b3c2:	3001      	adds	r0, #1
 800b3c4:	f000 80a9 	beq.w	800b51a <_svfiprintf_r+0x1c6>
 800b3c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ca:	445a      	add	r2, fp
 800b3cc:	9209      	str	r2, [sp, #36]	; 0x24
 800b3ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	f000 80a1 	beq.w	800b51a <_svfiprintf_r+0x1c6>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	f04f 32ff 	mov.w	r2, #4294967295
 800b3de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b3e2:	f10a 0a01 	add.w	sl, sl, #1
 800b3e6:	9304      	str	r3, [sp, #16]
 800b3e8:	9307      	str	r3, [sp, #28]
 800b3ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b3ee:	931a      	str	r3, [sp, #104]	; 0x68
 800b3f0:	4654      	mov	r4, sl
 800b3f2:	2205      	movs	r2, #5
 800b3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3f8:	4850      	ldr	r0, [pc, #320]	; (800b53c <_svfiprintf_r+0x1e8>)
 800b3fa:	f7f4 fef1 	bl	80001e0 <memchr>
 800b3fe:	9a04      	ldr	r2, [sp, #16]
 800b400:	b9d8      	cbnz	r0, 800b43a <_svfiprintf_r+0xe6>
 800b402:	06d0      	lsls	r0, r2, #27
 800b404:	bf44      	itt	mi
 800b406:	2320      	movmi	r3, #32
 800b408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b40c:	0711      	lsls	r1, r2, #28
 800b40e:	bf44      	itt	mi
 800b410:	232b      	movmi	r3, #43	; 0x2b
 800b412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b416:	f89a 3000 	ldrb.w	r3, [sl]
 800b41a:	2b2a      	cmp	r3, #42	; 0x2a
 800b41c:	d015      	beq.n	800b44a <_svfiprintf_r+0xf6>
 800b41e:	9a07      	ldr	r2, [sp, #28]
 800b420:	4654      	mov	r4, sl
 800b422:	2000      	movs	r0, #0
 800b424:	f04f 0c0a 	mov.w	ip, #10
 800b428:	4621      	mov	r1, r4
 800b42a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b42e:	3b30      	subs	r3, #48	; 0x30
 800b430:	2b09      	cmp	r3, #9
 800b432:	d94d      	bls.n	800b4d0 <_svfiprintf_r+0x17c>
 800b434:	b1b0      	cbz	r0, 800b464 <_svfiprintf_r+0x110>
 800b436:	9207      	str	r2, [sp, #28]
 800b438:	e014      	b.n	800b464 <_svfiprintf_r+0x110>
 800b43a:	eba0 0308 	sub.w	r3, r0, r8
 800b43e:	fa09 f303 	lsl.w	r3, r9, r3
 800b442:	4313      	orrs	r3, r2
 800b444:	9304      	str	r3, [sp, #16]
 800b446:	46a2      	mov	sl, r4
 800b448:	e7d2      	b.n	800b3f0 <_svfiprintf_r+0x9c>
 800b44a:	9b03      	ldr	r3, [sp, #12]
 800b44c:	1d19      	adds	r1, r3, #4
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	9103      	str	r1, [sp, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	bfbb      	ittet	lt
 800b456:	425b      	neglt	r3, r3
 800b458:	f042 0202 	orrlt.w	r2, r2, #2
 800b45c:	9307      	strge	r3, [sp, #28]
 800b45e:	9307      	strlt	r3, [sp, #28]
 800b460:	bfb8      	it	lt
 800b462:	9204      	strlt	r2, [sp, #16]
 800b464:	7823      	ldrb	r3, [r4, #0]
 800b466:	2b2e      	cmp	r3, #46	; 0x2e
 800b468:	d10c      	bne.n	800b484 <_svfiprintf_r+0x130>
 800b46a:	7863      	ldrb	r3, [r4, #1]
 800b46c:	2b2a      	cmp	r3, #42	; 0x2a
 800b46e:	d134      	bne.n	800b4da <_svfiprintf_r+0x186>
 800b470:	9b03      	ldr	r3, [sp, #12]
 800b472:	1d1a      	adds	r2, r3, #4
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	9203      	str	r2, [sp, #12]
 800b478:	2b00      	cmp	r3, #0
 800b47a:	bfb8      	it	lt
 800b47c:	f04f 33ff 	movlt.w	r3, #4294967295
 800b480:	3402      	adds	r4, #2
 800b482:	9305      	str	r3, [sp, #20]
 800b484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800b54c <_svfiprintf_r+0x1f8>
 800b488:	7821      	ldrb	r1, [r4, #0]
 800b48a:	2203      	movs	r2, #3
 800b48c:	4650      	mov	r0, sl
 800b48e:	f7f4 fea7 	bl	80001e0 <memchr>
 800b492:	b138      	cbz	r0, 800b4a4 <_svfiprintf_r+0x150>
 800b494:	9b04      	ldr	r3, [sp, #16]
 800b496:	eba0 000a 	sub.w	r0, r0, sl
 800b49a:	2240      	movs	r2, #64	; 0x40
 800b49c:	4082      	lsls	r2, r0
 800b49e:	4313      	orrs	r3, r2
 800b4a0:	3401      	adds	r4, #1
 800b4a2:	9304      	str	r3, [sp, #16]
 800b4a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4a8:	4825      	ldr	r0, [pc, #148]	; (800b540 <_svfiprintf_r+0x1ec>)
 800b4aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b4ae:	2206      	movs	r2, #6
 800b4b0:	f7f4 fe96 	bl	80001e0 <memchr>
 800b4b4:	2800      	cmp	r0, #0
 800b4b6:	d038      	beq.n	800b52a <_svfiprintf_r+0x1d6>
 800b4b8:	4b22      	ldr	r3, [pc, #136]	; (800b544 <_svfiprintf_r+0x1f0>)
 800b4ba:	bb1b      	cbnz	r3, 800b504 <_svfiprintf_r+0x1b0>
 800b4bc:	9b03      	ldr	r3, [sp, #12]
 800b4be:	3307      	adds	r3, #7
 800b4c0:	f023 0307 	bic.w	r3, r3, #7
 800b4c4:	3308      	adds	r3, #8
 800b4c6:	9303      	str	r3, [sp, #12]
 800b4c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ca:	4433      	add	r3, r6
 800b4cc:	9309      	str	r3, [sp, #36]	; 0x24
 800b4ce:	e768      	b.n	800b3a2 <_svfiprintf_r+0x4e>
 800b4d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800b4d4:	460c      	mov	r4, r1
 800b4d6:	2001      	movs	r0, #1
 800b4d8:	e7a6      	b.n	800b428 <_svfiprintf_r+0xd4>
 800b4da:	2300      	movs	r3, #0
 800b4dc:	3401      	adds	r4, #1
 800b4de:	9305      	str	r3, [sp, #20]
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f04f 0c0a 	mov.w	ip, #10
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4ec:	3a30      	subs	r2, #48	; 0x30
 800b4ee:	2a09      	cmp	r2, #9
 800b4f0:	d903      	bls.n	800b4fa <_svfiprintf_r+0x1a6>
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d0c6      	beq.n	800b484 <_svfiprintf_r+0x130>
 800b4f6:	9105      	str	r1, [sp, #20]
 800b4f8:	e7c4      	b.n	800b484 <_svfiprintf_r+0x130>
 800b4fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800b4fe:	4604      	mov	r4, r0
 800b500:	2301      	movs	r3, #1
 800b502:	e7f0      	b.n	800b4e6 <_svfiprintf_r+0x192>
 800b504:	ab03      	add	r3, sp, #12
 800b506:	9300      	str	r3, [sp, #0]
 800b508:	462a      	mov	r2, r5
 800b50a:	4b0f      	ldr	r3, [pc, #60]	; (800b548 <_svfiprintf_r+0x1f4>)
 800b50c:	a904      	add	r1, sp, #16
 800b50e:	4638      	mov	r0, r7
 800b510:	f3af 8000 	nop.w
 800b514:	1c42      	adds	r2, r0, #1
 800b516:	4606      	mov	r6, r0
 800b518:	d1d6      	bne.n	800b4c8 <_svfiprintf_r+0x174>
 800b51a:	89ab      	ldrh	r3, [r5, #12]
 800b51c:	065b      	lsls	r3, r3, #25
 800b51e:	f53f af2d 	bmi.w	800b37c <_svfiprintf_r+0x28>
 800b522:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b524:	b01d      	add	sp, #116	; 0x74
 800b526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b52a:	ab03      	add	r3, sp, #12
 800b52c:	9300      	str	r3, [sp, #0]
 800b52e:	462a      	mov	r2, r5
 800b530:	4b05      	ldr	r3, [pc, #20]	; (800b548 <_svfiprintf_r+0x1f4>)
 800b532:	a904      	add	r1, sp, #16
 800b534:	4638      	mov	r0, r7
 800b536:	f000 f879 	bl	800b62c <_printf_i>
 800b53a:	e7eb      	b.n	800b514 <_svfiprintf_r+0x1c0>
 800b53c:	0800bc3c 	.word	0x0800bc3c
 800b540:	0800bc46 	.word	0x0800bc46
 800b544:	00000000 	.word	0x00000000
 800b548:	0800b2a1 	.word	0x0800b2a1
 800b54c:	0800bc42 	.word	0x0800bc42

0800b550 <_printf_common>:
 800b550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b554:	4616      	mov	r6, r2
 800b556:	4699      	mov	r9, r3
 800b558:	688a      	ldr	r2, [r1, #8]
 800b55a:	690b      	ldr	r3, [r1, #16]
 800b55c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b560:	4293      	cmp	r3, r2
 800b562:	bfb8      	it	lt
 800b564:	4613      	movlt	r3, r2
 800b566:	6033      	str	r3, [r6, #0]
 800b568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b56c:	4607      	mov	r7, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	b10a      	cbz	r2, 800b576 <_printf_common+0x26>
 800b572:	3301      	adds	r3, #1
 800b574:	6033      	str	r3, [r6, #0]
 800b576:	6823      	ldr	r3, [r4, #0]
 800b578:	0699      	lsls	r1, r3, #26
 800b57a:	bf42      	ittt	mi
 800b57c:	6833      	ldrmi	r3, [r6, #0]
 800b57e:	3302      	addmi	r3, #2
 800b580:	6033      	strmi	r3, [r6, #0]
 800b582:	6825      	ldr	r5, [r4, #0]
 800b584:	f015 0506 	ands.w	r5, r5, #6
 800b588:	d106      	bne.n	800b598 <_printf_common+0x48>
 800b58a:	f104 0a19 	add.w	sl, r4, #25
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	6832      	ldr	r2, [r6, #0]
 800b592:	1a9b      	subs	r3, r3, r2
 800b594:	42ab      	cmp	r3, r5
 800b596:	dc26      	bgt.n	800b5e6 <_printf_common+0x96>
 800b598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b59c:	1e13      	subs	r3, r2, #0
 800b59e:	6822      	ldr	r2, [r4, #0]
 800b5a0:	bf18      	it	ne
 800b5a2:	2301      	movne	r3, #1
 800b5a4:	0692      	lsls	r2, r2, #26
 800b5a6:	d42b      	bmi.n	800b600 <_printf_common+0xb0>
 800b5a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b5ac:	4649      	mov	r1, r9
 800b5ae:	4638      	mov	r0, r7
 800b5b0:	47c0      	blx	r8
 800b5b2:	3001      	adds	r0, #1
 800b5b4:	d01e      	beq.n	800b5f4 <_printf_common+0xa4>
 800b5b6:	6823      	ldr	r3, [r4, #0]
 800b5b8:	6922      	ldr	r2, [r4, #16]
 800b5ba:	f003 0306 	and.w	r3, r3, #6
 800b5be:	2b04      	cmp	r3, #4
 800b5c0:	bf02      	ittt	eq
 800b5c2:	68e5      	ldreq	r5, [r4, #12]
 800b5c4:	6833      	ldreq	r3, [r6, #0]
 800b5c6:	1aed      	subeq	r5, r5, r3
 800b5c8:	68a3      	ldr	r3, [r4, #8]
 800b5ca:	bf0c      	ite	eq
 800b5cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b5d0:	2500      	movne	r5, #0
 800b5d2:	4293      	cmp	r3, r2
 800b5d4:	bfc4      	itt	gt
 800b5d6:	1a9b      	subgt	r3, r3, r2
 800b5d8:	18ed      	addgt	r5, r5, r3
 800b5da:	2600      	movs	r6, #0
 800b5dc:	341a      	adds	r4, #26
 800b5de:	42b5      	cmp	r5, r6
 800b5e0:	d11a      	bne.n	800b618 <_printf_common+0xc8>
 800b5e2:	2000      	movs	r0, #0
 800b5e4:	e008      	b.n	800b5f8 <_printf_common+0xa8>
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	4649      	mov	r1, r9
 800b5ec:	4638      	mov	r0, r7
 800b5ee:	47c0      	blx	r8
 800b5f0:	3001      	adds	r0, #1
 800b5f2:	d103      	bne.n	800b5fc <_printf_common+0xac>
 800b5f4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5fc:	3501      	adds	r5, #1
 800b5fe:	e7c6      	b.n	800b58e <_printf_common+0x3e>
 800b600:	18e1      	adds	r1, r4, r3
 800b602:	1c5a      	adds	r2, r3, #1
 800b604:	2030      	movs	r0, #48	; 0x30
 800b606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b60a:	4422      	add	r2, r4
 800b60c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b614:	3302      	adds	r3, #2
 800b616:	e7c7      	b.n	800b5a8 <_printf_common+0x58>
 800b618:	2301      	movs	r3, #1
 800b61a:	4622      	mov	r2, r4
 800b61c:	4649      	mov	r1, r9
 800b61e:	4638      	mov	r0, r7
 800b620:	47c0      	blx	r8
 800b622:	3001      	adds	r0, #1
 800b624:	d0e6      	beq.n	800b5f4 <_printf_common+0xa4>
 800b626:	3601      	adds	r6, #1
 800b628:	e7d9      	b.n	800b5de <_printf_common+0x8e>
	...

0800b62c <_printf_i>:
 800b62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b630:	7e0f      	ldrb	r7, [r1, #24]
 800b632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b634:	2f78      	cmp	r7, #120	; 0x78
 800b636:	4691      	mov	r9, r2
 800b638:	4680      	mov	r8, r0
 800b63a:	460c      	mov	r4, r1
 800b63c:	469a      	mov	sl, r3
 800b63e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b642:	d807      	bhi.n	800b654 <_printf_i+0x28>
 800b644:	2f62      	cmp	r7, #98	; 0x62
 800b646:	d80a      	bhi.n	800b65e <_printf_i+0x32>
 800b648:	2f00      	cmp	r7, #0
 800b64a:	f000 80d4 	beq.w	800b7f6 <_printf_i+0x1ca>
 800b64e:	2f58      	cmp	r7, #88	; 0x58
 800b650:	f000 80c0 	beq.w	800b7d4 <_printf_i+0x1a8>
 800b654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b65c:	e03a      	b.n	800b6d4 <_printf_i+0xa8>
 800b65e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b662:	2b15      	cmp	r3, #21
 800b664:	d8f6      	bhi.n	800b654 <_printf_i+0x28>
 800b666:	a101      	add	r1, pc, #4	; (adr r1, 800b66c <_printf_i+0x40>)
 800b668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b66c:	0800b6c5 	.word	0x0800b6c5
 800b670:	0800b6d9 	.word	0x0800b6d9
 800b674:	0800b655 	.word	0x0800b655
 800b678:	0800b655 	.word	0x0800b655
 800b67c:	0800b655 	.word	0x0800b655
 800b680:	0800b655 	.word	0x0800b655
 800b684:	0800b6d9 	.word	0x0800b6d9
 800b688:	0800b655 	.word	0x0800b655
 800b68c:	0800b655 	.word	0x0800b655
 800b690:	0800b655 	.word	0x0800b655
 800b694:	0800b655 	.word	0x0800b655
 800b698:	0800b7dd 	.word	0x0800b7dd
 800b69c:	0800b705 	.word	0x0800b705
 800b6a0:	0800b797 	.word	0x0800b797
 800b6a4:	0800b655 	.word	0x0800b655
 800b6a8:	0800b655 	.word	0x0800b655
 800b6ac:	0800b7ff 	.word	0x0800b7ff
 800b6b0:	0800b655 	.word	0x0800b655
 800b6b4:	0800b705 	.word	0x0800b705
 800b6b8:	0800b655 	.word	0x0800b655
 800b6bc:	0800b655 	.word	0x0800b655
 800b6c0:	0800b79f 	.word	0x0800b79f
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	1d1a      	adds	r2, r3, #4
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	602a      	str	r2, [r5, #0]
 800b6cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b6d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e09f      	b.n	800b818 <_printf_i+0x1ec>
 800b6d8:	6820      	ldr	r0, [r4, #0]
 800b6da:	682b      	ldr	r3, [r5, #0]
 800b6dc:	0607      	lsls	r7, r0, #24
 800b6de:	f103 0104 	add.w	r1, r3, #4
 800b6e2:	6029      	str	r1, [r5, #0]
 800b6e4:	d501      	bpl.n	800b6ea <_printf_i+0xbe>
 800b6e6:	681e      	ldr	r6, [r3, #0]
 800b6e8:	e003      	b.n	800b6f2 <_printf_i+0xc6>
 800b6ea:	0646      	lsls	r6, r0, #25
 800b6ec:	d5fb      	bpl.n	800b6e6 <_printf_i+0xba>
 800b6ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 800b6f2:	2e00      	cmp	r6, #0
 800b6f4:	da03      	bge.n	800b6fe <_printf_i+0xd2>
 800b6f6:	232d      	movs	r3, #45	; 0x2d
 800b6f8:	4276      	negs	r6, r6
 800b6fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b6fe:	485a      	ldr	r0, [pc, #360]	; (800b868 <_printf_i+0x23c>)
 800b700:	230a      	movs	r3, #10
 800b702:	e012      	b.n	800b72a <_printf_i+0xfe>
 800b704:	682b      	ldr	r3, [r5, #0]
 800b706:	6820      	ldr	r0, [r4, #0]
 800b708:	1d19      	adds	r1, r3, #4
 800b70a:	6029      	str	r1, [r5, #0]
 800b70c:	0605      	lsls	r5, r0, #24
 800b70e:	d501      	bpl.n	800b714 <_printf_i+0xe8>
 800b710:	681e      	ldr	r6, [r3, #0]
 800b712:	e002      	b.n	800b71a <_printf_i+0xee>
 800b714:	0641      	lsls	r1, r0, #25
 800b716:	d5fb      	bpl.n	800b710 <_printf_i+0xe4>
 800b718:	881e      	ldrh	r6, [r3, #0]
 800b71a:	4853      	ldr	r0, [pc, #332]	; (800b868 <_printf_i+0x23c>)
 800b71c:	2f6f      	cmp	r7, #111	; 0x6f
 800b71e:	bf0c      	ite	eq
 800b720:	2308      	moveq	r3, #8
 800b722:	230a      	movne	r3, #10
 800b724:	2100      	movs	r1, #0
 800b726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b72a:	6865      	ldr	r5, [r4, #4]
 800b72c:	60a5      	str	r5, [r4, #8]
 800b72e:	2d00      	cmp	r5, #0
 800b730:	bfa2      	ittt	ge
 800b732:	6821      	ldrge	r1, [r4, #0]
 800b734:	f021 0104 	bicge.w	r1, r1, #4
 800b738:	6021      	strge	r1, [r4, #0]
 800b73a:	b90e      	cbnz	r6, 800b740 <_printf_i+0x114>
 800b73c:	2d00      	cmp	r5, #0
 800b73e:	d04b      	beq.n	800b7d8 <_printf_i+0x1ac>
 800b740:	4615      	mov	r5, r2
 800b742:	fbb6 f1f3 	udiv	r1, r6, r3
 800b746:	fb03 6711 	mls	r7, r3, r1, r6
 800b74a:	5dc7      	ldrb	r7, [r0, r7]
 800b74c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b750:	4637      	mov	r7, r6
 800b752:	42bb      	cmp	r3, r7
 800b754:	460e      	mov	r6, r1
 800b756:	d9f4      	bls.n	800b742 <_printf_i+0x116>
 800b758:	2b08      	cmp	r3, #8
 800b75a:	d10b      	bne.n	800b774 <_printf_i+0x148>
 800b75c:	6823      	ldr	r3, [r4, #0]
 800b75e:	07de      	lsls	r6, r3, #31
 800b760:	d508      	bpl.n	800b774 <_printf_i+0x148>
 800b762:	6923      	ldr	r3, [r4, #16]
 800b764:	6861      	ldr	r1, [r4, #4]
 800b766:	4299      	cmp	r1, r3
 800b768:	bfde      	ittt	le
 800b76a:	2330      	movle	r3, #48	; 0x30
 800b76c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b770:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b774:	1b52      	subs	r2, r2, r5
 800b776:	6122      	str	r2, [r4, #16]
 800b778:	f8cd a000 	str.w	sl, [sp]
 800b77c:	464b      	mov	r3, r9
 800b77e:	aa03      	add	r2, sp, #12
 800b780:	4621      	mov	r1, r4
 800b782:	4640      	mov	r0, r8
 800b784:	f7ff fee4 	bl	800b550 <_printf_common>
 800b788:	3001      	adds	r0, #1
 800b78a:	d14a      	bne.n	800b822 <_printf_i+0x1f6>
 800b78c:	f04f 30ff 	mov.w	r0, #4294967295
 800b790:	b004      	add	sp, #16
 800b792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b796:	6823      	ldr	r3, [r4, #0]
 800b798:	f043 0320 	orr.w	r3, r3, #32
 800b79c:	6023      	str	r3, [r4, #0]
 800b79e:	4833      	ldr	r0, [pc, #204]	; (800b86c <_printf_i+0x240>)
 800b7a0:	2778      	movs	r7, #120	; 0x78
 800b7a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b7a6:	6823      	ldr	r3, [r4, #0]
 800b7a8:	6829      	ldr	r1, [r5, #0]
 800b7aa:	061f      	lsls	r7, r3, #24
 800b7ac:	f851 6b04 	ldr.w	r6, [r1], #4
 800b7b0:	d402      	bmi.n	800b7b8 <_printf_i+0x18c>
 800b7b2:	065f      	lsls	r7, r3, #25
 800b7b4:	bf48      	it	mi
 800b7b6:	b2b6      	uxthmi	r6, r6
 800b7b8:	07df      	lsls	r7, r3, #31
 800b7ba:	bf48      	it	mi
 800b7bc:	f043 0320 	orrmi.w	r3, r3, #32
 800b7c0:	6029      	str	r1, [r5, #0]
 800b7c2:	bf48      	it	mi
 800b7c4:	6023      	strmi	r3, [r4, #0]
 800b7c6:	b91e      	cbnz	r6, 800b7d0 <_printf_i+0x1a4>
 800b7c8:	6823      	ldr	r3, [r4, #0]
 800b7ca:	f023 0320 	bic.w	r3, r3, #32
 800b7ce:	6023      	str	r3, [r4, #0]
 800b7d0:	2310      	movs	r3, #16
 800b7d2:	e7a7      	b.n	800b724 <_printf_i+0xf8>
 800b7d4:	4824      	ldr	r0, [pc, #144]	; (800b868 <_printf_i+0x23c>)
 800b7d6:	e7e4      	b.n	800b7a2 <_printf_i+0x176>
 800b7d8:	4615      	mov	r5, r2
 800b7da:	e7bd      	b.n	800b758 <_printf_i+0x12c>
 800b7dc:	682b      	ldr	r3, [r5, #0]
 800b7de:	6826      	ldr	r6, [r4, #0]
 800b7e0:	6961      	ldr	r1, [r4, #20]
 800b7e2:	1d18      	adds	r0, r3, #4
 800b7e4:	6028      	str	r0, [r5, #0]
 800b7e6:	0635      	lsls	r5, r6, #24
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	d501      	bpl.n	800b7f0 <_printf_i+0x1c4>
 800b7ec:	6019      	str	r1, [r3, #0]
 800b7ee:	e002      	b.n	800b7f6 <_printf_i+0x1ca>
 800b7f0:	0670      	lsls	r0, r6, #25
 800b7f2:	d5fb      	bpl.n	800b7ec <_printf_i+0x1c0>
 800b7f4:	8019      	strh	r1, [r3, #0]
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	6123      	str	r3, [r4, #16]
 800b7fa:	4615      	mov	r5, r2
 800b7fc:	e7bc      	b.n	800b778 <_printf_i+0x14c>
 800b7fe:	682b      	ldr	r3, [r5, #0]
 800b800:	1d1a      	adds	r2, r3, #4
 800b802:	602a      	str	r2, [r5, #0]
 800b804:	681d      	ldr	r5, [r3, #0]
 800b806:	6862      	ldr	r2, [r4, #4]
 800b808:	2100      	movs	r1, #0
 800b80a:	4628      	mov	r0, r5
 800b80c:	f7f4 fce8 	bl	80001e0 <memchr>
 800b810:	b108      	cbz	r0, 800b816 <_printf_i+0x1ea>
 800b812:	1b40      	subs	r0, r0, r5
 800b814:	6060      	str	r0, [r4, #4]
 800b816:	6863      	ldr	r3, [r4, #4]
 800b818:	6123      	str	r3, [r4, #16]
 800b81a:	2300      	movs	r3, #0
 800b81c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b820:	e7aa      	b.n	800b778 <_printf_i+0x14c>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	462a      	mov	r2, r5
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	47d0      	blx	sl
 800b82c:	3001      	adds	r0, #1
 800b82e:	d0ad      	beq.n	800b78c <_printf_i+0x160>
 800b830:	6823      	ldr	r3, [r4, #0]
 800b832:	079b      	lsls	r3, r3, #30
 800b834:	d413      	bmi.n	800b85e <_printf_i+0x232>
 800b836:	68e0      	ldr	r0, [r4, #12]
 800b838:	9b03      	ldr	r3, [sp, #12]
 800b83a:	4298      	cmp	r0, r3
 800b83c:	bfb8      	it	lt
 800b83e:	4618      	movlt	r0, r3
 800b840:	e7a6      	b.n	800b790 <_printf_i+0x164>
 800b842:	2301      	movs	r3, #1
 800b844:	4632      	mov	r2, r6
 800b846:	4649      	mov	r1, r9
 800b848:	4640      	mov	r0, r8
 800b84a:	47d0      	blx	sl
 800b84c:	3001      	adds	r0, #1
 800b84e:	d09d      	beq.n	800b78c <_printf_i+0x160>
 800b850:	3501      	adds	r5, #1
 800b852:	68e3      	ldr	r3, [r4, #12]
 800b854:	9903      	ldr	r1, [sp, #12]
 800b856:	1a5b      	subs	r3, r3, r1
 800b858:	42ab      	cmp	r3, r5
 800b85a:	dcf2      	bgt.n	800b842 <_printf_i+0x216>
 800b85c:	e7eb      	b.n	800b836 <_printf_i+0x20a>
 800b85e:	2500      	movs	r5, #0
 800b860:	f104 0619 	add.w	r6, r4, #25
 800b864:	e7f5      	b.n	800b852 <_printf_i+0x226>
 800b866:	bf00      	nop
 800b868:	0800bc4d 	.word	0x0800bc4d
 800b86c:	0800bc5e 	.word	0x0800bc5e

0800b870 <memmove>:
 800b870:	4288      	cmp	r0, r1
 800b872:	b510      	push	{r4, lr}
 800b874:	eb01 0402 	add.w	r4, r1, r2
 800b878:	d902      	bls.n	800b880 <memmove+0x10>
 800b87a:	4284      	cmp	r4, r0
 800b87c:	4623      	mov	r3, r4
 800b87e:	d807      	bhi.n	800b890 <memmove+0x20>
 800b880:	1e43      	subs	r3, r0, #1
 800b882:	42a1      	cmp	r1, r4
 800b884:	d008      	beq.n	800b898 <memmove+0x28>
 800b886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b88a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b88e:	e7f8      	b.n	800b882 <memmove+0x12>
 800b890:	4402      	add	r2, r0
 800b892:	4601      	mov	r1, r0
 800b894:	428a      	cmp	r2, r1
 800b896:	d100      	bne.n	800b89a <memmove+0x2a>
 800b898:	bd10      	pop	{r4, pc}
 800b89a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b89e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b8a2:	e7f7      	b.n	800b894 <memmove+0x24>

0800b8a4 <_sbrk_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	; (800b8c0 <_sbrk_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f6 f81c 	bl	80018ec <_sbrk>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_sbrk_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_sbrk_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20003cdc 	.word	0x20003cdc

0800b8c4 <_realloc_r>:
 800b8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8c8:	4680      	mov	r8, r0
 800b8ca:	4614      	mov	r4, r2
 800b8cc:	460e      	mov	r6, r1
 800b8ce:	b921      	cbnz	r1, 800b8da <_realloc_r+0x16>
 800b8d0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b8d4:	4611      	mov	r1, r2
 800b8d6:	f7ff bc57 	b.w	800b188 <_malloc_r>
 800b8da:	b92a      	cbnz	r2, 800b8e8 <_realloc_r+0x24>
 800b8dc:	f7ff fbe8 	bl	800b0b0 <_free_r>
 800b8e0:	4625      	mov	r5, r4
 800b8e2:	4628      	mov	r0, r5
 800b8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8e8:	f000 f81b 	bl	800b922 <_malloc_usable_size_r>
 800b8ec:	4284      	cmp	r4, r0
 800b8ee:	4607      	mov	r7, r0
 800b8f0:	d802      	bhi.n	800b8f8 <_realloc_r+0x34>
 800b8f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b8f6:	d812      	bhi.n	800b91e <_realloc_r+0x5a>
 800b8f8:	4621      	mov	r1, r4
 800b8fa:	4640      	mov	r0, r8
 800b8fc:	f7ff fc44 	bl	800b188 <_malloc_r>
 800b900:	4605      	mov	r5, r0
 800b902:	2800      	cmp	r0, #0
 800b904:	d0ed      	beq.n	800b8e2 <_realloc_r+0x1e>
 800b906:	42bc      	cmp	r4, r7
 800b908:	4622      	mov	r2, r4
 800b90a:	4631      	mov	r1, r6
 800b90c:	bf28      	it	cs
 800b90e:	463a      	movcs	r2, r7
 800b910:	f7ff fbc0 	bl	800b094 <memcpy>
 800b914:	4631      	mov	r1, r6
 800b916:	4640      	mov	r0, r8
 800b918:	f7ff fbca 	bl	800b0b0 <_free_r>
 800b91c:	e7e1      	b.n	800b8e2 <_realloc_r+0x1e>
 800b91e:	4635      	mov	r5, r6
 800b920:	e7df      	b.n	800b8e2 <_realloc_r+0x1e>

0800b922 <_malloc_usable_size_r>:
 800b922:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b926:	1f18      	subs	r0, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	bfbc      	itt	lt
 800b92c:	580b      	ldrlt	r3, [r1, r0]
 800b92e:	18c0      	addlt	r0, r0, r3
 800b930:	4770      	bx	lr
	...

0800b934 <round>:
 800b934:	ec53 2b10 	vmov	r2, r3, d0
 800b938:	b570      	push	{r4, r5, r6, lr}
 800b93a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800b93e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800b942:	2813      	cmp	r0, #19
 800b944:	ee10 5a10 	vmov	r5, s0
 800b948:	4619      	mov	r1, r3
 800b94a:	dc18      	bgt.n	800b97e <round+0x4a>
 800b94c:	2800      	cmp	r0, #0
 800b94e:	da09      	bge.n	800b964 <round+0x30>
 800b950:	3001      	adds	r0, #1
 800b952:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800b956:	d103      	bne.n	800b960 <round+0x2c>
 800b958:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800b95c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b960:	2300      	movs	r3, #0
 800b962:	e02a      	b.n	800b9ba <round+0x86>
 800b964:	4c16      	ldr	r4, [pc, #88]	; (800b9c0 <round+0x8c>)
 800b966:	4104      	asrs	r4, r0
 800b968:	ea03 0604 	and.w	r6, r3, r4
 800b96c:	4316      	orrs	r6, r2
 800b96e:	d011      	beq.n	800b994 <round+0x60>
 800b970:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b974:	4103      	asrs	r3, r0
 800b976:	440b      	add	r3, r1
 800b978:	ea23 0104 	bic.w	r1, r3, r4
 800b97c:	e7f0      	b.n	800b960 <round+0x2c>
 800b97e:	2833      	cmp	r0, #51	; 0x33
 800b980:	dd0b      	ble.n	800b99a <round+0x66>
 800b982:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800b986:	d105      	bne.n	800b994 <round+0x60>
 800b988:	ee10 0a10 	vmov	r0, s0
 800b98c:	f7f4 fc7e 	bl	800028c <__adddf3>
 800b990:	4602      	mov	r2, r0
 800b992:	460b      	mov	r3, r1
 800b994:	ec43 2b10 	vmov	d0, r2, r3
 800b998:	bd70      	pop	{r4, r5, r6, pc}
 800b99a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800b99e:	f04f 34ff 	mov.w	r4, #4294967295
 800b9a2:	40f4      	lsrs	r4, r6
 800b9a4:	4214      	tst	r4, r2
 800b9a6:	d0f5      	beq.n	800b994 <round+0x60>
 800b9a8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800b9ac:	2301      	movs	r3, #1
 800b9ae:	4083      	lsls	r3, r0
 800b9b0:	195b      	adds	r3, r3, r5
 800b9b2:	bf28      	it	cs
 800b9b4:	3101      	addcs	r1, #1
 800b9b6:	ea23 0304 	bic.w	r3, r3, r4
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	460b      	mov	r3, r1
 800b9be:	e7e9      	b.n	800b994 <round+0x60>
 800b9c0:	000fffff 	.word	0x000fffff

0800b9c4 <_init>:
 800b9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9c6:	bf00      	nop
 800b9c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9ca:	bc08      	pop	{r3}
 800b9cc:	469e      	mov	lr, r3
 800b9ce:	4770      	bx	lr

0800b9d0 <_fini>:
 800b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b9d2:	bf00      	nop
 800b9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b9d6:	bc08      	pop	{r3}
 800b9d8:	469e      	mov	lr, r3
 800b9da:	4770      	bx	lr
