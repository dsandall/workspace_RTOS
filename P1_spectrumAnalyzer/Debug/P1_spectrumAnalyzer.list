
P1_spectrumAnalyzer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd24  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000134e0  0800beb8  0800beb8  0001beb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801f398  0801f398  000301dc  2**0
                  CONTENTS
  4 .ARM          00000000  0801f398  0801f398  000301dc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0801f398  0801f398  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801f398  0801f398  0002f398  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f39c  0801f39c  0002f39c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0801f3a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00006bd4  200001dc  0801f57c  000301dc  2**2
                  ALLOC
 10 ._user_heap_stack 00001e00  20006db0  0801f57c  00036db0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .comment      000000b8  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021961  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a4c  00000000  00000000  00051c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001690  00000000  00000000  00056678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001047  00000000  00000000  00057d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002914e  00000000  00000000  00058d4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aa34  00000000  00000000  00081e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb7da  00000000  00000000  0009c8d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007148  00000000  00000000  001980ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0019f1f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    000038a2  00000000  00000000  0019f261  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000198  00000000  00000000  001a2b03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be9c 	.word	0x0800be9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	0800be9c 	.word	0x0800be9c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <DMA1C3_16bADC2M_init>:

	DMA1_Channel1->CCR |= DMA_CCR_EN; //must be enabled after configuration

}

void DMA1C3_16bADC2M_init(uint16_t* destAddress){
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN; //Enable Clock input to DMA1
 8000cfc:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <DMA1C3_16bADC2M_init+0x88>)
 8000cfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d00:	4a1e      	ldr	r2, [pc, #120]	; (8000d7c <DMA1C3_16bADC2M_init+0x88>)
 8000d02:	f043 0301 	orr.w	r3, r3, #1
 8000d06:	6493      	str	r3, [r2, #72]	; 0x48

	DMA1_Channel3->CNDTR = 2048; //number of transfers before resetting the address(es)
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d0a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d0e:	605a      	str	r2, [r3, #4]

	DMA1_Channel3->CPAR = (uint32_t)&(ADC3->DR); //Peripheral Address (DIR=0: Source address)
 8000d10:	4b1b      	ldr	r3, [pc, #108]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d12:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <DMA1C3_16bADC2M_init+0x90>)
 8000d14:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)destAddress; //Memory Address(DIR=0: Destination address)
 8000d16:	4a1a      	ldr	r2, [pc, #104]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	60d3      	str	r3, [r2, #12]

	DMA1_Channel3->CCR = 0x0; //clear entire register
 8000d1c:	4b18      	ldr	r3, [pc, #96]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_TCIE | DMA_CCR_TEIE | DMA_CCR_CIRC | (0b10<<12); //Priority high
 8000d22:	4b17      	ldr	r3, [pc, #92]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4a16      	ldr	r2, [pc, #88]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000d2c:	f043 032a 	orr.w	r3, r3, #42	; 0x2a
 8000d30:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= ((0b01<<8) | (0b01<<10)); //sets PSIZE and MSIZE to 16 bit chunks (S and D for dir=0)
 8000d32:	4b13      	ldr	r3, [pc, #76]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a12      	ldr	r2, [pc, #72]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d38:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000d3c:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~(DMA_CCR_PINC); //disable incrementation for source
 8000d3e:	4b10      	ldr	r3, [pc, #64]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4a0f      	ldr	r2, [pc, #60]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d48:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= (DMA_CCR_MINC); //enable incrementation for destination
 8000d4a:	4b0d      	ldr	r3, [pc, #52]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4a0c      	ldr	r2, [pc, #48]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d54:	6013      	str	r3, [r2, #0]

	//enabling/disabling DMA_CCR_DIR merely flips direction of the transfer (DIR=0: P2M)

	DMA1_CSELR->CSELR = (0b0000<<8); //set channel 3 interrupt triggering to ADC3
 8000d56:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <DMA1C3_16bADC2M_init+0x94>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]

	NVIC->ISER[DMA1_Channel3_IRQn / 32] = (1 << (DMA1_Channel3_IRQn % 32));
 8000d5c:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <DMA1C3_16bADC2M_init+0x98>)
 8000d5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d62:	601a      	str	r2, [r3, #0]
	//TODO: Ensure that ISR is in place, handling TCIF1, THIF1, and TEIF1

	DMA1_Channel3->CCR |= DMA_CCR_EN; //must be enabled after configuration
 8000d64:	4b06      	ldr	r3, [pc, #24]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a05      	ldr	r2, [pc, #20]	; (8000d80 <DMA1C3_16bADC2M_init+0x8c>)
 8000d6a:	f043 0301 	orr.w	r3, r3, #1
 8000d6e:	6013      	str	r3, [r2, #0]

}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	40021000 	.word	0x40021000
 8000d80:	40020030 	.word	0x40020030
 8000d84:	50040240 	.word	0x50040240
 8000d88:	400200a8 	.word	0x400200a8
 8000d8c:	e000e100 	.word	0xe000e100

08000d90 <ADC3_IRQHandler>:


void ADC3_IRQHandler(void) {
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
//		GPIOA->ODR &= ~(1 << 5);//set low
//	}



	  ADC3->ISR |= ADC_ISR_EOS;
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000d9a:	f043 0308 	orr.w	r3, r3, #8
 8000d9e:	6013      	str	r3, [r2, #0]
	  ADC3->ISR |= ADC_ISR_EOSMP;
 8000da0:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a22      	ldr	r2, [pc, #136]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000da6:	f043 0302 	orr.w	r3, r3, #2
 8000daa:	6013      	str	r3, [r2, #0]


	//For CCR2 interrupt mode
	if (ADC3->ISR & ADC_ISR_EOC){
 8000dac:	4b20      	ldr	r3, [pc, #128]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f003 0304 	and.w	r3, r3, #4
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d00d      	beq.n	8000dd4 <ADC3_IRQHandler+0x44>
		ADC3->ISR |= ADC_ISR_EOC; //clear flag
 8000db8:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000dbe:	f043 0304 	orr.w	r3, r3, #4
 8000dc2:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 8000dc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000dc8:	695b      	ldr	r3, [r3, #20]
 8000dca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000dce:	f083 0320 	eor.w	r3, r3, #32
 8000dd2:	6153      	str	r3, [r2, #20]
	}
	if (ADC3->ISR & ADC_ISR_ADRDY){
 8000dd4:	4b16      	ldr	r3, [pc, #88]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d00d      	beq.n	8000dfc <ADC3_IRQHandler+0x6c>
		ADC3->ISR |= ADC_ISR_ADRDY; //clear flag
 8000de0:	4b13      	ldr	r3, [pc, #76]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	4a12      	ldr	r2, [pc, #72]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 8000dec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000df0:	695b      	ldr	r3, [r3, #20]
 8000df2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000df6:	f083 0320 	eor.w	r3, r3, #32
 8000dfa:	6153      	str	r3, [r2, #20]
	}
	if (ADC3->ISR & ADC_ISR_OVR){
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d00d      	beq.n	8000e24 <ADC3_IRQHandler+0x94>
		ADC3->ISR |= ADC_ISR_OVR; //clear flag
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a08      	ldr	r2, [pc, #32]	; (8000e30 <ADC3_IRQHandler+0xa0>)
 8000e0e:	f043 0310 	orr.w	r3, r3, #16
 8000e12:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 8000e14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e18:	695b      	ldr	r3, [r3, #20]
 8000e1a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000e1e:	f083 0320 	eor.w	r3, r3, #32
 8000e22:	6153      	str	r3, [r2, #20]
	}


}
 8000e24:	bf00      	nop
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	50040200 	.word	0x50040200

08000e34 <ADC_init_wDMA>:
	  RCC->AHB2ENR |= (1<<13);  // enable ADC clock
	  ADC123_COMMON->CCR |= 0x0;
	  ADC3->CFGR |= 0x0;
}

void ADC_init_wDMA(){
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
	  //Enable ADC and GPIO clock, set up PC0
	  RCC->AHB2ENR |= (1<<13);  // enable ADC clock
 8000e3a:	4b54      	ldr	r3, [pc, #336]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3e:	4a53      	ldr	r2, [pc, #332]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e44:	64d3      	str	r3, [r2, #76]	; 0x4c
	  RCC->AHB2ENR |= (1<<2);  // enable GPIOC clock
 8000e46:	4b51      	ldr	r3, [pc, #324]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a50      	ldr	r2, [pc, #320]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
	  ADC123_COMMON->CCR |= ADC_CCR_CKMODE; //alternative clock mode (HCLK/4)
 8000e52:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <ADC_init_wDMA+0x15c>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	4a4e      	ldr	r2, [pc, #312]	; (8000f90 <ADC_init_wDMA+0x15c>)
 8000e58:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000e5c:	6093      	str	r3, [r2, #8]

		// turn on clock to GPIOC
	  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000e5e:	4b4b      	ldr	r3, [pc, #300]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a4a      	ldr	r2, [pc, #296]	; (8000f8c <ADC_init_wDMA+0x158>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
	  //set up GPIO pin
	  int pinCx = 0; //pinC0
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	60bb      	str	r3, [r7, #8]
	  GPIOC->MODER |= (0b11 << (pinCx*2)); //set C0 to analog mode
 8000e6e:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <ADC_init_wDMA+0x160>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	0052      	lsls	r2, r2, #1
 8000e76:	2103      	movs	r1, #3
 8000e78:	fa01 f202 	lsl.w	r2, r1, r2
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4a45      	ldr	r2, [pc, #276]	; (8000f94 <ADC_init_wDMA+0x160>)
 8000e80:	430b      	orrs	r3, r1
 8000e82:	6013      	str	r3, [r2, #0]
	  GPIOC->ASCR |= GPIO_ASCR_ASC0;
 8000e84:	4b43      	ldr	r3, [pc, #268]	; (8000f94 <ADC_init_wDMA+0x160>)
 8000e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e88:	4a42      	ldr	r2, [pc, #264]	; (8000f94 <ADC_init_wDMA+0x160>)
 8000e8a:	f043 0301 	orr.w	r3, r3, #1
 8000e8e:	62d3      	str	r3, [r2, #44]	; 0x2c

	  //shouldn't matter for ADC3 (if you switch to ADC1/2 this might matter, and could be in the wrong sequence)
	  ADC3->DIFSEL = 0x0; //single ended mode for all channels
 8000e90:	4b41      	ldr	r3, [pc, #260]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	  //initialize ADC
	  ADC3->CR &= ~ADC_CR_DEEPPWD; //disable DeepPowerDown mode (defaults to on)
 8000e98:	4b3f      	ldr	r3, [pc, #252]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	4a3e      	ldr	r2, [pc, #248]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000e9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8000ea2:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= ADC_CR_ADVREGEN; //enable ADC voltage regulator (required)
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ea6:	689b      	ldr	r3, [r3, #8]
 8000ea8:	4a3b      	ldr	r2, [pc, #236]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eae:	6093      	str	r3, [r2, #8]
	  for(int i = 20; i > 0; i--){asm("NOP");} //required delay is 20us, one clock period @4MHz is .25us
 8000eb0:	2314      	movs	r3, #20
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	e003      	b.n	8000ebe <ADC_init_wDMA+0x8a>
 8000eb6:	bf00      	nop
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	60fb      	str	r3, [r7, #12]
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	dcf8      	bgt.n	8000eb6 <ADC_init_wDMA+0x82>

	  //calibrate ADC
	  ADC3->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 8000ec4:	4b34      	ldr	r3, [pc, #208]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	4a33      	ldr	r2, [pc, #204]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000eca:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ece:	f023 0301 	bic.w	r3, r3, #1
 8000ed2:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= ADC_CR_ADCAL;
 8000ed4:	4b30      	ldr	r3, [pc, #192]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	4a2f      	ldr	r2, [pc, #188]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000eda:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ede:	6093      	str	r3, [r2, #8]
	  while ((ADC3->CR & ADC_CR_ADCAL)){}; //wait for calibration
 8000ee0:	bf00      	nop
 8000ee2:	4b2d      	ldr	r3, [pc, #180]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	dbfb      	blt.n	8000ee2 <ADC_init_wDMA+0xae>




	  //enable ADC
	  ADC3->ISR |= ADC_ISR_ADRDY; //clear RDY
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a2a      	ldr	r2, [pc, #168]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	6013      	str	r3, [r2, #0]
	  ADC3->CR |= ADC_CR_ADEN; //enable ADC after regulator startup
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	4a27      	ldr	r2, [pc, #156]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6093      	str	r3, [r2, #8]
	  while(!(ADC3->ISR & ADC_ISR_ADRDY)){}; //wait for ready
 8000f02:	bf00      	nop
 8000f04:	4b24      	ldr	r3, [pc, #144]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f9      	beq.n	8000f04 <ADC_init_wDMA+0xd0>
	  ADC3->ISR |= ADC_ISR_ADRDY; //clear RDY
 8000f10:	4b21      	ldr	r3, [pc, #132]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a20      	ldr	r2, [pc, #128]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f16:	f043 0301 	orr.w	r3, r3, #1
 8000f1a:	6013      	str	r3, [r2, #0]
//	  ADC3->IER |= 1<<2; //interrupt on conversion complete
//	  ADC3->IER |= 1<<4; //interrupt on overrun


	  //ADC hardware triggering (clears CFGR!)
	  ADC3->CFGR &= (0011<<6); //EXTSEL = 0011 (TIM2CH2)
 8000f1c:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4a1d      	ldr	r2, [pc, #116]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f22:	f403 7310 	and.w	r3, r3, #576	; 0x240
 8000f26:	60d3      	str	r3, [r2, #12]
	  ADC3->CFGR |= (0b0011<<6); //EXTSEL = 0011 (TIM2CH2)
 8000f28:	4b1b      	ldr	r3, [pc, #108]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	4a1a      	ldr	r2, [pc, #104]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f2e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f32:	60d3      	str	r3, [r2, #12]
	  ADC3->CFGR &= ~ADC_CFGR_EXTEN; //hardware triggers conversions (on rising edge)
 8000f34:	4b18      	ldr	r3, [pc, #96]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	4a17      	ldr	r2, [pc, #92]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f3a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000f3e:	60d3      	str	r3, [r2, #12]
	  	  ADC3->CFGR |= 0b11<<10; //hardware triggers conversions (on rising edge) TODO: not enabling?
 8000f40:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f42:	68db      	ldr	r3, [r3, #12]
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f46:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 8000f4a:	60d3      	str	r3, [r2, #12]

	  //set up ADC (DMA, continuous mode, resolution)
	  ADC3->CFGR |= ADC_CFGR_DMAEN; //enable DMA triggering //no longer ADC_CFGR_DMACFG, no longer continuous
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	4a11      	ldr	r2, [pc, #68]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	60d3      	str	r3, [r2, #12]
	  ADC3->CFGR &= ~ADC_CFGR_RES; //set resolution to 12b
 8000f58:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f5a:	68db      	ldr	r3, [r3, #12]
 8000f5c:	4a0e      	ldr	r2, [pc, #56]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f5e:	f023 0318 	bic.w	r3, r3, #24
 8000f62:	60d3      	str	r3, [r2, #12]




	  //set sample time for channel 1
	  int channel = 1; //channel 1
 8000f64:	2301      	movs	r3, #1
 8000f66:	607b      	str	r3, [r7, #4]
	  ADC3->SMPR1 = 0b100<<(3*channel); //set sample time (47.5 ADC clock cycles = some frequency)
 8000f68:	687a      	ldr	r2, [r7, #4]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	005b      	lsls	r3, r3, #1
 8000f6e:	4413      	add	r3, r2
 8000f70:	2204      	movs	r2, #4
 8000f72:	409a      	lsls	r2, r3
 8000f74:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f76:	615a      	str	r2, [r3, #20]

	  //set conversion sequence
	  ADC3->SQR1 = (0b1<<6) | (0b0<<0); //set first conversion in sequence to channel 1, set conversion sequence length to 1 conversion (just convert channel 1 over and over)
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <ADC_init_wDMA+0x164>)
 8000f7a:	2240      	movs	r2, #64	; 0x40
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30

	  //ADC3->CR |= ADC_CR_ADSTP; //stop ADC conversions

	  //myData = ADC3->DR; //read ADC3

}
 8000f7e:	bf00      	nop
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000
 8000f90:	50040300 	.word	0x50040300
 8000f94:	48000800 	.word	0x48000800
 8000f98:	50040200 	.word	0x50040200

08000f9c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fa4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fa8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d013      	beq.n	8000fdc <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000fb4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fb8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000fbc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d00b      	beq.n	8000fdc <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc4:	e000      	b.n	8000fc8 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000fc6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000fc8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d0f9      	beq.n	8000fc6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000fd2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	b2d2      	uxtb	r2, r2
 8000fda:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	370c      	adds	r7, #12
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
	...

08000fec <PortC_Init>:

#include "main.h"


void PortC_Init(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	// turn on clock to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000ff0:	4b1c      	ldr	r3, [pc, #112]	; (8001064 <PortC_Init+0x78>)
 8000ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <PortC_Init+0x78>)
 8000ff6:	f043 0304 	orr.w	r3, r3, #4
 8000ffa:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure PC0-3 for GPIO output
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 8000ffc:	4b1a      	ldr	r3, [pc, #104]	; (8001068 <PortC_Init+0x7c>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a19      	ldr	r2, [pc, #100]	; (8001068 <PortC_Init+0x7c>)
 8001002:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001006:	6013      	str	r3, [r2, #0]
					    GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
	GPIOC->MODER   |=  ((1 << GPIO_MODER_MODE0_Pos) |
 8001008:	4b17      	ldr	r3, [pc, #92]	; (8001068 <PortC_Init+0x7c>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a16      	ldr	r2, [pc, #88]	; (8001068 <PortC_Init+0x7c>)
 800100e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8001012:	6013      	str	r3, [r2, #0]
					    (1 << GPIO_MODER_MODE1_Pos) |
					    (1 << GPIO_MODER_MODE2_Pos) |
					    (1 << GPIO_MODER_MODE3_Pos));

	GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 |
 8001014:	4b14      	ldr	r3, [pc, #80]	; (8001068 <PortC_Init+0x7c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	4a13      	ldr	r2, [pc, #76]	; (8001068 <PortC_Init+0x7c>)
 800101a:	f023 030f 	bic.w	r3, r3, #15
 800101e:	6053      	str	r3, [r2, #4]
					    GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1 |
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <PortC_Init+0x7c>)
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	4a10      	ldr	r2, [pc, #64]	; (8001068 <PortC_Init+0x7c>)
 8001026:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800102a:	6093      	str	r3, [r2, #8]
					    GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 800102c:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <PortC_Init+0x7c>)
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	4a0d      	ldr	r2, [pc, #52]	; (8001068 <PortC_Init+0x7c>)
 8001032:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001036:	60d3      	str	r3, [r2, #12]
					    GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
	GPIOC->BSRR    =   (GPIO_BSRR_BR0 | GPIO_BSRR_BR1 |
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <PortC_Init+0x7c>)
 800103a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 800103e:	619a      	str	r2, [r3, #24]
					    GPIO_BSRR_BR2 | GPIO_BSRR_BR3);

	// Configure PC13 for user button input
	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <PortC_Init+0x7c>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a08      	ldr	r2, [pc, #32]	; (8001068 <PortC_Init+0x7c>)
 8001046:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 800104a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <PortC_Init+0x7c>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	4a05      	ldr	r2, [pc, #20]	; (8001068 <PortC_Init+0x7c>)
 8001052:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001056:	60d3      	str	r3, [r2, #12]
}
 8001058:	bf00      	nop
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000
 8001068:	48000800 	.word	0x48000800

0800106c <MSI_Overclock>:
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED5);
	GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT5);
	GPIOA->ODR     &= ~(GPIO_PIN_5);
}

void MSI_Overclock(void){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
	//Change MSI speed
	//

//	uint8_t MSIRANGE_400khz =0b0010;
//	uint8_t MSIRANGE_4Mhz =0b0110;
	uint8_t MSIRANGE_32Mhz = 0b1010;
 8001072:	230a      	movs	r3, #10
 8001074:	71fb      	strb	r3, [r7, #7]
	  if (RCC->CR & 0b1) { //if MSI clock is in RDY state
 8001076:	4b2b      	ldr	r3, [pc, #172]	; (8001124 <MSI_Overclock+0xb8>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	d013      	beq.n	80010aa <MSI_Overclock+0x3e>
		  RCC->CR &= ~(0b1111 << 4); //clear MSI freq select register
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MSI_Overclock+0xb8>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4a27      	ldr	r2, [pc, #156]	; (8001124 <MSI_Overclock+0xb8>)
 8001088:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800108c:	6013      	str	r3, [r2, #0]
		  RCC->CR |= (MSIRANGE_32Mhz << 4); //set it to desired Frequency
 800108e:	4b25      	ldr	r3, [pc, #148]	; (8001124 <MSI_Overclock+0xb8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	79fa      	ldrb	r2, [r7, #7]
 8001094:	0112      	lsls	r2, r2, #4
 8001096:	4611      	mov	r1, r2
 8001098:	4a22      	ldr	r2, [pc, #136]	; (8001124 <MSI_Overclock+0xb8>)
 800109a:	430b      	orrs	r3, r1
 800109c:	6013      	str	r3, [r2, #0]
		  RCC->CR |= (0b1 << 3); //enable MSI frequency selection
 800109e:	4b21      	ldr	r3, [pc, #132]	; (8001124 <MSI_Overclock+0xb8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a20      	ldr	r2, [pc, #128]	; (8001124 <MSI_Overclock+0xb8>)
 80010a4:	f043 0308 	orr.w	r3, r3, #8
 80010a8:	6013      	str	r3, [r2, #0]
	  }


	//Output MSI on MCO (Pin A8)
	  RCC->CFGR |= 0b100<<28; //prescale MCO by 16
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MSI_Overclock+0xb8>)
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	4a1d      	ldr	r2, [pc, #116]	; (8001124 <MSI_Overclock+0xb8>)
 80010b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80010b4:	6093      	str	r3, [r2, #8]
	  RCC->CFGR |= 0b0001<<24; //SYSCLOCK on MCO
 80010b6:	4b1b      	ldr	r3, [pc, #108]	; (8001124 <MSI_Overclock+0xb8>)
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	4a1a      	ldr	r2, [pc, #104]	; (8001124 <MSI_Overclock+0xb8>)
 80010bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010c0:	6093      	str	r3, [r2, #8]
	  //RCC->CFGR & RCC_CFGR_SWS //system clock status register (read which clock is sysclock)
	  RCC->CFGR &= ~(0b11); //system clock switch (select which clock is sysclock)
 80010c2:	4b18      	ldr	r3, [pc, #96]	; (8001124 <MSI_Overclock+0xb8>)
 80010c4:	689b      	ldr	r3, [r3, #8]
 80010c6:	4a17      	ldr	r2, [pc, #92]	; (8001124 <MSI_Overclock+0xb8>)
 80010c8:	f023 0303 	bic.w	r3, r3, #3
 80010cc:	6093      	str	r3, [r2, #8]

	  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MSI_Overclock+0xb8>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a14      	ldr	r2, [pc, #80]	; (8001124 <MSI_Overclock+0xb8>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
	  GPIOA->MODER &= ~(0b11<<(8*2)); //set port A8 to AF mode
 80010da:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80010e8:	6013      	str	r3, [r2, #0]
	  GPIOA->MODER |= 0b10<<(8*2); //set port A8 to AF mode
 80010ea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	6013      	str	r3, [r2, #0]
	  GPIOA->AFR[0] &= ~(0b1111 << 0); //Clear AF select reg
 80010fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80010fe:	6a1b      	ldr	r3, [r3, #32]
 8001100:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001104:	f023 030f 	bic.w	r3, r3, #15
 8001108:	6213      	str	r3, [r2, #32]
	  GPIOA->AFR[0] |= (0b0000 << 0); //Port A8 to AFR 0
 800110a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800110e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001112:	6a1b      	ldr	r3, [r3, #32]
 8001114:	6213      	str	r3, [r2, #32]

}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	40021000 	.word	0x40021000

08001128 <_write>:

//for SW debug printing
int _write(int file, char *ptr, int len)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	60f8      	str	r0, [r7, #12]
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]
 8001138:	e009      	b.n	800114e <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	1c5a      	adds	r2, r3, #1
 800113e:	60ba      	str	r2, [r7, #8]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff2a 	bl	8000f9c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	3301      	adds	r3, #1
 800114c:	617b      	str	r3, [r7, #20]
 800114e:	697a      	ldr	r2, [r7, #20]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	429a      	cmp	r2, r3
 8001154:	dbf1      	blt.n	800113a <_write+0x12>
  }
  return len;
 8001156:	687b      	ldr	r3, [r7, #4]
}
 8001158:	4618      	mov	r0, r3
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <main>:


////// Main Function //////
/* Main - just initializations --------------------------------------------------*/
int main(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af02      	add	r7, sp, #8

	HAL_Init();
 8001166:	f000 fed6 	bl	8001f16 <HAL_Init>
	SystemClock_Config(); //overridden by next function
 800116a:	f000 fa7f 	bl	800166c <SystemClock_Config>

	MSI_Overclock(); //32 MHz
 800116e:	f7ff ff7d 	bl	800106c <MSI_Overclock>
	PortC_Init(); //used for debugging
 8001172:	f7ff ff3b 	bl	8000fec <PortC_Init>

	USART_init();
 8001176:	f000 fd73 	bl	8001c60 <USART_init>
	USART_cmd("[40m"); //set color to black for the clear
 800117a:	4828      	ldr	r0, [pc, #160]	; (800121c <main+0xbc>)
 800117c:	f000 fe52 	bl	8001e24 <USART_cmd>
	USART_wipe(); //wipe the screen of any previously written junk
 8001180:	f000 fe92 	bl	8001ea8 <USART_wipe>

	mallocWrap(); //malloc arrays in advance
 8001184:	f000 f8e6 	bl	8001354 <mallocWrap>

	RTOS_ISR_setPriority(DMA1_Channel3_IRQn); //set priority of interrupt
 8001188:	200d      	movs	r0, #13
 800118a:	f000 fb36 	bl	80017fa <RTOS_ISR_setPriority>
	DMA1C3_16bADC2M_init(destMem); //set up DMA
 800118e:	4b24      	ldr	r3, [pc, #144]	; (8001220 <main+0xc0>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4618      	mov	r0, r3
 8001194:	f7ff fdae 	bl	8000cf4 <DMA1C3_16bADC2M_init>
	ADC_init_wDMA(); //set up ADC with DMA
 8001198:	f7ff fe4c 	bl	8000e34 <ADC_init_wDMA>
	TimerSetup(); //set up Timer for ADC sample frequency
 800119c:	f000 fd16 	bl	8001bcc <TimerSetup>


	/* Create the tasks */
	BaseType_t retVal = xTaskCreate(Task_FFT, "Task_FFT", configMINIMAL_STACK_SIZE*3,
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <main+0xc4>)
 80011a2:	9301      	str	r3, [sp, #4]
 80011a4:	2304      	movs	r3, #4
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	2300      	movs	r3, #0
 80011aa:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011ae:	491e      	ldr	r1, [pc, #120]	; (8001228 <main+0xc8>)
 80011b0:	481e      	ldr	r0, [pc, #120]	; (800122c <main+0xcc>)
 80011b2:	f003 f92a 	bl	800440a <xTaskCreate>
 80011b6:	6078      	str	r0, [r7, #4]
			NULL, tskIDLE_PRIORITY + 4, &Task_FFTHandler);
	if (retVal != pdPASS) { while(1);}	// check if task creation failed
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d000      	beq.n	80011c0 <main+0x60>
 80011be:	e7fe      	b.n	80011be <main+0x5e>

	retVal = xTaskCreate(Task_USART, "task2", configMINIMAL_STACK_SIZE*3,
 80011c0:	4b1b      	ldr	r3, [pc, #108]	; (8001230 <main+0xd0>)
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	2303      	movs	r3, #3
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2300      	movs	r3, #0
 80011ca:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80011ce:	4919      	ldr	r1, [pc, #100]	; (8001234 <main+0xd4>)
 80011d0:	4819      	ldr	r0, [pc, #100]	; (8001238 <main+0xd8>)
 80011d2:	f003 f91a 	bl	800440a <xTaskCreate>
 80011d6:	6078      	str	r0, [r7, #4]
			NULL, tskIDLE_PRIORITY + 3, &task2Handler);
	if (retVal != pdPASS) { while(1);}	// check if task creation failed
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d000      	beq.n	80011e0 <main+0x80>
 80011de:	e7fe      	b.n	80011de <main+0x7e>


	// Create Semaphores for task2 and task3
	FLAG_DMAdone = xSemaphoreCreateBinary();
 80011e0:	2203      	movs	r2, #3
 80011e2:	2100      	movs	r1, #0
 80011e4:	2001      	movs	r0, #1
 80011e6:	f002 fabd 	bl	8003764 <xQueueGenericCreate>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <main+0xdc>)
 80011ee:	6013      	str	r3, [r2, #0]
	if (FLAG_DMAdone == NULL) { while(1); }
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <main+0xdc>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d100      	bne.n	80011fa <main+0x9a>
 80011f8:	e7fe      	b.n	80011f8 <main+0x98>

	FLAG_FFTdone = xSemaphoreCreateBinary();
 80011fa:	2203      	movs	r2, #3
 80011fc:	2100      	movs	r1, #0
 80011fe:	2001      	movs	r0, #1
 8001200:	f002 fab0 	bl	8003764 <xQueueGenericCreate>
 8001204:	4603      	mov	r3, r0
 8001206:	4a0e      	ldr	r2, [pc, #56]	; (8001240 <main+0xe0>)
 8001208:	6013      	str	r3, [r2, #0]
	if (FLAG_FFTdone == NULL) { while(1); }
 800120a:	4b0d      	ldr	r3, [pc, #52]	; (8001240 <main+0xe0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d100      	bne.n	8001214 <main+0xb4>
 8001212:	e7fe      	b.n	8001212 <main+0xb2>


	/* Start scheduler */
	vTaskStartScheduler();
 8001214:	f003 fa58 	bl	80046c8 <vTaskStartScheduler>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	while (1);
 8001218:	e7fe      	b.n	8001218 <main+0xb8>
 800121a:	bf00      	nop
 800121c:	0800beb8 	.word	0x0800beb8
 8001220:	200001f8 	.word	0x200001f8
 8001224:	20000208 	.word	0x20000208
 8001228:	0800bec0 	.word	0x0800bec0
 800122c:	08001245 	.word	0x08001245
 8001230:	2000020c 	.word	0x2000020c
 8001234:	0800becc 	.word	0x0800becc
 8001238:	080012fd 	.word	0x080012fd
 800123c:	20000210 	.word	0x20000210
 8001240:	20000214 	.word	0x20000214

08001244 <Task_FFT>:
 *    recieving a semaphore from the DMA_IRQHandler. It also handles conversion from
 *    uint12 to floating point. Upon completion, it gives a semaphore to the Task_USART.
 *    */

void Task_FFT(void *argument)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

	//start ADC conversions, this only runs once to kick off the process
	ADC3->CR |= ADC_CR_ADSTART;
 800124c:	4b22      	ldr	r3, [pc, #136]	; (80012d8 <Task_FFT+0x94>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	4a21      	ldr	r2, [pc, #132]	; (80012d8 <Task_FFT+0x94>)
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6093      	str	r3, [r2, #8]

	for(;;)
	{

		if (xSemaphoreTake(FLAG_DMAdone, some_ticks) == pdPASS) {
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <Task_FFT+0x98>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a20      	ldr	r2, [pc, #128]	; (80012e0 <Task_FFT+0x9c>)
 800125e:	6812      	ldr	r2, [r2, #0]
 8001260:	4611      	mov	r1, r2
 8001262:	4618      	mov	r0, r3
 8001264:	f002 fde2 	bl	8003e2c <xQueueSemaphoreTake>
 8001268:	4603      	mov	r3, r0
 800126a:	2b01      	cmp	r3, #1
 800126c:	d1f4      	bne.n	8001258 <Task_FFT+0x14>
			// DMA Semaphore taken, do the FFT
			for (int i = 0; i <FFT_LEN; i++){
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	e01a      	b.n	80012aa <Task_FFT+0x66>
				source1[i] = (float32_t)((int16_t)destMem[i]-(0xFFF>>1))/(0xFFF/2);
 8001274:	4b1b      	ldr	r3, [pc, #108]	; (80012e4 <Task_FFT+0xa0>)
 8001276:	681a      	ldr	r2, [r3, #0]
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4413      	add	r3, r2
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	b21b      	sxth	r3, r3
 8001282:	f2a3 73ff 	subw	r3, r3, #2047	; 0x7ff
 8001286:	ee07 3a90 	vmov	s15, r3
 800128a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800128e:	4b16      	ldr	r3, [pc, #88]	; (80012e8 <Task_FFT+0xa4>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	009b      	lsls	r3, r3, #2
 8001296:	4413      	add	r3, r2
 8001298:	eddf 6a14 	vldr	s13, [pc, #80]	; 80012ec <Task_FFT+0xa8>
 800129c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012a0:	edc3 7a00 	vstr	s15, [r3]
			for (int i = 0; i <FFT_LEN; i++){
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	3301      	adds	r3, #1
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80012b0:	dbe0      	blt.n	8001274 <Task_FFT+0x30>
				//source1[i] = arm_sin_f32(2 * PI * 512 * i / SIN_HZ);
			}

			doFFT(source1, dest1, destMag, FFT_LEN);
 80012b2:	4b0d      	ldr	r3, [pc, #52]	; (80012e8 <Task_FFT+0xa4>)
 80012b4:	6818      	ldr	r0, [r3, #0]
 80012b6:	4b0e      	ldr	r3, [pc, #56]	; (80012f0 <Task_FFT+0xac>)
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	4b0e      	ldr	r3, [pc, #56]	; (80012f4 <Task_FFT+0xb0>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012c2:	f000 f8c5 	bl	8001450 <doFFT>
//					maxFreq = i;
//				}
//			}
//
//			printf("Task FFT: is %ld Hz with a shmagnitude of %f \n", maxFreq*HZ_PER_FFT_INDEX, maxMag);
			xSemaphoreGive(FLAG_FFTdone);
 80012c6:	4b0c      	ldr	r3, [pc, #48]	; (80012f8 <Task_FFT+0xb4>)
 80012c8:	6818      	ldr	r0, [r3, #0]
 80012ca:	2300      	movs	r3, #0
 80012cc:	2200      	movs	r2, #0
 80012ce:	2100      	movs	r1, #0
 80012d0:	f002 faa6 	bl	8003820 <xQueueGenericSend>
		if (xSemaphoreTake(FLAG_DMAdone, some_ticks) == pdPASS) {
 80012d4:	e7c0      	b.n	8001258 <Task_FFT+0x14>
 80012d6:	bf00      	nop
 80012d8:	50040200 	.word	0x50040200
 80012dc:	20000210 	.word	0x20000210
 80012e0:	20000000 	.word	0x20000000
 80012e4:	200001f8 	.word	0x200001f8
 80012e8:	200001fc 	.word	0x200001fc
 80012ec:	44ffe000 	.word	0x44ffe000
 80012f0:	20000200 	.word	0x20000200
 80012f4:	20000204 	.word	0x20000204
 80012f8:	20000214 	.word	0x20000214

080012fc <Task_USART>:
/* Task_USART --------------------------------------------------
 * This task starts when it recieves the semaphore from Task_FFT. It then calls
 *    printGraph, and upon completion starts the DMA and ADC peripherals again.
 *    */
void Task_USART(void *argument)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		if (xSemaphoreTake(FLAG_FFTdone, some_ticks) == pdPASS) {
 8001304:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <Task_USART+0x44>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a0e      	ldr	r2, [pc, #56]	; (8001344 <Task_USART+0x48>)
 800130a:	6812      	ldr	r2, [r2, #0]
 800130c:	4611      	mov	r1, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f002 fd8c 	bl	8003e2c <xQueueSemaphoreTake>
 8001314:	4603      	mov	r3, r0
 8001316:	2b01      	cmp	r3, #1
 8001318:	d1f4      	bne.n	8001304 <Task_USART+0x8>
				USART_cmd("[40m"); //set color to black for the clear
				USART_wipe();
			}


			printGraph(destMag, 1024);
 800131a:	4b0b      	ldr	r3, [pc, #44]	; (8001348 <Task_USART+0x4c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f8c0 	bl	80014a8 <printGraph>
			if (!SCANNING) {
				vTaskDelay(250 / portTICK_PERIOD_MS);
			}

			//DO IT AGAIN
			DMA1_Channel3->CNDTR = FFT_LEN;
 8001328:	4b08      	ldr	r3, [pc, #32]	; (800134c <Task_USART+0x50>)
 800132a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800132e:	605a      	str	r2, [r3, #4]
			//set number of transfers before resetting the address(es)

			ADC3->CR |= ADC_CR_ADSTART;
 8001330:	4b07      	ldr	r3, [pc, #28]	; (8001350 <Task_USART+0x54>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a06      	ldr	r2, [pc, #24]	; (8001350 <Task_USART+0x54>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6093      	str	r3, [r2, #8]
		if (xSemaphoreTake(FLAG_FFTdone, some_ticks) == pdPASS) {
 800133c:	e7e2      	b.n	8001304 <Task_USART+0x8>
 800133e:	bf00      	nop
 8001340:	20000214 	.word	0x20000214
 8001344:	20000000 	.word	0x20000000
 8001348:	20000204 	.word	0x20000204
 800134c:	40020030 	.word	0x40020030
 8001350:	50040200 	.word	0x50040200

08001354 <mallocWrap>:

/* mallocWrap --------------------------------------------------------------
 * This simply mallocs the desired arrays during initialization.
 * The only reason it's a function is to make the main function a little cleaner.
 * */
void mallocWrap(){
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	//MALLOC STUFF IN ADVANCE
	destMem = (uint16_t*)malloc(FFT_LEN * sizeof(uint16_t));
 8001358:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800135c:	f006 f904 	bl	8007568 <malloc>
 8001360:	4603      	mov	r3, r0
 8001362:	461a      	mov	r2, r3
 8001364:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <mallocWrap+0x74>)
 8001366:	601a      	str	r2, [r3, #0]
	source1 = (float32_t*)malloc((FFT_LEN+FFT_EXTRA) * sizeof(float32_t));
 8001368:	f242 0050 	movw	r0, #8272	; 0x2050
 800136c:	f006 f8fc 	bl	8007568 <malloc>
 8001370:	4603      	mov	r3, r0
 8001372:	461a      	mov	r2, r3
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <mallocWrap+0x78>)
 8001376:	601a      	str	r2, [r3, #0]
	dest1 = (float32_t*)malloc((FFT_LEN*2+FFT_EXTRA) * sizeof(float32_t));
 8001378:	f244 0050 	movw	r0, #16464	; 0x4050
 800137c:	f006 f8f4 	bl	8007568 <malloc>
 8001380:	4603      	mov	r3, r0
 8001382:	461a      	mov	r2, r3
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <mallocWrap+0x7c>)
 8001386:	601a      	str	r2, [r3, #0]
	destMag = (float32_t*)malloc((FFT_LEN+FFT_EXTRA) * sizeof(float32_t));
 8001388:	f242 0050 	movw	r0, #8272	; 0x2050
 800138c:	f006 f8ec 	bl	8007568 <malloc>
 8001390:	4603      	mov	r3, r0
 8001392:	461a      	mov	r2, r3
 8001394:	4b0f      	ldr	r3, [pc, #60]	; (80013d4 <mallocWrap+0x80>)
 8001396:	601a      	str	r2, [r3, #0]
	while (destMem == NULL); //loop if malloc failed
 8001398:	bf00      	nop
 800139a:	4b0b      	ldr	r3, [pc, #44]	; (80013c8 <mallocWrap+0x74>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0fb      	beq.n	800139a <mallocWrap+0x46>
	while (source1 == NULL); //loop if malloc failed
 80013a2:	bf00      	nop
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <mallocWrap+0x78>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d0fb      	beq.n	80013a4 <mallocWrap+0x50>
	while (dest1 == NULL); //loop if malloc failed
 80013ac:	bf00      	nop
 80013ae:	4b08      	ldr	r3, [pc, #32]	; (80013d0 <mallocWrap+0x7c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d0fb      	beq.n	80013ae <mallocWrap+0x5a>
	while (destMag == NULL); //loop if malloc failed
 80013b6:	bf00      	nop
 80013b8:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <mallocWrap+0x80>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d0fb      	beq.n	80013b8 <mallocWrap+0x64>
}
 80013c0:	bf00      	nop
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	200001f8 	.word	0x200001f8
 80013cc:	200001fc 	.word	0x200001fc
 80013d0:	20000200 	.word	0x20000200
 80013d4:	20000204 	.word	0x20000204

080013d8 <DMA1_Channel3_IRQHandler>:
/* DMA_IRQHandler --------------------------------------------------------------
 * This is the DMA IRQ handler. It is called upon completion of FFT_LEN samples.
 * It stops the ADC from sampling further,
 *    then passes the semaphore to Task_FFT, and yields to Task_FFT.
 * */
void DMA1_Channel3_IRQHandler(){
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0

	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80013de:	2300      	movs	r3, #0
 80013e0:	607b      	str	r3, [r7, #4]

	if(DMA1->ISR & DMA_ISR_TEIF3){
 80013e2:	4b17      	ldr	r3, [pc, #92]	; (8001440 <DMA1_Channel3_IRQHandler+0x68>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d000      	beq.n	80013f0 <DMA1_Channel3_IRQHandler+0x18>
		//Transfer Error
		while(1);
 80013ee:	e7fe      	b.n	80013ee <DMA1_Channel3_IRQHandler+0x16>
	}

	if(DMA1->ISR & DMA_ISR_TCIF3){
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <DMA1_Channel3_IRQHandler+0x68>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d00c      	beq.n	8001416 <DMA1_Channel3_IRQHandler+0x3e>
		//Transfer Complete
		ADC3->CR |= ADC_CR_ADSTP;//stop conversions
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <DMA1_Channel3_IRQHandler+0x6c>)
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	4a10      	ldr	r2, [pc, #64]	; (8001444 <DMA1_Channel3_IRQHandler+0x6c>)
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	6093      	str	r3, [r2, #8]
		xSemaphoreGiveFromISR(FLAG_DMAdone, &xHigherPriorityTaskWoken);
 8001408:	4b0f      	ldr	r3, [pc, #60]	; (8001448 <DMA1_Channel3_IRQHandler+0x70>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1d3a      	adds	r2, r7, #4
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f002 fb9e 	bl	8003b52 <xQueueGiveFromISR>
	}

	DMA1->IFCR |= DMA_IFCR_CGIF3; //clear glbl interrupt flag
 8001416:	4b0a      	ldr	r3, [pc, #40]	; (8001440 <DMA1_Channel3_IRQHandler+0x68>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	4a09      	ldr	r2, [pc, #36]	; (8001440 <DMA1_Channel3_IRQHandler+0x68>)
 800141c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001420:	6053      	str	r3, [r2, #4]
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d007      	beq.n	8001438 <DMA1_Channel3_IRQHandler+0x60>
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <DMA1_Channel3_IRQHandler+0x74>)
 800142a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	f3bf 8f4f 	dsb	sy
 8001434:	f3bf 8f6f 	isb	sy
    //yield to whatever task was unblocked by the DMA-set semaphore
}
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40020000 	.word	0x40020000
 8001444:	50040200 	.word	0x50040200
 8001448:	20000210 	.word	0x20000210
 800144c:	e000ed04 	.word	0xe000ed04

08001450 <doFFT>:
 *    as well as the length of the FFT.
 * It initializes necessary structures, performs the FFT,
 *    and converts the complex output to magnitude only.
 * The result is read from the *mag pointer.
 * */
void doFFT(float32_t* source, float32_t* dest, float32_t* mag, uint32_t len){
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	60b9      	str	r1, [r7, #8]
 800145a:	607a      	str	r2, [r7, #4]
 800145c:	603b      	str	r3, [r7, #0]

	//initialize structure for FFT
	arm_rfft_fast_instance_f32 f32RFFT;


	arm_status status = arm_rfft_fast_init_f32(&f32RFFT, len);
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	b29a      	uxth	r2, r3
 8001462:	f107 0310 	add.w	r3, r7, #16
 8001466:	4611      	mov	r1, r2
 8001468:	4618      	mov	r0, r3
 800146a:	f004 ffd7 	bl	800641c <arm_rfft_fast_init_f32>
 800146e:	4603      	mov	r3, r0
 8001470:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (status != ARM_MATH_SUCCESS){while(1);}
 8001474:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8001478:	2b00      	cmp	r3, #0
 800147a:	d000      	beq.n	800147e <doFFT+0x2e>
 800147c:	e7fe      	b.n	800147c <doFFT+0x2c>

	int IFFTFlag = 0; //1 for inverse FFT
 800147e:	2300      	movs	r3, #0
 8001480:	62bb      	str	r3, [r7, #40]	; 0x28
	arm_rfft_fast_f32(&f32RFFT, source, dest, IFFTFlag);
 8001482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001484:	b2db      	uxtb	r3, r3
 8001486:	f107 0010 	add.w	r0, r7, #16
 800148a:	68ba      	ldr	r2, [r7, #8]
 800148c:	68f9      	ldr	r1, [r7, #12]
 800148e:	f005 f8a9 	bl	80065e4 <arm_rfft_fast_f32>

	arm_cmplx_mag_f32(dest, mag, len/2);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	461a      	mov	r2, r3
 8001498:	6879      	ldr	r1, [r7, #4]
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	f005 fc80 	bl	8006da0 <arm_cmplx_mag_f32>
}
 80014a0:	bf00      	nop
 80014a2:	3730      	adds	r7, #48	; 0x30
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <printGraph>:
/* printGraph --------------------------------------------------------------
 * This function takes in the finished FFT array and it's length,
 *    and calculates the bin magnitude from individual frequency magnitudes.
 * It also calls the drawBar or drawBarScanning functions.
 * */
void printGraph(float32_t *FFT, int32_t len){
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
	USART_cmd("[45m"); //set color to pink
 80014b2:	4822      	ldr	r0, [pc, #136]	; (800153c <printGraph+0x94>)
 80014b4:	f000 fcb6 	bl	8001e24 <USART_cmd>
	for (int i = 1; i < len;){ //starts at 1 to ignore DC
 80014b8:	2301      	movs	r3, #1
 80014ba:	61fb      	str	r3, [r7, #28]
 80014bc:	e034      	b.n	8001528 <printGraph+0x80>

		float32_t binMag = 0.0;
 80014be:	f04f 0300 	mov.w	r3, #0
 80014c2:	61bb      	str	r3, [r7, #24]
		for(int z = 0; z<INDEX_PER_BIN;z++){
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	e010      	b.n	80014ec <printGraph+0x44>
			binMag += FFT[i+z];
 80014ca:	69fa      	ldr	r2, [r7, #28]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	4413      	add	r3, r2
 80014d6:	edd3 7a00 	vldr	s15, [r3]
 80014da:	ed97 7a06 	vldr	s14, [r7, #24]
 80014de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e2:	edc7 7a06 	vstr	s15, [r7, #24]
		for(int z = 0; z<INDEX_PER_BIN;z++){
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	3301      	adds	r3, #1
 80014ea:	617b      	str	r3, [r7, #20]
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	2b0f      	cmp	r3, #15
 80014f0:	ddeb      	ble.n	80014ca <printGraph+0x22>
		}

		int xpos = (i*2/INDEX_PER_BIN)+EDGE_WIDTH;
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	da00      	bge.n	80014fa <printGraph+0x52>
 80014f8:	3307      	adds	r3, #7
 80014fa:	10db      	asrs	r3, r3, #3
 80014fc:	330a      	adds	r3, #10
 80014fe:	613b      	str	r3, [r7, #16]
		uint16_t barHeight = (uint16_t)(binMag/(float32_t)INDEX_PER_BIN);
 8001500:	ed97 7a06 	vldr	s14, [r7, #24]
 8001504:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8001508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800150c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001510:	ee17 3a90 	vmov	r3, s15
 8001514:	81fb      	strh	r3, [r7, #14]
		if(SCANNING){
			drawBarScanning(xpos, barHeight, i);
 8001516:	89fb      	ldrh	r3, [r7, #14]
 8001518:	69fa      	ldr	r2, [r7, #28]
 800151a:	4619      	mov	r1, r3
 800151c:	6938      	ldr	r0, [r7, #16]
 800151e:	f000 f80f 	bl	8001540 <drawBarScanning>
		} else {
			drawBar(xpos, barHeight);
		}

		i += INDEX_PER_BIN;
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3310      	adds	r3, #16
 8001526:	61fb      	str	r3, [r7, #28]
	for (int i = 1; i < len;){ //starts at 1 to ignore DC
 8001528:	69fa      	ldr	r2, [r7, #28]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	dbc6      	blt.n	80014be <printGraph+0x16>
	}
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3720      	adds	r7, #32
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	0800bed4 	.word	0x0800bed4

08001540 <drawBarScanning>:
 * A better implementation would make use of a buffer that allows for horizontal drawing,
 *    as well as detection of any changes so that unnecessary writes could be avoided.
 * This would allow for maximum update rate for a given baud rate.
 * */
int prevBarHeight[FFT_LEN];
void drawBarScanning(int xpos, uint16_t barHeight, int index){
 8001540:	b580      	push	{r7, lr}
 8001542:	b08c      	sub	sp, #48	; 0x30
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	460b      	mov	r3, r1
 800154a:	607a      	str	r2, [r7, #4]
 800154c:	817b      	strh	r3, [r7, #10]

	char barchar = ' ';
 800154e:	2320      	movs	r3, #32
 8001550:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	if (barHeight){barHeight = 2*barHeight -1;}
 8001554:	897b      	ldrh	r3, [r7, #10]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d004      	beq.n	8001564 <drawBarScanning+0x24>
 800155a:	897b      	ldrh	r3, [r7, #10]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	b29b      	uxth	r3, r3
 8001560:	3b01      	subs	r3, #1
 8001562:	817b      	strh	r3, [r7, #10]
	if (barHeight>Y_MAX){barHeight = Y_MAX;}
 8001564:	897b      	ldrh	r3, [r7, #10]
 8001566:	2b38      	cmp	r3, #56	; 0x38
 8001568:	d901      	bls.n	800156e <drawBarScanning+0x2e>
 800156a:	2338      	movs	r3, #56	; 0x38
 800156c:	817b      	strh	r3, [r7, #10]

	int thisBarY = Y_MAX/2 - barHeight/2;
 800156e:	897b      	ldrh	r3, [r7, #10]
 8001570:	085b      	lsrs	r3, r3, #1
 8001572:	b29b      	uxth	r3, r3
 8001574:	f1c3 031c 	rsb	r3, r3, #28
 8001578:	61fb      	str	r3, [r7, #28]
	int thisBarYMax = Y_MAX/2 + barHeight/2;
 800157a:	897b      	ldrh	r3, [r7, #10]
 800157c:	085b      	lsrs	r3, r3, #1
 800157e:	b29b      	uxth	r3, r3
 8001580:	331c      	adds	r3, #28
 8001582:	61bb      	str	r3, [r7, #24]

	//retrieve past binHeight so it can be cleared efficiently
	int prevBarY = Y_MAX/2 - prevBarHeight[index]/2;
 8001584:	4a34      	ldr	r2, [pc, #208]	; (8001658 <drawBarScanning+0x118>)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800158c:	0fda      	lsrs	r2, r3, #31
 800158e:	4413      	add	r3, r2
 8001590:	105b      	asrs	r3, r3, #1
 8001592:	425b      	negs	r3, r3
 8001594:	331c      	adds	r3, #28
 8001596:	617b      	str	r3, [r7, #20]
	int prevBarYMax = Y_MAX/2 + prevBarHeight[index]/2;
 8001598:	4a2f      	ldr	r2, [pc, #188]	; (8001658 <drawBarScanning+0x118>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015a0:	0fda      	lsrs	r2, r3, #31
 80015a2:	4413      	add	r3, r2
 80015a4:	105b      	asrs	r3, r3, #1
 80015a6:	331c      	adds	r3, #28
 80015a8:	613b      	str	r3, [r7, #16]

	int maxBarY;
	int maxBarYMax;

	if(prevBarHeight[index] > barHeight){
 80015aa:	4a2b      	ldr	r2, [pc, #172]	; (8001658 <drawBarScanning+0x118>)
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015b2:	897b      	ldrh	r3, [r7, #10]
 80015b4:	429a      	cmp	r2, r3
 80015b6:	dd04      	ble.n	80015c2 <drawBarScanning+0x82>
		maxBarY = prevBarY;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	62fb      	str	r3, [r7, #44]	; 0x2c
		maxBarYMax = prevBarYMax;
 80015bc:	693b      	ldr	r3, [r7, #16]
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c0:	e003      	b.n	80015ca <drawBarScanning+0x8a>
	} else {
		maxBarY = thisBarY;
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	62fb      	str	r3, [r7, #44]	; 0x2c
		maxBarYMax = thisBarYMax;
 80015c6:	69bb      	ldr	r3, [r7, #24]
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	prevBarHeight[index] = barHeight; //save current barHeight
 80015ca:	897a      	ldrh	r2, [r7, #10]
 80015cc:	4922      	ldr	r1, [pc, #136]	; (8001658 <drawBarScanning+0x118>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	USART_YX(maxBarY, xpos);
 80015d4:	68f9      	ldr	r1, [r7, #12]
 80015d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80015d8:	f000 fc14 	bl	8001e04 <USART_YX>
	for (int i = maxBarY; i <= maxBarYMax; i++){
 80015dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
 80015e0:	e031      	b.n	8001646 <drawBarScanning+0x106>
		if ((i>thisBarY) & (i<thisBarYMax)){
 80015e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	429a      	cmp	r2, r3
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015f2:	69bb      	ldr	r3, [r7, #24]
 80015f4:	4299      	cmp	r1, r3
 80015f6:	bfb4      	ite	lt
 80015f8:	2301      	movlt	r3, #1
 80015fa:	2300      	movge	r3, #0
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	4013      	ands	r3, r2
 8001600:	b2db      	uxtb	r3, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00e      	beq.n	8001624 <drawBarScanning+0xe4>
			USART_cmd("[45m"); //set color to red
 8001606:	4815      	ldr	r0, [pc, #84]	; (800165c <drawBarScanning+0x11c>)
 8001608:	f000 fc0c 	bl	8001e24 <USART_cmd>
			USART_putchar(barchar);
 800160c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001610:	4618      	mov	r0, r3
 8001612:	f000 fc31 	bl	8001e78 <USART_putchar>
			USART_cmd("[1D");//back
 8001616:	4812      	ldr	r0, [pc, #72]	; (8001660 <drawBarScanning+0x120>)
 8001618:	f000 fc04 	bl	8001e24 <USART_cmd>
			USART_cmd("[1B");//down
 800161c:	4811      	ldr	r0, [pc, #68]	; (8001664 <drawBarScanning+0x124>)
 800161e:	f000 fc01 	bl	8001e24 <USART_cmd>
 8001622:	e00d      	b.n	8001640 <drawBarScanning+0x100>
		} else {
			USART_cmd("[40m"); //set color to black for the clear
 8001624:	4810      	ldr	r0, [pc, #64]	; (8001668 <drawBarScanning+0x128>)
 8001626:	f000 fbfd 	bl	8001e24 <USART_cmd>
			USART_putchar(barchar);
 800162a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800162e:	4618      	mov	r0, r3
 8001630:	f000 fc22 	bl	8001e78 <USART_putchar>
			USART_cmd("[1D");//back
 8001634:	480a      	ldr	r0, [pc, #40]	; (8001660 <drawBarScanning+0x120>)
 8001636:	f000 fbf5 	bl	8001e24 <USART_cmd>
			USART_cmd("[1B");//down
 800163a:	480a      	ldr	r0, [pc, #40]	; (8001664 <drawBarScanning+0x124>)
 800163c:	f000 fbf2 	bl	8001e24 <USART_cmd>
	for (int i = maxBarY; i <= maxBarYMax; i++){
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	3301      	adds	r3, #1
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
 8001646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800164a:	429a      	cmp	r2, r3
 800164c:	ddc9      	ble.n	80015e2 <drawBarScanning+0xa2>

		}
	}
}
 800164e:	bf00      	nop
 8001650:	bf00      	nop
 8001652:	3730      	adds	r7, #48	; 0x30
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000218 	.word	0x20000218
 800165c:	0800bed4 	.word	0x0800bed4
 8001660:	0800bedc 	.word	0x0800bedc
 8001664:	0800bee0 	.word	0x0800bee0
 8001668:	0800beb8 	.word	0x0800beb8

0800166c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b096      	sub	sp, #88	; 0x58
 8001670:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	2244      	movs	r2, #68	; 0x44
 8001678:	2100      	movs	r1, #0
 800167a:	4618      	mov	r0, r3
 800167c:	f007 f80e 	bl	800869c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001680:	463b      	mov	r3, r7
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
 800168c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800168e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001692:	f000 fd69 	bl	8002168 <HAL_PWREx_ControlVoltageScaling>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800169c:	f000 f84a 	bl	8001734 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80016a0:	2310      	movs	r3, #16
 80016a2:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80016a4:	2301      	movs	r3, #1
 80016a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80016ac:	2360      	movs	r3, #96	; 0x60
 80016ae:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b0:	2302      	movs	r3, #2
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80016b4:	2301      	movs	r3, #1
 80016b6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80016b8:	2301      	movs	r3, #1
 80016ba:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80016bc:	2328      	movs	r3, #40	; 0x28
 80016be:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80016c0:	2307      	movs	r3, #7
 80016c2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016c4:	2302      	movs	r3, #2
 80016c6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016c8:	2302      	movs	r3, #2
 80016ca:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016cc:	f107 0314 	add.w	r3, r7, #20
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 fd9f 	bl	8002214 <HAL_RCC_OscConfig>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80016dc:	f000 f82a 	bl	8001734 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016e0:	230f      	movs	r3, #15
 80016e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e4:	2303      	movs	r3, #3
 80016e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	2104      	movs	r1, #4
 80016f8:	4618      	mov	r0, r3
 80016fa:	f001 f967 	bl	80029cc <HAL_RCC_ClockConfig>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001704:	f000 f816 	bl	8001734 <Error_Handler>
  }
}
 8001708:	bf00      	nop
 800170a:	3758      	adds	r7, #88	; 0x58
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}

08001710 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a04      	ldr	r2, [pc, #16]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d101      	bne.n	8001726 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001722:	f000 fc11 	bl	8001f48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40014400 	.word	0x40014400

08001734 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001738:	b672      	cpsid	i
}
 800173a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800173c:	e7fe      	b.n	800173c <Error_Handler+0x8>
	...

08001740 <__NVIC_SetPriority>:
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <RTOS_ISR_setPriority>:
#include "cmsis_os.h"


volatile unsigned long ulHighFrequencyTimerTicks;

void RTOS_ISR_setPriority(uint32_t IRQn){
 80017fa:	b580      	push	{r7, lr}
 80017fc:	b084      	sub	sp, #16
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
	HAL_NVIC_SetPriorityGrouping(0);
 8001802:	2000      	movs	r0, #0
 8001804:	f000 fc6d 	bl	80020e2 <HAL_NVIC_SetPriorityGrouping>
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
 8001808:	2200      	movs	r2, #0
 800180a:	210a      	movs	r1, #10
 800180c:	2000      	movs	r0, #0
 800180e:	f7ff ffc1 	bl	8001794 <NVIC_EncodePriority>
 8001812:	60f8      	str	r0, [r7, #12]
	//DMA1_Channel3_IRQn
	NVIC_SetPriority(IRQn, lowPriority);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b25b      	sxtb	r3, r3
 8001818:	68f9      	ldr	r1, [r7, #12]
 800181a:	4618      	mov	r0, r3
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}

08001828 <RTOS_Stats_Timer_Init>:

/* Configure Timer to interrupt 100 kHz (100 times every Tick) */
void RTOS_Stats_Timer_Init(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);	// turn on TIM2
 800182c:	4b15      	ldr	r3, [pc, #84]	; (8001884 <RTOS_Stats_Timer_Init+0x5c>)
 800182e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001830:	4a14      	ldr	r2, [pc, #80]	; (8001884 <RTOS_Stats_Timer_Init+0x5c>)
 8001832:	f043 0301 	orr.w	r3, r3, #1
 8001836:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->DIER |= (TIM_DIER_UIE);			// enable interrupts
 8001838:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001842:	f043 0301 	orr.w	r3, r3, #1
 8001846:	60d3      	str	r3, [r2, #12]
	TIM2->SR  &= ~(TIM_SR_UIF);				// clear interrupt flag
 8001848:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800184c:	691b      	ldr	r3, [r3, #16]
 800184e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6113      	str	r3, [r2, #16]
	TIM2->ARR = 400 - 1;
 8001858:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800185c:	f240 128f 	movw	r2, #399	; 0x18f
 8001860:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;			    // start timer
 8001862:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6013      	str	r3, [r2, #0]

	// enable interrupts
	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 8001872:	4b05      	ldr	r3, [pc, #20]	; (8001888 <RTOS_Stats_Timer_Init+0x60>)
 8001874:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001878:	601a      	str	r2, [r3, #0]
}
 800187a:	bf00      	nop
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	40021000 	.word	0x40021000
 8001888:	e000e100 	.word	0xe000e100

0800188c <TIM2_IRQHandler>:

volatile unsigned long ulHighFrequencyTimerTicks;		// run time stats

/* Timer 2 is used to collect runtime stats for FreeRTOS tasks*/
void TIM2_IRQHandler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);
 8001890:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001894:	691b      	ldr	r3, [r3, #16]
 8001896:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800189a:	f023 0301 	bic.w	r3, r3, #1
 800189e:	6113      	str	r3, [r2, #16]
	ulHighFrequencyTimerTicks++;
 80018a0:	4b04      	ldr	r3, [pc, #16]	; (80018b4 <TIM2_IRQHandler+0x28>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3301      	adds	r3, #1
 80018a6:	4a03      	ldr	r2, [pc, #12]	; (80018b4 <TIM2_IRQHandler+0x28>)
 80018a8:	6013      	str	r3, [r2, #0]
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	20002218 	.word	0x20002218

080018b8 <configureTimerForRunTimeStats>:

/* Built in functions for using FreeRTOS runtime stats need to be defined*/
void configureTimerForRunTimeStats(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 80018bc:	4b03      	ldr	r3, [pc, #12]	; (80018cc <configureTimerForRunTimeStats+0x14>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
    RTOS_Stats_Timer_Init();
 80018c2:	f7ff ffb1 	bl	8001828 <RTOS_Stats_Timer_Init>
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20002218 	.word	0x20002218

080018d0 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void){
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 80018d4:	4b03      	ldr	r3, [pc, #12]	; (80018e4 <getRunTimeCounterValue+0x14>)
 80018d6:	681b      	ldr	r3, [r3, #0]
}
 80018d8:	4618      	mov	r0, r3
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	20002218 	.word	0x20002218

080018e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <HAL_MspInit+0x4c>)
 80018f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018f2:	4a10      	ldr	r2, [pc, #64]	; (8001934 <HAL_MspInit+0x4c>)
 80018f4:	f043 0301 	orr.w	r3, r3, #1
 80018f8:	6613      	str	r3, [r2, #96]	; 0x60
 80018fa:	4b0e      	ldr	r3, [pc, #56]	; (8001934 <HAL_MspInit+0x4c>)
 80018fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <HAL_MspInit+0x4c>)
 8001908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <HAL_MspInit+0x4c>)
 800190c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001910:	6593      	str	r3, [r2, #88]	; 0x58
 8001912:	4b08      	ldr	r3, [pc, #32]	; (8001934 <HAL_MspInit+0x4c>)
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191a:	603b      	str	r3, [r7, #0]
 800191c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	210f      	movs	r1, #15
 8001922:	f06f 0001 	mvn.w	r0, #1
 8001926:	f000 fbe7 	bl	80020f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800192a:	bf00      	nop
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	40021000 	.word	0x40021000

08001938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b08c      	sub	sp, #48	; 0x30
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8001946:	4b2e      	ldr	r3, [pc, #184]	; (8001a00 <HAL_InitTick+0xc8>)
 8001948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194a:	4a2d      	ldr	r2, [pc, #180]	; (8001a00 <HAL_InitTick+0xc8>)
 800194c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001950:	6613      	str	r3, [r2, #96]	; 0x60
 8001952:	4b2b      	ldr	r3, [pc, #172]	; (8001a00 <HAL_InitTick+0xc8>)
 8001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001956:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800195e:	f107 020c 	add.w	r2, r7, #12
 8001962:	f107 0310 	add.w	r3, r7, #16
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f001 f9dd 	bl	8002d28 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800196e:	f001 f9c5 	bl	8002cfc <HAL_RCC_GetPCLK2Freq>
 8001972:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001976:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_InitTick+0xcc>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	0c9b      	lsrs	r3, r3, #18
 800197e:	3b01      	subs	r3, #1
 8001980:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_InitTick+0xd0>)
 8001984:	4a21      	ldr	r2, [pc, #132]	; (8001a0c <HAL_InitTick+0xd4>)
 8001986:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8001988:	4b1f      	ldr	r3, [pc, #124]	; (8001a08 <HAL_InitTick+0xd0>)
 800198a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800198e:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8001990:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_InitTick+0xd0>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8001996:	4b1c      	ldr	r3, [pc, #112]	; (8001a08 <HAL_InitTick+0xd0>)
 8001998:	2200      	movs	r2, #0
 800199a:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b1a      	ldr	r3, [pc, #104]	; (8001a08 <HAL_InitTick+0xd0>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019a2:	4b19      	ldr	r3, [pc, #100]	; (8001a08 <HAL_InitTick+0xd0>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <HAL_InitTick+0xd0>)
 80019aa:	f001 fa4f 	bl	8002e4c <HAL_TIM_Base_Init>
 80019ae:	4603      	mov	r3, r0
 80019b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80019b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d11b      	bne.n	80019f4 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <HAL_InitTick+0xd0>)
 80019be:	f001 faa7 	bl	8002f10 <HAL_TIM_Base_Start_IT>
 80019c2:	4603      	mov	r3, r0
 80019c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80019c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d111      	bne.n	80019f4 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80019d0:	2019      	movs	r0, #25
 80019d2:	f000 fbad 	bl	8002130 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d808      	bhi.n	80019ee <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	2019      	movs	r0, #25
 80019e2:	f000 fb89 	bl	80020f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_InitTick+0xd8>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e002      	b.n	80019f4 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80019f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3730      	adds	r7, #48	; 0x30
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40021000 	.word	0x40021000
 8001a04:	431bde83 	.word	0x431bde83
 8001a08:	2000221c 	.word	0x2000221c
 8001a0c:	40014400 	.word	0x40014400
 8001a10:	20000008 	.word	0x20000008

08001a14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a18:	e7fe      	b.n	8001a18 <NMI_Handler+0x4>

08001a1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a1a:	b480      	push	{r7}
 8001a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a1e:	e7fe      	b.n	8001a1e <HardFault_Handler+0x4>

08001a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <MemManage_Handler+0x4>

08001a26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a26:	b480      	push	{r7}
 8001a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a2a:	e7fe      	b.n	8001a2a <BusFault_Handler+0x4>

08001a2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a30:	e7fe      	b.n	8001a30 <UsageFault_Handler+0x4>

08001a32 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a32:	b480      	push	{r7}
 8001a34:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr

08001a40 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001a46:	f001 fad3 	bl	8002ff0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000221c 	.word	0x2000221c

08001a54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return 1;
 8001a58:	2301      	movs	r3, #1
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr

08001a64 <_kill>:

int _kill(int pid, int sig)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
 8001a6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a6e:	f006 fecd 	bl	800880c <__errno>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2216      	movs	r2, #22
 8001a76:	601a      	str	r2, [r3, #0]
  return -1;
 8001a78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <_exit>:

void _exit (int status)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b082      	sub	sp, #8
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	f7ff ffe7 	bl	8001a64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a96:	e7fe      	b.n	8001a96 <_exit+0x12>

08001a98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b086      	sub	sp, #24
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	60f8      	str	r0, [r7, #12]
 8001aa0:	60b9      	str	r1, [r7, #8]
 8001aa2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	e00a      	b.n	8001ac0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aaa:	f3af 8000 	nop.w
 8001aae:	4601      	mov	r1, r0
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	1c5a      	adds	r2, r3, #1
 8001ab4:	60ba      	str	r2, [r7, #8]
 8001ab6:	b2ca      	uxtb	r2, r1
 8001ab8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3301      	adds	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	dbf0      	blt.n	8001aaa <_read+0x12>
  }

  return len;
 8001ac8:	687b      	ldr	r3, [r7, #4]
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3718      	adds	r7, #24
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	b083      	sub	sp, #12
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ada:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
 8001af2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001afa:	605a      	str	r2, [r3, #4]
  return 0;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	370c      	adds	r7, #12
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr

08001b0a <_isatty>:

int _isatty(int file)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	b083      	sub	sp, #12
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b12:	2301      	movs	r3, #1
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	60f8      	str	r0, [r7, #12]
 8001b28:	60b9      	str	r1, [r7, #8]
 8001b2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b2c:	2300      	movs	r3, #0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b44:	4a14      	ldr	r2, [pc, #80]	; (8001b98 <_sbrk+0x5c>)
 8001b46:	4b15      	ldr	r3, [pc, #84]	; (8001b9c <_sbrk+0x60>)
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b50:	4b13      	ldr	r3, [pc, #76]	; (8001ba0 <_sbrk+0x64>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d102      	bne.n	8001b5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b58:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <_sbrk+0x64>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <_sbrk+0x68>)
 8001b5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b5e:	4b10      	ldr	r3, [pc, #64]	; (8001ba0 <_sbrk+0x64>)
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4413      	add	r3, r2
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d207      	bcs.n	8001b7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b6c:	f006 fe4e 	bl	800880c <__errno>
 8001b70:	4603      	mov	r3, r0
 8001b72:	220c      	movs	r2, #12
 8001b74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b76:	f04f 33ff 	mov.w	r3, #4294967295
 8001b7a:	e009      	b.n	8001b90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b7c:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <_sbrk+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b82:	4b07      	ldr	r3, [pc, #28]	; (8001ba0 <_sbrk+0x64>)
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	4413      	add	r3, r2
 8001b8a:	4a05      	ldr	r2, [pc, #20]	; (8001ba0 <_sbrk+0x64>)
 8001b8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}
 8001b90:	4618      	mov	r0, r3
 8001b92:	3718      	adds	r7, #24
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	20018000 	.word	0x20018000
 8001b9c:	00000f00 	.word	0x00000f00
 8001ba0:	20002268 	.word	0x20002268
 8001ba4:	20006db0 	.word	0x20006db0

08001ba8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001bac:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <SystemInit+0x20>)
 8001bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bb2:	4a05      	ldr	r2, [pc, #20]	; (8001bc8 <SystemInit+0x20>)
 8001bb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr
 8001bc6:	bf00      	nop
 8001bc8:	e000ed00 	.word	0xe000ed00

08001bcc <TimerSetup>:
#define MY_PRESCALE 7; //0+1 for 4MHz, 7+1 for 32MHz
//#define STARTING_ARR 100 //max of 2^32
//const int prescale = 4000;


void TimerSetup(void){
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
//  TIMER ESSENTIALS
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //Enable Clock input to TIM2
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <TimerSetup+0x8c>)
 8001bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd4:	4a20      	ldr	r2, [pc, #128]	; (8001c58 <TimerSetup+0x8c>)
 8001bd6:	f043 0301 	orr.w	r3, r3, #1
 8001bda:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->PSC = MY_PRESCALE; // Set prescaler value
 8001bdc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be0:	2207      	movs	r2, #7
 8001be2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = MY_ARR;   // Set auto-reload value
 8001be4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001be8:	f240 1291 	movw	r2, #401	; 0x191
 8001bec:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 &= ~(TIM_CR1_DIR);  // Clear DIR bit to set upcount mode (not super essential, cuz it defaults here)
 8001bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bf8:	f023 0310 	bic.w	r3, r3, #16
 8001bfc:	6013      	str	r3, [r2, #0]

	NVIC->ISER[TIM2_IRQn / 32] = (1 << (TIM2_IRQn & 0x1F)); // -> (TIM2_IRQn % 32)
 8001bfe:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <TimerSetup+0x90>)
 8001c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001c04:	601a      	str	r2, [r3, #0]
//	TIM2->CCR1 = (STARTING_ARR/4)-1; //interrupt at 25%
//	TIM2->CCR2 = 0; // interrupt at 0% (this could also just be the overrun flag, but eh)

//	TIM2->DIER |= TIM_DIER_UIE; //enable update interrupts

	TIM2->CCR2 = 0;
 8001c06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	639a      	str	r2, [r3, #56]	; 0x38

	TIM2->CCMR1 &= ((0<<24) |(0b11<<12) | (00<<8)); //TODO: this was previously &= ~(), which would result in badness... maybe this was the fix?
 8001c0e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c18:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8001c1c:	6193      	str	r3, [r2, #24]
	TIM2->CCMR1 |= ((0<<24) |(0b11<<12) | (00<<8));
 8001c1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c22:	699b      	ldr	r3, [r3, #24]
 8001c24:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c28:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8001c2c:	6193      	str	r3, [r2, #24]
	//TIM2->DIER |= TIM_DIER_CC2IE | TIM_DIER_TIE;



	//TIM2->CCER |= TIM_CCER_CC2P; //polarity? not sure exactly what this does for output mode... investigate if broken
	TIM2->CCER |= TIM_CCER_CC2E;//enable CC2 (must be after configuration
 8001c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c32:	6a1b      	ldr	r3, [r3, #32]
 8001c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c38:	f043 0310 	orr.w	r3, r3, #16
 8001c3c:	6213      	str	r3, [r2, #32]

	//what is OC2XE (CC2 clear enable, preload enable, fast enable)

	TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2 in config register 1
 8001c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	6013      	str	r3, [r2, #0]

}
 8001c4e:	bf00      	nop
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40021000 	.word	0x40021000
 8001c5c:	e000e100 	.word	0xe000e100

08001c60 <USART_init>:





void USART_init(void){
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
	// configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers
	// AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <USART_init+0xf4>)
 8001c66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c68:	4a3a      	ldr	r2, [pc, #232]	; (8001d54 <USART_init+0xf4>)
 8001c6a:	f043 0301 	orr.w	r3, r3, #1
 8001c6e:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
 8001c70:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c74:	6a1b      	ldr	r3, [r3, #32]
 8001c76:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001c7e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |				// select USART2 (AF7)
 8001c80:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c84:	6a1b      	ldr	r3, [r3, #32]
 8001c86:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c8a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8001c8e:	6213      	str	r3, [r2, #32]
				   (7 << GPIO_AFRL_AFSEL3_Pos)); 		  	  	// for PA2 and PA3
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);		// push-pull output for PA2, PA3
 8001c90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001c9a:	f023 030c 	bic.w	r3, r3, #12
 8001c9e:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);		// no pull ups on PA2, PA3
 8001ca0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ca4:	68db      	ldr	r3, [r3, #12]
 8001ca6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001caa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cae:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2); GPIOA->OSPEEDR |= 0b10<<4;	// high speed
 8001cb0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cb4:	689b      	ldr	r3, [r3, #8]
 8001cb6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cba:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001cbe:	6093      	str	r3, [r2, #8]
 8001cc0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cc4:	689b      	ldr	r3, [r3, #8]
 8001cc6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cca:	f043 0320 	orr.w	r3, r3, #32
 8001cce:	6093      	str	r3, [r2, #8]
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);		// enable alternate function
 8001cd0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cde:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3
 8001ce0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001cea:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8001cee:	6013      	str	r3, [r2, #0]

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;			// enable USART by turning on system clock
 8001cf0:	4b18      	ldr	r3, [pc, #96]	; (8001d54 <USART_init+0xf4>)
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a17      	ldr	r2, [pc, #92]	; (8001d54 <USART_init+0xf4>)
 8001cf6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cfa:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);	//set data to 8 bits
 8001cfc:	4b16      	ldr	r3, [pc, #88]	; (8001d58 <USART_init+0xf8>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a15      	ldr	r2, [pc, #84]	; (8001d58 <USART_init+0xf8>)
 8001d02:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8001d06:	6013      	str	r3, [r2, #0]
	USART2->BRR = F_CLK / BAUD_RATE;						// baudrate for 115200
 8001d08:	4b13      	ldr	r3, [pc, #76]	; (8001d58 <USART_init+0xf8>)
 8001d0a:	2245      	movs	r2, #69	; 0x45
 8001d0c:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE;						// enable USART
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <USART_init+0xf8>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a11      	ldr	r2, [pc, #68]	; (8001d58 <USART_init+0xf8>)
 8001d14:	f043 0301 	orr.w	r3, r3, #1
 8001d18:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);		// enable transmit and receive for USART
 8001d1a:	4b0f      	ldr	r3, [pc, #60]	; (8001d58 <USART_init+0xf8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a0e      	ldr	r2, [pc, #56]	; (8001d58 <USART_init+0xf8>)
 8001d20:	f043 030c 	orr.w	r3, r3, #12
 8001d24:	6013      	str	r3, [r2, #0]

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 8001d26:	4b0c      	ldr	r3, [pc, #48]	; (8001d58 <USART_init+0xf8>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a0b      	ldr	r2, [pc, #44]	; (8001d58 <USART_init+0xf8>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 8001d32:	4b09      	ldr	r3, [pc, #36]	; (8001d58 <USART_init+0xf8>)
 8001d34:	69db      	ldr	r3, [r3, #28]
 8001d36:	4a08      	ldr	r2, [pc, #32]	; (8001d58 <USART_init+0xf8>)
 8001d38:	f023 0320 	bic.w	r3, r3, #32
 8001d3c:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 8001d3e:	4b07      	ldr	r3, [pc, #28]	; (8001d5c <USART_init+0xfc>)
 8001d40:	2240      	movs	r2, #64	; 0x40
 8001d42:	605a      	str	r2, [r3, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8001d44:	b662      	cpsie	i
}
 8001d46:	bf00      	nop
	__enable_irq();
}
 8001d48:	bf00      	nop
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40004400 	.word	0x40004400
 8001d5c:	e000e100 	.word	0xe000e100

08001d60 <USART_print>:

void USART_print(const char* message) {
 8001d60:	b480      	push	{r7}
 8001d62:	b085      	sub	sp, #20
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8001d68:	2300      	movs	r3, #0
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e010      	b.n	8001d90 <USART_print+0x30>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 8001d6e:	bf00      	nop
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <USART_print+0x4c>)
 8001d72:	69db      	ldr	r3, [r3, #28]
 8001d74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d0f9      	beq.n	8001d70 <USART_print+0x10>
		USART2->TDR = message[i];				// transmit character to USART
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	687a      	ldr	r2, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	781a      	ldrb	r2, [r3, #0]
 8001d84:	4b09      	ldr	r3, [pc, #36]	; (8001dac <USART_print+0x4c>)
 8001d86:	b292      	uxth	r2, r2
 8001d88:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	73fb      	strb	r3, [r7, #15]
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	687a      	ldr	r2, [r7, #4]
 8001d94:	4413      	add	r3, r2
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1e8      	bne.n	8001d6e <USART_print+0xe>
	}
}
 8001d9c:	bf00      	nop
 8001d9e:	bf00      	nop
 8001da0:	3714      	adds	r7, #20
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	40004400 	.word	0x40004400

08001db0 <USART_printf>:

void USART_printf(const char* format, ...) {
 8001db0:	b40f      	push	{r0, r1, r2, r3}
 8001db2:	b580      	push	{r7, lr}
 8001db4:	b082      	sub	sp, #8
 8001db6:	af00      	add	r7, sp, #0
	va_list args;
	va_start(args, format);
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	603b      	str	r3, [r7, #0]

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dc6:	480c      	ldr	r0, [pc, #48]	; (8001df8 <USART_printf+0x48>)
 8001dc8:	f006 fc5a 	bl	8008680 <vsniprintf>
 8001dcc:	6078      	str	r0, [r7, #4]

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd4:	d306      	bcc.n	8001de4 <USART_printf+0x34>
		// Handle buffer overflow (e.g., print error message)
		printf("first TIMER end value %d\n", TIM5->CNT);
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <USART_printf+0x4c>)
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4808      	ldr	r0, [pc, #32]	; (8001e00 <USART_printf+0x50>)
 8001dde:	f006 fbaf 	bl	8008540 <iprintf>
		// Print the formatted string
		USART_print(buffer);
	}

	va_end(args);
}
 8001de2:	e002      	b.n	8001dea <USART_printf+0x3a>
		USART_print(buffer);
 8001de4:	4804      	ldr	r0, [pc, #16]	; (8001df8 <USART_printf+0x48>)
 8001de6:	f7ff ffbb 	bl	8001d60 <USART_print>
}
 8001dea:	bf00      	nop
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001df4:	b004      	add	sp, #16
 8001df6:	4770      	bx	lr
 8001df8:	2000226c 	.word	0x2000226c
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	0800bee4 	.word	0x0800bee4

08001e04 <USART_YX>:

void USART_YX(int line, int column) {
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	6039      	str	r1, [r7, #0]
	USART_printf("\x1B[%d;%dH", line, column);  // move cursor to top left
 8001e0e:	683a      	ldr	r2, [r7, #0]
 8001e10:	6879      	ldr	r1, [r7, #4]
 8001e12:	4803      	ldr	r0, [pc, #12]	; (8001e20 <USART_YX+0x1c>)
 8001e14:	f7ff ffcc 	bl	8001db0 <USART_printf>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	0800bf00 	.word	0x0800bf00

08001e24 <USART_cmd>:

void USART_cmd(const char* message) {
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	USART_print("\x1B");
 8001e2c:	4810      	ldr	r0, [pc, #64]	; (8001e70 <USART_cmd+0x4c>)
 8001e2e:	f7ff ff97 	bl	8001d60 <USART_print>
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8001e32:	2300      	movs	r3, #0
 8001e34:	73fb      	strb	r3, [r7, #15]
 8001e36:	e010      	b.n	8001e5a <USART_cmd+0x36>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 8001e38:	bf00      	nop
 8001e3a:	4b0e      	ldr	r3, [pc, #56]	; (8001e74 <USART_cmd+0x50>)
 8001e3c:	69db      	ldr	r3, [r3, #28]
 8001e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d0f9      	beq.n	8001e3a <USART_cmd+0x16>
		USART2->TDR = message[i];				// transmit character to USART
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	781a      	ldrb	r2, [r3, #0]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	; (8001e74 <USART_cmd+0x50>)
 8001e50:	b292      	uxth	r2, r2
 8001e52:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 8001e54:	7bfb      	ldrb	r3, [r7, #15]
 8001e56:	3301      	adds	r3, #1
 8001e58:	73fb      	strb	r3, [r7, #15]
 8001e5a:	7bfb      	ldrb	r3, [r7, #15]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	4413      	add	r3, r2
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d1e8      	bne.n	8001e38 <USART_cmd+0x14>
	}
}
 8001e66:	bf00      	nop
 8001e68:	bf00      	nop
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	0800bf0c 	.word	0x0800bf0c
 8001e74:	40004400 	.word	0x40004400

08001e78 <USART_putchar>:

void USART_putchar(const char c){
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
	while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 8001e82:	bf00      	nop
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <USART_putchar+0x2c>)
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d0f9      	beq.n	8001e84 <USART_putchar+0xc>
	USART2->TDR = c;				// transmit character to USART
 8001e90:	4b04      	ldr	r3, [pc, #16]	; (8001ea4 <USART_putchar+0x2c>)
 8001e92:	79fa      	ldrb	r2, [r7, #7]
 8001e94:	b292      	uxth	r2, r2
 8001e96:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40004400 	.word	0x40004400

08001ea8 <USART_wipe>:
	USART_print("\x1B[2J"); // clear screen
	USART_print("\x1B[0m"); // clear attributes
	USART_print("\x1B[H");  // move cursor to top left
}

void USART_wipe(){
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	USART_print("\x1B[2J"); // clear screen
 8001eac:	4803      	ldr	r0, [pc, #12]	; (8001ebc <USART_wipe+0x14>)
 8001eae:	f7ff ff57 	bl	8001d60 <USART_print>
	USART_print("\x1B[0m"); // clear attributes
 8001eb2:	4803      	ldr	r0, [pc, #12]	; (8001ec0 <USART_wipe+0x18>)
 8001eb4:	f7ff ff54 	bl	8001d60 <USART_print>
//	USART_print("\x1B[H");  // move cursor to top left
}
 8001eb8:	bf00      	nop
 8001eba:	bd80      	pop	{r7, pc}
 8001ebc:	0800bf10 	.word	0x0800bf10
 8001ec0:	0800bf18 	.word	0x0800bf18

08001ec4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001ec8:	f7ff fe6e 	bl	8001ba8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ecc:	480c      	ldr	r0, [pc, #48]	; (8001f00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ece:	490d      	ldr	r1, [pc, #52]	; (8001f04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ed0:	4a0d      	ldr	r2, [pc, #52]	; (8001f08 <LoopForever+0xe>)
  movs r3, #0
 8001ed2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed4:	e002      	b.n	8001edc <LoopCopyDataInit>

08001ed6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eda:	3304      	adds	r3, #4

08001edc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001edc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ede:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ee0:	d3f9      	bcc.n	8001ed6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ee2:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ee4:	4c0a      	ldr	r4, [pc, #40]	; (8001f10 <LoopForever+0x16>)
  movs r3, #0
 8001ee6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee8:	e001      	b.n	8001eee <LoopFillZerobss>

08001eea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eec:	3204      	adds	r2, #4

08001eee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ef0:	d3fb      	bcc.n	8001eea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f006 fc91 	bl	8008818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ef6:	f7ff f933 	bl	8001160 <main>

08001efa <LoopForever>:

LoopForever:
    b LoopForever
 8001efa:	e7fe      	b.n	8001efa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001efc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001f08:	0801f3a0 	.word	0x0801f3a0
  ldr r2, =_sbss
 8001f0c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001f10:	20006db0 	.word	0x20006db0

08001f14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC1_2_IRQHandler>

08001f16 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f20:	2003      	movs	r0, #3
 8001f22:	f000 f8de 	bl	80020e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f26:	200f      	movs	r0, #15
 8001f28:	f7ff fd06 	bl	8001938 <HAL_InitTick>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	71fb      	strb	r3, [r7, #7]
 8001f36:	e001      	b.n	8001f3c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001f38:	f7ff fcd6 	bl	80018e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3708      	adds	r7, #8
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
	...

08001f48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_IncTick+0x20>)
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <HAL_IncTick+0x24>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4413      	add	r3, r2
 8001f58:	4a04      	ldr	r2, [pc, #16]	; (8001f6c <HAL_IncTick+0x24>)
 8001f5a:	6013      	str	r3, [r2, #0]
}
 8001f5c:	bf00      	nop
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	2000000c 	.word	0x2000000c
 8001f6c:	2000266c 	.word	0x2000266c

08001f70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  return uwTick;
 8001f74:	4b03      	ldr	r3, [pc, #12]	; (8001f84 <HAL_GetTick+0x14>)
 8001f76:	681b      	ldr	r3, [r3, #0]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	2000266c 	.word	0x2000266c

08001f88 <__NVIC_SetPriorityGrouping>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f003 0307 	and.w	r3, r3, #7
 8001f96:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f98:	4b0c      	ldr	r3, [pc, #48]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fba:	4a04      	ldr	r2, [pc, #16]	; (8001fcc <__NVIC_SetPriorityGrouping+0x44>)
 8001fbc:	68bb      	ldr	r3, [r7, #8]
 8001fbe:	60d3      	str	r3, [r2, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	e000ed00 	.word	0xe000ed00

08001fd0 <__NVIC_GetPriorityGrouping>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fd4:	4b04      	ldr	r3, [pc, #16]	; (8001fe8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	0a1b      	lsrs	r3, r3, #8
 8001fda:	f003 0307 	and.w	r3, r3, #7
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_EnableIRQ>:
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	db0b      	blt.n	8002016 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f003 021f 	and.w	r2, r3, #31
 8002004:	4907      	ldr	r1, [pc, #28]	; (8002024 <__NVIC_EnableIRQ+0x38>)
 8002006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200a:	095b      	lsrs	r3, r3, #5
 800200c:	2001      	movs	r0, #1
 800200e:	fa00 f202 	lsl.w	r2, r0, r2
 8002012:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	e000e100 	.word	0xe000e100

08002028 <__NVIC_SetPriority>:
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	6039      	str	r1, [r7, #0]
 8002032:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002038:	2b00      	cmp	r3, #0
 800203a:	db0a      	blt.n	8002052 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	b2da      	uxtb	r2, r3
 8002040:	490c      	ldr	r1, [pc, #48]	; (8002074 <__NVIC_SetPriority+0x4c>)
 8002042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002046:	0112      	lsls	r2, r2, #4
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	440b      	add	r3, r1
 800204c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002050:	e00a      	b.n	8002068 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	b2da      	uxtb	r2, r3
 8002056:	4908      	ldr	r1, [pc, #32]	; (8002078 <__NVIC_SetPriority+0x50>)
 8002058:	79fb      	ldrb	r3, [r7, #7]
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	3b04      	subs	r3, #4
 8002060:	0112      	lsls	r2, r2, #4
 8002062:	b2d2      	uxtb	r2, r2
 8002064:	440b      	add	r3, r1
 8002066:	761a      	strb	r2, [r3, #24]
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr
 8002074:	e000e100 	.word	0xe000e100
 8002078:	e000ed00 	.word	0xe000ed00

0800207c <NVIC_EncodePriority>:
{
 800207c:	b480      	push	{r7}
 800207e:	b089      	sub	sp, #36	; 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	60f8      	str	r0, [r7, #12]
 8002084:	60b9      	str	r1, [r7, #8]
 8002086:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f1c3 0307 	rsb	r3, r3, #7
 8002096:	2b04      	cmp	r3, #4
 8002098:	bf28      	it	cs
 800209a:	2304      	movcs	r3, #4
 800209c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	3304      	adds	r3, #4
 80020a2:	2b06      	cmp	r3, #6
 80020a4:	d902      	bls.n	80020ac <NVIC_EncodePriority+0x30>
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3b03      	subs	r3, #3
 80020aa:	e000      	b.n	80020ae <NVIC_EncodePriority+0x32>
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	43da      	mvns	r2, r3
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	401a      	ands	r2, r3
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	fa01 f303 	lsl.w	r3, r1, r3
 80020ce:	43d9      	mvns	r1, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020d4:	4313      	orrs	r3, r2
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3724      	adds	r7, #36	; 0x24
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr

080020e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020e2:	b580      	push	{r7, lr}
 80020e4:	b082      	sub	sp, #8
 80020e6:	af00      	add	r7, sp, #0
 80020e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7ff ff4c 	bl	8001f88 <__NVIC_SetPriorityGrouping>
}
 80020f0:	bf00      	nop
 80020f2:	3708      	adds	r7, #8
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	4603      	mov	r3, r0
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002106:	2300      	movs	r3, #0
 8002108:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800210a:	f7ff ff61 	bl	8001fd0 <__NVIC_GetPriorityGrouping>
 800210e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002110:	687a      	ldr	r2, [r7, #4]
 8002112:	68b9      	ldr	r1, [r7, #8]
 8002114:	6978      	ldr	r0, [r7, #20]
 8002116:	f7ff ffb1 	bl	800207c <NVIC_EncodePriority>
 800211a:	4602      	mov	r2, r0
 800211c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002120:	4611      	mov	r1, r2
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff ff80 	bl	8002028 <__NVIC_SetPriority>
}
 8002128:	bf00      	nop
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800213a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800213e:	4618      	mov	r0, r3
 8002140:	f7ff ff54 	bl	8001fec <__NVIC_EnableIRQ>
}
 8002144:	bf00      	nop
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002150:	4b04      	ldr	r3, [pc, #16]	; (8002164 <HAL_PWREx_GetVoltageRange+0x18>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	40007000 	.word	0x40007000

08002168 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002176:	d130      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002178:	4b23      	ldr	r3, [pc, #140]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002184:	d038      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002186:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800218e:	4a1e      	ldr	r2, [pc, #120]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002190:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002194:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002196:	4b1d      	ldr	r3, [pc, #116]	; (800220c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2232      	movs	r2, #50	; 0x32
 800219c:	fb02 f303 	mul.w	r3, r2, r3
 80021a0:	4a1b      	ldr	r2, [pc, #108]	; (8002210 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0c9b      	lsrs	r3, r3, #18
 80021a8:	3301      	adds	r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021ac:	e002      	b.n	80021b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	3b01      	subs	r3, #1
 80021b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b6:	695b      	ldr	r3, [r3, #20]
 80021b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c0:	d102      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d1f2      	bne.n	80021ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021d4:	d110      	bne.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e00f      	b.n	80021fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021e6:	d007      	beq.n	80021f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021f0:	4a05      	ldr	r2, [pc, #20]	; (8002208 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3714      	adds	r7, #20
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40007000 	.word	0x40007000
 800220c:	20000004 	.word	0x20000004
 8002210:	431bde83 	.word	0x431bde83

08002214 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b088      	sub	sp, #32
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e3ca      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002226:	4b97      	ldr	r3, [pc, #604]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002228:	689b      	ldr	r3, [r3, #8]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002230:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	f003 0303 	and.w	r3, r3, #3
 8002238:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 0310 	and.w	r3, r3, #16
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80e4 	beq.w	8002410 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d007      	beq.n	800225e <HAL_RCC_OscConfig+0x4a>
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	2b0c      	cmp	r3, #12
 8002252:	f040 808b 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b01      	cmp	r3, #1
 800225a:	f040 8087 	bne.w	800236c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225e:	4b89      	ldr	r3, [pc, #548]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_RCC_OscConfig+0x62>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	699b      	ldr	r3, [r3, #24]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002272:	2301      	movs	r3, #1
 8002274:	e3a2      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a1a      	ldr	r2, [r3, #32]
 800227a:	4b82      	ldr	r3, [pc, #520]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <HAL_RCC_OscConfig+0x7c>
 8002286:	4b7f      	ldr	r3, [pc, #508]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228e:	e005      	b.n	800229c <HAL_RCC_OscConfig+0x88>
 8002290:	4b7c      	ldr	r3, [pc, #496]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002292:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229c:	4293      	cmp	r3, r2
 800229e:	d223      	bcs.n	80022e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a1b      	ldr	r3, [r3, #32]
 80022a4:	4618      	mov	r0, r3
 80022a6:	f000 fd71 	bl	8002d8c <RCC_SetFlashLatencyFromMSIRange>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	e383      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b4:	4b73      	ldr	r3, [pc, #460]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a72      	ldr	r2, [pc, #456]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6013      	str	r3, [r2, #0]
 80022c0:	4b70      	ldr	r3, [pc, #448]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a1b      	ldr	r3, [r3, #32]
 80022cc:	496d      	ldr	r1, [pc, #436]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d2:	4b6c      	ldr	r3, [pc, #432]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022d4:	685b      	ldr	r3, [r3, #4]
 80022d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	69db      	ldr	r3, [r3, #28]
 80022de:	021b      	lsls	r3, r3, #8
 80022e0:	4968      	ldr	r1, [pc, #416]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]
 80022e6:	e025      	b.n	8002334 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a65      	ldr	r2, [pc, #404]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022ee:	f043 0308 	orr.w	r3, r3, #8
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b63      	ldr	r3, [pc, #396]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a1b      	ldr	r3, [r3, #32]
 8002300:	4960      	ldr	r1, [pc, #384]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002302:	4313      	orrs	r3, r2
 8002304:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	021b      	lsls	r3, r3, #8
 8002314:	495b      	ldr	r1, [pc, #364]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002316:	4313      	orrs	r3, r2
 8002318:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d109      	bne.n	8002334 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4618      	mov	r0, r3
 8002326:	f000 fd31 	bl	8002d8c <RCC_SetFlashLatencyFromMSIRange>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e343      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002334:	f000 fc4a 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002338:	4602      	mov	r2, r0
 800233a:	4b52      	ldr	r3, [pc, #328]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	091b      	lsrs	r3, r3, #4
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	4950      	ldr	r1, [pc, #320]	; (8002488 <HAL_RCC_OscConfig+0x274>)
 8002346:	5ccb      	ldrb	r3, [r1, r3]
 8002348:	f003 031f 	and.w	r3, r3, #31
 800234c:	fa22 f303 	lsr.w	r3, r2, r3
 8002350:	4a4e      	ldr	r2, [pc, #312]	; (800248c <HAL_RCC_OscConfig+0x278>)
 8002352:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002354:	4b4e      	ldr	r3, [pc, #312]	; (8002490 <HAL_RCC_OscConfig+0x27c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff faed 	bl	8001938 <HAL_InitTick>
 800235e:	4603      	mov	r3, r0
 8002360:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002362:	7bfb      	ldrb	r3, [r7, #15]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d052      	beq.n	800240e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002368:	7bfb      	ldrb	r3, [r7, #15]
 800236a:	e327      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d032      	beq.n	80023da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800237a:	f043 0301 	orr.w	r3, r3, #1
 800237e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002380:	f7ff fdf6 	bl	8001f70 <HAL_GetTick>
 8002384:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002386:	e008      	b.n	800239a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002388:	f7ff fdf2 	bl	8001f70 <HAL_GetTick>
 800238c:	4602      	mov	r2, r0
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	1ad3      	subs	r3, r2, r3
 8002392:	2b02      	cmp	r3, #2
 8002394:	d901      	bls.n	800239a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002396:	2303      	movs	r3, #3
 8002398:	e310      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d0f0      	beq.n	8002388 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a6:	4b37      	ldr	r3, [pc, #220]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a36      	ldr	r2, [pc, #216]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023ac:	f043 0308 	orr.w	r3, r3, #8
 80023b0:	6013      	str	r3, [r2, #0]
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6a1b      	ldr	r3, [r3, #32]
 80023be:	4931      	ldr	r1, [pc, #196]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c0:	4313      	orrs	r3, r2
 80023c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c4:	4b2f      	ldr	r3, [pc, #188]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	021b      	lsls	r3, r3, #8
 80023d2:	492c      	ldr	r1, [pc, #176]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	604b      	str	r3, [r1, #4]
 80023d8:	e01a      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023da:	4b2a      	ldr	r3, [pc, #168]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a29      	ldr	r2, [pc, #164]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e6:	f7ff fdc3 	bl	8001f70 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ee:	f7ff fdbf 	bl	8001f70 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e2dd      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002400:	4b20      	ldr	r3, [pc, #128]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f0      	bne.n	80023ee <HAL_RCC_OscConfig+0x1da>
 800240c:	e000      	b.n	8002410 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	2b00      	cmp	r3, #0
 800241a:	d074      	beq.n	8002506 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	2b08      	cmp	r3, #8
 8002420:	d005      	beq.n	800242e <HAL_RCC_OscConfig+0x21a>
 8002422:	69bb      	ldr	r3, [r7, #24]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d10e      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	2b03      	cmp	r3, #3
 800242c:	d10b      	bne.n	8002446 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242e:	4b15      	ldr	r3, [pc, #84]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d064      	beq.n	8002504 <HAL_RCC_OscConfig+0x2f0>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d160      	bne.n	8002504 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002442:	2301      	movs	r3, #1
 8002444:	e2ba      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244e:	d106      	bne.n	800245e <HAL_RCC_OscConfig+0x24a>
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a0b      	ldr	r2, [pc, #44]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800245a:	6013      	str	r3, [r2, #0]
 800245c:	e026      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002466:	d115      	bne.n	8002494 <HAL_RCC_OscConfig+0x280>
 8002468:	4b06      	ldr	r3, [pc, #24]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a05      	ldr	r2, [pc, #20]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800246e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002472:	6013      	str	r3, [r2, #0]
 8002474:	4b03      	ldr	r3, [pc, #12]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a02      	ldr	r2, [pc, #8]	; (8002484 <HAL_RCC_OscConfig+0x270>)
 800247a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	e014      	b.n	80024ac <HAL_RCC_OscConfig+0x298>
 8002482:	bf00      	nop
 8002484:	40021000 	.word	0x40021000
 8002488:	0800bf3c 	.word	0x0800bf3c
 800248c:	20000004 	.word	0x20000004
 8002490:	20000008 	.word	0x20000008
 8002494:	4ba0      	ldr	r3, [pc, #640]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a9f      	ldr	r2, [pc, #636]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b9d      	ldr	r3, [pc, #628]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a9c      	ldr	r2, [pc, #624]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024b4:	f7ff fd5c 	bl	8001f70 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff fd58 	bl	8001f70 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e276      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ce:	4b92      	ldr	r3, [pc, #584]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x2a8>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024dc:	f7ff fd48 	bl	8001f70 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e4:	f7ff fd44 	bl	8001f70 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e262      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f6:	4b88      	ldr	r3, [pc, #544]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0x2d0>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d060      	beq.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b04      	cmp	r3, #4
 8002516:	d005      	beq.n	8002524 <HAL_RCC_OscConfig+0x310>
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	2b0c      	cmp	r3, #12
 800251c:	d119      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d116      	bne.n	8002552 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002524:	4b7c      	ldr	r3, [pc, #496]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x328>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e23f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b76      	ldr	r3, [pc, #472]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	061b      	lsls	r3, r3, #24
 800254a:	4973      	ldr	r1, [pc, #460]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800254c:	4313      	orrs	r3, r2
 800254e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002550:	e040      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d023      	beq.n	80025a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800255a:	4b6f      	ldr	r3, [pc, #444]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a6e      	ldr	r2, [pc, #440]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff fd03 	bl	8001f70 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fcff 	bl	8001f70 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e21d      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002580:	4b65      	ldr	r3, [pc, #404]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d0f0      	beq.n	800256e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800258c:	4b62      	ldr	r3, [pc, #392]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	061b      	lsls	r3, r3, #24
 800259a:	495f      	ldr	r1, [pc, #380]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800259c:	4313      	orrs	r3, r2
 800259e:	604b      	str	r3, [r1, #4]
 80025a0:	e018      	b.n	80025d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025a2:	4b5d      	ldr	r3, [pc, #372]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a5c      	ldr	r2, [pc, #368]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ae:	f7ff fcdf 	bl	8001f70 <HAL_GetTick>
 80025b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b4:	e008      	b.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b6:	f7ff fcdb 	bl	8001f70 <HAL_GetTick>
 80025ba:	4602      	mov	r2, r0
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	1ad3      	subs	r3, r2, r3
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d901      	bls.n	80025c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c4:	2303      	movs	r3, #3
 80025c6:	e1f9      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c8:	4b53      	ldr	r3, [pc, #332]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d1f0      	bne.n	80025b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 0308 	and.w	r3, r3, #8
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d03c      	beq.n	800265a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d01c      	beq.n	8002622 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e8:	4b4b      	ldr	r3, [pc, #300]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	4a4a      	ldr	r2, [pc, #296]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f8:	f7ff fcba 	bl	8001f70 <HAL_GetTick>
 80025fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fe:	e008      	b.n	8002612 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002600:	f7ff fcb6 	bl	8001f70 <HAL_GetTick>
 8002604:	4602      	mov	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	2b02      	cmp	r3, #2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e1d4      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002612:	4b41      	ldr	r3, [pc, #260]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002614:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d0ef      	beq.n	8002600 <HAL_RCC_OscConfig+0x3ec>
 8002620:	e01b      	b.n	800265a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002622:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002628:	4a3b      	ldr	r2, [pc, #236]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800262a:	f023 0301 	bic.w	r3, r3, #1
 800262e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002632:	f7ff fc9d 	bl	8001f70 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800263a:	f7ff fc99 	bl	8001f70 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e1b7      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800264c:	4b32      	ldr	r3, [pc, #200]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800264e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1ef      	bne.n	800263a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	f000 80a6 	beq.w	80027b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002668:	2300      	movs	r3, #0
 800266a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800266c:	4b2a      	ldr	r3, [pc, #168]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800266e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d10d      	bne.n	8002694 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002678:	4b27      	ldr	r3, [pc, #156]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267c:	4a26      	ldr	r2, [pc, #152]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800267e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002682:	6593      	str	r3, [r2, #88]	; 0x58
 8002684:	4b24      	ldr	r3, [pc, #144]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002686:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002688:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268c:	60bb      	str	r3, [r7, #8]
 800268e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002690:	2301      	movs	r3, #1
 8002692:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002694:	4b21      	ldr	r3, [pc, #132]	; (800271c <HAL_RCC_OscConfig+0x508>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269c:	2b00      	cmp	r3, #0
 800269e:	d118      	bne.n	80026d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a0:	4b1e      	ldr	r3, [pc, #120]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a1d      	ldr	r2, [pc, #116]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ac:	f7ff fc60 	bl	8001f70 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b4:	f7ff fc5c 	bl	8001f70 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e17a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c6:	4b15      	ldr	r3, [pc, #84]	; (800271c <HAL_RCC_OscConfig+0x508>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d108      	bne.n	80026ec <HAL_RCC_OscConfig+0x4d8>
 80026da:	4b0f      	ldr	r3, [pc, #60]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e0:	4a0d      	ldr	r2, [pc, #52]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026e2:	f043 0301 	orr.w	r3, r3, #1
 80026e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026ea:	e029      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d115      	bne.n	8002720 <HAL_RCC_OscConfig+0x50c>
 80026f4:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a07      	ldr	r2, [pc, #28]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 80026fc:	f043 0304 	orr.w	r3, r3, #4
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002704:	4b04      	ldr	r3, [pc, #16]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a03      	ldr	r2, [pc, #12]	; (8002718 <HAL_RCC_OscConfig+0x504>)
 800270c:	f043 0301 	orr.w	r3, r3, #1
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002714:	e014      	b.n	8002740 <HAL_RCC_OscConfig+0x52c>
 8002716:	bf00      	nop
 8002718:	40021000 	.word	0x40021000
 800271c:	40007000 	.word	0x40007000
 8002720:	4b9c      	ldr	r3, [pc, #624]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	4a9b      	ldr	r2, [pc, #620]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002730:	4b98      	ldr	r3, [pc, #608]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	4a97      	ldr	r2, [pc, #604]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689b      	ldr	r3, [r3, #8]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d016      	beq.n	8002776 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002748:	f7ff fc12 	bl	8001f70 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800274e:	e00a      	b.n	8002766 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002750:	f7ff fc0e 	bl	8001f70 <HAL_GetTick>
 8002754:	4602      	mov	r2, r0
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	1ad3      	subs	r3, r2, r3
 800275a:	f241 3288 	movw	r2, #5000	; 0x1388
 800275e:	4293      	cmp	r3, r2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e12a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002766:	4b8b      	ldr	r3, [pc, #556]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276c:	f003 0302 	and.w	r3, r3, #2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d0ed      	beq.n	8002750 <HAL_RCC_OscConfig+0x53c>
 8002774:	e015      	b.n	80027a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f7ff fbfb 	bl	8001f70 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800277c:	e00a      	b.n	8002794 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7ff fbf7 	bl	8001f70 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	f241 3288 	movw	r2, #5000	; 0x1388
 800278c:	4293      	cmp	r3, r2
 800278e:	d901      	bls.n	8002794 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e113      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002794:	4b7f      	ldr	r3, [pc, #508]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002796:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ed      	bne.n	800277e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7ffb      	ldrb	r3, [r7, #31]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b7a      	ldr	r3, [pc, #488]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027ac:	4a79      	ldr	r2, [pc, #484]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80fe 	beq.w	80029ba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	f040 80d0 	bne.w	8002968 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027c8:	4b72      	ldr	r3, [pc, #456]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	f003 0203 	and.w	r2, r3, #3
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027d8:	429a      	cmp	r2, r3
 80027da:	d130      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027dc:	697b      	ldr	r3, [r7, #20]
 80027de:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ea:	429a      	cmp	r2, r3
 80027ec:	d127      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d11f      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002808:	2a07      	cmp	r2, #7
 800280a:	bf14      	ite	ne
 800280c:	2201      	movne	r2, #1
 800280e:	2200      	moveq	r2, #0
 8002810:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002812:	4293      	cmp	r3, r2
 8002814:	d113      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002816:	697b      	ldr	r3, [r7, #20]
 8002818:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	085b      	lsrs	r3, r3, #1
 8002822:	3b01      	subs	r3, #1
 8002824:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002826:	429a      	cmp	r2, r3
 8002828:	d109      	bne.n	800283e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800282a:	697b      	ldr	r3, [r7, #20]
 800282c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800283a:	429a      	cmp	r2, r3
 800283c:	d06e      	beq.n	800291c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800283e:	69bb      	ldr	r3, [r7, #24]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d069      	beq.n	8002918 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002844:	4b53      	ldr	r3, [pc, #332]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d105      	bne.n	800285c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002850:	4b50      	ldr	r3, [pc, #320]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d001      	beq.n	8002860 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e0ad      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002860:	4b4c      	ldr	r3, [pc, #304]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a4b      	ldr	r2, [pc, #300]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002866:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800286a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800286c:	f7ff fb80 	bl	8001f70 <HAL_GetTick>
 8002870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002872:	e008      	b.n	8002886 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002874:	f7ff fb7c 	bl	8001f70 <HAL_GetTick>
 8002878:	4602      	mov	r2, r0
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	1ad3      	subs	r3, r2, r3
 800287e:	2b02      	cmp	r3, #2
 8002880:	d901      	bls.n	8002886 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002882:	2303      	movs	r3, #3
 8002884:	e09a      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002886:	4b43      	ldr	r3, [pc, #268]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d1f0      	bne.n	8002874 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002892:	4b40      	ldr	r3, [pc, #256]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002894:	68da      	ldr	r2, [r3, #12]
 8002896:	4b40      	ldr	r3, [pc, #256]	; (8002998 <HAL_RCC_OscConfig+0x784>)
 8002898:	4013      	ands	r3, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028a2:	3a01      	subs	r2, #1
 80028a4:	0112      	lsls	r2, r2, #4
 80028a6:	4311      	orrs	r1, r2
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028ac:	0212      	lsls	r2, r2, #8
 80028ae:	4311      	orrs	r1, r2
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028b4:	0852      	lsrs	r2, r2, #1
 80028b6:	3a01      	subs	r2, #1
 80028b8:	0552      	lsls	r2, r2, #21
 80028ba:	4311      	orrs	r1, r2
 80028bc:	687a      	ldr	r2, [r7, #4]
 80028be:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028c0:	0852      	lsrs	r2, r2, #1
 80028c2:	3a01      	subs	r2, #1
 80028c4:	0652      	lsls	r2, r2, #25
 80028c6:	4311      	orrs	r1, r2
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028cc:	0912      	lsrs	r2, r2, #4
 80028ce:	0452      	lsls	r2, r2, #17
 80028d0:	430a      	orrs	r2, r1
 80028d2:	4930      	ldr	r1, [pc, #192]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a2d      	ldr	r2, [pc, #180]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e4:	4b2b      	ldr	r3, [pc, #172]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	4a2a      	ldr	r2, [pc, #168]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 80028ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028ee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028f0:	f7ff fb3e 	bl	8001f70 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f8:	f7ff fb3a 	bl	8001f70 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e058      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290a:	4b22      	ldr	r3, [pc, #136]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002916:	e050      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e04f      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d148      	bne.n	80029ba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002928:	4b1a      	ldr	r3, [pc, #104]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a19      	ldr	r2, [pc, #100]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800292e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002932:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002934:	4b17      	ldr	r3, [pc, #92]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a16      	ldr	r2, [pc, #88]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800293a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800293e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002940:	f7ff fb16 	bl	8001f70 <HAL_GetTick>
 8002944:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002946:	e008      	b.n	800295a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002948:	f7ff fb12 	bl	8001f70 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	693b      	ldr	r3, [r7, #16]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d901      	bls.n	800295a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e030      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002962:	2b00      	cmp	r3, #0
 8002964:	d0f0      	beq.n	8002948 <HAL_RCC_OscConfig+0x734>
 8002966:	e028      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d023      	beq.n	80029b6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800296e:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a08      	ldr	r2, [pc, #32]	; (8002994 <HAL_RCC_OscConfig+0x780>)
 8002974:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002978:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297a:	f7ff faf9 	bl	8001f70 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002980:	e00c      	b.n	800299c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002982:	f7ff faf5 	bl	8001f70 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d905      	bls.n	800299c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e013      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
 8002994:	40021000 	.word	0x40021000
 8002998:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800299c:	4b09      	ldr	r3, [pc, #36]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ec      	bne.n	8002982 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029aa:	68da      	ldr	r2, [r3, #12]
 80029ac:	4905      	ldr	r1, [pc, #20]	; (80029c4 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_RCC_OscConfig+0x7b4>)
 80029b0:	4013      	ands	r3, r2
 80029b2:	60cb      	str	r3, [r1, #12]
 80029b4:	e001      	b.n	80029ba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3720      	adds	r7, #32
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40021000 	.word	0x40021000
 80029c8:	feeefffc 	.word	0xfeeefffc

080029cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0e7      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029e0:	4b75      	ldr	r3, [pc, #468]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0307 	and.w	r3, r3, #7
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d910      	bls.n	8002a10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ee:	4b72      	ldr	r3, [pc, #456]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f023 0207 	bic.w	r2, r3, #7
 80029f6:	4970      	ldr	r1, [pc, #448]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fe:	4b6e      	ldr	r3, [pc, #440]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	683a      	ldr	r2, [r7, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d001      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	e0cf      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d010      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689a      	ldr	r2, [r3, #8]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d908      	bls.n	8002a3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b63      	ldr	r3, [pc, #396]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4960      	ldr	r1, [pc, #384]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d04c      	beq.n	8002ae4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b03      	cmp	r3, #3
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a52:	4b5a      	ldr	r3, [pc, #360]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d121      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e0a6      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d107      	bne.n	8002a7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6a:	4b54      	ldr	r3, [pc, #336]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d115      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e09a      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d107      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d109      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e08e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a92:	4b4a      	ldr	r3, [pc, #296]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d101      	bne.n	8002aa2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e086      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002aa2:	4b46      	ldr	r3, [pc, #280]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f023 0203 	bic.w	r2, r3, #3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	4943      	ldr	r1, [pc, #268]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ab4:	f7ff fa5c 	bl	8001f70 <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aba:	e00a      	b.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002abc:	f7ff fa58 	bl	8001f70 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d901      	bls.n	8002ad2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002ace:	2303      	movs	r3, #3
 8002ad0:	e06e      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ad2:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	f003 020c 	and.w	r2, r3, #12
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d1eb      	bne.n	8002abc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d010      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	4b31      	ldr	r3, [pc, #196]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002afc:	429a      	cmp	r2, r3
 8002afe:	d208      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b2e      	ldr	r3, [pc, #184]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	492b      	ldr	r1, [pc, #172]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b12:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	429a      	cmp	r2, r3
 8002b1e:	d210      	bcs.n	8002b42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b20:	4b25      	ldr	r3, [pc, #148]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f023 0207 	bic.w	r2, r3, #7
 8002b28:	4923      	ldr	r1, [pc, #140]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b30:	4b21      	ldr	r3, [pc, #132]	; (8002bb8 <HAL_RCC_ClockConfig+0x1ec>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0307 	and.w	r3, r3, #7
 8002b38:	683a      	ldr	r2, [r7, #0]
 8002b3a:	429a      	cmp	r2, r3
 8002b3c:	d001      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e036      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0304 	and.w	r3, r3, #4
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	4918      	ldr	r1, [pc, #96]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d009      	beq.n	8002b80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	691b      	ldr	r3, [r3, #16]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	4910      	ldr	r1, [pc, #64]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b80:	f000 f824 	bl	8002bcc <HAL_RCC_GetSysClockFreq>
 8002b84:	4602      	mov	r2, r0
 8002b86:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <HAL_RCC_ClockConfig+0x1f0>)
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	091b      	lsrs	r3, r3, #4
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	490b      	ldr	r1, [pc, #44]	; (8002bc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002b92:	5ccb      	ldrb	r3, [r1, r3]
 8002b94:	f003 031f 	and.w	r3, r3, #31
 8002b98:	fa22 f303 	lsr.w	r3, r2, r3
 8002b9c:	4a09      	ldr	r2, [pc, #36]	; (8002bc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002b9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ba0:	4b09      	ldr	r3, [pc, #36]	; (8002bc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7fe fec7 	bl	8001938 <HAL_InitTick>
 8002baa:	4603      	mov	r3, r0
 8002bac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bae:	7afb      	ldrb	r3, [r7, #11]
}
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	3710      	adds	r7, #16
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	0800bf3c 	.word	0x0800bf3c
 8002bc4:	20000004 	.word	0x20000004
 8002bc8:	20000008 	.word	0x20000008

08002bcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b089      	sub	sp, #36	; 0x24
 8002bd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bda:	4b3e      	ldr	r3, [pc, #248]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 030c 	and.w	r3, r3, #12
 8002be2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002be4:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0303 	and.w	r3, r3, #3
 8002bec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d005      	beq.n	8002c00 <HAL_RCC_GetSysClockFreq+0x34>
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	2b0c      	cmp	r3, #12
 8002bf8:	d121      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d11e      	bne.n	8002c3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c00:	4b34      	ldr	r3, [pc, #208]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 0308 	and.w	r3, r3, #8
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c12:	0a1b      	lsrs	r3, r3, #8
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	61fb      	str	r3, [r7, #28]
 8002c1a:	e005      	b.n	8002c28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c1c:	4b2d      	ldr	r3, [pc, #180]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	091b      	lsrs	r3, r3, #4
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c28:	4a2b      	ldr	r2, [pc, #172]	; (8002cd8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d10d      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c3c:	e00a      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c3e:	693b      	ldr	r3, [r7, #16]
 8002c40:	2b04      	cmp	r3, #4
 8002c42:	d102      	bne.n	8002c4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c44:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c46:	61bb      	str	r3, [r7, #24]
 8002c48:	e004      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	2b08      	cmp	r3, #8
 8002c4e:	d101      	bne.n	8002c54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c50:	4b23      	ldr	r3, [pc, #140]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d134      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c5a:	4b1e      	ldr	r3, [pc, #120]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f003 0303 	and.w	r3, r3, #3
 8002c62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d003      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	2b03      	cmp	r3, #3
 8002c6e:	d003      	beq.n	8002c78 <HAL_RCC_GetSysClockFreq+0xac>
 8002c70:	e005      	b.n	8002c7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c72:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x110>)
 8002c74:	617b      	str	r3, [r7, #20]
      break;
 8002c76:	e005      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c78:	4b19      	ldr	r3, [pc, #100]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c7a:	617b      	str	r3, [r7, #20]
      break;
 8002c7c:	e002      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	617b      	str	r3, [r7, #20]
      break;
 8002c82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c84:	4b13      	ldr	r3, [pc, #76]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	091b      	lsrs	r3, r3, #4
 8002c8a:	f003 0307 	and.w	r3, r3, #7
 8002c8e:	3301      	adds	r3, #1
 8002c90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c92:	4b10      	ldr	r3, [pc, #64]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002caa:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	0e5b      	lsrs	r3, r3, #25
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	005b      	lsls	r3, r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002cc4:	69bb      	ldr	r3, [r7, #24]
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	; 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000
 8002cd8:	0800bf54 	.word	0x0800bf54
 8002cdc:	00f42400 	.word	0x00f42400
 8002ce0:	007a1200 	.word	0x007a1200

08002ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ce8:	4b03      	ldr	r3, [pc, #12]	; (8002cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cea:	681b      	ldr	r3, [r3, #0]
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	20000004 	.word	0x20000004

08002cfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d00:	f7ff fff0 	bl	8002ce4 <HAL_RCC_GetHCLKFreq>
 8002d04:	4602      	mov	r2, r0
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	0adb      	lsrs	r3, r3, #11
 8002d0c:	f003 0307 	and.w	r3, r3, #7
 8002d10:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d12:	5ccb      	ldrb	r3, [r1, r3]
 8002d14:	f003 031f 	and.w	r3, r3, #31
 8002d18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	40021000 	.word	0x40021000
 8002d24:	0800bf4c 	.word	0x0800bf4c

08002d28 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
 8002d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	220f      	movs	r2, #15
 8002d36:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002d38:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <HAL_RCC_GetClockConfig+0x5c>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0203 	and.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002d44:	4b0f      	ldr	r3, [pc, #60]	; (8002d84 <HAL_RCC_GetClockConfig+0x5c>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002d50:	4b0c      	ldr	r3, [pc, #48]	; (8002d84 <HAL_RCC_GetClockConfig+0x5c>)
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002d5c:	4b09      	ldr	r3, [pc, #36]	; (8002d84 <HAL_RCC_GetClockConfig+0x5c>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	08db      	lsrs	r3, r3, #3
 8002d62:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d6a:	4b07      	ldr	r3, [pc, #28]	; (8002d88 <HAL_RCC_GetClockConfig+0x60>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0207 	and.w	r2, r3, #7
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	601a      	str	r2, [r3, #0]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	40021000 	.word	0x40021000
 8002d88:	40022000 	.word	0x40022000

08002d8c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d98:	4b2a      	ldr	r3, [pc, #168]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d003      	beq.n	8002dac <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da4:	f7ff f9d2 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002da8:	6178      	str	r0, [r7, #20]
 8002daa:	e014      	b.n	8002dd6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dac:	4b25      	ldr	r3, [pc, #148]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db0:	4a24      	ldr	r2, [pc, #144]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db6:	6593      	str	r3, [r2, #88]	; 0x58
 8002db8:	4b22      	ldr	r3, [pc, #136]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	60fb      	str	r3, [r7, #12]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc4:	f7ff f9c2 	bl	800214c <HAL_PWREx_GetVoltageRange>
 8002dc8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dca:	4b1e      	ldr	r3, [pc, #120]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dce:	4a1d      	ldr	r2, [pc, #116]	; (8002e44 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ddc:	d10b      	bne.n	8002df6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2b80      	cmp	r3, #128	; 0x80
 8002de2:	d919      	bls.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2ba0      	cmp	r3, #160	; 0xa0
 8002de8:	d902      	bls.n	8002df0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dea:	2302      	movs	r3, #2
 8002dec:	613b      	str	r3, [r7, #16]
 8002dee:	e013      	b.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002df0:	2301      	movs	r3, #1
 8002df2:	613b      	str	r3, [r7, #16]
 8002df4:	e010      	b.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b80      	cmp	r3, #128	; 0x80
 8002dfa:	d902      	bls.n	8002e02 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dfc:	2303      	movs	r3, #3
 8002dfe:	613b      	str	r3, [r7, #16]
 8002e00:	e00a      	b.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d102      	bne.n	8002e0e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002e08:	2302      	movs	r3, #2
 8002e0a:	613b      	str	r3, [r7, #16]
 8002e0c:	e004      	b.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2b70      	cmp	r3, #112	; 0x70
 8002e12:	d101      	bne.n	8002e18 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e14:	2301      	movs	r3, #1
 8002e16:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e18:	4b0b      	ldr	r3, [pc, #44]	; (8002e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f023 0207 	bic.w	r2, r3, #7
 8002e20:	4909      	ldr	r1, [pc, #36]	; (8002e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e28:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0307 	and.w	r3, r3, #7
 8002e30:	693a      	ldr	r2, [r7, #16]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d001      	beq.n	8002e3a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e000      	b.n	8002e3c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	3718      	adds	r7, #24
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000
 8002e48:	40022000 	.word	0x40022000

08002e4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d101      	bne.n	8002e5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e049      	b.n	8002ef2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e64:	b2db      	uxtb	r3, r3
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d106      	bne.n	8002e78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f000 f841 	bl	8002efa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	3304      	adds	r3, #4
 8002e88:	4619      	mov	r1, r3
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	f000 f9da 	bl	8003244 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2201      	movs	r2, #1
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2201      	movs	r2, #1
 8002ebc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ef0:	2300      	movs	r3, #0
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
	...

08002f10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b085      	sub	sp, #20
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f1e:	b2db      	uxtb	r3, r3
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d001      	beq.n	8002f28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f24:	2301      	movs	r3, #1
 8002f26:	e04f      	b.n	8002fc8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68da      	ldr	r2, [r3, #12]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a23      	ldr	r2, [pc, #140]	; (8002fd4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d01d      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f52:	d018      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a1f      	ldr	r2, [pc, #124]	; (8002fd8 <HAL_TIM_Base_Start_IT+0xc8>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a1e      	ldr	r2, [pc, #120]	; (8002fdc <HAL_TIM_Base_Start_IT+0xcc>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00e      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a1c      	ldr	r2, [pc, #112]	; (8002fe0 <HAL_TIM_Base_Start_IT+0xd0>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d009      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a1b      	ldr	r2, [pc, #108]	; (8002fe4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d004      	beq.n	8002f86 <HAL_TIM_Base_Start_IT+0x76>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d115      	bne.n	8002fb2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	4b17      	ldr	r3, [pc, #92]	; (8002fec <HAL_TIM_Base_Start_IT+0xdc>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	2b06      	cmp	r3, #6
 8002f96:	d015      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0xb4>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f9e:	d011      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f042 0201 	orr.w	r2, r2, #1
 8002fae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fb0:	e008      	b.n	8002fc4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f042 0201 	orr.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]
 8002fc2:	e000      	b.n	8002fc6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40012c00 	.word	0x40012c00
 8002fd8:	40000400 	.word	0x40000400
 8002fdc:	40000800 	.word	0x40000800
 8002fe0:	40000c00 	.word	0x40000c00
 8002fe4:	40013400 	.word	0x40013400
 8002fe8:	40014000 	.word	0x40014000
 8002fec:	00010007 	.word	0x00010007

08002ff0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0302 	and.w	r3, r3, #2
 800300e:	2b00      	cmp	r3, #0
 8003010:	d020      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	f003 0302 	and.w	r3, r3, #2
 8003018:	2b00      	cmp	r3, #0
 800301a:	d01b      	beq.n	8003054 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f06f 0202 	mvn.w	r2, #2
 8003024:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2201      	movs	r2, #1
 800302a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699b      	ldr	r3, [r3, #24]
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 f8e4 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003040:	e005      	b.n	800304e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f8d6 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003048:	6878      	ldr	r0, [r7, #4]
 800304a:	f000 f8e7 	bl	800321c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2200      	movs	r2, #0
 8003052:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d020      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f003 0304 	and.w	r3, r3, #4
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01b      	beq.n	80030a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0204 	mvn.w	r2, #4
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2202      	movs	r2, #2
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 f8be 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f8b0 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f8c1 	bl	800321c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 0308 	and.w	r3, r3, #8
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d020      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 0308 	and.w	r3, r3, #8
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01b      	beq.n	80030ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0208 	mvn.w	r2, #8
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2204      	movs	r2, #4
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	69db      	ldr	r3, [r3, #28]
 80030ca:	f003 0303 	and.w	r3, r3, #3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f898 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 f88a 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f89b 	bl	800321c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0310 	and.w	r3, r3, #16
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d020      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	f003 0310 	and.w	r3, r3, #16
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d01b      	beq.n	8003138 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f06f 0210 	mvn.w	r2, #16
 8003108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2208      	movs	r2, #8
 800310e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f872 	bl	8003208 <HAL_TIM_IC_CaptureCallback>
 8003124:	e005      	b.n	8003132 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 f864 	bl	80031f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f875 	bl	800321c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f003 0301 	and.w	r3, r3, #1
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00c      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 0301 	and.w	r3, r3, #1
 8003148:	2b00      	cmp	r3, #0
 800314a:	d007      	beq.n	800315c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f06f 0201 	mvn.w	r2, #1
 8003154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f7fe fada 	bl	8001710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00c      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316c:	2b00      	cmp	r3, #0
 800316e:	d007      	beq.n	8003180 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003178:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 f906 	bl	800338c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00c      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003190:	2b00      	cmp	r3, #0
 8003192:	d007      	beq.n	80031a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800319c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8fe 	bl	80033a0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d00c      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d007      	beq.n	80031c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f834 	bl	8003230 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f003 0320 	and.w	r3, r3, #32
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00c      	beq.n	80031ec <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d007      	beq.n	80031ec <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0220 	mvn.w	r2, #32
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 f8c6 	bl	8003378 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80031ec:	bf00      	nop
 80031ee:	3710      	adds	r7, #16
 80031f0:	46bd      	mov	sp, r7
 80031f2:	bd80      	pop	{r7, pc}

080031f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr

08003208 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	4a40      	ldr	r2, [pc, #256]	; (8003358 <TIM_Base_SetConfig+0x114>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d013      	beq.n	8003284 <TIM_Base_SetConfig+0x40>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003262:	d00f      	beq.n	8003284 <TIM_Base_SetConfig+0x40>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	4a3d      	ldr	r2, [pc, #244]	; (800335c <TIM_Base_SetConfig+0x118>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d00b      	beq.n	8003284 <TIM_Base_SetConfig+0x40>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	4a3c      	ldr	r2, [pc, #240]	; (8003360 <TIM_Base_SetConfig+0x11c>)
 8003270:	4293      	cmp	r3, r2
 8003272:	d007      	beq.n	8003284 <TIM_Base_SetConfig+0x40>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	4a3b      	ldr	r2, [pc, #236]	; (8003364 <TIM_Base_SetConfig+0x120>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d003      	beq.n	8003284 <TIM_Base_SetConfig+0x40>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	4a3a      	ldr	r2, [pc, #232]	; (8003368 <TIM_Base_SetConfig+0x124>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d108      	bne.n	8003296 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800328a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4313      	orrs	r3, r2
 8003294:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	4a2f      	ldr	r2, [pc, #188]	; (8003358 <TIM_Base_SetConfig+0x114>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d01f      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a4:	d01b      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	4a2c      	ldr	r2, [pc, #176]	; (800335c <TIM_Base_SetConfig+0x118>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d017      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a2b      	ldr	r2, [pc, #172]	; (8003360 <TIM_Base_SetConfig+0x11c>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d013      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a2a      	ldr	r2, [pc, #168]	; (8003364 <TIM_Base_SetConfig+0x120>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d00f      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a29      	ldr	r2, [pc, #164]	; (8003368 <TIM_Base_SetConfig+0x124>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00b      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a28      	ldr	r2, [pc, #160]	; (800336c <TIM_Base_SetConfig+0x128>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a27      	ldr	r2, [pc, #156]	; (8003370 <TIM_Base_SetConfig+0x12c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d003      	beq.n	80032de <TIM_Base_SetConfig+0x9a>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a26      	ldr	r2, [pc, #152]	; (8003374 <TIM_Base_SetConfig+0x130>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d108      	bne.n	80032f0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	689a      	ldr	r2, [r3, #8]
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a10      	ldr	r2, [pc, #64]	; (8003358 <TIM_Base_SetConfig+0x114>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d00f      	beq.n	800333c <TIM_Base_SetConfig+0xf8>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a12      	ldr	r2, [pc, #72]	; (8003368 <TIM_Base_SetConfig+0x124>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d00b      	beq.n	800333c <TIM_Base_SetConfig+0xf8>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a11      	ldr	r2, [pc, #68]	; (800336c <TIM_Base_SetConfig+0x128>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d007      	beq.n	800333c <TIM_Base_SetConfig+0xf8>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <TIM_Base_SetConfig+0x12c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d003      	beq.n	800333c <TIM_Base_SetConfig+0xf8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0f      	ldr	r2, [pc, #60]	; (8003374 <TIM_Base_SetConfig+0x130>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d103      	bne.n	8003344 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	615a      	str	r2, [r3, #20]
}
 800334a:	bf00      	nop
 800334c:	3714      	adds	r7, #20
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40012c00 	.word	0x40012c00
 800335c:	40000400 	.word	0x40000400
 8003360:	40000800 	.word	0x40000800
 8003364:	40000c00 	.word	0x40000c00
 8003368:	40013400 	.word	0x40013400
 800336c:	40014000 	.word	0x40014000
 8003370:	40014400 	.word	0x40014400
 8003374:	40014800 	.word	0x40014800

08003378 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003380:	bf00      	nop
 8003382:	370c      	adds	r7, #12
 8003384:	46bd      	mov	sp, r7
 8003386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800338c:	b480      	push	{r7}
 800338e:	b083      	sub	sp, #12
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033a8:	bf00      	nop
 80033aa:	370c      	adds	r7, #12
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr

080033b4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80033b4:	b580      	push	{r7, lr}
 80033b6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <SysTick_Handler+0x1c>)
 80033ba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80033bc:	f001 fdfe 	bl	8004fbc <xTaskGetSchedulerState>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d001      	beq.n	80033ca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80033c6:	f002 fce7 	bl	8005d98 <xPortSysTickHandler>
  }
}
 80033ca:	bf00      	nop
 80033cc:	bd80      	pop	{r7, pc}
 80033ce:	bf00      	nop
 80033d0:	e000e010 	.word	0xe000e010

080033d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	60f8      	str	r0, [r7, #12]
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a07      	ldr	r2, [pc, #28]	; (8003400 <vApplicationGetIdleTaskMemory+0x2c>)
 80033e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	4a06      	ldr	r2, [pc, #24]	; (8003404 <vApplicationGetIdleTaskMemory+0x30>)
 80033ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2280      	movs	r2, #128	; 0x80
 80033f0:	601a      	str	r2, [r3, #0]
}
 80033f2:	bf00      	nop
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	20002670 	.word	0x20002670
 8003404:	2000271c 	.word	0x2000271c

08003408 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	4a07      	ldr	r2, [pc, #28]	; (8003434 <vApplicationGetTimerTaskMemory+0x2c>)
 8003418:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800341a:	68bb      	ldr	r3, [r7, #8]
 800341c:	4a06      	ldr	r2, [pc, #24]	; (8003438 <vApplicationGetTimerTaskMemory+0x30>)
 800341e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003426:	601a      	str	r2, [r3, #0]
}
 8003428:	bf00      	nop
 800342a:	3714      	adds	r7, #20
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr
 8003434:	2000291c 	.word	0x2000291c
 8003438:	200029c8 	.word	0x200029c8

0800343c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f103 0208 	add.w	r2, r3, #8
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f04f 32ff 	mov.w	r2, #4294967295
 8003454:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f103 0208 	add.w	r2, r3, #8
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	f103 0208 	add.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800348a:	bf00      	nop
 800348c:	370c      	adds	r7, #12
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003496:	b480      	push	{r7}
 8003498:	b085      	sub	sp, #20
 800349a:	af00      	add	r7, sp, #0
 800349c:	6078      	str	r0, [r7, #4]
 800349e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68fa      	ldr	r2, [r7, #12]
 80034aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	689a      	ldr	r2, [r3, #8]
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	683a      	ldr	r2, [r7, #0]
 80034ba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	1c5a      	adds	r2, r3, #1
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	601a      	str	r2, [r3, #0]
}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034de:	b480      	push	{r7}
 80034e0:	b085      	sub	sp, #20
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f4:	d103      	bne.n	80034fe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	e00c      	b.n	8003518 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	3308      	adds	r3, #8
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	e002      	b.n	800350c <vListInsert+0x2e>
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	60fb      	str	r3, [r7, #12]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68ba      	ldr	r2, [r7, #8]
 8003514:	429a      	cmp	r2, r3
 8003516:	d2f6      	bcs.n	8003506 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	685a      	ldr	r2, [r3, #4]
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	683a      	ldr	r2, [r7, #0]
 8003526:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	3714      	adds	r7, #20
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003550:	b480      	push	{r7}
 8003552:	b085      	sub	sp, #20
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	6892      	ldr	r2, [r2, #8]
 8003566:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	6852      	ldr	r2, [r2, #4]
 8003570:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	429a      	cmp	r2, r3
 800357a:	d103      	bne.n	8003584 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	1e5a      	subs	r2, r3, #1
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b084      	sub	sp, #16
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80035ca:	bf00      	nop
 80035cc:	e7fe      	b.n	80035cc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80035ce:	f002 fb51 	bl	8005c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035da:	68f9      	ldr	r1, [r7, #12]
 80035dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	441a      	add	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	2200      	movs	r2, #0
 80035ec:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035fe:	3b01      	subs	r3, #1
 8003600:	68f9      	ldr	r1, [r7, #12]
 8003602:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003604:	fb01 f303 	mul.w	r3, r1, r3
 8003608:	441a      	add	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	22ff      	movs	r2, #255	; 0xff
 8003612:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	2b00      	cmp	r3, #0
 8003622:	d114      	bne.n	800364e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	691b      	ldr	r3, [r3, #16]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01a      	beq.n	8003662 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	3310      	adds	r3, #16
 8003630:	4618      	mov	r0, r3
 8003632:	f001 fb01 	bl	8004c38 <xTaskRemoveFromEventList>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d012      	beq.n	8003662 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <xQueueGenericReset+0xcc>)
 800363e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003642:	601a      	str	r2, [r3, #0]
 8003644:	f3bf 8f4f 	dsb	sy
 8003648:	f3bf 8f6f 	isb	sy
 800364c:	e009      	b.n	8003662 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	3310      	adds	r3, #16
 8003652:	4618      	mov	r0, r3
 8003654:	f7ff fef2 	bl	800343c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	3324      	adds	r3, #36	; 0x24
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff feed 	bl	800343c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003662:	f002 fb37 	bl	8005cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003666:	2301      	movs	r3, #1
}
 8003668:	4618      	mov	r0, r3
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	e000ed04 	.word	0xe000ed04

08003674 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003674:	b580      	push	{r7, lr}
 8003676:	b08e      	sub	sp, #56	; 0x38
 8003678:	af02      	add	r7, sp, #8
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	607a      	str	r2, [r7, #4]
 8003680:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d10a      	bne.n	800369e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800368c:	f383 8811 	msr	BASEPRI, r3
 8003690:	f3bf 8f6f 	isb	sy
 8003694:	f3bf 8f4f 	dsb	sy
 8003698:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800369a:	bf00      	nop
 800369c:	e7fe      	b.n	800369c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d10a      	bne.n	80036ba <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80036a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a8:	f383 8811 	msr	BASEPRI, r3
 80036ac:	f3bf 8f6f 	isb	sy
 80036b0:	f3bf 8f4f 	dsb	sy
 80036b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036b6:	bf00      	nop
 80036b8:	e7fe      	b.n	80036b8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d002      	beq.n	80036c6 <xQueueGenericCreateStatic+0x52>
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <xQueueGenericCreateStatic+0x56>
 80036c6:	2301      	movs	r3, #1
 80036c8:	e000      	b.n	80036cc <xQueueGenericCreateStatic+0x58>
 80036ca:	2300      	movs	r3, #0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	623b      	str	r3, [r7, #32]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d102      	bne.n	80036f2 <xQueueGenericCreateStatic+0x7e>
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d101      	bne.n	80036f6 <xQueueGenericCreateStatic+0x82>
 80036f2:	2301      	movs	r3, #1
 80036f4:	e000      	b.n	80036f8 <xQueueGenericCreateStatic+0x84>
 80036f6:	2300      	movs	r3, #0
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d10a      	bne.n	8003712 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80036fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003700:	f383 8811 	msr	BASEPRI, r3
 8003704:	f3bf 8f6f 	isb	sy
 8003708:	f3bf 8f4f 	dsb	sy
 800370c:	61fb      	str	r3, [r7, #28]
}
 800370e:	bf00      	nop
 8003710:	e7fe      	b.n	8003710 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003712:	2350      	movs	r3, #80	; 0x50
 8003714:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	2b50      	cmp	r3, #80	; 0x50
 800371a:	d00a      	beq.n	8003732 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	61bb      	str	r3, [r7, #24]
}
 800372e:	bf00      	nop
 8003730:	e7fe      	b.n	8003730 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003732:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800373e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003746:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800374a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	4613      	mov	r3, r2
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f83f 	bl	80037d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800375c:	4618      	mov	r0, r3
 800375e:	3730      	adds	r7, #48	; 0x30
 8003760:	46bd      	mov	sp, r7
 8003762:	bd80      	pop	{r7, pc}

08003764 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003764:	b580      	push	{r7, lr}
 8003766:	b08a      	sub	sp, #40	; 0x28
 8003768:	af02      	add	r7, sp, #8
 800376a:	60f8      	str	r0, [r7, #12]
 800376c:	60b9      	str	r1, [r7, #8]
 800376e:	4613      	mov	r3, r2
 8003770:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d10a      	bne.n	800378e <xQueueGenericCreate+0x2a>
	__asm volatile
 8003778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800377c:	f383 8811 	msr	BASEPRI, r3
 8003780:	f3bf 8f6f 	isb	sy
 8003784:	f3bf 8f4f 	dsb	sy
 8003788:	613b      	str	r3, [r7, #16]
}
 800378a:	bf00      	nop
 800378c:	e7fe      	b.n	800378c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	68ba      	ldr	r2, [r7, #8]
 8003792:	fb02 f303 	mul.w	r3, r2, r3
 8003796:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	3350      	adds	r3, #80	; 0x50
 800379c:	4618      	mov	r0, r3
 800379e:	f002 fb8b 	bl	8005eb8 <pvPortMalloc>
 80037a2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037a4:	69bb      	ldr	r3, [r7, #24]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	3350      	adds	r3, #80	; 0x50
 80037b2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	2200      	movs	r2, #0
 80037b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80037bc:	79fa      	ldrb	r2, [r7, #7]
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	4613      	mov	r3, r2
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	68b9      	ldr	r1, [r7, #8]
 80037c8:	68f8      	ldr	r0, [r7, #12]
 80037ca:	f000 f805 	bl	80037d8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037ce:	69bb      	ldr	r3, [r7, #24]
	}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3720      	adds	r7, #32
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}

080037d8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d103      	bne.n	80037f4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	69ba      	ldr	r2, [r7, #24]
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e002      	b.n	80037fa <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80037fa:	69bb      	ldr	r3, [r7, #24]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003806:	2101      	movs	r1, #1
 8003808:	69b8      	ldr	r0, [r7, #24]
 800380a:	f7ff fecb 	bl	80035a4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800380e:	69bb      	ldr	r3, [r7, #24]
 8003810:	78fa      	ldrb	r2, [r7, #3]
 8003812:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003816:	bf00      	nop
 8003818:	3710      	adds	r7, #16
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
	...

08003820 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b08e      	sub	sp, #56	; 0x38
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
 800382c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800382e:	2300      	movs	r3, #0
 8003830:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003838:	2b00      	cmp	r3, #0
 800383a:	d10a      	bne.n	8003852 <xQueueGenericSend+0x32>
	__asm volatile
 800383c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003840:	f383 8811 	msr	BASEPRI, r3
 8003844:	f3bf 8f6f 	isb	sy
 8003848:	f3bf 8f4f 	dsb	sy
 800384c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800384e:	bf00      	nop
 8003850:	e7fe      	b.n	8003850 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d103      	bne.n	8003860 <xQueueGenericSend+0x40>
 8003858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800385a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d101      	bne.n	8003864 <xQueueGenericSend+0x44>
 8003860:	2301      	movs	r3, #1
 8003862:	e000      	b.n	8003866 <xQueueGenericSend+0x46>
 8003864:	2300      	movs	r3, #0
 8003866:	2b00      	cmp	r3, #0
 8003868:	d10a      	bne.n	8003880 <xQueueGenericSend+0x60>
	__asm volatile
 800386a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800386e:	f383 8811 	msr	BASEPRI, r3
 8003872:	f3bf 8f6f 	isb	sy
 8003876:	f3bf 8f4f 	dsb	sy
 800387a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800387c:	bf00      	nop
 800387e:	e7fe      	b.n	800387e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	2b02      	cmp	r3, #2
 8003884:	d103      	bne.n	800388e <xQueueGenericSend+0x6e>
 8003886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003888:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800388a:	2b01      	cmp	r3, #1
 800388c:	d101      	bne.n	8003892 <xQueueGenericSend+0x72>
 800388e:	2301      	movs	r3, #1
 8003890:	e000      	b.n	8003894 <xQueueGenericSend+0x74>
 8003892:	2300      	movs	r3, #0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xQueueGenericSend+0x8e>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	623b      	str	r3, [r7, #32]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038ae:	f001 fb85 	bl	8004fbc <xTaskGetSchedulerState>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d102      	bne.n	80038be <xQueueGenericSend+0x9e>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d101      	bne.n	80038c2 <xQueueGenericSend+0xa2>
 80038be:	2301      	movs	r3, #1
 80038c0:	e000      	b.n	80038c4 <xQueueGenericSend+0xa4>
 80038c2:	2300      	movs	r3, #0
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d10a      	bne.n	80038de <xQueueGenericSend+0xbe>
	__asm volatile
 80038c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038cc:	f383 8811 	msr	BASEPRI, r3
 80038d0:	f3bf 8f6f 	isb	sy
 80038d4:	f3bf 8f4f 	dsb	sy
 80038d8:	61fb      	str	r3, [r7, #28]
}
 80038da:	bf00      	nop
 80038dc:	e7fe      	b.n	80038dc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80038de:	f002 f9c9 	bl	8005c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80038e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ea:	429a      	cmp	r2, r3
 80038ec:	d302      	bcc.n	80038f4 <xQueueGenericSend+0xd4>
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d129      	bne.n	8003948 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	68b9      	ldr	r1, [r7, #8]
 80038f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80038fa:	f000 fbbb 	bl	8004074 <prvCopyDataToQueue>
 80038fe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003904:	2b00      	cmp	r3, #0
 8003906:	d010      	beq.n	800392a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	3324      	adds	r3, #36	; 0x24
 800390c:	4618      	mov	r0, r3
 800390e:	f001 f993 	bl	8004c38 <xTaskRemoveFromEventList>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d013      	beq.n	8003940 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003918:	4b3f      	ldr	r3, [pc, #252]	; (8003a18 <xQueueGenericSend+0x1f8>)
 800391a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	e00a      	b.n	8003940 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800392a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003930:	4b39      	ldr	r3, [pc, #228]	; (8003a18 <xQueueGenericSend+0x1f8>)
 8003932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003940:	f002 f9c8 	bl	8005cd4 <vPortExitCritical>
				return pdPASS;
 8003944:	2301      	movs	r3, #1
 8003946:	e063      	b.n	8003a10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d103      	bne.n	8003956 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800394e:	f002 f9c1 	bl	8005cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003952:	2300      	movs	r3, #0
 8003954:	e05c      	b.n	8003a10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	4618      	mov	r0, r3
 8003962:	f001 f9cd 	bl	8004d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003966:	2301      	movs	r3, #1
 8003968:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800396a:	f002 f9b3 	bl	8005cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800396e:	f000 ff1d 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003972:	f002 f97f 	bl	8005c74 <vPortEnterCritical>
 8003976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003978:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800397c:	b25b      	sxtb	r3, r3
 800397e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003982:	d103      	bne.n	800398c <xQueueGenericSend+0x16c>
 8003984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003986:	2200      	movs	r2, #0
 8003988:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800398c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800398e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003992:	b25b      	sxtb	r3, r3
 8003994:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003998:	d103      	bne.n	80039a2 <xQueueGenericSend+0x182>
 800399a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800399c:	2200      	movs	r2, #0
 800399e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039a2:	f002 f997 	bl	8005cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039a6:	1d3a      	adds	r2, r7, #4
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4611      	mov	r1, r2
 80039ae:	4618      	mov	r0, r3
 80039b0:	f001 f9bc 	bl	8004d2c <xTaskCheckForTimeOut>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d124      	bne.n	8003a04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039bc:	f000 fc52 	bl	8004264 <prvIsQueueFull>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d018      	beq.n	80039f8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	3310      	adds	r3, #16
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f001 f8e2 	bl	8004b98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80039d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039d6:	f000 fbdd 	bl	8004194 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80039da:	f000 fef5 	bl	80047c8 <xTaskResumeAll>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	f47f af7c 	bne.w	80038de <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80039e6:	4b0c      	ldr	r3, [pc, #48]	; (8003a18 <xQueueGenericSend+0x1f8>)
 80039e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ec:	601a      	str	r2, [r3, #0]
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	e772      	b.n	80038de <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80039f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80039fa:	f000 fbcb 	bl	8004194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80039fe:	f000 fee3 	bl	80047c8 <xTaskResumeAll>
 8003a02:	e76c      	b.n	80038de <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a06:	f000 fbc5 	bl	8004194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a0a:	f000 fedd 	bl	80047c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3738      	adds	r7, #56	; 0x38
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	e000ed04 	.word	0xe000ed04

08003a1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b090      	sub	sp, #64	; 0x40
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d103      	bne.n	8003a58 <xQueueGenericSendFromISR+0x3c>
 8003a50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <xQueueGenericSendFromISR+0x40>
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e000      	b.n	8003a5e <xQueueGenericSendFromISR+0x42>
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d10a      	bne.n	8003a78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a66:	f383 8811 	msr	BASEPRI, r3
 8003a6a:	f3bf 8f6f 	isb	sy
 8003a6e:	f3bf 8f4f 	dsb	sy
 8003a72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a74:	bf00      	nop
 8003a76:	e7fe      	b.n	8003a76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d103      	bne.n	8003a86 <xQueueGenericSendFromISR+0x6a>
 8003a7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d101      	bne.n	8003a8a <xQueueGenericSendFromISR+0x6e>
 8003a86:	2301      	movs	r3, #1
 8003a88:	e000      	b.n	8003a8c <xQueueGenericSendFromISR+0x70>
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	623b      	str	r3, [r7, #32]
}
 8003aa2:	bf00      	nop
 8003aa4:	e7fe      	b.n	8003aa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003aa6:	f002 f9c7 	bl	8005e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003aaa:	f3ef 8211 	mrs	r2, BASEPRI
 8003aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab2:	f383 8811 	msr	BASEPRI, r3
 8003ab6:	f3bf 8f6f 	isb	sy
 8003aba:	f3bf 8f4f 	dsb	sy
 8003abe:	61fa      	str	r2, [r7, #28]
 8003ac0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ac2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ac4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d302      	bcc.n	8003ad8 <xQueueGenericSendFromISR+0xbc>
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d12f      	bne.n	8003b38 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ada:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ade:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	68b9      	ldr	r1, [r7, #8]
 8003aec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003aee:	f000 fac1 	bl	8004074 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003af2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003af6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afa:	d112      	bne.n	8003b22 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d016      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b06:	3324      	adds	r3, #36	; 0x24
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f001 f895 	bl	8004c38 <xTaskRemoveFromEventList>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00e      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]
 8003b20:	e007      	b.n	8003b32 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003b26:	3301      	adds	r3, #1
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	b25a      	sxtb	r2, r3
 8003b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b32:	2301      	movs	r3, #1
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003b36:	e001      	b.n	8003b3c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003b46:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3740      	adds	r7, #64	; 0x40
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}

08003b52 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003b52:	b580      	push	{r7, lr}
 8003b54:	b08e      	sub	sp, #56	; 0x38
 8003b56:	af00      	add	r7, sp, #0
 8003b58:	6078      	str	r0, [r7, #4]
 8003b5a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10a      	bne.n	8003b7c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b6a:	f383 8811 	msr	BASEPRI, r3
 8003b6e:	f3bf 8f6f 	isb	sy
 8003b72:	f3bf 8f4f 	dsb	sy
 8003b76:	623b      	str	r3, [r7, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	e7fe      	b.n	8003b7a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <xQueueGiveFromISR+0x48>
	__asm volatile
 8003b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b88:	f383 8811 	msr	BASEPRI, r3
 8003b8c:	f3bf 8f6f 	isb	sy
 8003b90:	f3bf 8f4f 	dsb	sy
 8003b94:	61fb      	str	r3, [r7, #28]
}
 8003b96:	bf00      	nop
 8003b98:	e7fe      	b.n	8003b98 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d103      	bne.n	8003baa <xQueueGiveFromISR+0x58>
 8003ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <xQueueGiveFromISR+0x5c>
 8003baa:	2301      	movs	r3, #1
 8003bac:	e000      	b.n	8003bb0 <xQueueGiveFromISR+0x5e>
 8003bae:	2300      	movs	r3, #0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d10a      	bne.n	8003bca <xQueueGiveFromISR+0x78>
	__asm volatile
 8003bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb8:	f383 8811 	msr	BASEPRI, r3
 8003bbc:	f3bf 8f6f 	isb	sy
 8003bc0:	f3bf 8f4f 	dsb	sy
 8003bc4:	61bb      	str	r3, [r7, #24]
}
 8003bc6:	bf00      	nop
 8003bc8:	e7fe      	b.n	8003bc8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003bca:	f002 f935 	bl	8005e38 <vPortValidateInterruptPriority>
	__asm volatile
 8003bce:	f3ef 8211 	mrs	r2, BASEPRI
 8003bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd6:	f383 8811 	msr	BASEPRI, r3
 8003bda:	f3bf 8f6f 	isb	sy
 8003bde:	f3bf 8f4f 	dsb	sy
 8003be2:	617a      	str	r2, [r7, #20]
 8003be4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003be6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d22b      	bcs.n	8003c52 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c06:	1c5a      	adds	r2, r3, #1
 8003c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003c0c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c14:	d112      	bne.n	8003c3c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d016      	beq.n	8003c4c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	3324      	adds	r3, #36	; 0x24
 8003c22:	4618      	mov	r0, r3
 8003c24:	f001 f808 	bl	8004c38 <xTaskRemoveFromEventList>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00e      	beq.n	8003c4c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d00b      	beq.n	8003c4c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2201      	movs	r2, #1
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e007      	b.n	8003c4c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003c3c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c40:	3301      	adds	r3, #1
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	b25a      	sxtb	r2, r3
 8003c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c50:	e001      	b.n	8003c56 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	; 0x34
 8003c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c58:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f383 8811 	msr	BASEPRI, r3
}
 8003c60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003c64:	4618      	mov	r0, r3
 8003c66:	3738      	adds	r7, #56	; 0x38
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b08c      	sub	sp, #48	; 0x30
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	60f8      	str	r0, [r7, #12]
 8003c74:	60b9      	str	r1, [r7, #8]
 8003c76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <xQueueReceive+0x30>
	__asm volatile
 8003c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8a:	f383 8811 	msr	BASEPRI, r3
 8003c8e:	f3bf 8f6f 	isb	sy
 8003c92:	f3bf 8f4f 	dsb	sy
 8003c96:	623b      	str	r3, [r7, #32]
}
 8003c98:	bf00      	nop
 8003c9a:	e7fe      	b.n	8003c9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d103      	bne.n	8003caa <xQueueReceive+0x3e>
 8003ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d101      	bne.n	8003cae <xQueueReceive+0x42>
 8003caa:	2301      	movs	r3, #1
 8003cac:	e000      	b.n	8003cb0 <xQueueReceive+0x44>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d10a      	bne.n	8003cca <xQueueReceive+0x5e>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61fb      	str	r3, [r7, #28]
}
 8003cc6:	bf00      	nop
 8003cc8:	e7fe      	b.n	8003cc8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cca:	f001 f977 	bl	8004fbc <xTaskGetSchedulerState>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d102      	bne.n	8003cda <xQueueReceive+0x6e>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <xQueueReceive+0x72>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <xQueueReceive+0x74>
 8003cde:	2300      	movs	r3, #0
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d10a      	bne.n	8003cfa <xQueueReceive+0x8e>
	__asm volatile
 8003ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ce8:	f383 8811 	msr	BASEPRI, r3
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	f3bf 8f4f 	dsb	sy
 8003cf4:	61bb      	str	r3, [r7, #24]
}
 8003cf6:	bf00      	nop
 8003cf8:	e7fe      	b.n	8003cf8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003cfa:	f001 ffbb 	bl	8005c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d01f      	beq.n	8003d4a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003d0a:	68b9      	ldr	r1, [r7, #8]
 8003d0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d0e:	f000 fa1b 	bl	8004148 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d14:	1e5a      	subs	r2, r3, #1
 8003d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d18:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d1c:	691b      	ldr	r3, [r3, #16]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d00f      	beq.n	8003d42 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	3310      	adds	r3, #16
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 ff86 	bl	8004c38 <xTaskRemoveFromEventList>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003d32:	4b3d      	ldr	r3, [pc, #244]	; (8003e28 <xQueueReceive+0x1bc>)
 8003d34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	f3bf 8f4f 	dsb	sy
 8003d3e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003d42:	f001 ffc7 	bl	8005cd4 <vPortExitCritical>
				return pdPASS;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e069      	b.n	8003e1e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d103      	bne.n	8003d58 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d50:	f001 ffc0 	bl	8005cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003d54:	2300      	movs	r3, #0
 8003d56:	e062      	b.n	8003e1e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d5e:	f107 0310 	add.w	r3, r7, #16
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 ffcc 	bl	8004d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d6c:	f001 ffb2 	bl	8005cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d70:	f000 fd1c 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d74:	f001 ff7e 	bl	8005c74 <vPortEnterCritical>
 8003d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d7a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d7e:	b25b      	sxtb	r3, r3
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d103      	bne.n	8003d8e <xQueueReceive+0x122>
 8003d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d88:	2200      	movs	r2, #0
 8003d8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d90:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d94:	b25b      	sxtb	r3, r3
 8003d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9a:	d103      	bne.n	8003da4 <xQueueReceive+0x138>
 8003d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003da4:	f001 ff96 	bl	8005cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003da8:	1d3a      	adds	r2, r7, #4
 8003daa:	f107 0310 	add.w	r3, r7, #16
 8003dae:	4611      	mov	r1, r2
 8003db0:	4618      	mov	r0, r3
 8003db2:	f000 ffbb 	bl	8004d2c <xTaskCheckForTimeOut>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d123      	bne.n	8003e04 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dbe:	f000 fa3b 	bl	8004238 <prvIsQueueEmpty>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d017      	beq.n	8003df8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	3324      	adds	r3, #36	; 0x24
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	4611      	mov	r1, r2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fee1 	bl	8004b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dd8:	f000 f9dc 	bl	8004194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ddc:	f000 fcf4 	bl	80047c8 <xTaskResumeAll>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d189      	bne.n	8003cfa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003de6:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <xQueueReceive+0x1bc>)
 8003de8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dec:	601a      	str	r2, [r3, #0]
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	f3bf 8f6f 	isb	sy
 8003df6:	e780      	b.n	8003cfa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003df8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003dfa:	f000 f9cb 	bl	8004194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dfe:	f000 fce3 	bl	80047c8 <xTaskResumeAll>
 8003e02:	e77a      	b.n	8003cfa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003e04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e06:	f000 f9c5 	bl	8004194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e0a:	f000 fcdd 	bl	80047c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e10:	f000 fa12 	bl	8004238 <prvIsQueueEmpty>
 8003e14:	4603      	mov	r3, r0
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	f43f af6f 	beq.w	8003cfa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003e1c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003e1e:	4618      	mov	r0, r3
 8003e20:	3730      	adds	r7, #48	; 0x30
 8003e22:	46bd      	mov	sp, r7
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	e000ed04 	.word	0xe000ed04

08003e2c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b08e      	sub	sp, #56	; 0x38
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e36:	2300      	movs	r3, #0
 8003e38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10a      	bne.n	8003e5e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	623b      	str	r3, [r7, #32]
}
 8003e5a:	bf00      	nop
 8003e5c:	e7fe      	b.n	8003e5c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d00a      	beq.n	8003e7c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8003e66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e6a:	f383 8811 	msr	BASEPRI, r3
 8003e6e:	f3bf 8f6f 	isb	sy
 8003e72:	f3bf 8f4f 	dsb	sy
 8003e76:	61fb      	str	r3, [r7, #28]
}
 8003e78:	bf00      	nop
 8003e7a:	e7fe      	b.n	8003e7a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e7c:	f001 f89e 	bl	8004fbc <xTaskGetSchedulerState>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d102      	bne.n	8003e8c <xQueueSemaphoreTake+0x60>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d101      	bne.n	8003e90 <xQueueSemaphoreTake+0x64>
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e000      	b.n	8003e92 <xQueueSemaphoreTake+0x66>
 8003e90:	2300      	movs	r3, #0
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d10a      	bne.n	8003eac <xQueueSemaphoreTake+0x80>
	__asm volatile
 8003e96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e9a:	f383 8811 	msr	BASEPRI, r3
 8003e9e:	f3bf 8f6f 	isb	sy
 8003ea2:	f3bf 8f4f 	dsb	sy
 8003ea6:	61bb      	str	r3, [r7, #24]
}
 8003ea8:	bf00      	nop
 8003eaa:	e7fe      	b.n	8003eaa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003eac:	f001 fee2 	bl	8005c74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d024      	beq.n	8003f06 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d104      	bne.n	8003ed6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003ecc:	f001 f9ec 	bl	80052a8 <pvTaskIncrementMutexHeldCount>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d00f      	beq.n	8003efe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee0:	3310      	adds	r3, #16
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	f000 fea8 	bl	8004c38 <xTaskRemoveFromEventList>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d007      	beq.n	8003efe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eee:	4b54      	ldr	r3, [pc, #336]	; (8004040 <xQueueSemaphoreTake+0x214>)
 8003ef0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003efe:	f001 fee9 	bl	8005cd4 <vPortExitCritical>
				return pdPASS;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e097      	b.n	8004036 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d111      	bne.n	8003f30 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00a      	beq.n	8003f28 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8003f12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	617b      	str	r3, [r7, #20]
}
 8003f24:	bf00      	nop
 8003f26:	e7fe      	b.n	8003f26 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003f28:	f001 fed4 	bl	8005cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	e082      	b.n	8004036 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f36:	f107 030c 	add.w	r3, r7, #12
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fee0 	bl	8004d00 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f40:	2301      	movs	r3, #1
 8003f42:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f44:	f001 fec6 	bl	8005cd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f48:	f000 fc30 	bl	80047ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f4c:	f001 fe92 	bl	8005c74 <vPortEnterCritical>
 8003f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f52:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f56:	b25b      	sxtb	r3, r3
 8003f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5c:	d103      	bne.n	8003f66 <xQueueSemaphoreTake+0x13a>
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f6c:	b25b      	sxtb	r3, r3
 8003f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f72:	d103      	bne.n	8003f7c <xQueueSemaphoreTake+0x150>
 8003f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f7c:	f001 feaa 	bl	8005cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f80:	463a      	mov	r2, r7
 8003f82:	f107 030c 	add.w	r3, r7, #12
 8003f86:	4611      	mov	r1, r2
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 fecf 	bl	8004d2c <xTaskCheckForTimeOut>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d132      	bne.n	8003ffa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f94:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003f96:	f000 f94f 	bl	8004238 <prvIsQueueEmpty>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d026      	beq.n	8003fee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d109      	bne.n	8003fbc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8003fa8:	f001 fe64 	bl	8005c74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f001 f821 	bl	8004ff8 <xTaskPriorityInherit>
 8003fb6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003fb8:	f001 fe8c 	bl	8005cd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fbe:	3324      	adds	r3, #36	; 0x24
 8003fc0:	683a      	ldr	r2, [r7, #0]
 8003fc2:	4611      	mov	r1, r2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f000 fde7 	bl	8004b98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003fca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003fcc:	f000 f8e2 	bl	8004194 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003fd0:	f000 fbfa 	bl	80047c8 <xTaskResumeAll>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	f47f af68 	bne.w	8003eac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003fdc:	4b18      	ldr	r3, [pc, #96]	; (8004040 <xQueueSemaphoreTake+0x214>)
 8003fde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fe2:	601a      	str	r2, [r3, #0]
 8003fe4:	f3bf 8f4f 	dsb	sy
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	e75e      	b.n	8003eac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003fee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ff0:	f000 f8d0 	bl	8004194 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ff4:	f000 fbe8 	bl	80047c8 <xTaskResumeAll>
 8003ff8:	e758      	b.n	8003eac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003ffa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003ffc:	f000 f8ca 	bl	8004194 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004000:	f000 fbe2 	bl	80047c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004004:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004006:	f000 f917 	bl	8004238 <prvIsQueueEmpty>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	f43f af4d 	beq.w	8003eac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00d      	beq.n	8004034 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004018:	f001 fe2c 	bl	8005c74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800401c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800401e:	f000 f811 	bl	8004044 <prvGetDisinheritPriorityAfterTimeout>
 8004022:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800402a:	4618      	mov	r0, r3
 800402c:	f001 f8ba 	bl	80051a4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004030:	f001 fe50 	bl	8005cd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004034:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004036:	4618      	mov	r0, r3
 8004038:	3738      	adds	r7, #56	; 0x38
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}
 800403e:	bf00      	nop
 8004040:	e000ed04 	.word	0xe000ed04

08004044 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b00      	cmp	r3, #0
 8004052:	d006      	beq.n	8004062 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	e001      	b.n	8004066 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004062:	2300      	movs	r3, #0
 8004064:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004066:	68fb      	ldr	r3, [r7, #12]
	}
 8004068:	4618      	mov	r0, r3
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr

08004074 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b086      	sub	sp, #24
 8004078:	af00      	add	r7, sp, #0
 800407a:	60f8      	str	r0, [r7, #12]
 800407c:	60b9      	str	r1, [r7, #8]
 800407e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004080:	2300      	movs	r3, #0
 8004082:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004088:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800408e:	2b00      	cmp	r3, #0
 8004090:	d10d      	bne.n	80040ae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d14d      	bne.n	8004136 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	4618      	mov	r0, r3
 80040a0:	f001 f812 	bl	80050c8 <xTaskPriorityDisinherit>
 80040a4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	609a      	str	r2, [r3, #8]
 80040ac:	e043      	b.n	8004136 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d119      	bne.n	80040e8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6858      	ldr	r0, [r3, #4]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040bc:	461a      	mov	r2, r3
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	f004 fbd1 	bl	8008866 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	685a      	ldr	r2, [r3, #4]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040cc:	441a      	add	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	685a      	ldr	r2, [r3, #4]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d32b      	bcc.n	8004136 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]
 80040e6:	e026      	b.n	8004136 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68d8      	ldr	r0, [r3, #12]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f0:	461a      	mov	r2, r3
 80040f2:	68b9      	ldr	r1, [r7, #8]
 80040f4:	f004 fbb7 	bl	8008866 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	68da      	ldr	r2, [r3, #12]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	425b      	negs	r3, r3
 8004102:	441a      	add	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	429a      	cmp	r2, r3
 8004112:	d207      	bcs.n	8004124 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	689a      	ldr	r2, [r3, #8]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411c:	425b      	negs	r3, r3
 800411e:	441a      	add	r2, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b02      	cmp	r3, #2
 8004128:	d105      	bne.n	8004136 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	3b01      	subs	r3, #1
 8004134:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1c5a      	adds	r2, r3, #1
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800413e:	697b      	ldr	r3, [r7, #20]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
 8004150:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004156:	2b00      	cmp	r3, #0
 8004158:	d018      	beq.n	800418c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68da      	ldr	r2, [r3, #12]
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	441a      	add	r2, r3
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68da      	ldr	r2, [r3, #12]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	429a      	cmp	r2, r3
 8004172:	d303      	bcc.n	800417c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68d9      	ldr	r1, [r3, #12]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004184:	461a      	mov	r2, r3
 8004186:	6838      	ldr	r0, [r7, #0]
 8004188:	f004 fb6d 	bl	8008866 <memcpy>
	}
}
 800418c:	bf00      	nop
 800418e:	3708      	adds	r7, #8
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800419c:	f001 fd6a 	bl	8005c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041a6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a8:	e011      	b.n	80041ce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d012      	beq.n	80041d8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	3324      	adds	r3, #36	; 0x24
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fd3e 	bl	8004c38 <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80041c2:	f000 fe15 	bl	8004df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80041c6:	7bfb      	ldrb	r3, [r7, #15]
 80041c8:	3b01      	subs	r3, #1
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	dce9      	bgt.n	80041aa <prvUnlockQueue+0x16>
 80041d6:	e000      	b.n	80041da <prvUnlockQueue+0x46>
					break;
 80041d8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	22ff      	movs	r2, #255	; 0xff
 80041de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041e2:	f001 fd77 	bl	8005cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041e6:	f001 fd45 	bl	8005c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041f0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041f2:	e011      	b.n	8004218 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d012      	beq.n	8004222 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	3310      	adds	r3, #16
 8004200:	4618      	mov	r0, r3
 8004202:	f000 fd19 	bl	8004c38 <xTaskRemoveFromEventList>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800420c:	f000 fdf0 	bl	8004df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004210:	7bbb      	ldrb	r3, [r7, #14]
 8004212:	3b01      	subs	r3, #1
 8004214:	b2db      	uxtb	r3, r3
 8004216:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004218:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800421c:	2b00      	cmp	r3, #0
 800421e:	dce9      	bgt.n	80041f4 <prvUnlockQueue+0x60>
 8004220:	e000      	b.n	8004224 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004222:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	22ff      	movs	r2, #255	; 0xff
 8004228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800422c:	f001 fd52 	bl	8005cd4 <vPortExitCritical>
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004240:	f001 fd18 	bl	8005c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004248:	2b00      	cmp	r3, #0
 800424a:	d102      	bne.n	8004252 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	60fb      	str	r3, [r7, #12]
 8004250:	e001      	b.n	8004256 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004256:	f001 fd3d 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 800425a:	68fb      	ldr	r3, [r7, #12]
}
 800425c:	4618      	mov	r0, r3
 800425e:	3710      	adds	r7, #16
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}

08004264 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b084      	sub	sp, #16
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800426c:	f001 fd02 	bl	8005c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004278:	429a      	cmp	r2, r3
 800427a:	d102      	bne.n	8004282 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	e001      	b.n	8004286 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004286:	f001 fd25 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 800428a:	68fb      	ldr	r3, [r7, #12]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3710      	adds	r7, #16
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}

08004294 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004294:	b480      	push	{r7}
 8004296:	b085      	sub	sp, #20
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	e014      	b.n	80042ce <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80042a4:	4a0f      	ldr	r2, [pc, #60]	; (80042e4 <vQueueAddToRegistry+0x50>)
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10b      	bne.n	80042c8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80042b0:	490c      	ldr	r1, [pc, #48]	; (80042e4 <vQueueAddToRegistry+0x50>)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	683a      	ldr	r2, [r7, #0]
 80042b6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80042ba:	4a0a      	ldr	r2, [pc, #40]	; (80042e4 <vQueueAddToRegistry+0x50>)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80042c6:	e006      	b.n	80042d6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	3301      	adds	r3, #1
 80042cc:	60fb      	str	r3, [r7, #12]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2b07      	cmp	r3, #7
 80042d2:	d9e7      	bls.n	80042a4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042d4:	bf00      	nop
 80042d6:	bf00      	nop
 80042d8:	3714      	adds	r7, #20
 80042da:	46bd      	mov	sp, r7
 80042dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e0:	4770      	bx	lr
 80042e2:	bf00      	nop
 80042e4:	20002dc8 	.word	0x20002dc8

080042e8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	60b9      	str	r1, [r7, #8]
 80042f2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042f8:	f001 fcbc 	bl	8005c74 <vPortEnterCritical>
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004302:	b25b      	sxtb	r3, r3
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d103      	bne.n	8004312 <vQueueWaitForMessageRestricted+0x2a>
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004312:	697b      	ldr	r3, [r7, #20]
 8004314:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004318:	b25b      	sxtb	r3, r3
 800431a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800431e:	d103      	bne.n	8004328 <vQueueWaitForMessageRestricted+0x40>
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004328:	f001 fcd4 	bl	8005cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004330:	2b00      	cmp	r3, #0
 8004332:	d106      	bne.n	8004342 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004334:	697b      	ldr	r3, [r7, #20]
 8004336:	3324      	adds	r3, #36	; 0x24
 8004338:	687a      	ldr	r2, [r7, #4]
 800433a:	68b9      	ldr	r1, [r7, #8]
 800433c:	4618      	mov	r0, r3
 800433e:	f000 fc4f 	bl	8004be0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004342:	6978      	ldr	r0, [r7, #20]
 8004344:	f7ff ff26 	bl	8004194 <prvUnlockQueue>
	}
 8004348:	bf00      	nop
 800434a:	3718      	adds	r7, #24
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08e      	sub	sp, #56	; 0x38
 8004354:	af04      	add	r7, sp, #16
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	607a      	str	r2, [r7, #4]
 800435c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800435e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10a      	bne.n	800437a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	623b      	str	r3, [r7, #32]
}
 8004376:	bf00      	nop
 8004378:	e7fe      	b.n	8004378 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800437a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10a      	bne.n	8004396 <xTaskCreateStatic+0x46>
	__asm volatile
 8004380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004384:	f383 8811 	msr	BASEPRI, r3
 8004388:	f3bf 8f6f 	isb	sy
 800438c:	f3bf 8f4f 	dsb	sy
 8004390:	61fb      	str	r3, [r7, #28]
}
 8004392:	bf00      	nop
 8004394:	e7fe      	b.n	8004394 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004396:	23ac      	movs	r3, #172	; 0xac
 8004398:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	2bac      	cmp	r3, #172	; 0xac
 800439e:	d00a      	beq.n	80043b6 <xTaskCreateStatic+0x66>
	__asm volatile
 80043a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043a4:	f383 8811 	msr	BASEPRI, r3
 80043a8:	f3bf 8f6f 	isb	sy
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	61bb      	str	r3, [r7, #24]
}
 80043b2:	bf00      	nop
 80043b4:	e7fe      	b.n	80043b4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80043b6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d01e      	beq.n	80043fc <xTaskCreateStatic+0xac>
 80043be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d01b      	beq.n	80043fc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043c6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043cc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2202      	movs	r2, #2
 80043d2:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043d6:	2300      	movs	r3, #0
 80043d8:	9303      	str	r3, [sp, #12]
 80043da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043dc:	9302      	str	r3, [sp, #8]
 80043de:	f107 0314 	add.w	r3, r7, #20
 80043e2:	9301      	str	r3, [sp, #4]
 80043e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e6:	9300      	str	r3, [sp, #0]
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	68b9      	ldr	r1, [r7, #8]
 80043ee:	68f8      	ldr	r0, [r7, #12]
 80043f0:	f000 f850 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043f6:	f000 f8f7 	bl	80045e8 <prvAddNewTaskToReadyList>
 80043fa:	e001      	b.n	8004400 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004400:	697b      	ldr	r3, [r7, #20]
	}
 8004402:	4618      	mov	r0, r3
 8004404:	3728      	adds	r7, #40	; 0x28
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}

0800440a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800440a:	b580      	push	{r7, lr}
 800440c:	b08c      	sub	sp, #48	; 0x30
 800440e:	af04      	add	r7, sp, #16
 8004410:	60f8      	str	r0, [r7, #12]
 8004412:	60b9      	str	r1, [r7, #8]
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	4613      	mov	r3, r2
 8004418:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4618      	mov	r0, r3
 8004420:	f001 fd4a 	bl	8005eb8 <pvPortMalloc>
 8004424:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d00e      	beq.n	800444a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800442c:	20ac      	movs	r0, #172	; 0xac
 800442e:	f001 fd43 	bl	8005eb8 <pvPortMalloc>
 8004432:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
 8004440:	e005      	b.n	800444e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004442:	6978      	ldr	r0, [r7, #20]
 8004444:	f001 fe04 	bl	8006050 <vPortFree>
 8004448:	e001      	b.n	800444e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800444a:	2300      	movs	r3, #0
 800444c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d017      	beq.n	8004484 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800445c:	88fa      	ldrh	r2, [r7, #6]
 800445e:	2300      	movs	r3, #0
 8004460:	9303      	str	r3, [sp, #12]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	9302      	str	r3, [sp, #8]
 8004466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004468:	9301      	str	r3, [sp, #4]
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	9300      	str	r3, [sp, #0]
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	68b9      	ldr	r1, [r7, #8]
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f000 f80e 	bl	8004494 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004478:	69f8      	ldr	r0, [r7, #28]
 800447a:	f000 f8b5 	bl	80045e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800447e:	2301      	movs	r3, #1
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e002      	b.n	800448a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004484:	f04f 33ff 	mov.w	r3, #4294967295
 8004488:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800448a:	69bb      	ldr	r3, [r7, #24]
	}
 800448c:	4618      	mov	r0, r3
 800448e:	3720      	adds	r7, #32
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b088      	sub	sp, #32
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80044a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	461a      	mov	r2, r3
 80044ac:	21a5      	movs	r1, #165	; 0xa5
 80044ae:	f004 f8f5 	bl	800869c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044bc:	3b01      	subs	r3, #1
 80044be:	009b      	lsls	r3, r3, #2
 80044c0:	4413      	add	r3, r2
 80044c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80044c4:	69bb      	ldr	r3, [r7, #24]
 80044c6:	f023 0307 	bic.w	r3, r3, #7
 80044ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <prvInitialiseNewTask+0x58>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	617b      	str	r3, [r7, #20]
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044ec:	68bb      	ldr	r3, [r7, #8]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01f      	beq.n	8004532 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f2:	2300      	movs	r3, #0
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	e012      	b.n	800451e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	4413      	add	r3, r2
 80044fe:	7819      	ldrb	r1, [r3, #0]
 8004500:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	3334      	adds	r3, #52	; 0x34
 8004508:	460a      	mov	r2, r1
 800450a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800450c:	68ba      	ldr	r2, [r7, #8]
 800450e:	69fb      	ldr	r3, [r7, #28]
 8004510:	4413      	add	r3, r2
 8004512:	781b      	ldrb	r3, [r3, #0]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d006      	beq.n	8004526 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	3301      	adds	r3, #1
 800451c:	61fb      	str	r3, [r7, #28]
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	2b0f      	cmp	r3, #15
 8004522:	d9e9      	bls.n	80044f8 <prvInitialiseNewTask+0x64>
 8004524:	e000      	b.n	8004528 <prvInitialiseNewTask+0x94>
			{
				break;
 8004526:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	2200      	movs	r2, #0
 800452c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004530:	e003      	b.n	800453a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800453a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453c:	2b37      	cmp	r3, #55	; 0x37
 800453e:	d901      	bls.n	8004544 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004540:	2337      	movs	r3, #55	; 0x37
 8004542:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004548:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800454a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800454c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800454e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004556:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004558:	3304      	adds	r3, #4
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe ff8e 	bl	800347c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	3318      	adds	r3, #24
 8004564:	4618      	mov	r0, r3
 8004566:	f7fe ff89 	bl	800347c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800456a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800456e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004572:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800457a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800457e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 8004580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004582:	2200      	movs	r2, #0
 8004584:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004588:	2200      	movs	r2, #0
 800458a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2200      	movs	r2, #0
 8004592:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004598:	3358      	adds	r3, #88	; 0x58
 800459a:	224c      	movs	r2, #76	; 0x4c
 800459c:	2100      	movs	r1, #0
 800459e:	4618      	mov	r0, r3
 80045a0:	f004 f87c 	bl	800869c <memset>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	4a0d      	ldr	r2, [pc, #52]	; (80045dc <prvInitialiseNewTask+0x148>)
 80045a8:	65da      	str	r2, [r3, #92]	; 0x5c
 80045aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ac:	4a0c      	ldr	r2, [pc, #48]	; (80045e0 <prvInitialiseNewTask+0x14c>)
 80045ae:	661a      	str	r2, [r3, #96]	; 0x60
 80045b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b2:	4a0c      	ldr	r2, [pc, #48]	; (80045e4 <prvInitialiseNewTask+0x150>)
 80045b4:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68f9      	ldr	r1, [r7, #12]
 80045ba:	69b8      	ldr	r0, [r7, #24]
 80045bc:	f001 fa2a 	bl	8005a14 <pxPortInitialiseStack>
 80045c0:	4602      	mov	r2, r0
 80045c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80045c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d002      	beq.n	80045d2 <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80045cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045d2:	bf00      	nop
 80045d4:	3720      	adds	r7, #32
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20006c6c 	.word	0x20006c6c
 80045e0:	20006cd4 	.word	0x20006cd4
 80045e4:	20006d3c 	.word	0x20006d3c

080045e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045f0:	f001 fb40 	bl	8005c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045f4:	4b2d      	ldr	r3, [pc, #180]	; (80046ac <prvAddNewTaskToReadyList+0xc4>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	3301      	adds	r3, #1
 80045fa:	4a2c      	ldr	r2, [pc, #176]	; (80046ac <prvAddNewTaskToReadyList+0xc4>)
 80045fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045fe:	4b2c      	ldr	r3, [pc, #176]	; (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d109      	bne.n	800461a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004606:	4a2a      	ldr	r2, [pc, #168]	; (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800460c:	4b27      	ldr	r3, [pc, #156]	; (80046ac <prvAddNewTaskToReadyList+0xc4>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	2b01      	cmp	r3, #1
 8004612:	d110      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004614:	f000 fc10 	bl	8004e38 <prvInitialiseTaskLists>
 8004618:	e00d      	b.n	8004636 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800461a:	4b26      	ldr	r3, [pc, #152]	; (80046b4 <prvAddNewTaskToReadyList+0xcc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d109      	bne.n	8004636 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004622:	4b23      	ldr	r3, [pc, #140]	; (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	429a      	cmp	r2, r3
 800462e:	d802      	bhi.n	8004636 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004636:	4b20      	ldr	r3, [pc, #128]	; (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	3301      	adds	r3, #1
 800463c:	4a1e      	ldr	r2, [pc, #120]	; (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 800463e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004640:	4b1d      	ldr	r3, [pc, #116]	; (80046b8 <prvAddNewTaskToReadyList+0xd0>)
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800464c:	4b1b      	ldr	r3, [pc, #108]	; (80046bc <prvAddNewTaskToReadyList+0xd4>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d903      	bls.n	800465c <prvAddNewTaskToReadyList+0x74>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	4a18      	ldr	r2, [pc, #96]	; (80046bc <prvAddNewTaskToReadyList+0xd4>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a15      	ldr	r2, [pc, #84]	; (80046c0 <prvAddNewTaskToReadyList+0xd8>)
 800466a:	441a      	add	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe ff0f 	bl	8003496 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004678:	f001 fb2c 	bl	8005cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800467c:	4b0d      	ldr	r3, [pc, #52]	; (80046b4 <prvAddNewTaskToReadyList+0xcc>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00e      	beq.n	80046a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004684:	4b0a      	ldr	r3, [pc, #40]	; (80046b0 <prvAddNewTaskToReadyList+0xc8>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468e:	429a      	cmp	r2, r3
 8004690:	d207      	bcs.n	80046a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <prvAddNewTaskToReadyList+0xdc>)
 8004694:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004698:	601a      	str	r2, [r3, #0]
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80046a2:	bf00      	nop
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
 80046aa:	bf00      	nop
 80046ac:	200032dc 	.word	0x200032dc
 80046b0:	20002e08 	.word	0x20002e08
 80046b4:	200032e8 	.word	0x200032e8
 80046b8:	200032f8 	.word	0x200032f8
 80046bc:	200032e4 	.word	0x200032e4
 80046c0:	20002e0c 	.word	0x20002e0c
 80046c4:	e000ed04 	.word	0xe000ed04

080046c8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80046ce:	2300      	movs	r3, #0
 80046d0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80046d2:	2300      	movs	r3, #0
 80046d4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80046d6:	463a      	mov	r2, r7
 80046d8:	1d39      	adds	r1, r7, #4
 80046da:	f107 0308 	add.w	r3, r7, #8
 80046de:	4618      	mov	r0, r3
 80046e0:	f7fe fe78 	bl	80033d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80046e4:	6839      	ldr	r1, [r7, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68ba      	ldr	r2, [r7, #8]
 80046ea:	9202      	str	r2, [sp, #8]
 80046ec:	9301      	str	r3, [sp, #4]
 80046ee:	2300      	movs	r3, #0
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	2300      	movs	r3, #0
 80046f4:	460a      	mov	r2, r1
 80046f6:	4925      	ldr	r1, [pc, #148]	; (800478c <vTaskStartScheduler+0xc4>)
 80046f8:	4825      	ldr	r0, [pc, #148]	; (8004790 <vTaskStartScheduler+0xc8>)
 80046fa:	f7ff fe29 	bl	8004350 <xTaskCreateStatic>
 80046fe:	4603      	mov	r3, r0
 8004700:	4a24      	ldr	r2, [pc, #144]	; (8004794 <vTaskStartScheduler+0xcc>)
 8004702:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004704:	4b23      	ldr	r3, [pc, #140]	; (8004794 <vTaskStartScheduler+0xcc>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d002      	beq.n	8004712 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800470c:	2301      	movs	r3, #1
 800470e:	617b      	str	r3, [r7, #20]
 8004710:	e001      	b.n	8004716 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004712:	2300      	movs	r3, #0
 8004714:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b01      	cmp	r3, #1
 800471a:	d102      	bne.n	8004722 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800471c:	f000 fe2c 	bl	8005378 <xTimerCreateTimerTask>
 8004720:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d11d      	bne.n	8004764 <vTaskStartScheduler+0x9c>
	__asm volatile
 8004728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800472c:	f383 8811 	msr	BASEPRI, r3
 8004730:	f3bf 8f6f 	isb	sy
 8004734:	f3bf 8f4f 	dsb	sy
 8004738:	613b      	str	r3, [r7, #16]
}
 800473a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800473c:	4b16      	ldr	r3, [pc, #88]	; (8004798 <vTaskStartScheduler+0xd0>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3358      	adds	r3, #88	; 0x58
 8004742:	4a16      	ldr	r2, [pc, #88]	; (800479c <vTaskStartScheduler+0xd4>)
 8004744:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004746:	4b16      	ldr	r3, [pc, #88]	; (80047a0 <vTaskStartScheduler+0xd8>)
 8004748:	f04f 32ff 	mov.w	r2, #4294967295
 800474c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800474e:	4b15      	ldr	r3, [pc, #84]	; (80047a4 <vTaskStartScheduler+0xdc>)
 8004750:	2201      	movs	r2, #1
 8004752:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004754:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <vTaskStartScheduler+0xe0>)
 8004756:	2200      	movs	r2, #0
 8004758:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 800475a:	f7fd f8ad 	bl	80018b8 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800475e:	f001 f9e7 	bl	8005b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004762:	e00e      	b.n	8004782 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800476a:	d10a      	bne.n	8004782 <vTaskStartScheduler+0xba>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	60fb      	str	r3, [r7, #12]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <vTaskStartScheduler+0xb8>
}
 8004782:	bf00      	nop
 8004784:	3718      	adds	r7, #24
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	0800bf24 	.word	0x0800bf24
 8004790:	08004e09 	.word	0x08004e09
 8004794:	20003300 	.word	0x20003300
 8004798:	20002e08 	.word	0x20002e08
 800479c:	2000006c 	.word	0x2000006c
 80047a0:	200032fc 	.word	0x200032fc
 80047a4:	200032e8 	.word	0x200032e8
 80047a8:	200032e0 	.word	0x200032e0

080047ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	3301      	adds	r3, #1
 80047b6:	4a03      	ldr	r2, [pc, #12]	; (80047c4 <vTaskSuspendAll+0x18>)
 80047b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80047ba:	bf00      	nop
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr
 80047c4:	20003304 	.word	0x20003304

080047c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80047ce:	2300      	movs	r3, #0
 80047d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80047d6:	4b42      	ldr	r3, [pc, #264]	; (80048e0 <xTaskResumeAll+0x118>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d10a      	bne.n	80047f4 <xTaskResumeAll+0x2c>
	__asm volatile
 80047de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e2:	f383 8811 	msr	BASEPRI, r3
 80047e6:	f3bf 8f6f 	isb	sy
 80047ea:	f3bf 8f4f 	dsb	sy
 80047ee:	603b      	str	r3, [r7, #0]
}
 80047f0:	bf00      	nop
 80047f2:	e7fe      	b.n	80047f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80047f4:	f001 fa3e 	bl	8005c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80047f8:	4b39      	ldr	r3, [pc, #228]	; (80048e0 <xTaskResumeAll+0x118>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	3b01      	subs	r3, #1
 80047fe:	4a38      	ldr	r2, [pc, #224]	; (80048e0 <xTaskResumeAll+0x118>)
 8004800:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004802:	4b37      	ldr	r3, [pc, #220]	; (80048e0 <xTaskResumeAll+0x118>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d162      	bne.n	80048d0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800480a:	4b36      	ldr	r3, [pc, #216]	; (80048e4 <xTaskResumeAll+0x11c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d05e      	beq.n	80048d0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004812:	e02f      	b.n	8004874 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004814:	4b34      	ldr	r3, [pc, #208]	; (80048e8 <xTaskResumeAll+0x120>)
 8004816:	68db      	ldr	r3, [r3, #12]
 8004818:	68db      	ldr	r3, [r3, #12]
 800481a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3318      	adds	r3, #24
 8004820:	4618      	mov	r0, r3
 8004822:	f7fe fe95 	bl	8003550 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	3304      	adds	r3, #4
 800482a:	4618      	mov	r0, r3
 800482c:	f7fe fe90 	bl	8003550 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004834:	4b2d      	ldr	r3, [pc, #180]	; (80048ec <xTaskResumeAll+0x124>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	429a      	cmp	r2, r3
 800483a:	d903      	bls.n	8004844 <xTaskResumeAll+0x7c>
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004840:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <xTaskResumeAll+0x124>)
 8004842:	6013      	str	r3, [r2, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004848:	4613      	mov	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <xTaskResumeAll+0x128>)
 8004852:	441a      	add	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3304      	adds	r3, #4
 8004858:	4619      	mov	r1, r3
 800485a:	4610      	mov	r0, r2
 800485c:	f7fe fe1b 	bl	8003496 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004864:	4b23      	ldr	r3, [pc, #140]	; (80048f4 <xTaskResumeAll+0x12c>)
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	429a      	cmp	r2, r3
 800486c:	d302      	bcc.n	8004874 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800486e:	4b22      	ldr	r3, [pc, #136]	; (80048f8 <xTaskResumeAll+0x130>)
 8004870:	2201      	movs	r2, #1
 8004872:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004874:	4b1c      	ldr	r3, [pc, #112]	; (80048e8 <xTaskResumeAll+0x120>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d1cb      	bne.n	8004814 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004882:	f000 fb7b 	bl	8004f7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004886:	4b1d      	ldr	r3, [pc, #116]	; (80048fc <xTaskResumeAll+0x134>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d010      	beq.n	80048b4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004892:	f000 f847 	bl	8004924 <xTaskIncrementTick>
 8004896:	4603      	mov	r3, r0
 8004898:	2b00      	cmp	r3, #0
 800489a:	d002      	beq.n	80048a2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800489c:	4b16      	ldr	r3, [pc, #88]	; (80048f8 <xTaskResumeAll+0x130>)
 800489e:	2201      	movs	r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	3b01      	subs	r3, #1
 80048a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f1      	bne.n	8004892 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80048ae:	4b13      	ldr	r3, [pc, #76]	; (80048fc <xTaskResumeAll+0x134>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80048b4:	4b10      	ldr	r3, [pc, #64]	; (80048f8 <xTaskResumeAll+0x130>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d009      	beq.n	80048d0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80048bc:	2301      	movs	r3, #1
 80048be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80048c0:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <xTaskResumeAll+0x138>)
 80048c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048c6:	601a      	str	r2, [r3, #0]
 80048c8:	f3bf 8f4f 	dsb	sy
 80048cc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80048d0:	f001 fa00 	bl	8005cd4 <vPortExitCritical>

	return xAlreadyYielded;
 80048d4:	68bb      	ldr	r3, [r7, #8]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3710      	adds	r7, #16
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	20003304 	.word	0x20003304
 80048e4:	200032dc 	.word	0x200032dc
 80048e8:	2000329c 	.word	0x2000329c
 80048ec:	200032e4 	.word	0x200032e4
 80048f0:	20002e0c 	.word	0x20002e0c
 80048f4:	20002e08 	.word	0x20002e08
 80048f8:	200032f0 	.word	0x200032f0
 80048fc:	200032ec 	.word	0x200032ec
 8004900:	e000ed04 	.word	0xe000ed04

08004904 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800490a:	4b05      	ldr	r3, [pc, #20]	; (8004920 <xTaskGetTickCount+0x1c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004910:	687b      	ldr	r3, [r7, #4]
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr
 800491e:	bf00      	nop
 8004920:	200032e0 	.word	0x200032e0

08004924 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b086      	sub	sp, #24
 8004928:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <xTaskIncrementTick+0x148>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f040 808f 	bne.w	8004a56 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004938:	4b4d      	ldr	r3, [pc, #308]	; (8004a70 <xTaskIncrementTick+0x14c>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	3301      	adds	r3, #1
 800493e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004940:	4a4b      	ldr	r2, [pc, #300]	; (8004a70 <xTaskIncrementTick+0x14c>)
 8004942:	693b      	ldr	r3, [r7, #16]
 8004944:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d120      	bne.n	800498e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800494c:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <xTaskIncrementTick+0x150>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <xTaskIncrementTick+0x48>
	__asm volatile
 8004956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800495a:	f383 8811 	msr	BASEPRI, r3
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f3bf 8f4f 	dsb	sy
 8004966:	603b      	str	r3, [r7, #0]
}
 8004968:	bf00      	nop
 800496a:	e7fe      	b.n	800496a <xTaskIncrementTick+0x46>
 800496c:	4b41      	ldr	r3, [pc, #260]	; (8004a74 <xTaskIncrementTick+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	60fb      	str	r3, [r7, #12]
 8004972:	4b41      	ldr	r3, [pc, #260]	; (8004a78 <xTaskIncrementTick+0x154>)
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4a3f      	ldr	r2, [pc, #252]	; (8004a74 <xTaskIncrementTick+0x150>)
 8004978:	6013      	str	r3, [r2, #0]
 800497a:	4a3f      	ldr	r2, [pc, #252]	; (8004a78 <xTaskIncrementTick+0x154>)
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	4b3e      	ldr	r3, [pc, #248]	; (8004a7c <xTaskIncrementTick+0x158>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a3d      	ldr	r2, [pc, #244]	; (8004a7c <xTaskIncrementTick+0x158>)
 8004988:	6013      	str	r3, [r2, #0]
 800498a:	f000 faf7 	bl	8004f7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800498e:	4b3c      	ldr	r3, [pc, #240]	; (8004a80 <xTaskIncrementTick+0x15c>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	693a      	ldr	r2, [r7, #16]
 8004994:	429a      	cmp	r2, r3
 8004996:	d349      	bcc.n	8004a2c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004998:	4b36      	ldr	r3, [pc, #216]	; (8004a74 <xTaskIncrementTick+0x150>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d104      	bne.n	80049ac <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049a2:	4b37      	ldr	r3, [pc, #220]	; (8004a80 <xTaskIncrementTick+0x15c>)
 80049a4:	f04f 32ff 	mov.w	r2, #4294967295
 80049a8:	601a      	str	r2, [r3, #0]
					break;
 80049aa:	e03f      	b.n	8004a2c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049ac:	4b31      	ldr	r3, [pc, #196]	; (8004a74 <xTaskIncrementTick+0x150>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d203      	bcs.n	80049cc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80049c4:	4a2e      	ldr	r2, [pc, #184]	; (8004a80 <xTaskIncrementTick+0x15c>)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80049ca:	e02f      	b.n	8004a2c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3304      	adds	r3, #4
 80049d0:	4618      	mov	r0, r3
 80049d2:	f7fe fdbd 	bl	8003550 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d004      	beq.n	80049e8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	3318      	adds	r3, #24
 80049e2:	4618      	mov	r0, r3
 80049e4:	f7fe fdb4 	bl	8003550 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4b25      	ldr	r3, [pc, #148]	; (8004a84 <xTaskIncrementTick+0x160>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d903      	bls.n	80049fc <xTaskIncrementTick+0xd8>
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f8:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <xTaskIncrementTick+0x160>)
 80049fa:	6013      	str	r3, [r2, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a00:	4613      	mov	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	4413      	add	r3, r2
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	4a1f      	ldr	r2, [pc, #124]	; (8004a88 <xTaskIncrementTick+0x164>)
 8004a0a:	441a      	add	r2, r3
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	3304      	adds	r3, #4
 8004a10:	4619      	mov	r1, r3
 8004a12:	4610      	mov	r0, r2
 8004a14:	f7fe fd3f 	bl	8003496 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a18:	68bb      	ldr	r3, [r7, #8]
 8004a1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1c:	4b1b      	ldr	r3, [pc, #108]	; (8004a8c <xTaskIncrementTick+0x168>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	429a      	cmp	r2, r3
 8004a24:	d3b8      	bcc.n	8004998 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004a26:	2301      	movs	r3, #1
 8004a28:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a2a:	e7b5      	b.n	8004998 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a2c:	4b17      	ldr	r3, [pc, #92]	; (8004a8c <xTaskIncrementTick+0x168>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a32:	4915      	ldr	r1, [pc, #84]	; (8004a88 <xTaskIncrementTick+0x164>)
 8004a34:	4613      	mov	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	4413      	add	r3, r2
 8004a3a:	009b      	lsls	r3, r3, #2
 8004a3c:	440b      	add	r3, r1
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d901      	bls.n	8004a48 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a44:	2301      	movs	r3, #1
 8004a46:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a48:	4b11      	ldr	r3, [pc, #68]	; (8004a90 <xTaskIncrementTick+0x16c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a50:	2301      	movs	r3, #1
 8004a52:	617b      	str	r3, [r7, #20]
 8004a54:	e004      	b.n	8004a60 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a56:	4b0f      	ldr	r3, [pc, #60]	; (8004a94 <xTaskIncrementTick+0x170>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	3301      	adds	r3, #1
 8004a5c:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <xTaskIncrementTick+0x170>)
 8004a5e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a60:	697b      	ldr	r3, [r7, #20]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3718      	adds	r7, #24
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	20003304 	.word	0x20003304
 8004a70:	200032e0 	.word	0x200032e0
 8004a74:	20003294 	.word	0x20003294
 8004a78:	20003298 	.word	0x20003298
 8004a7c:	200032f4 	.word	0x200032f4
 8004a80:	200032fc 	.word	0x200032fc
 8004a84:	200032e4 	.word	0x200032e4
 8004a88:	20002e0c 	.word	0x20002e0c
 8004a8c:	20002e08 	.word	0x20002e08
 8004a90:	200032f0 	.word	0x200032f0
 8004a94:	200032ec 	.word	0x200032ec

08004a98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b084      	sub	sp, #16
 8004a9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a9e:	4b36      	ldr	r3, [pc, #216]	; (8004b78 <vTaskSwitchContext+0xe0>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004aa6:	4b35      	ldr	r3, [pc, #212]	; (8004b7c <vTaskSwitchContext+0xe4>)
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004aac:	e05f      	b.n	8004b6e <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8004aae:	4b33      	ldr	r3, [pc, #204]	; (8004b7c <vTaskSwitchContext+0xe4>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8004ab4:	f7fc ff0c 	bl	80018d0 <getRunTimeCounterValue>
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4a31      	ldr	r2, [pc, #196]	; (8004b80 <vTaskSwitchContext+0xe8>)
 8004abc:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8004abe:	4b30      	ldr	r3, [pc, #192]	; (8004b80 <vTaskSwitchContext+0xe8>)
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <vTaskSwitchContext+0xec>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	429a      	cmp	r2, r3
 8004ac8:	d909      	bls.n	8004ade <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8004aca:	4b2f      	ldr	r3, [pc, #188]	; (8004b88 <vTaskSwitchContext+0xf0>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004ad0:	4a2b      	ldr	r2, [pc, #172]	; (8004b80 <vTaskSwitchContext+0xe8>)
 8004ad2:	6810      	ldr	r0, [r2, #0]
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <vTaskSwitchContext+0xec>)
 8004ad6:	6812      	ldr	r2, [r2, #0]
 8004ad8:	1a82      	subs	r2, r0, r2
 8004ada:	440a      	add	r2, r1
 8004adc:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8004ade:	4b28      	ldr	r3, [pc, #160]	; (8004b80 <vTaskSwitchContext+0xe8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a28      	ldr	r2, [pc, #160]	; (8004b84 <vTaskSwitchContext+0xec>)
 8004ae4:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ae6:	4b29      	ldr	r3, [pc, #164]	; (8004b8c <vTaskSwitchContext+0xf4>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	e010      	b.n	8004b10 <vTaskSwitchContext+0x78>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10a      	bne.n	8004b0a <vTaskSwitchContext+0x72>
	__asm volatile
 8004af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004af8:	f383 8811 	msr	BASEPRI, r3
 8004afc:	f3bf 8f6f 	isb	sy
 8004b00:	f3bf 8f4f 	dsb	sy
 8004b04:	607b      	str	r3, [r7, #4]
}
 8004b06:	bf00      	nop
 8004b08:	e7fe      	b.n	8004b08 <vTaskSwitchContext+0x70>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	3b01      	subs	r3, #1
 8004b0e:	60fb      	str	r3, [r7, #12]
 8004b10:	491f      	ldr	r1, [pc, #124]	; (8004b90 <vTaskSwitchContext+0xf8>)
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	4613      	mov	r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	4413      	add	r3, r2
 8004b1a:	009b      	lsls	r3, r3, #2
 8004b1c:	440b      	add	r3, r1
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d0e4      	beq.n	8004aee <vTaskSwitchContext+0x56>
 8004b24:	68fa      	ldr	r2, [r7, #12]
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4a18      	ldr	r2, [pc, #96]	; (8004b90 <vTaskSwitchContext+0xf8>)
 8004b30:	4413      	add	r3, r2
 8004b32:	60bb      	str	r3, [r7, #8]
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	685a      	ldr	r2, [r3, #4]
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	685a      	ldr	r2, [r3, #4]
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	3308      	adds	r3, #8
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d104      	bne.n	8004b54 <vTaskSwitchContext+0xbc>
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	605a      	str	r2, [r3, #4]
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	4a0b      	ldr	r2, [pc, #44]	; (8004b88 <vTaskSwitchContext+0xf0>)
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	4a0b      	ldr	r2, [pc, #44]	; (8004b8c <vTaskSwitchContext+0xf4>)
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b64:	4b08      	ldr	r3, [pc, #32]	; (8004b88 <vTaskSwitchContext+0xf0>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3358      	adds	r3, #88	; 0x58
 8004b6a:	4a0a      	ldr	r2, [pc, #40]	; (8004b94 <vTaskSwitchContext+0xfc>)
 8004b6c:	6013      	str	r3, [r2, #0]
}
 8004b6e:	bf00      	nop
 8004b70:	3710      	adds	r7, #16
 8004b72:	46bd      	mov	sp, r7
 8004b74:	bd80      	pop	{r7, pc}
 8004b76:	bf00      	nop
 8004b78:	20003304 	.word	0x20003304
 8004b7c:	200032f0 	.word	0x200032f0
 8004b80:	2000330c 	.word	0x2000330c
 8004b84:	20003308 	.word	0x20003308
 8004b88:	20002e08 	.word	0x20002e08
 8004b8c:	200032e4 	.word	0x200032e4
 8004b90:	20002e0c 	.word	0x20002e0c
 8004b94:	2000006c 	.word	0x2000006c

08004b98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	b084      	sub	sp, #16
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	60fb      	str	r3, [r7, #12]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004bbe:	4b07      	ldr	r3, [pc, #28]	; (8004bdc <vTaskPlaceOnEventList+0x44>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	3318      	adds	r3, #24
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe fc89 	bl	80034de <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004bcc:	2101      	movs	r1, #1
 8004bce:	6838      	ldr	r0, [r7, #0]
 8004bd0:	f000 fb7e 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
}
 8004bd4:	bf00      	nop
 8004bd6:	3710      	adds	r7, #16
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}
 8004bdc:	20002e08 	.word	0x20002e08

08004be0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10a      	bne.n	8004c08 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	617b      	str	r3, [r7, #20]
}
 8004c04:	bf00      	nop
 8004c06:	e7fe      	b.n	8004c06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c08:	4b0a      	ldr	r3, [pc, #40]	; (8004c34 <vTaskPlaceOnEventListRestricted+0x54>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	4619      	mov	r1, r3
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f7fe fc40 	bl	8003496 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d002      	beq.n	8004c22 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004c1c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c20:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004c22:	6879      	ldr	r1, [r7, #4]
 8004c24:	68b8      	ldr	r0, [r7, #8]
 8004c26:	f000 fb53 	bl	80052d0 <prvAddCurrentTaskToDelayedList>
	}
 8004c2a:	bf00      	nop
 8004c2c:	3718      	adds	r7, #24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	20002e08 	.word	0x20002e08

08004c38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b086      	sub	sp, #24
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10a      	bne.n	8004c64 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c52:	f383 8811 	msr	BASEPRI, r3
 8004c56:	f3bf 8f6f 	isb	sy
 8004c5a:	f3bf 8f4f 	dsb	sy
 8004c5e:	60fb      	str	r3, [r7, #12]
}
 8004c60:	bf00      	nop
 8004c62:	e7fe      	b.n	8004c62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	3318      	adds	r3, #24
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fe fc71 	bl	8003550 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ce8 <xTaskRemoveFromEventList+0xb0>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d11d      	bne.n	8004cb2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3304      	adds	r3, #4
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f7fe fc68 	bl	8003550 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c84:	4b19      	ldr	r3, [pc, #100]	; (8004cec <xTaskRemoveFromEventList+0xb4>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d903      	bls.n	8004c94 <xTaskRemoveFromEventList+0x5c>
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c90:	4a16      	ldr	r2, [pc, #88]	; (8004cec <xTaskRemoveFromEventList+0xb4>)
 8004c92:	6013      	str	r3, [r2, #0]
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c98:	4613      	mov	r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	4413      	add	r3, r2
 8004c9e:	009b      	lsls	r3, r3, #2
 8004ca0:	4a13      	ldr	r2, [pc, #76]	; (8004cf0 <xTaskRemoveFromEventList+0xb8>)
 8004ca2:	441a      	add	r2, r3
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	3304      	adds	r3, #4
 8004ca8:	4619      	mov	r1, r3
 8004caa:	4610      	mov	r0, r2
 8004cac:	f7fe fbf3 	bl	8003496 <vListInsertEnd>
 8004cb0:	e005      	b.n	8004cbe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	3318      	adds	r3, #24
 8004cb6:	4619      	mov	r1, r3
 8004cb8:	480e      	ldr	r0, [pc, #56]	; (8004cf4 <xTaskRemoveFromEventList+0xbc>)
 8004cba:	f7fe fbec 	bl	8003496 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cc2:	4b0d      	ldr	r3, [pc, #52]	; (8004cf8 <xTaskRemoveFromEventList+0xc0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc8:	429a      	cmp	r2, r3
 8004cca:	d905      	bls.n	8004cd8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ccc:	2301      	movs	r3, #1
 8004cce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cd0:	4b0a      	ldr	r3, [pc, #40]	; (8004cfc <xTaskRemoveFromEventList+0xc4>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]
 8004cd6:	e001      	b.n	8004cdc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004cdc:	697b      	ldr	r3, [r7, #20]
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3718      	adds	r7, #24
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	bf00      	nop
 8004ce8:	20003304 	.word	0x20003304
 8004cec:	200032e4 	.word	0x200032e4
 8004cf0:	20002e0c 	.word	0x20002e0c
 8004cf4:	2000329c 	.word	0x2000329c
 8004cf8:	20002e08 	.word	0x20002e08
 8004cfc:	200032f0 	.word	0x200032f0

08004d00 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d00:	b480      	push	{r7}
 8004d02:	b083      	sub	sp, #12
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <vTaskInternalSetTimeOutState+0x24>)
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <vTaskInternalSetTimeOutState+0x28>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	605a      	str	r2, [r3, #4]
}
 8004d18:	bf00      	nop
 8004d1a:	370c      	adds	r7, #12
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr
 8004d24:	200032f4 	.word	0x200032f4
 8004d28:	200032e0 	.word	0x200032e0

08004d2c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b088      	sub	sp, #32
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
 8004d34:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d10a      	bne.n	8004d52 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d40:	f383 8811 	msr	BASEPRI, r3
 8004d44:	f3bf 8f6f 	isb	sy
 8004d48:	f3bf 8f4f 	dsb	sy
 8004d4c:	613b      	str	r3, [r7, #16]
}
 8004d4e:	bf00      	nop
 8004d50:	e7fe      	b.n	8004d50 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d10a      	bne.n	8004d6e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d5c:	f383 8811 	msr	BASEPRI, r3
 8004d60:	f3bf 8f6f 	isb	sy
 8004d64:	f3bf 8f4f 	dsb	sy
 8004d68:	60fb      	str	r3, [r7, #12]
}
 8004d6a:	bf00      	nop
 8004d6c:	e7fe      	b.n	8004d6c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d6e:	f000 ff81 	bl	8005c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	; (8004de8 <xTaskCheckForTimeOut+0xbc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d8a:	d102      	bne.n	8004d92 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	61fb      	str	r3, [r7, #28]
 8004d90:	e023      	b.n	8004dda <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	4b15      	ldr	r3, [pc, #84]	; (8004dec <xTaskCheckForTimeOut+0xc0>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	429a      	cmp	r2, r3
 8004d9c:	d007      	beq.n	8004dae <xTaskCheckForTimeOut+0x82>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d302      	bcc.n	8004dae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004da8:	2301      	movs	r3, #1
 8004daa:	61fb      	str	r3, [r7, #28]
 8004dac:	e015      	b.n	8004dda <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	697a      	ldr	r2, [r7, #20]
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d20b      	bcs.n	8004dd0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	1ad2      	subs	r2, r2, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7ff ff9b 	bl	8004d00 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e004      	b.n	8004dda <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004dda:	f000 ff7b 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 8004dde:	69fb      	ldr	r3, [r7, #28]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200032e0 	.word	0x200032e0
 8004dec:	200032f4 	.word	0x200032f4

08004df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004df4:	4b03      	ldr	r3, [pc, #12]	; (8004e04 <vTaskMissedYield+0x14>)
 8004df6:	2201      	movs	r2, #1
 8004df8:	601a      	str	r2, [r3, #0]
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr
 8004e04:	200032f0 	.word	0x200032f0

08004e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004e10:	f000 f852 	bl	8004eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <prvIdleTask+0x28>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d9f9      	bls.n	8004e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004e1c:	4b05      	ldr	r3, [pc, #20]	; (8004e34 <prvIdleTask+0x2c>)
 8004e1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e22:	601a      	str	r2, [r3, #0]
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004e2c:	e7f0      	b.n	8004e10 <prvIdleTask+0x8>
 8004e2e:	bf00      	nop
 8004e30:	20002e0c 	.word	0x20002e0c
 8004e34:	e000ed04 	.word	0xe000ed04

08004e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b082      	sub	sp, #8
 8004e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e3e:	2300      	movs	r3, #0
 8004e40:	607b      	str	r3, [r7, #4]
 8004e42:	e00c      	b.n	8004e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e44:	687a      	ldr	r2, [r7, #4]
 8004e46:	4613      	mov	r3, r2
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4a12      	ldr	r2, [pc, #72]	; (8004e98 <prvInitialiseTaskLists+0x60>)
 8004e50:	4413      	add	r3, r2
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe faf2 	bl	800343c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3301      	adds	r3, #1
 8004e5c:	607b      	str	r3, [r7, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2b37      	cmp	r3, #55	; 0x37
 8004e62:	d9ef      	bls.n	8004e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e64:	480d      	ldr	r0, [pc, #52]	; (8004e9c <prvInitialiseTaskLists+0x64>)
 8004e66:	f7fe fae9 	bl	800343c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e6a:	480d      	ldr	r0, [pc, #52]	; (8004ea0 <prvInitialiseTaskLists+0x68>)
 8004e6c:	f7fe fae6 	bl	800343c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e70:	480c      	ldr	r0, [pc, #48]	; (8004ea4 <prvInitialiseTaskLists+0x6c>)
 8004e72:	f7fe fae3 	bl	800343c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e76:	480c      	ldr	r0, [pc, #48]	; (8004ea8 <prvInitialiseTaskLists+0x70>)
 8004e78:	f7fe fae0 	bl	800343c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e7c:	480b      	ldr	r0, [pc, #44]	; (8004eac <prvInitialiseTaskLists+0x74>)
 8004e7e:	f7fe fadd 	bl	800343c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e82:	4b0b      	ldr	r3, [pc, #44]	; (8004eb0 <prvInitialiseTaskLists+0x78>)
 8004e84:	4a05      	ldr	r2, [pc, #20]	; (8004e9c <prvInitialiseTaskLists+0x64>)
 8004e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e88:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <prvInitialiseTaskLists+0x7c>)
 8004e8a:	4a05      	ldr	r2, [pc, #20]	; (8004ea0 <prvInitialiseTaskLists+0x68>)
 8004e8c:	601a      	str	r2, [r3, #0]
}
 8004e8e:	bf00      	nop
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20002e0c 	.word	0x20002e0c
 8004e9c:	2000326c 	.word	0x2000326c
 8004ea0:	20003280 	.word	0x20003280
 8004ea4:	2000329c 	.word	0x2000329c
 8004ea8:	200032b0 	.word	0x200032b0
 8004eac:	200032c8 	.word	0x200032c8
 8004eb0:	20003294 	.word	0x20003294
 8004eb4:	20003298 	.word	0x20003298

08004eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ebe:	e019      	b.n	8004ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004ec0:	f000 fed8 	bl	8005c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ec4:	4b10      	ldr	r3, [pc, #64]	; (8004f08 <prvCheckTasksWaitingTermination+0x50>)
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	68db      	ldr	r3, [r3, #12]
 8004eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	3304      	adds	r3, #4
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	f7fe fb3d 	bl	8003550 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	; (8004f0c <prvCheckTasksWaitingTermination+0x54>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	4a0b      	ldr	r2, [pc, #44]	; (8004f0c <prvCheckTasksWaitingTermination+0x54>)
 8004ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004ee0:	4b0b      	ldr	r3, [pc, #44]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	3b01      	subs	r3, #1
 8004ee6:	4a0a      	ldr	r2, [pc, #40]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004eea:	f000 fef3 	bl	8005cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f000 f810 	bl	8004f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ef4:	4b06      	ldr	r3, [pc, #24]	; (8004f10 <prvCheckTasksWaitingTermination+0x58>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e1      	bne.n	8004ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004efc:	bf00      	nop
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200032b0 	.word	0x200032b0
 8004f0c:	200032dc 	.word	0x200032dc
 8004f10:	200032c4 	.word	0x200032c4

08004f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3358      	adds	r3, #88	; 0x58
 8004f20:	4618      	mov	r0, r3
 8004f22:	f003 fbd7 	bl	80086d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d108      	bne.n	8004f42 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	4618      	mov	r0, r3
 8004f36:	f001 f88b 	bl	8006050 <vPortFree>
				vPortFree( pxTCB );
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f001 f888 	bl	8006050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f40:	e018      	b.n	8004f74 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	d103      	bne.n	8004f54 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f001 f87f 	bl	8006050 <vPortFree>
	}
 8004f52:	e00f      	b.n	8004f74 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8004f5a:	2b02      	cmp	r3, #2
 8004f5c:	d00a      	beq.n	8004f74 <prvDeleteTCB+0x60>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	60fb      	str	r3, [r7, #12]
}
 8004f70:	bf00      	nop
 8004f72:	e7fe      	b.n	8004f72 <prvDeleteTCB+0x5e>
	}
 8004f74:	bf00      	nop
 8004f76:	3710      	adds	r7, #16
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f82:	4b0c      	ldr	r3, [pc, #48]	; (8004fb4 <prvResetNextTaskUnblockTime+0x38>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f8c:	4b0a      	ldr	r3, [pc, #40]	; (8004fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004f8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004f92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f94:	e008      	b.n	8004fa8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f96:	4b07      	ldr	r3, [pc, #28]	; (8004fb4 <prvResetNextTaskUnblockTime+0x38>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68db      	ldr	r3, [r3, #12]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	4a04      	ldr	r2, [pc, #16]	; (8004fb8 <prvResetNextTaskUnblockTime+0x3c>)
 8004fa6:	6013      	str	r3, [r2, #0]
}
 8004fa8:	bf00      	nop
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr
 8004fb4:	20003294 	.word	0x20003294
 8004fb8:	200032fc 	.word	0x200032fc

08004fbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fc2:	4b0b      	ldr	r3, [pc, #44]	; (8004ff0 <xTaskGetSchedulerState+0x34>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d102      	bne.n	8004fd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	607b      	str	r3, [r7, #4]
 8004fce:	e008      	b.n	8004fe2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004fd0:	4b08      	ldr	r3, [pc, #32]	; (8004ff4 <xTaskGetSchedulerState+0x38>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d102      	bne.n	8004fde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004fd8:	2302      	movs	r3, #2
 8004fda:	607b      	str	r3, [r7, #4]
 8004fdc:	e001      	b.n	8004fe2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004fde:	2300      	movs	r3, #0
 8004fe0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004fe2:	687b      	ldr	r3, [r7, #4]
	}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr
 8004ff0:	200032e8 	.word	0x200032e8
 8004ff4:	20003304 	.word	0x20003304

08004ff8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b084      	sub	sp, #16
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d051      	beq.n	80050b2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005012:	4b2a      	ldr	r3, [pc, #168]	; (80050bc <xTaskPriorityInherit+0xc4>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005018:	429a      	cmp	r2, r3
 800501a:	d241      	bcs.n	80050a0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	699b      	ldr	r3, [r3, #24]
 8005020:	2b00      	cmp	r3, #0
 8005022:	db06      	blt.n	8005032 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <xTaskPriorityInherit+0xc4>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800502a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	6959      	ldr	r1, [r3, #20]
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503a:	4613      	mov	r3, r2
 800503c:	009b      	lsls	r3, r3, #2
 800503e:	4413      	add	r3, r2
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	4a1f      	ldr	r2, [pc, #124]	; (80050c0 <xTaskPriorityInherit+0xc8>)
 8005044:	4413      	add	r3, r2
 8005046:	4299      	cmp	r1, r3
 8005048:	d122      	bne.n	8005090 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	3304      	adds	r3, #4
 800504e:	4618      	mov	r0, r3
 8005050:	f7fe fa7e 	bl	8003550 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005054:	4b19      	ldr	r3, [pc, #100]	; (80050bc <xTaskPriorityInherit+0xc4>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005062:	4b18      	ldr	r3, [pc, #96]	; (80050c4 <xTaskPriorityInherit+0xcc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	429a      	cmp	r2, r3
 8005068:	d903      	bls.n	8005072 <xTaskPriorityInherit+0x7a>
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506e:	4a15      	ldr	r2, [pc, #84]	; (80050c4 <xTaskPriorityInherit+0xcc>)
 8005070:	6013      	str	r3, [r2, #0]
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005076:	4613      	mov	r3, r2
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	4413      	add	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4a10      	ldr	r2, [pc, #64]	; (80050c0 <xTaskPriorityInherit+0xc8>)
 8005080:	441a      	add	r2, r3
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	3304      	adds	r3, #4
 8005086:	4619      	mov	r1, r3
 8005088:	4610      	mov	r0, r2
 800508a:	f7fe fa04 	bl	8003496 <vListInsertEnd>
 800508e:	e004      	b.n	800509a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <xTaskPriorityInherit+0xc4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800509a:	2301      	movs	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	e008      	b.n	80050b2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a4:	4b05      	ldr	r3, [pc, #20]	; (80050bc <xTaskPriorityInherit+0xc4>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d201      	bcs.n	80050b2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80050ae:	2301      	movs	r3, #1
 80050b0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050b2:	68fb      	ldr	r3, [r7, #12]
	}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20002e08 	.word	0x20002e08
 80050c0:	20002e0c 	.word	0x20002e0c
 80050c4:	200032e4 	.word	0x200032e4

080050c8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b086      	sub	sp, #24
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80050d4:	2300      	movs	r3, #0
 80050d6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d056      	beq.n	800518c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80050de:	4b2e      	ldr	r3, [pc, #184]	; (8005198 <xTaskPriorityDisinherit+0xd0>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d00a      	beq.n	80050fe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80050e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ec:	f383 8811 	msr	BASEPRI, r3
 80050f0:	f3bf 8f6f 	isb	sy
 80050f4:	f3bf 8f4f 	dsb	sy
 80050f8:	60fb      	str	r3, [r7, #12]
}
 80050fa:	bf00      	nop
 80050fc:	e7fe      	b.n	80050fc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005102:	2b00      	cmp	r3, #0
 8005104:	d10a      	bne.n	800511c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60bb      	str	r3, [r7, #8]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005120:	1e5a      	subs	r2, r3, #1
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800512e:	429a      	cmp	r2, r3
 8005130:	d02c      	beq.n	800518c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005136:	2b00      	cmp	r3, #0
 8005138:	d128      	bne.n	800518c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	3304      	adds	r3, #4
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fa06 	bl	8003550 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005148:	693b      	ldr	r3, [r7, #16]
 800514a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005158:	693b      	ldr	r3, [r7, #16]
 800515a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515c:	4b0f      	ldr	r3, [pc, #60]	; (800519c <xTaskPriorityDisinherit+0xd4>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	429a      	cmp	r2, r3
 8005162:	d903      	bls.n	800516c <xTaskPriorityDisinherit+0xa4>
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005168:	4a0c      	ldr	r2, [pc, #48]	; (800519c <xTaskPriorityDisinherit+0xd4>)
 800516a:	6013      	str	r3, [r2, #0]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005170:	4613      	mov	r3, r2
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	4413      	add	r3, r2
 8005176:	009b      	lsls	r3, r3, #2
 8005178:	4a09      	ldr	r2, [pc, #36]	; (80051a0 <xTaskPriorityDisinherit+0xd8>)
 800517a:	441a      	add	r2, r3
 800517c:	693b      	ldr	r3, [r7, #16]
 800517e:	3304      	adds	r3, #4
 8005180:	4619      	mov	r1, r3
 8005182:	4610      	mov	r0, r2
 8005184:	f7fe f987 	bl	8003496 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005188:	2301      	movs	r3, #1
 800518a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800518c:	697b      	ldr	r3, [r7, #20]
	}
 800518e:	4618      	mov	r0, r3
 8005190:	3718      	adds	r7, #24
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	20002e08 	.word	0x20002e08
 800519c:	200032e4 	.word	0x200032e4
 80051a0:	20002e0c 	.word	0x20002e0c

080051a4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b088      	sub	sp, #32
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80051b2:	2301      	movs	r3, #1
 80051b4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d06a      	beq.n	8005292 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80051bc:	69bb      	ldr	r3, [r7, #24]
 80051be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10a      	bne.n	80051da <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80051c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c8:	f383 8811 	msr	BASEPRI, r3
 80051cc:	f3bf 8f6f 	isb	sy
 80051d0:	f3bf 8f4f 	dsb	sy
 80051d4:	60fb      	str	r3, [r7, #12]
}
 80051d6:	bf00      	nop
 80051d8:	e7fe      	b.n	80051d8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80051da:	69bb      	ldr	r3, [r7, #24]
 80051dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051de:	683a      	ldr	r2, [r7, #0]
 80051e0:	429a      	cmp	r2, r3
 80051e2:	d902      	bls.n	80051ea <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	e002      	b.n	80051f0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80051ea:	69bb      	ldr	r3, [r7, #24]
 80051ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ee:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	429a      	cmp	r2, r3
 80051f8:	d04b      	beq.n	8005292 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80051fa:	69bb      	ldr	r3, [r7, #24]
 80051fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	429a      	cmp	r2, r3
 8005202:	d146      	bne.n	8005292 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005204:	4b25      	ldr	r3, [pc, #148]	; (800529c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69ba      	ldr	r2, [r7, #24]
 800520a:	429a      	cmp	r2, r3
 800520c:	d10a      	bne.n	8005224 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800520e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005212:	f383 8811 	msr	BASEPRI, r3
 8005216:	f3bf 8f6f 	isb	sy
 800521a:	f3bf 8f4f 	dsb	sy
 800521e:	60bb      	str	r3, [r7, #8]
}
 8005220:	bf00      	nop
 8005222:	e7fe      	b.n	8005222 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005228:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	db04      	blt.n	8005242 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800523e:	69bb      	ldr	r3, [r7, #24]
 8005240:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6959      	ldr	r1, [r3, #20]
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	4a13      	ldr	r2, [pc, #76]	; (80052a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005252:	4413      	add	r3, r2
 8005254:	4299      	cmp	r1, r3
 8005256:	d11c      	bne.n	8005292 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe f977 	bl	8003550 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005266:	4b0f      	ldr	r3, [pc, #60]	; (80052a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	429a      	cmp	r2, r3
 800526c:	d903      	bls.n	8005276 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800526e:	69bb      	ldr	r3, [r7, #24]
 8005270:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005272:	4a0c      	ldr	r2, [pc, #48]	; (80052a4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005274:	6013      	str	r3, [r2, #0]
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	4a07      	ldr	r2, [pc, #28]	; (80052a0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005284:	441a      	add	r2, r3
 8005286:	69bb      	ldr	r3, [r7, #24]
 8005288:	3304      	adds	r3, #4
 800528a:	4619      	mov	r1, r3
 800528c:	4610      	mov	r0, r2
 800528e:	f7fe f902 	bl	8003496 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005292:	bf00      	nop
 8005294:	3720      	adds	r7, #32
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20002e08 	.word	0x20002e08
 80052a0:	20002e0c 	.word	0x20002e0c
 80052a4:	200032e4 	.word	0x200032e4

080052a8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80052a8:	b480      	push	{r7}
 80052aa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80052ac:	4b07      	ldr	r3, [pc, #28]	; (80052cc <pvTaskIncrementMutexHeldCount+0x24>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d004      	beq.n	80052be <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80052b4:	4b05      	ldr	r3, [pc, #20]	; (80052cc <pvTaskIncrementMutexHeldCount+0x24>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80052ba:	3201      	adds	r2, #1
 80052bc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80052be:	4b03      	ldr	r3, [pc, #12]	; (80052cc <pvTaskIncrementMutexHeldCount+0x24>)
 80052c0:	681b      	ldr	r3, [r3, #0]
	}
 80052c2:	4618      	mov	r0, r3
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	20002e08 	.word	0x20002e08

080052d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052da:	4b21      	ldr	r3, [pc, #132]	; (8005360 <prvAddCurrentTaskToDelayedList+0x90>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052e0:	4b20      	ldr	r3, [pc, #128]	; (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3304      	adds	r3, #4
 80052e6:	4618      	mov	r0, r3
 80052e8:	f7fe f932 	bl	8003550 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d10a      	bne.n	800530a <prvAddCurrentTaskToDelayedList+0x3a>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d007      	beq.n	800530a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80052fa:	4b1a      	ldr	r3, [pc, #104]	; (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	3304      	adds	r3, #4
 8005300:	4619      	mov	r1, r3
 8005302:	4819      	ldr	r0, [pc, #100]	; (8005368 <prvAddCurrentTaskToDelayedList+0x98>)
 8005304:	f7fe f8c7 	bl	8003496 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005308:	e026      	b.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	4413      	add	r3, r2
 8005310:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005312:	4b14      	ldr	r3, [pc, #80]	; (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	68ba      	ldr	r2, [r7, #8]
 8005318:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800531a:	68ba      	ldr	r2, [r7, #8]
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	429a      	cmp	r2, r3
 8005320:	d209      	bcs.n	8005336 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005322:	4b12      	ldr	r3, [pc, #72]	; (800536c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b0f      	ldr	r3, [pc, #60]	; (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3304      	adds	r3, #4
 800532c:	4619      	mov	r1, r3
 800532e:	4610      	mov	r0, r2
 8005330:	f7fe f8d5 	bl	80034de <vListInsert>
}
 8005334:	e010      	b.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005336:	4b0e      	ldr	r3, [pc, #56]	; (8005370 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe f8cb 	bl	80034de <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005348:	4b0a      	ldr	r3, [pc, #40]	; (8005374 <prvAddCurrentTaskToDelayedList+0xa4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68ba      	ldr	r2, [r7, #8]
 800534e:	429a      	cmp	r2, r3
 8005350:	d202      	bcs.n	8005358 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005352:	4a08      	ldr	r2, [pc, #32]	; (8005374 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	3710      	adds	r7, #16
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	200032e0 	.word	0x200032e0
 8005364:	20002e08 	.word	0x20002e08
 8005368:	200032c8 	.word	0x200032c8
 800536c:	20003298 	.word	0x20003298
 8005370:	20003294 	.word	0x20003294
 8005374:	200032fc 	.word	0x200032fc

08005378 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08a      	sub	sp, #40	; 0x28
 800537c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005382:	f000 fb07 	bl	8005994 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005386:	4b1c      	ldr	r3, [pc, #112]	; (80053f8 <xTimerCreateTimerTask+0x80>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d021      	beq.n	80053d2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005392:	2300      	movs	r3, #0
 8005394:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005396:	1d3a      	adds	r2, r7, #4
 8005398:	f107 0108 	add.w	r1, r7, #8
 800539c:	f107 030c 	add.w	r3, r7, #12
 80053a0:	4618      	mov	r0, r3
 80053a2:	f7fe f831 	bl	8003408 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053a6:	6879      	ldr	r1, [r7, #4]
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	68fa      	ldr	r2, [r7, #12]
 80053ac:	9202      	str	r2, [sp, #8]
 80053ae:	9301      	str	r3, [sp, #4]
 80053b0:	2302      	movs	r3, #2
 80053b2:	9300      	str	r3, [sp, #0]
 80053b4:	2300      	movs	r3, #0
 80053b6:	460a      	mov	r2, r1
 80053b8:	4910      	ldr	r1, [pc, #64]	; (80053fc <xTimerCreateTimerTask+0x84>)
 80053ba:	4811      	ldr	r0, [pc, #68]	; (8005400 <xTimerCreateTimerTask+0x88>)
 80053bc:	f7fe ffc8 	bl	8004350 <xTaskCreateStatic>
 80053c0:	4603      	mov	r3, r0
 80053c2:	4a10      	ldr	r2, [pc, #64]	; (8005404 <xTimerCreateTimerTask+0x8c>)
 80053c4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053c6:	4b0f      	ldr	r3, [pc, #60]	; (8005404 <xTimerCreateTimerTask+0x8c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053ce:	2301      	movs	r3, #1
 80053d0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10a      	bne.n	80053ee <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053dc:	f383 8811 	msr	BASEPRI, r3
 80053e0:	f3bf 8f6f 	isb	sy
 80053e4:	f3bf 8f4f 	dsb	sy
 80053e8:	613b      	str	r3, [r7, #16]
}
 80053ea:	bf00      	nop
 80053ec:	e7fe      	b.n	80053ec <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053ee:	697b      	ldr	r3, [r7, #20]
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	3718      	adds	r7, #24
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}
 80053f8:	20003340 	.word	0x20003340
 80053fc:	0800bf2c 	.word	0x0800bf2c
 8005400:	0800553d 	.word	0x0800553d
 8005404:	20003344 	.word	0x20003344

08005408 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b08a      	sub	sp, #40	; 0x28
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005416:	2300      	movs	r3, #0
 8005418:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d10a      	bne.n	8005436 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005424:	f383 8811 	msr	BASEPRI, r3
 8005428:	f3bf 8f6f 	isb	sy
 800542c:	f3bf 8f4f 	dsb	sy
 8005430:	623b      	str	r3, [r7, #32]
}
 8005432:	bf00      	nop
 8005434:	e7fe      	b.n	8005434 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005436:	4b1a      	ldr	r3, [pc, #104]	; (80054a0 <xTimerGenericCommand+0x98>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d02a      	beq.n	8005494 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b05      	cmp	r3, #5
 800544e:	dc18      	bgt.n	8005482 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005450:	f7ff fdb4 	bl	8004fbc <xTaskGetSchedulerState>
 8005454:	4603      	mov	r3, r0
 8005456:	2b02      	cmp	r3, #2
 8005458:	d109      	bne.n	800546e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800545a:	4b11      	ldr	r3, [pc, #68]	; (80054a0 <xTimerGenericCommand+0x98>)
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	f107 0110 	add.w	r1, r7, #16
 8005462:	2300      	movs	r3, #0
 8005464:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005466:	f7fe f9db 	bl	8003820 <xQueueGenericSend>
 800546a:	6278      	str	r0, [r7, #36]	; 0x24
 800546c:	e012      	b.n	8005494 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800546e:	4b0c      	ldr	r3, [pc, #48]	; (80054a0 <xTimerGenericCommand+0x98>)
 8005470:	6818      	ldr	r0, [r3, #0]
 8005472:	f107 0110 	add.w	r1, r7, #16
 8005476:	2300      	movs	r3, #0
 8005478:	2200      	movs	r2, #0
 800547a:	f7fe f9d1 	bl	8003820 <xQueueGenericSend>
 800547e:	6278      	str	r0, [r7, #36]	; 0x24
 8005480:	e008      	b.n	8005494 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005482:	4b07      	ldr	r3, [pc, #28]	; (80054a0 <xTimerGenericCommand+0x98>)
 8005484:	6818      	ldr	r0, [r3, #0]
 8005486:	f107 0110 	add.w	r1, r7, #16
 800548a:	2300      	movs	r3, #0
 800548c:	683a      	ldr	r2, [r7, #0]
 800548e:	f7fe fac5 	bl	8003a1c <xQueueGenericSendFromISR>
 8005492:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005496:	4618      	mov	r0, r3
 8005498:	3728      	adds	r7, #40	; 0x28
 800549a:	46bd      	mov	sp, r7
 800549c:	bd80      	pop	{r7, pc}
 800549e:	bf00      	nop
 80054a0:	20003340 	.word	0x20003340

080054a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b088      	sub	sp, #32
 80054a8:	af02      	add	r7, sp, #8
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ae:	4b22      	ldr	r3, [pc, #136]	; (8005538 <prvProcessExpiredTimer+0x94>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4618      	mov	r0, r3
 80054be:	f7fe f847 	bl	8003550 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d022      	beq.n	8005516 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	699a      	ldr	r2, [r3, #24]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	18d1      	adds	r1, r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	683a      	ldr	r2, [r7, #0]
 80054dc:	6978      	ldr	r0, [r7, #20]
 80054de:	f000 f8d1 	bl	8005684 <prvInsertTimerInActiveList>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d01f      	beq.n	8005528 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054e8:	2300      	movs	r3, #0
 80054ea:	9300      	str	r3, [sp, #0]
 80054ec:	2300      	movs	r3, #0
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	2100      	movs	r1, #0
 80054f2:	6978      	ldr	r0, [r7, #20]
 80054f4:	f7ff ff88 	bl	8005408 <xTimerGenericCommand>
 80054f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d113      	bne.n	8005528 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005504:	f383 8811 	msr	BASEPRI, r3
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	f3bf 8f4f 	dsb	sy
 8005510:	60fb      	str	r3, [r7, #12]
}
 8005512:	bf00      	nop
 8005514:	e7fe      	b.n	8005514 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	b2da      	uxtb	r2, r3
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	6a1b      	ldr	r3, [r3, #32]
 800552c:	6978      	ldr	r0, [r7, #20]
 800552e:	4798      	blx	r3
}
 8005530:	bf00      	nop
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}
 8005538:	20003338 	.word	0x20003338

0800553c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b084      	sub	sp, #16
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005544:	f107 0308 	add.w	r3, r7, #8
 8005548:	4618      	mov	r0, r3
 800554a:	f000 f857 	bl	80055fc <prvGetNextExpireTime>
 800554e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	4619      	mov	r1, r3
 8005554:	68f8      	ldr	r0, [r7, #12]
 8005556:	f000 f803 	bl	8005560 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800555a:	f000 f8d5 	bl	8005708 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800555e:	e7f1      	b.n	8005544 <prvTimerTask+0x8>

08005560 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800556a:	f7ff f91f 	bl	80047ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	4618      	mov	r0, r3
 8005574:	f000 f866 	bl	8005644 <prvSampleTimeNow>
 8005578:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d130      	bne.n	80055e2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10a      	bne.n	800559c <prvProcessTimerOrBlockTask+0x3c>
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	429a      	cmp	r2, r3
 800558c:	d806      	bhi.n	800559c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800558e:	f7ff f91b 	bl	80047c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005592:	68f9      	ldr	r1, [r7, #12]
 8005594:	6878      	ldr	r0, [r7, #4]
 8005596:	f7ff ff85 	bl	80054a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800559a:	e024      	b.n	80055e6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d008      	beq.n	80055b4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055a2:	4b13      	ldr	r3, [pc, #76]	; (80055f0 <prvProcessTimerOrBlockTask+0x90>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d101      	bne.n	80055b0 <prvProcessTimerOrBlockTask+0x50>
 80055ac:	2301      	movs	r3, #1
 80055ae:	e000      	b.n	80055b2 <prvProcessTimerOrBlockTask+0x52>
 80055b0:	2300      	movs	r3, #0
 80055b2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055b4:	4b0f      	ldr	r3, [pc, #60]	; (80055f4 <prvProcessTimerOrBlockTask+0x94>)
 80055b6:	6818      	ldr	r0, [r3, #0]
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	683a      	ldr	r2, [r7, #0]
 80055c0:	4619      	mov	r1, r3
 80055c2:	f7fe fe91 	bl	80042e8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055c6:	f7ff f8ff 	bl	80047c8 <xTaskResumeAll>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d10a      	bne.n	80055e6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <prvProcessTimerOrBlockTask+0x98>)
 80055d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d6:	601a      	str	r2, [r3, #0]
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	f3bf 8f6f 	isb	sy
}
 80055e0:	e001      	b.n	80055e6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055e2:	f7ff f8f1 	bl	80047c8 <xTaskResumeAll>
}
 80055e6:	bf00      	nop
 80055e8:	3710      	adds	r7, #16
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}
 80055ee:	bf00      	nop
 80055f0:	2000333c 	.word	0x2000333c
 80055f4:	20003340 	.word	0x20003340
 80055f8:	e000ed04 	.word	0xe000ed04

080055fc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <prvGetNextExpireTime+0x44>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d101      	bne.n	8005612 <prvGetNextExpireTime+0x16>
 800560e:	2201      	movs	r2, #1
 8005610:	e000      	b.n	8005614 <prvGetNextExpireTime+0x18>
 8005612:	2200      	movs	r2, #0
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d105      	bne.n	800562c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005620:	4b07      	ldr	r3, [pc, #28]	; (8005640 <prvGetNextExpireTime+0x44>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	60fb      	str	r3, [r7, #12]
 800562a:	e001      	b.n	8005630 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800562c:	2300      	movs	r3, #0
 800562e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005630:	68fb      	ldr	r3, [r7, #12]
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	20003338 	.word	0x20003338

08005644 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800564c:	f7ff f95a 	bl	8004904 <xTaskGetTickCount>
 8005650:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005652:	4b0b      	ldr	r3, [pc, #44]	; (8005680 <prvSampleTimeNow+0x3c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68fa      	ldr	r2, [r7, #12]
 8005658:	429a      	cmp	r2, r3
 800565a:	d205      	bcs.n	8005668 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800565c:	f000 f936 	bl	80058cc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]
 8005666:	e002      	b.n	800566e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800566e:	4a04      	ldr	r2, [pc, #16]	; (8005680 <prvSampleTimeNow+0x3c>)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005674:	68fb      	ldr	r3, [r7, #12]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20003348 	.word	0x20003348

08005684 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b086      	sub	sp, #24
 8005688:	af00      	add	r7, sp, #0
 800568a:	60f8      	str	r0, [r7, #12]
 800568c:	60b9      	str	r1, [r7, #8]
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005692:	2300      	movs	r3, #0
 8005694:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	68fa      	ldr	r2, [r7, #12]
 80056a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056a2:	68ba      	ldr	r2, [r7, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d812      	bhi.n	80056d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	699b      	ldr	r3, [r3, #24]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d302      	bcc.n	80056be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056b8:	2301      	movs	r3, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	e01b      	b.n	80056f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056be:	4b10      	ldr	r3, [pc, #64]	; (8005700 <prvInsertTimerInActiveList+0x7c>)
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f7fd ff08 	bl	80034de <vListInsert>
 80056ce:	e012      	b.n	80056f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d206      	bcs.n	80056e6 <prvInsertTimerInActiveList+0x62>
 80056d8:	68ba      	ldr	r2, [r7, #8]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	429a      	cmp	r2, r3
 80056de:	d302      	bcc.n	80056e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056e0:	2301      	movs	r3, #1
 80056e2:	617b      	str	r3, [r7, #20]
 80056e4:	e007      	b.n	80056f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <prvInsertTimerInActiveList+0x80>)
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	3304      	adds	r3, #4
 80056ee:	4619      	mov	r1, r3
 80056f0:	4610      	mov	r0, r2
 80056f2:	f7fd fef4 	bl	80034de <vListInsert>
		}
	}

	return xProcessTimerNow;
 80056f6:	697b      	ldr	r3, [r7, #20]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3718      	adds	r7, #24
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	2000333c 	.word	0x2000333c
 8005704:	20003338 	.word	0x20003338

08005708 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b08e      	sub	sp, #56	; 0x38
 800570c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800570e:	e0ca      	b.n	80058a6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2b00      	cmp	r3, #0
 8005714:	da18      	bge.n	8005748 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005716:	1d3b      	adds	r3, r7, #4
 8005718:	3304      	adds	r3, #4
 800571a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800571c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005726:	f383 8811 	msr	BASEPRI, r3
 800572a:	f3bf 8f6f 	isb	sy
 800572e:	f3bf 8f4f 	dsb	sy
 8005732:	61fb      	str	r3, [r7, #28]
}
 8005734:	bf00      	nop
 8005736:	e7fe      	b.n	8005736 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800573e:	6850      	ldr	r0, [r2, #4]
 8005740:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005742:	6892      	ldr	r2, [r2, #8]
 8005744:	4611      	mov	r1, r2
 8005746:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2b00      	cmp	r3, #0
 800574c:	f2c0 80ab 	blt.w	80058a6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d004      	beq.n	8005766 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800575c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800575e:	3304      	adds	r3, #4
 8005760:	4618      	mov	r0, r3
 8005762:	f7fd fef5 	bl	8003550 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005766:	463b      	mov	r3, r7
 8005768:	4618      	mov	r0, r3
 800576a:	f7ff ff6b 	bl	8005644 <prvSampleTimeNow>
 800576e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2b09      	cmp	r3, #9
 8005774:	f200 8096 	bhi.w	80058a4 <prvProcessReceivedCommands+0x19c>
 8005778:	a201      	add	r2, pc, #4	; (adr r2, 8005780 <prvProcessReceivedCommands+0x78>)
 800577a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800577e:	bf00      	nop
 8005780:	080057a9 	.word	0x080057a9
 8005784:	080057a9 	.word	0x080057a9
 8005788:	080057a9 	.word	0x080057a9
 800578c:	0800581d 	.word	0x0800581d
 8005790:	08005831 	.word	0x08005831
 8005794:	0800587b 	.word	0x0800587b
 8005798:	080057a9 	.word	0x080057a9
 800579c:	080057a9 	.word	0x080057a9
 80057a0:	0800581d 	.word	0x0800581d
 80057a4:	08005831 	.word	0x08005831
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ae:	f043 0301 	orr.w	r3, r3, #1
 80057b2:	b2da      	uxtb	r2, r3
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057ba:	68ba      	ldr	r2, [r7, #8]
 80057bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	18d1      	adds	r1, r2, r3
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057c8:	f7ff ff5c 	bl	8005684 <prvInsertTimerInActiveList>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d069      	beq.n	80058a6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057e0:	f003 0304 	and.w	r3, r3, #4
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d05e      	beq.n	80058a6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	441a      	add	r2, r3
 80057f0:	2300      	movs	r3, #0
 80057f2:	9300      	str	r3, [sp, #0]
 80057f4:	2300      	movs	r3, #0
 80057f6:	2100      	movs	r1, #0
 80057f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057fa:	f7ff fe05 	bl	8005408 <xTimerGenericCommand>
 80057fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005800:	6a3b      	ldr	r3, [r7, #32]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d14f      	bne.n	80058a6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	61bb      	str	r3, [r7, #24]
}
 8005818:	bf00      	nop
 800581a:	e7fe      	b.n	800581a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800581c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005822:	f023 0301 	bic.w	r3, r3, #1
 8005826:	b2da      	uxtb	r2, r3
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800582e:	e03a      	b.n	80058a6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005832:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005836:	f043 0301 	orr.w	r3, r3, #1
 800583a:	b2da      	uxtb	r2, r3
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005846:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	699b      	ldr	r3, [r3, #24]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005854:	f383 8811 	msr	BASEPRI, r3
 8005858:	f3bf 8f6f 	isb	sy
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	617b      	str	r3, [r7, #20]
}
 8005862:	bf00      	nop
 8005864:	e7fe      	b.n	8005864 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800586c:	18d1      	adds	r1, r2, r3
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005872:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005874:	f7ff ff06 	bl	8005684 <prvInsertTimerInActiveList>
					break;
 8005878:	e015      	b.n	80058a6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d103      	bne.n	8005890 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005888:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800588a:	f000 fbe1 	bl	8006050 <vPortFree>
 800588e:	e00a      	b.n	80058a6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005892:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005896:	f023 0301 	bic.w	r3, r3, #1
 800589a:	b2da      	uxtb	r2, r3
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058a2:	e000      	b.n	80058a6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80058a4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058a6:	4b08      	ldr	r3, [pc, #32]	; (80058c8 <prvProcessReceivedCommands+0x1c0>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	1d39      	adds	r1, r7, #4
 80058ac:	2200      	movs	r2, #0
 80058ae:	4618      	mov	r0, r3
 80058b0:	f7fe f9dc 	bl	8003c6c <xQueueReceive>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	f47f af2a 	bne.w	8005710 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058bc:	bf00      	nop
 80058be:	bf00      	nop
 80058c0:	3730      	adds	r7, #48	; 0x30
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	bf00      	nop
 80058c8:	20003340 	.word	0x20003340

080058cc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b088      	sub	sp, #32
 80058d0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058d2:	e048      	b.n	8005966 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058d4:	4b2d      	ldr	r3, [pc, #180]	; (800598c <prvSwitchTimerLists+0xc0>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	68db      	ldr	r3, [r3, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058de:	4b2b      	ldr	r3, [pc, #172]	; (800598c <prvSwitchTimerLists+0xc0>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	68db      	ldr	r3, [r3, #12]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	3304      	adds	r3, #4
 80058ec:	4618      	mov	r0, r3
 80058ee:	f7fd fe2f 	bl	8003550 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6a1b      	ldr	r3, [r3, #32]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005900:	f003 0304 	and.w	r3, r3, #4
 8005904:	2b00      	cmp	r3, #0
 8005906:	d02e      	beq.n	8005966 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	699b      	ldr	r3, [r3, #24]
 800590c:	693a      	ldr	r2, [r7, #16]
 800590e:	4413      	add	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	429a      	cmp	r2, r3
 8005918:	d90e      	bls.n	8005938 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005926:	4b19      	ldr	r3, [pc, #100]	; (800598c <prvSwitchTimerLists+0xc0>)
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3304      	adds	r3, #4
 800592e:	4619      	mov	r1, r3
 8005930:	4610      	mov	r0, r2
 8005932:	f7fd fdd4 	bl	80034de <vListInsert>
 8005936:	e016      	b.n	8005966 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005938:	2300      	movs	r3, #0
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	693a      	ldr	r2, [r7, #16]
 8005940:	2100      	movs	r1, #0
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff fd60 	bl	8005408 <xTimerGenericCommand>
 8005948:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d10a      	bne.n	8005966 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005954:	f383 8811 	msr	BASEPRI, r3
 8005958:	f3bf 8f6f 	isb	sy
 800595c:	f3bf 8f4f 	dsb	sy
 8005960:	603b      	str	r3, [r7, #0]
}
 8005962:	bf00      	nop
 8005964:	e7fe      	b.n	8005964 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005966:	4b09      	ldr	r3, [pc, #36]	; (800598c <prvSwitchTimerLists+0xc0>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d1b1      	bne.n	80058d4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005970:	4b06      	ldr	r3, [pc, #24]	; (800598c <prvSwitchTimerLists+0xc0>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005976:	4b06      	ldr	r3, [pc, #24]	; (8005990 <prvSwitchTimerLists+0xc4>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a04      	ldr	r2, [pc, #16]	; (800598c <prvSwitchTimerLists+0xc0>)
 800597c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800597e:	4a04      	ldr	r2, [pc, #16]	; (8005990 <prvSwitchTimerLists+0xc4>)
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6013      	str	r3, [r2, #0]
}
 8005984:	bf00      	nop
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}
 800598c:	20003338 	.word	0x20003338
 8005990:	2000333c 	.word	0x2000333c

08005994 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800599a:	f000 f96b 	bl	8005c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800599e:	4b15      	ldr	r3, [pc, #84]	; (80059f4 <prvCheckForValidListAndQueue+0x60>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d120      	bne.n	80059e8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059a6:	4814      	ldr	r0, [pc, #80]	; (80059f8 <prvCheckForValidListAndQueue+0x64>)
 80059a8:	f7fd fd48 	bl	800343c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059ac:	4813      	ldr	r0, [pc, #76]	; (80059fc <prvCheckForValidListAndQueue+0x68>)
 80059ae:	f7fd fd45 	bl	800343c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059b2:	4b13      	ldr	r3, [pc, #76]	; (8005a00 <prvCheckForValidListAndQueue+0x6c>)
 80059b4:	4a10      	ldr	r2, [pc, #64]	; (80059f8 <prvCheckForValidListAndQueue+0x64>)
 80059b6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059b8:	4b12      	ldr	r3, [pc, #72]	; (8005a04 <prvCheckForValidListAndQueue+0x70>)
 80059ba:	4a10      	ldr	r2, [pc, #64]	; (80059fc <prvCheckForValidListAndQueue+0x68>)
 80059bc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059be:	2300      	movs	r3, #0
 80059c0:	9300      	str	r3, [sp, #0]
 80059c2:	4b11      	ldr	r3, [pc, #68]	; (8005a08 <prvCheckForValidListAndQueue+0x74>)
 80059c4:	4a11      	ldr	r2, [pc, #68]	; (8005a0c <prvCheckForValidListAndQueue+0x78>)
 80059c6:	2110      	movs	r1, #16
 80059c8:	200a      	movs	r0, #10
 80059ca:	f7fd fe53 	bl	8003674 <xQueueGenericCreateStatic>
 80059ce:	4603      	mov	r3, r0
 80059d0:	4a08      	ldr	r2, [pc, #32]	; (80059f4 <prvCheckForValidListAndQueue+0x60>)
 80059d2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059d4:	4b07      	ldr	r3, [pc, #28]	; (80059f4 <prvCheckForValidListAndQueue+0x60>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d005      	beq.n	80059e8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059dc:	4b05      	ldr	r3, [pc, #20]	; (80059f4 <prvCheckForValidListAndQueue+0x60>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	490b      	ldr	r1, [pc, #44]	; (8005a10 <prvCheckForValidListAndQueue+0x7c>)
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fc56 	bl	8004294 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059e8:	f000 f974 	bl	8005cd4 <vPortExitCritical>
}
 80059ec:	bf00      	nop
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20003340 	.word	0x20003340
 80059f8:	20003310 	.word	0x20003310
 80059fc:	20003324 	.word	0x20003324
 8005a00:	20003338 	.word	0x20003338
 8005a04:	2000333c 	.word	0x2000333c
 8005a08:	200033ec 	.word	0x200033ec
 8005a0c:	2000334c 	.word	0x2000334c
 8005a10:	0800bf34 	.word	0x0800bf34

08005a14 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	3b04      	subs	r3, #4
 8005a24:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3b04      	subs	r3, #4
 8005a32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	f023 0201 	bic.w	r2, r3, #1
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	3b04      	subs	r3, #4
 8005a42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a44:	4a0c      	ldr	r2, [pc, #48]	; (8005a78 <pxPortInitialiseStack+0x64>)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b14      	subs	r3, #20
 8005a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a50:	687a      	ldr	r2, [r7, #4]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f06f 0202 	mvn.w	r2, #2
 8005a62:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	3b20      	subs	r3, #32
 8005a68:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a6a:	68fb      	ldr	r3, [r7, #12]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr
 8005a78:	08005a7d 	.word	0x08005a7d

08005a7c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b085      	sub	sp, #20
 8005a80:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a82:	2300      	movs	r3, #0
 8005a84:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a86:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <prvTaskExitError+0x54>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a8e:	d00a      	beq.n	8005aa6 <prvTaskExitError+0x2a>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	60fb      	str	r3, [r7, #12]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <prvTaskExitError+0x28>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	60bb      	str	r3, [r7, #8]
}
 8005ab8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005aba:	bf00      	nop
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0fc      	beq.n	8005abc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ac2:	bf00      	nop
 8005ac4:	bf00      	nop
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	20000010 	.word	0x20000010
	...

08005ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <pxCurrentTCBConst2>)
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	6808      	ldr	r0, [r1, #0]
 8005ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	f380 8809 	msr	PSP, r0
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f04f 0000 	mov.w	r0, #0
 8005af6:	f380 8811 	msr	BASEPRI, r0
 8005afa:	4770      	bx	lr
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst2>:
 8005b00:	20002e08 	.word	0x20002e08
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b08:	4808      	ldr	r0, [pc, #32]	; (8005b2c <prvPortStartFirstTask+0x24>)
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	6800      	ldr	r0, [r0, #0]
 8005b0e:	f380 8808 	msr	MSP, r0
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8814 	msr	CONTROL, r0
 8005b1a:	b662      	cpsie	i
 8005b1c:	b661      	cpsie	f
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	df00      	svc	0
 8005b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b2a:	bf00      	nop
 8005b2c:	e000ed08 	.word	0xe000ed08

08005b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b36:	4b46      	ldr	r3, [pc, #280]	; (8005c50 <xPortStartScheduler+0x120>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a46      	ldr	r2, [pc, #280]	; (8005c54 <xPortStartScheduler+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10a      	bne.n	8005b56 <xPortStartScheduler+0x26>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b56:	4b3e      	ldr	r3, [pc, #248]	; (8005c50 <xPortStartScheduler+0x120>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <xPortStartScheduler+0x128>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10a      	bne.n	8005b76 <xPortStartScheduler+0x46>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <xPortStartScheduler+0x12c>)
 8005b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	22ff      	movs	r2, #255	; 0xff
 8005b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <xPortStartScheduler+0x130>)
 8005b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <xPortStartScheduler+0x134>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ba4:	e009      	b.n	8005bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ba6:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <xPortStartScheduler+0x134>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	4a2d      	ldr	r2, [pc, #180]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d0ef      	beq.n	8005ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bc6:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1c3 0307 	rsb	r3, r3, #7
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d00a      	beq.n	8005be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60bb      	str	r3, [r7, #8]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005be8:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c1e:	f000 f8dd 	bl	8005ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <xPortStartScheduler+0x13c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c28:	f000 f8fc 	bl	8005e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <xPortStartScheduler+0x140>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0f      	ldr	r2, [pc, #60]	; (8005c70 <xPortStartScheduler+0x140>)
 8005c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c38:	f7ff ff66 	bl	8005b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c3c:	f7fe ff2c 	bl	8004a98 <vTaskSwitchContext>
	prvTaskExitError();
 8005c40:	f7ff ff1c 	bl	8005a7c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed00 	.word	0xe000ed00
 8005c54:	410fc271 	.word	0x410fc271
 8005c58:	410fc270 	.word	0x410fc270
 8005c5c:	e000e400 	.word	0xe000e400
 8005c60:	2000343c 	.word	0x2000343c
 8005c64:	20003440 	.word	0x20003440
 8005c68:	e000ed20 	.word	0xe000ed20
 8005c6c:	20000010 	.word	0x20000010
 8005c70:	e000ef34 	.word	0xe000ef34

08005c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	607b      	str	r3, [r7, #4]
}
 8005c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10f      	bne.n	8005cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortEnterCritical+0x5c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	603b      	str	r3, [r7, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <vPortEnterCritical+0x4a>
	}
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	20000010 	.word	0x20000010
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <vPortExitCritical+0x50>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <vPortExitCritical+0x24>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	607b      	str	r3, [r7, #4]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <vPortExitCritical+0x50>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <vPortExitCritical+0x50>)
 8005d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <vPortExitCritical+0x50>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <vPortExitCritical+0x42>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f383 8811 	msr	BASEPRI, r3
}
 8005d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000010 	.word	0x20000010
	...

08005d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d30:	f3ef 8009 	mrs	r0, PSP
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <pxCurrentTCBConst>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f01e 0f10 	tst.w	lr, #16
 8005d40:	bf08      	it	eq
 8005d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d54:	f380 8811 	msr	BASEPRI, r0
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f7fe fe9a 	bl	8004a98 <vTaskSwitchContext>
 8005d64:	f04f 0000 	mov.w	r0, #0
 8005d68:	f380 8811 	msr	BASEPRI, r0
 8005d6c:	bc09      	pop	{r0, r3}
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	6808      	ldr	r0, [r1, #0]
 8005d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d76:	f01e 0f10 	tst.w	lr, #16
 8005d7a:	bf08      	it	eq
 8005d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d80:	f380 8809 	msr	PSP, r0
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst>:
 8005d90:	20002e08 	.word	0x20002e08
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	607b      	str	r3, [r7, #4]
}
 8005db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005db2:	f7fe fdb7 	bl	8004924 <xTaskIncrementTick>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <xPortSysTickHandler+0x40>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f383 8811 	msr	BASEPRI, r3
}
 8005dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortSetupTimerInterrupt+0x34>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <vPortSetupTimerInterrupt+0x38>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <vPortSetupTimerInterrupt+0x3c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <vPortSetupTimerInterrupt+0x40>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	099b      	lsrs	r3, r3, #6
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <vPortSetupTimerInterrupt+0x44>)
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dfe:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <vPortSetupTimerInterrupt+0x34>)
 8005e00:	2207      	movs	r2, #7
 8005e02:	601a      	str	r2, [r3, #0]
}
 8005e04:	bf00      	nop
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	e000e010 	.word	0xe000e010
 8005e14:	e000e018 	.word	0xe000e018
 8005e18:	20000004 	.word	0x20000004
 8005e1c:	10624dd3 	.word	0x10624dd3
 8005e20:	e000e014 	.word	0xe000e014

08005e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e34 <vPortEnableVFP+0x10>
 8005e28:	6801      	ldr	r1, [r0, #0]
 8005e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e2e:	6001      	str	r1, [r0, #0]
 8005e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e32:	bf00      	nop
 8005e34:	e000ed88 	.word	0xe000ed88

08005e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e3e:	f3ef 8305 	mrs	r3, IPSR
 8005e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d914      	bls.n	8005e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <vPortValidateInterruptPriority+0x70>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <vPortValidateInterruptPriority+0x74>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	7afa      	ldrb	r2, [r7, #11]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d20a      	bcs.n	8005e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	607b      	str	r3, [r7, #4]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <vPortValidateInterruptPriority+0x78>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <vPortValidateInterruptPriority+0x7c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d90a      	bls.n	8005e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	603b      	str	r3, [r7, #0]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <vPortValidateInterruptPriority+0x60>
	}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	e000e3f0 	.word	0xe000e3f0
 8005eac:	2000343c 	.word	0x2000343c
 8005eb0:	e000ed0c 	.word	0xe000ed0c
 8005eb4:	20003440 	.word	0x20003440

08005eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ec4:	f7fe fc72 	bl	80047ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <pvPortMalloc+0x180>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ed0:	f000 f920 	bl	8006114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ed4:	4b59      	ldr	r3, [pc, #356]	; (800603c <pvPortMalloc+0x184>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8093 	bne.w	8006008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01d      	beq.n	8005f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ee8:	2208      	movs	r2, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	3308      	adds	r3, #8
 8005f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <pvPortMalloc+0x6c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	617b      	str	r3, [r7, #20]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d06e      	beq.n	8006008 <pvPortMalloc+0x150>
 8005f2a:	4b45      	ldr	r3, [pc, #276]	; (8006040 <pvPortMalloc+0x188>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d869      	bhi.n	8006008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <pvPortMalloc+0x18c>)
 8005f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f38:	4b42      	ldr	r3, [pc, #264]	; (8006044 <pvPortMalloc+0x18c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f3e:	e004      	b.n	8005f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <pvPortMalloc+0xa4>
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f1      	bne.n	8005f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f5c:	4b36      	ldr	r3, [pc, #216]	; (8006038 <pvPortMalloc+0x180>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d050      	beq.n	8006008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2208      	movs	r2, #8
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	2308      	movs	r3, #8
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d91f      	bls.n	8005fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	613b      	str	r3, [r7, #16]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fc2:	69b8      	ldr	r0, [r7, #24]
 8005fc4:	f000 f908 	bl	80061d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <pvPortMalloc+0x188>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <pvPortMalloc+0x188>)
 8005fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <pvPortMalloc+0x188>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <pvPortMalloc+0x190>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d203      	bcs.n	8005fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <pvPortMalloc+0x188>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <pvPortMalloc+0x190>)
 8005fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <pvPortMalloc+0x184>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x194>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <pvPortMalloc+0x194>)
 8006006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006008:	f7fe fbde 	bl	80047c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <pvPortMalloc+0x174>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60fb      	str	r3, [r7, #12]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <pvPortMalloc+0x172>
	return pvReturn;
 800602c:	69fb      	ldr	r3, [r7, #28]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20006c4c 	.word	0x20006c4c
 800603c:	20006c60 	.word	0x20006c60
 8006040:	20006c50 	.word	0x20006c50
 8006044:	20006c44 	.word	0x20006c44
 8006048:	20006c54 	.word	0x20006c54
 800604c:	20006c58 	.word	0x20006c58

08006050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04d      	beq.n	80060fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006062:	2308      	movs	r3, #8
 8006064:	425b      	negs	r3, r3
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <vPortFree+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <vPortFree+0x44>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <vPortFree+0x62>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60bb      	str	r3, [r7, #8]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <vPortFree+0xb8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11a      	bne.n	80060fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <vPortFree+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d8:	f7fe fb68 	bl	80047ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <vPortFree+0xbc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4413      	add	r3, r2
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <vPortFree+0xbc>)
 80060e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ea:	6938      	ldr	r0, [r7, #16]
 80060ec:	f000 f874 	bl	80061d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <vPortFree+0xc0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a06      	ldr	r2, [pc, #24]	; (8006110 <vPortFree+0xc0>)
 80060f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060fa:	f7fe fb65 	bl	80047c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060fe:	bf00      	nop
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20006c60 	.word	0x20006c60
 800610c:	20006c50 	.word	0x20006c50
 8006110:	20006c5c 	.word	0x20006c5c

08006114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800611a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800611e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <prvHeapInit+0xac>)
 8006122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <prvHeapInit+0xac>)
 8006144:	4413      	add	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <prvHeapInit+0xb0>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <prvHeapInit+0xb0>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006160:	2208      	movs	r2, #8
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <prvHeapInit+0xb4>)
 8006174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvHeapInit+0xb4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800617e:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <prvHeapInit+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <prvHeapInit+0xb4>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <prvHeapInit+0xb8>)
 80061a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <prvHeapInit+0xbc>)
 80061aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <prvHeapInit+0xc0>)
 80061ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	20003444 	.word	0x20003444
 80061c4:	20006c44 	.word	0x20006c44
 80061c8:	20006c4c 	.word	0x20006c4c
 80061cc:	20006c54 	.word	0x20006c54
 80061d0:	20006c50 	.word	0x20006c50
 80061d4:	20006c60 	.word	0x20006c60

080061d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <prvInsertBlockIntoFreeList+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e002      	b.n	80061ec <prvInsertBlockIntoFreeList+0x14>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d8f7      	bhi.n	80061e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d108      	bne.n	800621a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d118      	bne.n	8006260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d00d      	beq.n	8006256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e008      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e003      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	429a      	cmp	r2, r3
 800626e:	d002      	beq.n	8006276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20006c44 	.word	0x20006c44
 8006288:	20006c4c 	.word	0x20006c4c

0800628c <arm_rfft_32_fast_init_f32>:
 800628c:	b178      	cbz	r0, 80062ae <arm_rfft_32_fast_init_f32+0x22>
 800628e:	b430      	push	{r4, r5}
 8006290:	4908      	ldr	r1, [pc, #32]	; (80062b4 <arm_rfft_32_fast_init_f32+0x28>)
 8006292:	4a09      	ldr	r2, [pc, #36]	; (80062b8 <arm_rfft_32_fast_init_f32+0x2c>)
 8006294:	2310      	movs	r3, #16
 8006296:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800629a:	8003      	strh	r3, [r0, #0]
 800629c:	2520      	movs	r5, #32
 800629e:	2414      	movs	r4, #20
 80062a0:	4b06      	ldr	r3, [pc, #24]	; (80062bc <arm_rfft_32_fast_init_f32+0x30>)
 80062a2:	8205      	strh	r5, [r0, #16]
 80062a4:	8184      	strh	r4, [r0, #12]
 80062a6:	6143      	str	r3, [r0, #20]
 80062a8:	bc30      	pop	{r4, r5}
 80062aa:	2000      	movs	r0, #0
 80062ac:	4770      	bx	lr
 80062ae:	f04f 30ff 	mov.w	r0, #4294967295
 80062b2:	4770      	bx	lr
 80062b4:	0800cf34 	.word	0x0800cf34
 80062b8:	0801186c 	.word	0x0801186c
 80062bc:	0801a5ec 	.word	0x0801a5ec

080062c0 <arm_rfft_64_fast_init_f32>:
 80062c0:	b178      	cbz	r0, 80062e2 <arm_rfft_64_fast_init_f32+0x22>
 80062c2:	b430      	push	{r4, r5}
 80062c4:	4908      	ldr	r1, [pc, #32]	; (80062e8 <arm_rfft_64_fast_init_f32+0x28>)
 80062c6:	4a09      	ldr	r2, [pc, #36]	; (80062ec <arm_rfft_64_fast_init_f32+0x2c>)
 80062c8:	2320      	movs	r3, #32
 80062ca:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80062ce:	8003      	strh	r3, [r0, #0]
 80062d0:	2540      	movs	r5, #64	; 0x40
 80062d2:	2430      	movs	r4, #48	; 0x30
 80062d4:	4b06      	ldr	r3, [pc, #24]	; (80062f0 <arm_rfft_64_fast_init_f32+0x30>)
 80062d6:	8205      	strh	r5, [r0, #16]
 80062d8:	8184      	strh	r4, [r0, #12]
 80062da:	6143      	str	r3, [r0, #20]
 80062dc:	bc30      	pop	{r4, r5}
 80062de:	2000      	movs	r0, #0
 80062e0:	4770      	bx	lr
 80062e2:	f04f 30ff 	mov.w	r0, #4294967295
 80062e6:	4770      	bx	lr
 80062e8:	0800f08c 	.word	0x0800f08c
 80062ec:	080160ec 	.word	0x080160ec
 80062f0:	0801ee6c 	.word	0x0801ee6c

080062f4 <arm_rfft_256_fast_init_f32>:
 80062f4:	b180      	cbz	r0, 8006318 <arm_rfft_256_fast_init_f32+0x24>
 80062f6:	b430      	push	{r4, r5}
 80062f8:	4909      	ldr	r1, [pc, #36]	; (8006320 <arm_rfft_256_fast_init_f32+0x2c>)
 80062fa:	4a0a      	ldr	r2, [pc, #40]	; (8006324 <arm_rfft_256_fast_init_f32+0x30>)
 80062fc:	2380      	movs	r3, #128	; 0x80
 80062fe:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006302:	8003      	strh	r3, [r0, #0]
 8006304:	f44f 7580 	mov.w	r5, #256	; 0x100
 8006308:	24d0      	movs	r4, #208	; 0xd0
 800630a:	4b07      	ldr	r3, [pc, #28]	; (8006328 <arm_rfft_256_fast_init_f32+0x34>)
 800630c:	8205      	strh	r5, [r0, #16]
 800630e:	8184      	strh	r4, [r0, #12]
 8006310:	6143      	str	r3, [r0, #20]
 8006312:	bc30      	pop	{r4, r5}
 8006314:	2000      	movs	r0, #0
 8006316:	4770      	bx	lr
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	0800cd94 	.word	0x0800cd94
 8006324:	0801146c 	.word	0x0801146c
 8006328:	0801a1ec 	.word	0x0801a1ec

0800632c <arm_rfft_512_fast_init_f32>:
 800632c:	b190      	cbz	r0, 8006354 <arm_rfft_512_fast_init_f32+0x28>
 800632e:	b430      	push	{r4, r5}
 8006330:	490a      	ldr	r1, [pc, #40]	; (800635c <arm_rfft_512_fast_init_f32+0x30>)
 8006332:	4a0b      	ldr	r2, [pc, #44]	; (8006360 <arm_rfft_512_fast_init_f32+0x34>)
 8006334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006338:	e9c0 2101 	strd	r2, r1, [r0, #4]
 800633c:	8003      	strh	r3, [r0, #0]
 800633e:	f44f 7500 	mov.w	r5, #512	; 0x200
 8006342:	f44f 74dc 	mov.w	r4, #440	; 0x1b8
 8006346:	4b07      	ldr	r3, [pc, #28]	; (8006364 <arm_rfft_512_fast_init_f32+0x38>)
 8006348:	8205      	strh	r5, [r0, #16]
 800634a:	8184      	strh	r4, [r0, #12]
 800634c:	6143      	str	r3, [r0, #20]
 800634e:	bc30      	pop	{r4, r5}
 8006350:	2000      	movs	r0, #0
 8006352:	4770      	bx	lr
 8006354:	f04f 30ff 	mov.w	r0, #4294967295
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	0800ed1c 	.word	0x0800ed1c
 8006360:	080158ec 	.word	0x080158ec
 8006364:	0801e66c 	.word	0x0801e66c

08006368 <arm_rfft_1024_fast_init_f32>:
 8006368:	b190      	cbz	r0, 8006390 <arm_rfft_1024_fast_init_f32+0x28>
 800636a:	b430      	push	{r4, r5}
 800636c:	490a      	ldr	r1, [pc, #40]	; (8006398 <arm_rfft_1024_fast_init_f32+0x30>)
 800636e:	4a0b      	ldr	r2, [pc, #44]	; (800639c <arm_rfft_1024_fast_init_f32+0x34>)
 8006370:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006374:	e9c0 2101 	strd	r2, r1, [r0, #4]
 8006378:	8003      	strh	r3, [r0, #0]
 800637a:	f44f 6580 	mov.w	r5, #1024	; 0x400
 800637e:	f44f 74e0 	mov.w	r4, #448	; 0x1c0
 8006382:	4b07      	ldr	r3, [pc, #28]	; (80063a0 <arm_rfft_1024_fast_init_f32+0x38>)
 8006384:	8205      	strh	r5, [r0, #16]
 8006386:	8184      	strh	r4, [r0, #12]
 8006388:	6143      	str	r3, [r0, #20]
 800638a:	bc30      	pop	{r4, r5}
 800638c:	2000      	movs	r0, #0
 800638e:	4770      	bx	lr
 8006390:	f04f 30ff 	mov.w	r0, #4294967295
 8006394:	4770      	bx	lr
 8006396:	bf00      	nop
 8006398:	0800f0ec 	.word	0x0800f0ec
 800639c:	080161ec 	.word	0x080161ec
 80063a0:	080171ec 	.word	0x080171ec

080063a4 <arm_rfft_2048_fast_init_f32>:
 80063a4:	b190      	cbz	r0, 80063cc <arm_rfft_2048_fast_init_f32+0x28>
 80063a6:	b430      	push	{r4, r5}
 80063a8:	490a      	ldr	r1, [pc, #40]	; (80063d4 <arm_rfft_2048_fast_init_f32+0x30>)
 80063aa:	4a0b      	ldr	r2, [pc, #44]	; (80063d8 <arm_rfft_2048_fast_init_f32+0x34>)
 80063ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063b0:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80063b4:	8003      	strh	r3, [r0, #0]
 80063b6:	f44f 6500 	mov.w	r5, #2048	; 0x800
 80063ba:	f44f 64e1 	mov.w	r4, #1800	; 0x708
 80063be:	4b07      	ldr	r3, [pc, #28]	; (80063dc <arm_rfft_2048_fast_init_f32+0x38>)
 80063c0:	8205      	strh	r5, [r0, #16]
 80063c2:	8184      	strh	r4, [r0, #12]
 80063c4:	6143      	str	r3, [r0, #20]
 80063c6:	bc30      	pop	{r4, r5}
 80063c8:	2000      	movs	r0, #0
 80063ca:	4770      	bx	lr
 80063cc:	f04f 30ff 	mov.w	r0, #4294967295
 80063d0:	4770      	bx	lr
 80063d2:	bf00      	nop
 80063d4:	0800bf84 	.word	0x0800bf84
 80063d8:	0800f46c 	.word	0x0800f46c
 80063dc:	080181ec 	.word	0x080181ec

080063e0 <arm_rfft_4096_fast_init_f32>:
 80063e0:	b190      	cbz	r0, 8006408 <arm_rfft_4096_fast_init_f32+0x28>
 80063e2:	b430      	push	{r4, r5}
 80063e4:	490a      	ldr	r1, [pc, #40]	; (8006410 <arm_rfft_4096_fast_init_f32+0x30>)
 80063e6:	4a0b      	ldr	r2, [pc, #44]	; (8006414 <arm_rfft_4096_fast_init_f32+0x34>)
 80063e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80063ec:	e9c0 2101 	strd	r2, r1, [r0, #4]
 80063f0:	8003      	strh	r3, [r0, #0]
 80063f2:	f44f 5580 	mov.w	r5, #4096	; 0x1000
 80063f6:	f44f 646e 	mov.w	r4, #3808	; 0xee0
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <arm_rfft_4096_fast_init_f32+0x38>)
 80063fc:	8205      	strh	r5, [r0, #16]
 80063fe:	8184      	strh	r4, [r0, #12]
 8006400:	6143      	str	r3, [r0, #20]
 8006402:	bc30      	pop	{r4, r5}
 8006404:	2000      	movs	r0, #0
 8006406:	4770      	bx	lr
 8006408:	f04f 30ff 	mov.w	r0, #4294967295
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	0800cf5c 	.word	0x0800cf5c
 8006414:	080118ec 	.word	0x080118ec
 8006418:	0801a66c 	.word	0x0801a66c

0800641c <arm_rfft_fast_init_f32>:
 800641c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006420:	d01f      	beq.n	8006462 <arm_rfft_fast_init_f32+0x46>
 8006422:	d90b      	bls.n	800643c <arm_rfft_fast_init_f32+0x20>
 8006424:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8006428:	d019      	beq.n	800645e <arm_rfft_fast_init_f32+0x42>
 800642a:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 800642e:	d012      	beq.n	8006456 <arm_rfft_fast_init_f32+0x3a>
 8006430:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006434:	d00d      	beq.n	8006452 <arm_rfft_fast_init_f32+0x36>
 8006436:	f04f 30ff 	mov.w	r0, #4294967295
 800643a:	4770      	bx	lr
 800643c:	2940      	cmp	r1, #64	; 0x40
 800643e:	d00c      	beq.n	800645a <arm_rfft_fast_init_f32+0x3e>
 8006440:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8006444:	d003      	beq.n	800644e <arm_rfft_fast_init_f32+0x32>
 8006446:	2920      	cmp	r1, #32
 8006448:	d1f5      	bne.n	8006436 <arm_rfft_fast_init_f32+0x1a>
 800644a:	4b07      	ldr	r3, [pc, #28]	; (8006468 <arm_rfft_fast_init_f32+0x4c>)
 800644c:	4718      	bx	r3
 800644e:	4b07      	ldr	r3, [pc, #28]	; (800646c <arm_rfft_fast_init_f32+0x50>)
 8006450:	4718      	bx	r3
 8006452:	4b07      	ldr	r3, [pc, #28]	; (8006470 <arm_rfft_fast_init_f32+0x54>)
 8006454:	4718      	bx	r3
 8006456:	4b07      	ldr	r3, [pc, #28]	; (8006474 <arm_rfft_fast_init_f32+0x58>)
 8006458:	4718      	bx	r3
 800645a:	4b07      	ldr	r3, [pc, #28]	; (8006478 <arm_rfft_fast_init_f32+0x5c>)
 800645c:	e7f6      	b.n	800644c <arm_rfft_fast_init_f32+0x30>
 800645e:	4b07      	ldr	r3, [pc, #28]	; (800647c <arm_rfft_fast_init_f32+0x60>)
 8006460:	e7f4      	b.n	800644c <arm_rfft_fast_init_f32+0x30>
 8006462:	4b07      	ldr	r3, [pc, #28]	; (8006480 <arm_rfft_fast_init_f32+0x64>)
 8006464:	e7f2      	b.n	800644c <arm_rfft_fast_init_f32+0x30>
 8006466:	bf00      	nop
 8006468:	0800628d 	.word	0x0800628d
 800646c:	080062f5 	.word	0x080062f5
 8006470:	08006369 	.word	0x08006369
 8006474:	080063e1 	.word	0x080063e1
 8006478:	080062c1 	.word	0x080062c1
 800647c:	080063a5 	.word	0x080063a5
 8006480:	0800632d 	.word	0x0800632d

08006484 <stage_rfft_f32>:
 8006484:	b410      	push	{r4}
 8006486:	edd1 7a00 	vldr	s15, [r1]
 800648a:	ed91 7a01 	vldr	s14, [r1, #4]
 800648e:	8804      	ldrh	r4, [r0, #0]
 8006490:	6940      	ldr	r0, [r0, #20]
 8006492:	ee37 7a07 	vadd.f32	s14, s14, s14
 8006496:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800649a:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 800649e:	ee77 6a87 	vadd.f32	s13, s15, s14
 80064a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80064a6:	3c01      	subs	r4, #1
 80064a8:	ee26 7a84 	vmul.f32	s14, s13, s8
 80064ac:	ee67 7a84 	vmul.f32	s15, s15, s8
 80064b0:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 80064b4:	ed82 7a00 	vstr	s14, [r2]
 80064b8:	edc2 7a01 	vstr	s15, [r2, #4]
 80064bc:	3010      	adds	r0, #16
 80064be:	3210      	adds	r2, #16
 80064c0:	3b08      	subs	r3, #8
 80064c2:	3110      	adds	r1, #16
 80064c4:	ed11 5a02 	vldr	s10, [r1, #-8]
 80064c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80064cc:	ed50 6a02 	vldr	s13, [r0, #-8]
 80064d0:	edd3 4a03 	vldr	s9, [r3, #12]
 80064d4:	ed51 7a01 	vldr	s15, [r1, #-4]
 80064d8:	ed10 6a01 	vldr	s12, [r0, #-4]
 80064dc:	ee77 5a45 	vsub.f32	s11, s14, s10
 80064e0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80064e4:	ee66 3aa5 	vmul.f32	s7, s13, s11
 80064e8:	ee34 5aa7 	vadd.f32	s10, s9, s15
 80064ec:	ee66 5a25 	vmul.f32	s11, s12, s11
 80064f0:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80064f4:	ee37 7a23 	vadd.f32	s14, s14, s7
 80064f8:	ee66 6a85 	vmul.f32	s13, s13, s10
 80064fc:	ee26 6a05 	vmul.f32	s12, s12, s10
 8006500:	ee77 7aa5 	vadd.f32	s15, s15, s11
 8006504:	ee37 7a06 	vadd.f32	s14, s14, s12
 8006508:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800650c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006510:	ee67 7a84 	vmul.f32	s15, s15, s8
 8006514:	3c01      	subs	r4, #1
 8006516:	ed02 7a02 	vstr	s14, [r2, #-8]
 800651a:	ed42 7a01 	vstr	s15, [r2, #-4]
 800651e:	f1a3 0308 	sub.w	r3, r3, #8
 8006522:	f101 0108 	add.w	r1, r1, #8
 8006526:	f100 0008 	add.w	r0, r0, #8
 800652a:	f102 0208 	add.w	r2, r2, #8
 800652e:	d1c9      	bne.n	80064c4 <stage_rfft_f32+0x40>
 8006530:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop

08006538 <merge_rfft_f32>:
 8006538:	b410      	push	{r4}
 800653a:	edd1 7a00 	vldr	s15, [r1]
 800653e:	edd1 6a01 	vldr	s13, [r1, #4]
 8006542:	8804      	ldrh	r4, [r0, #0]
 8006544:	6940      	ldr	r0, [r0, #20]
 8006546:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800654a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800654e:	eeb6 4a00 	vmov.f32	s8, #96	; 0x3f000000  0.5
 8006552:	ee27 7a04 	vmul.f32	s14, s14, s8
 8006556:	ee67 7a84 	vmul.f32	s15, s15, s8
 800655a:	3c01      	subs	r4, #1
 800655c:	ed82 7a00 	vstr	s14, [r2]
 8006560:	edc2 7a01 	vstr	s15, [r2, #4]
 8006564:	b3dc      	cbz	r4, 80065de <merge_rfft_f32+0xa6>
 8006566:	00e3      	lsls	r3, r4, #3
 8006568:	3b08      	subs	r3, #8
 800656a:	440b      	add	r3, r1
 800656c:	3010      	adds	r0, #16
 800656e:	3210      	adds	r2, #16
 8006570:	3110      	adds	r1, #16
 8006572:	ed11 5a02 	vldr	s10, [r1, #-8]
 8006576:	ed93 7a02 	vldr	s14, [r3, #8]
 800657a:	ed50 6a02 	vldr	s13, [r0, #-8]
 800657e:	edd3 4a03 	vldr	s9, [r3, #12]
 8006582:	ed51 7a01 	vldr	s15, [r1, #-4]
 8006586:	ed10 6a01 	vldr	s12, [r0, #-4]
 800658a:	ee75 5a47 	vsub.f32	s11, s10, s14
 800658e:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006592:	ee66 3aa5 	vmul.f32	s7, s13, s11
 8006596:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800659a:	ee66 5a25 	vmul.f32	s11, s12, s11
 800659e:	ee77 7ae4 	vsub.f32	s15, s15, s9
 80065a2:	ee37 7a63 	vsub.f32	s14, s14, s7
 80065a6:	ee66 6a85 	vmul.f32	s13, s13, s10
 80065aa:	ee26 6a05 	vmul.f32	s12, s12, s10
 80065ae:	ee77 7aa5 	vadd.f32	s15, s15, s11
 80065b2:	ee37 7a46 	vsub.f32	s14, s14, s12
 80065b6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80065ba:	ee27 7a04 	vmul.f32	s14, s14, s8
 80065be:	ee67 7a84 	vmul.f32	s15, s15, s8
 80065c2:	3c01      	subs	r4, #1
 80065c4:	ed02 7a02 	vstr	s14, [r2, #-8]
 80065c8:	ed42 7a01 	vstr	s15, [r2, #-4]
 80065cc:	f1a3 0308 	sub.w	r3, r3, #8
 80065d0:	f101 0108 	add.w	r1, r1, #8
 80065d4:	f100 0008 	add.w	r0, r0, #8
 80065d8:	f102 0208 	add.w	r2, r2, #8
 80065dc:	d1c9      	bne.n	8006572 <merge_rfft_f32+0x3a>
 80065de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <arm_rfft_fast_f32>:
 80065e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065e8:	8a05      	ldrh	r5, [r0, #16]
 80065ea:	086d      	lsrs	r5, r5, #1
 80065ec:	8005      	strh	r5, [r0, #0]
 80065ee:	4604      	mov	r4, r0
 80065f0:	4616      	mov	r6, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	b14b      	cbz	r3, 800660a <arm_rfft_fast_f32+0x26>
 80065f6:	f7ff ff9f 	bl	8006538 <merge_rfft_f32>
 80065fa:	462a      	mov	r2, r5
 80065fc:	4631      	mov	r1, r6
 80065fe:	4620      	mov	r0, r4
 8006600:	2301      	movs	r3, #1
 8006602:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006606:	f000 bb33 	b.w	8006c70 <arm_cfft_f32>
 800660a:	460f      	mov	r7, r1
 800660c:	461a      	mov	r2, r3
 800660e:	2301      	movs	r3, #1
 8006610:	f000 fb2e 	bl	8006c70 <arm_cfft_f32>
 8006614:	4632      	mov	r2, r6
 8006616:	4639      	mov	r1, r7
 8006618:	4620      	mov	r0, r4
 800661a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800661e:	f7ff bf31 	b.w	8006484 <stage_rfft_f32>
 8006622:	bf00      	nop

08006624 <arm_cfft_radix8by2_f32>:
 8006624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006628:	ed2d 8b08 	vpush	{d8-d11}
 800662c:	4607      	mov	r7, r0
 800662e:	4608      	mov	r0, r1
 8006630:	f8b7 c000 	ldrh.w	ip, [r7]
 8006634:	687a      	ldr	r2, [r7, #4]
 8006636:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800663a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800663e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006642:	f000 80b0 	beq.w	80067a6 <arm_cfft_radix8by2_f32+0x182>
 8006646:	008c      	lsls	r4, r1, #2
 8006648:	3410      	adds	r4, #16
 800664a:	f100 0310 	add.w	r3, r0, #16
 800664e:	1906      	adds	r6, r0, r4
 8006650:	3210      	adds	r2, #16
 8006652:	4444      	add	r4, r8
 8006654:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 8006658:	f108 0510 	add.w	r5, r8, #16
 800665c:	ed15 2a04 	vldr	s4, [r5, #-16]
 8006660:	ed55 2a03 	vldr	s5, [r5, #-12]
 8006664:	ed54 4a04 	vldr	s9, [r4, #-16]
 8006668:	ed14 4a03 	vldr	s8, [r4, #-12]
 800666c:	ed14 6a02 	vldr	s12, [r4, #-8]
 8006670:	ed54 5a01 	vldr	s11, [r4, #-4]
 8006674:	ed53 3a04 	vldr	s7, [r3, #-16]
 8006678:	ed15 0a02 	vldr	s0, [r5, #-8]
 800667c:	ed55 0a01 	vldr	s1, [r5, #-4]
 8006680:	ed56 6a04 	vldr	s13, [r6, #-16]
 8006684:	ed16 3a03 	vldr	s6, [r6, #-12]
 8006688:	ed13 7a03 	vldr	s14, [r3, #-12]
 800668c:	ed13 5a02 	vldr	s10, [r3, #-8]
 8006690:	ed53 7a01 	vldr	s15, [r3, #-4]
 8006694:	ed16 1a02 	vldr	s2, [r6, #-8]
 8006698:	ed56 1a01 	vldr	s3, [r6, #-4]
 800669c:	ee73 ba82 	vadd.f32	s23, s7, s4
 80066a0:	ee37 ba22 	vadd.f32	s22, s14, s5
 80066a4:	ee76 9aa4 	vadd.f32	s19, s13, s9
 80066a8:	ee33 9a04 	vadd.f32	s18, s6, s8
 80066ac:	ee31 8aa5 	vadd.f32	s16, s3, s11
 80066b0:	ee75 aa00 	vadd.f32	s21, s10, s0
 80066b4:	ee37 aaa0 	vadd.f32	s20, s15, s1
 80066b8:	ee71 8a06 	vadd.f32	s17, s2, s12
 80066bc:	ed43 ba04 	vstr	s23, [r3, #-16]
 80066c0:	ed03 ba03 	vstr	s22, [r3, #-12]
 80066c4:	ed43 aa02 	vstr	s21, [r3, #-8]
 80066c8:	ed03 aa01 	vstr	s20, [r3, #-4]
 80066cc:	ed06 8a01 	vstr	s16, [r6, #-4]
 80066d0:	ed46 9a04 	vstr	s19, [r6, #-16]
 80066d4:	ed06 9a03 	vstr	s18, [r6, #-12]
 80066d8:	ed46 8a02 	vstr	s17, [r6, #-8]
 80066dc:	ee37 7a62 	vsub.f32	s14, s14, s5
 80066e0:	ee74 4ae6 	vsub.f32	s9, s9, s13
 80066e4:	ee34 4a43 	vsub.f32	s8, s8, s6
 80066e8:	ed52 6a03 	vldr	s13, [r2, #-12]
 80066ec:	ed12 3a04 	vldr	s6, [r2, #-16]
 80066f0:	ee73 3ac2 	vsub.f32	s7, s7, s4
 80066f4:	ee27 8a26 	vmul.f32	s16, s14, s13
 80066f8:	ee64 2aa6 	vmul.f32	s5, s9, s13
 80066fc:	ee23 2a83 	vmul.f32	s4, s7, s6
 8006700:	ee64 4a83 	vmul.f32	s9, s9, s6
 8006704:	ee63 3aa6 	vmul.f32	s7, s7, s13
 8006708:	ee27 7a03 	vmul.f32	s14, s14, s6
 800670c:	ee64 6a26 	vmul.f32	s13, s8, s13
 8006710:	ee24 4a03 	vmul.f32	s8, s8, s6
 8006714:	ee37 7a63 	vsub.f32	s14, s14, s7
 8006718:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800671c:	ee32 4ac4 	vsub.f32	s8, s5, s8
 8006720:	ee32 3a08 	vadd.f32	s6, s4, s16
 8006724:	ed05 7a03 	vstr	s14, [r5, #-12]
 8006728:	ed05 3a04 	vstr	s6, [r5, #-16]
 800672c:	ed04 4a04 	vstr	s8, [r4, #-16]
 8006730:	ed44 6a03 	vstr	s13, [r4, #-12]
 8006734:	ed12 7a01 	vldr	s14, [r2, #-4]
 8006738:	ee76 6a41 	vsub.f32	s13, s12, s2
 800673c:	ee35 5a40 	vsub.f32	s10, s10, s0
 8006740:	ee35 6ae1 	vsub.f32	s12, s11, s3
 8006744:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8006748:	ed52 5a02 	vldr	s11, [r2, #-8]
 800674c:	ee67 3a87 	vmul.f32	s7, s15, s14
 8006750:	ee66 4a87 	vmul.f32	s9, s13, s14
 8006754:	ee25 4a25 	vmul.f32	s8, s10, s11
 8006758:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800675c:	ee25 5a07 	vmul.f32	s10, s10, s14
 8006760:	ee66 6aa5 	vmul.f32	s13, s13, s11
 8006764:	ee26 7a07 	vmul.f32	s14, s12, s14
 8006768:	ee26 6a25 	vmul.f32	s12, s12, s11
 800676c:	ee77 7ac5 	vsub.f32	s15, s15, s10
 8006770:	ee74 5a23 	vadd.f32	s11, s8, s7
 8006774:	ee34 6ac6 	vsub.f32	s12, s9, s12
 8006778:	ee37 7a26 	vadd.f32	s14, s14, s13
 800677c:	3310      	adds	r3, #16
 800677e:	4563      	cmp	r3, ip
 8006780:	ed45 5a02 	vstr	s11, [r5, #-8]
 8006784:	f106 0610 	add.w	r6, r6, #16
 8006788:	ed45 7a01 	vstr	s15, [r5, #-4]
 800678c:	f102 0210 	add.w	r2, r2, #16
 8006790:	ed04 6a02 	vstr	s12, [r4, #-8]
 8006794:	ed04 7a01 	vstr	s14, [r4, #-4]
 8006798:	f105 0510 	add.w	r5, r5, #16
 800679c:	f104 0410 	add.w	r4, r4, #16
 80067a0:	f47f af5c 	bne.w	800665c <arm_cfft_radix8by2_f32+0x38>
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	b28c      	uxth	r4, r1
 80067a8:	4621      	mov	r1, r4
 80067aa:	2302      	movs	r3, #2
 80067ac:	f000 fc1c 	bl	8006fe8 <arm_radix8_butterfly_f32>
 80067b0:	ecbd 8b08 	vpop	{d8-d11}
 80067b4:	4621      	mov	r1, r4
 80067b6:	687a      	ldr	r2, [r7, #4]
 80067b8:	4640      	mov	r0, r8
 80067ba:	2302      	movs	r3, #2
 80067bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80067c0:	f000 bc12 	b.w	8006fe8 <arm_radix8_butterfly_f32>

080067c4 <arm_cfft_radix8by4_f32>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	ed2d 8b0a 	vpush	{d8-d12}
 80067cc:	b08d      	sub	sp, #52	; 0x34
 80067ce:	460d      	mov	r5, r1
 80067d0:	910b      	str	r1, [sp, #44]	; 0x2c
 80067d2:	8801      	ldrh	r1, [r0, #0]
 80067d4:	6842      	ldr	r2, [r0, #4]
 80067d6:	900a      	str	r0, [sp, #40]	; 0x28
 80067d8:	0849      	lsrs	r1, r1, #1
 80067da:	008b      	lsls	r3, r1, #2
 80067dc:	18ee      	adds	r6, r5, r3
 80067de:	18f0      	adds	r0, r6, r3
 80067e0:	edd0 5a00 	vldr	s11, [r0]
 80067e4:	edd5 7a00 	vldr	s15, [r5]
 80067e8:	ed96 7a00 	vldr	s14, [r6]
 80067ec:	edd0 3a01 	vldr	s7, [r0, #4]
 80067f0:	ed96 4a01 	vldr	s8, [r6, #4]
 80067f4:	ed95 5a01 	vldr	s10, [r5, #4]
 80067f8:	9008      	str	r0, [sp, #32]
 80067fa:	ee37 6aa5 	vadd.f32	s12, s15, s11
 80067fe:	18c7      	adds	r7, r0, r3
 8006800:	edd7 4a00 	vldr	s9, [r7]
 8006804:	ed97 3a01 	vldr	s6, [r7, #4]
 8006808:	9701      	str	r7, [sp, #4]
 800680a:	ee77 6a06 	vadd.f32	s13, s14, s12
 800680e:	462c      	mov	r4, r5
 8006810:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8006814:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8006818:	ee16 ca90 	vmov	ip, s13
 800681c:	f844 cb08 	str.w	ip, [r4], #8
 8006820:	ee75 6a23 	vadd.f32	s13, s10, s7
 8006824:	edd6 5a01 	vldr	s11, [r6, #4]
 8006828:	edd7 2a01 	vldr	s5, [r7, #4]
 800682c:	9404      	str	r4, [sp, #16]
 800682e:	ee35 5a63 	vsub.f32	s10, s10, s7
 8006832:	ee74 3a27 	vadd.f32	s7, s8, s15
 8006836:	ee36 6a47 	vsub.f32	s12, s12, s14
 800683a:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800683e:	ee73 3ac3 	vsub.f32	s7, s7, s6
 8006842:	0849      	lsrs	r1, r1, #1
 8006844:	f102 0e08 	add.w	lr, r2, #8
 8006848:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800684c:	ee77 7ac4 	vsub.f32	s15, s15, s8
 8006850:	9109      	str	r1, [sp, #36]	; 0x24
 8006852:	ee35 4a47 	vsub.f32	s8, s10, s14
 8006856:	f1a1 0902 	sub.w	r9, r1, #2
 800685a:	f8cd e00c 	str.w	lr, [sp, #12]
 800685e:	4631      	mov	r1, r6
 8006860:	ee13 ea90 	vmov	lr, s7
 8006864:	ee36 6a64 	vsub.f32	s12, s12, s9
 8006868:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800686c:	4604      	mov	r4, r0
 800686e:	edc5 5a01 	vstr	s11, [r5, #4]
 8006872:	ee37 7a05 	vadd.f32	s14, s14, s10
 8006876:	f841 eb08 	str.w	lr, [r1], #8
 800687a:	ee34 5a24 	vadd.f32	s10, s8, s9
 800687e:	ee16 ea10 	vmov	lr, s12
 8006882:	ed86 5a01 	vstr	s10, [r6, #4]
 8006886:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800688a:	f844 eb08 	str.w	lr, [r4], #8
 800688e:	ee77 7a83 	vadd.f32	s15, s15, s6
 8006892:	edc0 6a01 	vstr	s13, [r0, #4]
 8006896:	9405      	str	r4, [sp, #20]
 8006898:	4604      	mov	r4, r0
 800689a:	ee17 0a90 	vmov	r0, s15
 800689e:	9106      	str	r1, [sp, #24]
 80068a0:	ee37 7a64 	vsub.f32	s14, s14, s9
 80068a4:	f102 0110 	add.w	r1, r2, #16
 80068a8:	46bc      	mov	ip, r7
 80068aa:	9100      	str	r1, [sp, #0]
 80068ac:	f847 0b08 	str.w	r0, [r7], #8
 80068b0:	f102 0118 	add.w	r1, r2, #24
 80068b4:	ea5f 0059 	movs.w	r0, r9, lsr #1
 80068b8:	9102      	str	r1, [sp, #8]
 80068ba:	ed8c 7a01 	vstr	s14, [ip, #4]
 80068be:	9007      	str	r0, [sp, #28]
 80068c0:	f000 8134 	beq.w	8006b2c <arm_cfft_radix8by4_f32+0x368>
 80068c4:	f102 0920 	add.w	r9, r2, #32
 80068c8:	f102 0830 	add.w	r8, r2, #48	; 0x30
 80068cc:	9a01      	ldr	r2, [sp, #4]
 80068ce:	f8dd a000 	ldr.w	sl, [sp]
 80068d2:	3b0c      	subs	r3, #12
 80068d4:	4683      	mov	fp, r0
 80068d6:	4463      	add	r3, ip
 80068d8:	f105 0e10 	add.w	lr, r5, #16
 80068dc:	f1a4 010c 	sub.w	r1, r4, #12
 80068e0:	f104 0510 	add.w	r5, r4, #16
 80068e4:	f1a6 0c0c 	sub.w	ip, r6, #12
 80068e8:	f1a2 040c 	sub.w	r4, r2, #12
 80068ec:	f106 0010 	add.w	r0, r6, #16
 80068f0:	3210      	adds	r2, #16
 80068f2:	ed1e 5a02 	vldr	s10, [lr, #-8]
 80068f6:	ed55 5a02 	vldr	s11, [r5, #-8]
 80068fa:	ed50 7a02 	vldr	s15, [r0, #-8]
 80068fe:	ed52 1a02 	vldr	s3, [r2, #-8]
 8006902:	ed55 6a01 	vldr	s13, [r5, #-4]
 8006906:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800690a:	ed12 1a01 	vldr	s2, [r2, #-4]
 800690e:	ed10 8a01 	vldr	s16, [r0, #-4]
 8006912:	ee35 4a25 	vadd.f32	s8, s10, s11
 8006916:	ee30 6a26 	vadd.f32	s12, s0, s13
 800691a:	ee37 7a84 	vadd.f32	s14, s15, s8
 800691e:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006922:	ee37 7a21 	vadd.f32	s14, s14, s3
 8006926:	ee75 5a65 	vsub.f32	s11, s10, s11
 800692a:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800692e:	ed10 7a01 	vldr	s14, [r0, #-4]
 8006932:	ed52 6a01 	vldr	s13, [r2, #-4]
 8006936:	ee36 7a07 	vadd.f32	s14, s12, s14
 800693a:	ee78 aa25 	vadd.f32	s21, s16, s11
 800693e:	ee37 7a26 	vadd.f32	s14, s14, s13
 8006942:	ee70 3a67 	vsub.f32	s7, s0, s15
 8006946:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800694a:	ed94 7a02 	vldr	s14, [r4, #8]
 800694e:	ed9c 2a02 	vldr	s4, [ip, #8]
 8006952:	ed91 ba02 	vldr	s22, [r1, #8]
 8006956:	edd3 9a02 	vldr	s19, [r3, #8]
 800695a:	edd4 2a01 	vldr	s5, [r4, #4]
 800695e:	ed9c 9a01 	vldr	s18, [ip, #4]
 8006962:	ed93 5a01 	vldr	s10, [r3, #4]
 8006966:	edd1 0a01 	vldr	s1, [r1, #4]
 800696a:	ee72 6a07 	vadd.f32	s13, s4, s14
 800696e:	ee32 2a47 	vsub.f32	s4, s4, s14
 8006972:	ee7b 8a26 	vadd.f32	s17, s22, s13
 8006976:	ee79 4a22 	vadd.f32	s9, s18, s5
 800697a:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800697e:	ee79 2a62 	vsub.f32	s5, s18, s5
 8006982:	ed8c 7a02 	vstr	s14, [ip, #8]
 8006986:	ed91 7a01 	vldr	s14, [r1, #4]
 800698a:	edd3 8a01 	vldr	s17, [r3, #4]
 800698e:	ee34 7a87 	vadd.f32	s14, s9, s14
 8006992:	ee3b 3a69 	vsub.f32	s6, s22, s19
 8006996:	ee37 7a28 	vadd.f32	s14, s14, s17
 800699a:	ee32 9a60 	vsub.f32	s18, s4, s1
 800699e:	ed8c 7a01 	vstr	s14, [ip, #4]
 80069a2:	ed1a 7a01 	vldr	s14, [sl, #-4]
 80069a6:	ed1a aa02 	vldr	s20, [sl, #-8]
 80069aa:	ee73 8a22 	vadd.f32	s17, s6, s5
 80069ae:	ee39 9a05 	vadd.f32	s18, s18, s10
 80069b2:	ee7a aac1 	vsub.f32	s21, s21, s2
 80069b6:	ee73 3aa1 	vadd.f32	s7, s7, s3
 80069ba:	ee2a ca8a 	vmul.f32	s24, s21, s20
 80069be:	ee69 ba07 	vmul.f32	s23, s18, s14
 80069c2:	ee6a aa87 	vmul.f32	s21, s21, s14
 80069c6:	ee29 9a0a 	vmul.f32	s18, s18, s20
 80069ca:	ee63 ca87 	vmul.f32	s25, s7, s14
 80069ce:	ee63 3a8a 	vmul.f32	s7, s7, s20
 80069d2:	ee28 aa8a 	vmul.f32	s20, s17, s20
 80069d6:	ee68 8a87 	vmul.f32	s17, s17, s14
 80069da:	ee73 3aea 	vsub.f32	s7, s7, s21
 80069de:	ee78 8a89 	vadd.f32	s17, s17, s18
 80069e2:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 80069e6:	ee3b aaca 	vsub.f32	s20, s23, s20
 80069ea:	ee34 4a67 	vsub.f32	s8, s8, s15
 80069ee:	ee76 6acb 	vsub.f32	s13, s13, s22
 80069f2:	ee36 6a48 	vsub.f32	s12, s12, s16
 80069f6:	ee74 4ae0 	vsub.f32	s9, s9, s1
 80069fa:	ed00 7a02 	vstr	s14, [r0, #-8]
 80069fe:	ed40 3a01 	vstr	s7, [r0, #-4]
 8006a02:	edc1 8a01 	vstr	s17, [r1, #4]
 8006a06:	ed81 aa02 	vstr	s20, [r1, #8]
 8006a0a:	ed59 3a04 	vldr	s7, [r9, #-16]
 8006a0e:	ee36 7ae9 	vsub.f32	s14, s13, s19
 8006a12:	ee74 4ac5 	vsub.f32	s9, s9, s10
 8006a16:	ed59 6a03 	vldr	s13, [r9, #-12]
 8006a1a:	ee34 4a61 	vsub.f32	s8, s8, s3
 8006a1e:	ee36 6a41 	vsub.f32	s12, s12, s2
 8006a22:	ee67 8a63 	vnmul.f32	s17, s14, s7
 8006a26:	ee66 9a26 	vmul.f32	s19, s12, s13
 8006a2a:	ee24 9a23 	vmul.f32	s18, s8, s7
 8006a2e:	ee26 6a23 	vmul.f32	s12, s12, s7
 8006a32:	ee24 4a26 	vmul.f32	s8, s8, s13
 8006a36:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006a3a:	ee64 6aa6 	vmul.f32	s13, s9, s13
 8006a3e:	ee64 4aa3 	vmul.f32	s9, s9, s7
 8006a42:	ee36 6a44 	vsub.f32	s12, s12, s8
 8006a46:	ee37 7a64 	vsub.f32	s14, s14, s9
 8006a4a:	ee38 4ae6 	vsub.f32	s8, s17, s13
 8006a4e:	ee79 3a29 	vadd.f32	s7, s18, s19
 8006a52:	ee75 6a60 	vsub.f32	s13, s10, s1
 8006a56:	ee75 5ac8 	vsub.f32	s11, s11, s16
 8006a5a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8006a5e:	ed45 3a02 	vstr	s7, [r5, #-8]
 8006a62:	ed05 6a01 	vstr	s12, [r5, #-4]
 8006a66:	ed84 7a01 	vstr	s14, [r4, #4]
 8006a6a:	ed84 4a02 	vstr	s8, [r4, #8]
 8006a6e:	ee35 6a81 	vadd.f32	s12, s11, s2
 8006a72:	ee36 7ac2 	vsub.f32	s14, s13, s4
 8006a76:	ed58 5a06 	vldr	s11, [r8, #-24]	; 0xffffffe8
 8006a7a:	ed58 6a05 	vldr	s13, [r8, #-20]	; 0xffffffec
 8006a7e:	ee33 3a62 	vsub.f32	s6, s6, s5
 8006a82:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8006a86:	ee67 2a26 	vmul.f32	s5, s14, s13
 8006a8a:	ee67 4aa6 	vmul.f32	s9, s15, s13
 8006a8e:	ee26 5a25 	vmul.f32	s10, s12, s11
 8006a92:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006a96:	ee26 6a26 	vmul.f32	s12, s12, s13
 8006a9a:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006a9e:	ee63 6a26 	vmul.f32	s13, s6, s13
 8006aa2:	ee23 3a25 	vmul.f32	s6, s6, s11
 8006aa6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8006aaa:	ee75 5a24 	vadd.f32	s11, s10, s9
 8006aae:	ee32 3ac3 	vsub.f32	s6, s5, s6
 8006ab2:	ee36 7a87 	vadd.f32	s14, s13, s14
 8006ab6:	f1bb 0b01 	subs.w	fp, fp, #1
 8006aba:	ed42 5a02 	vstr	s11, [r2, #-8]
 8006abe:	ed42 7a01 	vstr	s15, [r2, #-4]
 8006ac2:	f10e 0e08 	add.w	lr, lr, #8
 8006ac6:	ed83 3a02 	vstr	s6, [r3, #8]
 8006aca:	ed83 7a01 	vstr	s14, [r3, #4]
 8006ace:	f1ac 0c08 	sub.w	ip, ip, #8
 8006ad2:	f10a 0a08 	add.w	sl, sl, #8
 8006ad6:	f100 0008 	add.w	r0, r0, #8
 8006ada:	f1a1 0108 	sub.w	r1, r1, #8
 8006ade:	f109 0910 	add.w	r9, r9, #16
 8006ae2:	f105 0508 	add.w	r5, r5, #8
 8006ae6:	f1a4 0408 	sub.w	r4, r4, #8
 8006aea:	f108 0818 	add.w	r8, r8, #24
 8006aee:	f102 0208 	add.w	r2, r2, #8
 8006af2:	f1a3 0308 	sub.w	r3, r3, #8
 8006af6:	f47f aefc 	bne.w	80068f2 <arm_cfft_radix8by4_f32+0x12e>
 8006afa:	9907      	ldr	r1, [sp, #28]
 8006afc:	9800      	ldr	r0, [sp, #0]
 8006afe:	00cb      	lsls	r3, r1, #3
 8006b00:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 8006b04:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8006b08:	9100      	str	r1, [sp, #0]
 8006b0a:	9904      	ldr	r1, [sp, #16]
 8006b0c:	4419      	add	r1, r3
 8006b0e:	9104      	str	r1, [sp, #16]
 8006b10:	9903      	ldr	r1, [sp, #12]
 8006b12:	4419      	add	r1, r3
 8006b14:	9103      	str	r1, [sp, #12]
 8006b16:	9906      	ldr	r1, [sp, #24]
 8006b18:	4419      	add	r1, r3
 8006b1a:	9106      	str	r1, [sp, #24]
 8006b1c:	9905      	ldr	r1, [sp, #20]
 8006b1e:	441f      	add	r7, r3
 8006b20:	4419      	add	r1, r3
 8006b22:	9b02      	ldr	r3, [sp, #8]
 8006b24:	9105      	str	r1, [sp, #20]
 8006b26:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b2a:	9302      	str	r3, [sp, #8]
 8006b2c:	9904      	ldr	r1, [sp, #16]
 8006b2e:	9805      	ldr	r0, [sp, #20]
 8006b30:	ed91 4a00 	vldr	s8, [r1]
 8006b34:	edd0 6a00 	vldr	s13, [r0]
 8006b38:	9b06      	ldr	r3, [sp, #24]
 8006b3a:	ed97 3a00 	vldr	s6, [r7]
 8006b3e:	edd3 7a00 	vldr	s15, [r3]
 8006b42:	edd0 4a01 	vldr	s9, [r0, #4]
 8006b46:	edd1 3a01 	vldr	s7, [r1, #4]
 8006b4a:	ed97 2a01 	vldr	s4, [r7, #4]
 8006b4e:	ed93 7a01 	vldr	s14, [r3, #4]
 8006b52:	9a03      	ldr	r2, [sp, #12]
 8006b54:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8006b58:	ee34 6a26 	vadd.f32	s12, s8, s13
 8006b5c:	ee73 5aa4 	vadd.f32	s11, s7, s9
 8006b60:	ee37 5a86 	vadd.f32	s10, s15, s12
 8006b64:	ee73 3ae4 	vsub.f32	s7, s7, s9
 8006b68:	ee35 5a03 	vadd.f32	s10, s10, s6
 8006b6c:	ee74 6a66 	vsub.f32	s13, s8, s13
 8006b70:	ed81 5a00 	vstr	s10, [r1]
 8006b74:	ed93 5a01 	vldr	s10, [r3, #4]
 8006b78:	edd7 4a01 	vldr	s9, [r7, #4]
 8006b7c:	ee35 5a85 	vadd.f32	s10, s11, s10
 8006b80:	ee37 4a26 	vadd.f32	s8, s14, s13
 8006b84:	ee35 5a24 	vadd.f32	s10, s10, s9
 8006b88:	ee73 4ae7 	vsub.f32	s9, s7, s15
 8006b8c:	ed81 5a01 	vstr	s10, [r1, #4]
 8006b90:	edd2 1a00 	vldr	s3, [r2]
 8006b94:	edd2 2a01 	vldr	s5, [r2, #4]
 8006b98:	ee34 5a83 	vadd.f32	s10, s9, s6
 8006b9c:	ee34 4a42 	vsub.f32	s8, s8, s4
 8006ba0:	ee36 6a67 	vsub.f32	s12, s12, s15
 8006ba4:	ee64 4a21 	vmul.f32	s9, s8, s3
 8006ba8:	ee24 4a22 	vmul.f32	s8, s8, s5
 8006bac:	ee65 2a22 	vmul.f32	s5, s10, s5
 8006bb0:	ee25 5a21 	vmul.f32	s10, s10, s3
 8006bb4:	ee74 2aa2 	vadd.f32	s5, s9, s5
 8006bb8:	ee35 5a44 	vsub.f32	s10, s10, s8
 8006bbc:	edc3 2a00 	vstr	s5, [r3]
 8006bc0:	ed83 5a01 	vstr	s10, [r3, #4]
 8006bc4:	ee75 5ac7 	vsub.f32	s11, s11, s14
 8006bc8:	9b00      	ldr	r3, [sp, #0]
 8006bca:	ee36 6a43 	vsub.f32	s12, s12, s6
 8006bce:	ed93 4a01 	vldr	s8, [r3, #4]
 8006bd2:	ed93 5a00 	vldr	s10, [r3]
 8006bd6:	9b02      	ldr	r3, [sp, #8]
 8006bd8:	ee75 5ac2 	vsub.f32	s11, s11, s4
 8006bdc:	ee66 4a05 	vmul.f32	s9, s12, s10
 8006be0:	ee25 5a85 	vmul.f32	s10, s11, s10
 8006be4:	ee26 6a04 	vmul.f32	s12, s12, s8
 8006be8:	ee65 5a84 	vmul.f32	s11, s11, s8
 8006bec:	ee35 6a46 	vsub.f32	s12, s10, s12
 8006bf0:	ee74 5aa5 	vadd.f32	s11, s9, s11
 8006bf4:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8006bf8:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006bfc:	ed80 6a01 	vstr	s12, [r0, #4]
 8006c00:	edc0 5a00 	vstr	s11, [r0]
 8006c04:	edd3 5a01 	vldr	s11, [r3, #4]
 8006c08:	edd3 6a00 	vldr	s13, [r3]
 8006c0c:	ee37 7a02 	vadd.f32	s14, s14, s4
 8006c10:	ee77 7ac3 	vsub.f32	s15, s15, s6
 8006c14:	ee27 6a26 	vmul.f32	s12, s14, s13
 8006c18:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8006c1c:	ee27 7a25 	vmul.f32	s14, s14, s11
 8006c20:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8006c24:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006c28:	ee76 7a27 	vadd.f32	s15, s12, s15
 8006c2c:	ed87 7a01 	vstr	s14, [r7, #4]
 8006c30:	edc7 7a00 	vstr	s15, [r7]
 8006c34:	e9dd 500a 	ldrd	r5, r0, [sp, #40]	; 0x28
 8006c38:	4621      	mov	r1, r4
 8006c3a:	686a      	ldr	r2, [r5, #4]
 8006c3c:	2304      	movs	r3, #4
 8006c3e:	f000 f9d3 	bl	8006fe8 <arm_radix8_butterfly_f32>
 8006c42:	4630      	mov	r0, r6
 8006c44:	4621      	mov	r1, r4
 8006c46:	686a      	ldr	r2, [r5, #4]
 8006c48:	2304      	movs	r3, #4
 8006c4a:	f000 f9cd 	bl	8006fe8 <arm_radix8_butterfly_f32>
 8006c4e:	9808      	ldr	r0, [sp, #32]
 8006c50:	686a      	ldr	r2, [r5, #4]
 8006c52:	4621      	mov	r1, r4
 8006c54:	2304      	movs	r3, #4
 8006c56:	f000 f9c7 	bl	8006fe8 <arm_radix8_butterfly_f32>
 8006c5a:	686a      	ldr	r2, [r5, #4]
 8006c5c:	9801      	ldr	r0, [sp, #4]
 8006c5e:	4621      	mov	r1, r4
 8006c60:	2304      	movs	r3, #4
 8006c62:	b00d      	add	sp, #52	; 0x34
 8006c64:	ecbd 8b0a 	vpop	{d8-d12}
 8006c68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	f000 b9bc 	b.w	8006fe8 <arm_radix8_butterfly_f32>

08006c70 <arm_cfft_f32>:
 8006c70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c74:	2a01      	cmp	r2, #1
 8006c76:	4606      	mov	r6, r0
 8006c78:	4617      	mov	r7, r2
 8006c7a:	460c      	mov	r4, r1
 8006c7c:	4698      	mov	r8, r3
 8006c7e:	8805      	ldrh	r5, [r0, #0]
 8006c80:	d056      	beq.n	8006d30 <arm_cfft_f32+0xc0>
 8006c82:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8006c86:	d063      	beq.n	8006d50 <arm_cfft_f32+0xe0>
 8006c88:	d916      	bls.n	8006cb8 <arm_cfft_f32+0x48>
 8006c8a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006c8e:	d01a      	beq.n	8006cc6 <arm_cfft_f32+0x56>
 8006c90:	d947      	bls.n	8006d22 <arm_cfft_f32+0xb2>
 8006c92:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006c96:	d05b      	beq.n	8006d50 <arm_cfft_f32+0xe0>
 8006c98:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8006c9c:	d105      	bne.n	8006caa <arm_cfft_f32+0x3a>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	6872      	ldr	r2, [r6, #4]
 8006ca2:	4629      	mov	r1, r5
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f99f 	bl	8006fe8 <arm_radix8_butterfly_f32>
 8006caa:	f1b8 0f00 	cmp.w	r8, #0
 8006cae:	d111      	bne.n	8006cd4 <arm_cfft_f32+0x64>
 8006cb0:	2f01      	cmp	r7, #1
 8006cb2:	d016      	beq.n	8006ce2 <arm_cfft_f32+0x72>
 8006cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006cb8:	2d20      	cmp	r5, #32
 8006cba:	d049      	beq.n	8006d50 <arm_cfft_f32+0xe0>
 8006cbc:	d935      	bls.n	8006d2a <arm_cfft_f32+0xba>
 8006cbe:	2d40      	cmp	r5, #64	; 0x40
 8006cc0:	d0ed      	beq.n	8006c9e <arm_cfft_f32+0x2e>
 8006cc2:	2d80      	cmp	r5, #128	; 0x80
 8006cc4:	d1f1      	bne.n	8006caa <arm_cfft_f32+0x3a>
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4630      	mov	r0, r6
 8006cca:	f7ff fcab 	bl	8006624 <arm_cfft_radix8by2_f32>
 8006cce:	f1b8 0f00 	cmp.w	r8, #0
 8006cd2:	d0ed      	beq.n	8006cb0 <arm_cfft_f32+0x40>
 8006cd4:	68b2      	ldr	r2, [r6, #8]
 8006cd6:	89b1      	ldrh	r1, [r6, #12]
 8006cd8:	4620      	mov	r0, r4
 8006cda:	f000 f841 	bl	8006d60 <arm_bitreversal_32>
 8006cde:	2f01      	cmp	r7, #1
 8006ce0:	d1e8      	bne.n	8006cb4 <arm_cfft_f32+0x44>
 8006ce2:	ee07 5a90 	vmov	s15, r5
 8006ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006cee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006cf2:	2d00      	cmp	r5, #0
 8006cf4:	d0de      	beq.n	8006cb4 <arm_cfft_f32+0x44>
 8006cf6:	f104 0108 	add.w	r1, r4, #8
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	3301      	adds	r3, #1
 8006cfe:	429d      	cmp	r5, r3
 8006d00:	f101 0108 	add.w	r1, r1, #8
 8006d04:	ed11 7a04 	vldr	s14, [r1, #-16]
 8006d08:	ed51 7a03 	vldr	s15, [r1, #-12]
 8006d0c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8006d10:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006d14:	ed01 7a04 	vstr	s14, [r1, #-16]
 8006d18:	ed41 7a03 	vstr	s15, [r1, #-12]
 8006d1c:	d1ee      	bne.n	8006cfc <arm_cfft_f32+0x8c>
 8006d1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d22:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8006d26:	d0ba      	beq.n	8006c9e <arm_cfft_f32+0x2e>
 8006d28:	e7bf      	b.n	8006caa <arm_cfft_f32+0x3a>
 8006d2a:	2d10      	cmp	r5, #16
 8006d2c:	d0cb      	beq.n	8006cc6 <arm_cfft_f32+0x56>
 8006d2e:	e7bc      	b.n	8006caa <arm_cfft_f32+0x3a>
 8006d30:	b19d      	cbz	r5, 8006d5a <arm_cfft_f32+0xea>
 8006d32:	f101 030c 	add.w	r3, r1, #12
 8006d36:	2200      	movs	r2, #0
 8006d38:	ed53 7a02 	vldr	s15, [r3, #-8]
 8006d3c:	3201      	adds	r2, #1
 8006d3e:	eef1 7a67 	vneg.f32	s15, s15
 8006d42:	4295      	cmp	r5, r2
 8006d44:	ed43 7a02 	vstr	s15, [r3, #-8]
 8006d48:	f103 0308 	add.w	r3, r3, #8
 8006d4c:	d1f4      	bne.n	8006d38 <arm_cfft_f32+0xc8>
 8006d4e:	e798      	b.n	8006c82 <arm_cfft_f32+0x12>
 8006d50:	4621      	mov	r1, r4
 8006d52:	4630      	mov	r0, r6
 8006d54:	f7ff fd36 	bl	80067c4 <arm_cfft_radix8by4_f32>
 8006d58:	e7a7      	b.n	8006caa <arm_cfft_f32+0x3a>
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d0aa      	beq.n	8006cb4 <arm_cfft_f32+0x44>
 8006d5e:	e7b9      	b.n	8006cd4 <arm_cfft_f32+0x64>

08006d60 <arm_bitreversal_32>:
 8006d60:	b1e9      	cbz	r1, 8006d9e <arm_bitreversal_32+0x3e>
 8006d62:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d64:	2500      	movs	r5, #0
 8006d66:	f102 0e02 	add.w	lr, r2, #2
 8006d6a:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 8006d6e:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 8006d72:	08a4      	lsrs	r4, r4, #2
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 8006d7a:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8006d7e:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 8006d82:	00a6      	lsls	r6, r4, #2
 8006d84:	009b      	lsls	r3, r3, #2
 8006d86:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	1d34      	adds	r4, r6, #4
 8006d8e:	3502      	adds	r5, #2
 8006d90:	58c6      	ldr	r6, [r0, r3]
 8006d92:	5907      	ldr	r7, [r0, r4]
 8006d94:	50c7      	str	r7, [r0, r3]
 8006d96:	428d      	cmp	r5, r1
 8006d98:	5106      	str	r6, [r0, r4]
 8006d9a:	d3e6      	bcc.n	8006d6a <arm_bitreversal_32+0xa>
 8006d9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d9e:	4770      	bx	lr

08006da0 <arm_cmplx_mag_f32>:
 8006da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da4:	ed2d 8b02 	vpush	{d8}
 8006da8:	0897      	lsrs	r7, r2, #2
 8006daa:	b084      	sub	sp, #16
 8006dac:	d077      	beq.n	8006e9e <arm_cmplx_mag_f32+0xfe>
 8006dae:	f04f 0800 	mov.w	r8, #0
 8006db2:	f100 0420 	add.w	r4, r0, #32
 8006db6:	f101 0510 	add.w	r5, r1, #16
 8006dba:	463e      	mov	r6, r7
 8006dbc:	ed14 0a08 	vldr	s0, [r4, #-32]	; 0xffffffe0
 8006dc0:	ed54 7a07 	vldr	s15, [r4, #-28]	; 0xffffffe4
 8006dc4:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006dc8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006dcc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006dd0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd8:	f2c0 80c5 	blt.w	8006f66 <arm_cmplx_mag_f32+0x1c6>
 8006ddc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006de4:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006de8:	f100 80cb 	bmi.w	8006f82 <arm_cmplx_mag_f32+0x1e2>
 8006dec:	ed05 8a04 	vstr	s16, [r5, #-16]
 8006df0:	ed14 0a06 	vldr	s0, [r4, #-24]	; 0xffffffe8
 8006df4:	ed54 7a05 	vldr	s15, [r4, #-20]	; 0xffffffec
 8006df8:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006dfc:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e00:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e04:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e0c:	f2c0 80a8 	blt.w	8006f60 <arm_cmplx_mag_f32+0x1c0>
 8006e10:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e18:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e1c:	f100 80a8 	bmi.w	8006f70 <arm_cmplx_mag_f32+0x1d0>
 8006e20:	ed05 8a03 	vstr	s16, [r5, #-12]
 8006e24:	ed14 0a04 	vldr	s0, [r4, #-16]
 8006e28:	ed54 7a03 	vldr	s15, [r4, #-12]
 8006e2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e30:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e34:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e38:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e40:	f2c0 808b 	blt.w	8006f5a <arm_cmplx_mag_f32+0x1ba>
 8006e44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e4c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e50:	f100 80a9 	bmi.w	8006fa6 <arm_cmplx_mag_f32+0x206>
 8006e54:	ed05 8a02 	vstr	s16, [r5, #-8]
 8006e58:	ed14 0a02 	vldr	s0, [r4, #-8]
 8006e5c:	ed54 7a01 	vldr	s15, [r4, #-4]
 8006e60:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006e64:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006e68:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006e6c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e74:	db6e      	blt.n	8006f54 <arm_cmplx_mag_f32+0x1b4>
 8006e76:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006e7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006e7e:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006e82:	f100 8087 	bmi.w	8006f94 <arm_cmplx_mag_f32+0x1f4>
 8006e86:	ed05 8a01 	vstr	s16, [r5, #-4]
 8006e8a:	3e01      	subs	r6, #1
 8006e8c:	f104 0420 	add.w	r4, r4, #32
 8006e90:	f105 0510 	add.w	r5, r5, #16
 8006e94:	d192      	bne.n	8006dbc <arm_cmplx_mag_f32+0x1c>
 8006e96:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 8006e9a:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 8006e9e:	f012 0203 	ands.w	r2, r2, #3
 8006ea2:	d052      	beq.n	8006f4a <arm_cmplx_mag_f32+0x1aa>
 8006ea4:	ed90 0a00 	vldr	s0, [r0]
 8006ea8:	edd0 7a01 	vldr	s15, [r0, #4]
 8006eac:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006eb0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006eba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ec2:	bfb8      	it	lt
 8006ec4:	600b      	strlt	r3, [r1, #0]
 8006ec6:	db08      	blt.n	8006eda <arm_cmplx_mag_f32+0x13a>
 8006ec8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006ecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ed0:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006ed4:	d479      	bmi.n	8006fca <arm_cmplx_mag_f32+0x22a>
 8006ed6:	ed81 8a00 	vstr	s16, [r1]
 8006eda:	3a01      	subs	r2, #1
 8006edc:	d035      	beq.n	8006f4a <arm_cmplx_mag_f32+0x1aa>
 8006ede:	ed90 0a02 	vldr	s0, [r0, #8]
 8006ee2:	edd0 7a03 	vldr	s15, [r0, #12]
 8006ee6:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006eee:	2300      	movs	r3, #0
 8006ef0:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006ef4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006efc:	bfb8      	it	lt
 8006efe:	604b      	strlt	r3, [r1, #4]
 8006f00:	db08      	blt.n	8006f14 <arm_cmplx_mag_f32+0x174>
 8006f02:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f0a:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006f0e:	d453      	bmi.n	8006fb8 <arm_cmplx_mag_f32+0x218>
 8006f10:	ed81 8a01 	vstr	s16, [r1, #4]
 8006f14:	2a01      	cmp	r2, #1
 8006f16:	d018      	beq.n	8006f4a <arm_cmplx_mag_f32+0x1aa>
 8006f18:	ed90 0a04 	vldr	s0, [r0, #16]
 8006f1c:	edd0 7a05 	vldr	s15, [r0, #20]
 8006f20:	ee20 0a00 	vmul.f32	s0, s0, s0
 8006f24:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8006f28:	2300      	movs	r3, #0
 8006f2a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006f2e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006f32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f36:	db19      	blt.n	8006f6c <arm_cmplx_mag_f32+0x1cc>
 8006f38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006f40:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8006f44:	d44a      	bmi.n	8006fdc <arm_cmplx_mag_f32+0x23c>
 8006f46:	ed81 8a02 	vstr	s16, [r1, #8]
 8006f4a:	b004      	add	sp, #16
 8006f4c:	ecbd 8b02 	vpop	{d8}
 8006f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f54:	f845 8c04 	str.w	r8, [r5, #-4]
 8006f58:	e797      	b.n	8006e8a <arm_cmplx_mag_f32+0xea>
 8006f5a:	f845 8c08 	str.w	r8, [r5, #-8]
 8006f5e:	e77b      	b.n	8006e58 <arm_cmplx_mag_f32+0xb8>
 8006f60:	f845 8c0c 	str.w	r8, [r5, #-12]
 8006f64:	e75e      	b.n	8006e24 <arm_cmplx_mag_f32+0x84>
 8006f66:	f845 8c10 	str.w	r8, [r5, #-16]
 8006f6a:	e741      	b.n	8006df0 <arm_cmplx_mag_f32+0x50>
 8006f6c:	608b      	str	r3, [r1, #8]
 8006f6e:	e7ec      	b.n	8006f4a <arm_cmplx_mag_f32+0x1aa>
 8006f70:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006f74:	9001      	str	r0, [sp, #4]
 8006f76:	f004 ff6f 	bl	800be58 <sqrtf>
 8006f7a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006f7e:	9801      	ldr	r0, [sp, #4]
 8006f80:	e74e      	b.n	8006e20 <arm_cmplx_mag_f32+0x80>
 8006f82:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006f86:	9001      	str	r0, [sp, #4]
 8006f88:	f004 ff66 	bl	800be58 <sqrtf>
 8006f8c:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006f90:	9801      	ldr	r0, [sp, #4]
 8006f92:	e72b      	b.n	8006dec <arm_cmplx_mag_f32+0x4c>
 8006f94:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006f98:	9001      	str	r0, [sp, #4]
 8006f9a:	f004 ff5d 	bl	800be58 <sqrtf>
 8006f9e:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006fa2:	9801      	ldr	r0, [sp, #4]
 8006fa4:	e76f      	b.n	8006e86 <arm_cmplx_mag_f32+0xe6>
 8006fa6:	e9cd 1202 	strd	r1, r2, [sp, #8]
 8006faa:	9001      	str	r0, [sp, #4]
 8006fac:	f004 ff54 	bl	800be58 <sqrtf>
 8006fb0:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 8006fb4:	9801      	ldr	r0, [sp, #4]
 8006fb6:	e74d      	b.n	8006e54 <arm_cmplx_mag_f32+0xb4>
 8006fb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fbc:	9201      	str	r2, [sp, #4]
 8006fbe:	f004 ff4b 	bl	800be58 <sqrtf>
 8006fc2:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006fc6:	9903      	ldr	r1, [sp, #12]
 8006fc8:	e7a2      	b.n	8006f10 <arm_cmplx_mag_f32+0x170>
 8006fca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006fce:	9201      	str	r2, [sp, #4]
 8006fd0:	f004 ff42 	bl	800be58 <sqrtf>
 8006fd4:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 8006fd8:	9903      	ldr	r1, [sp, #12]
 8006fda:	e77c      	b.n	8006ed6 <arm_cmplx_mag_f32+0x136>
 8006fdc:	9101      	str	r1, [sp, #4]
 8006fde:	f004 ff3b 	bl	800be58 <sqrtf>
 8006fe2:	9901      	ldr	r1, [sp, #4]
 8006fe4:	e7af      	b.n	8006f46 <arm_cmplx_mag_f32+0x1a6>
 8006fe6:	bf00      	nop

08006fe8 <arm_radix8_butterfly_f32>:
 8006fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fec:	ed2d 8b10 	vpush	{d8-d15}
 8006ff0:	b095      	sub	sp, #84	; 0x54
 8006ff2:	e9cd 3210 	strd	r3, r2, [sp, #64]	; 0x40
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	3304      	adds	r3, #4
 8006ffa:	ed9f bab9 	vldr	s22, [pc, #740]	; 80072e0 <arm_radix8_butterfly_f32+0x2f8>
 8006ffe:	9012      	str	r0, [sp, #72]	; 0x48
 8007000:	468b      	mov	fp, r1
 8007002:	9313      	str	r3, [sp, #76]	; 0x4c
 8007004:	4689      	mov	r9, r1
 8007006:	ea4f 06db 	mov.w	r6, fp, lsr #3
 800700a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800700c:	960f      	str	r6, [sp, #60]	; 0x3c
 800700e:	ea4f 1846 	mov.w	r8, r6, lsl #5
 8007012:	ea4f 0ec6 	mov.w	lr, r6, lsl #3
 8007016:	eb03 0508 	add.w	r5, r3, r8
 800701a:	ea4f 0a86 	mov.w	sl, r6, lsl #2
 800701e:	eb05 040e 	add.w	r4, r5, lr
 8007022:	0137      	lsls	r7, r6, #4
 8007024:	eba6 030a 	sub.w	r3, r6, sl
 8007028:	eb04 000e 	add.w	r0, r4, lr
 800702c:	44b2      	add	sl, r6
 800702e:	1d3a      	adds	r2, r7, #4
 8007030:	9702      	str	r7, [sp, #8]
 8007032:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8007036:	ea4f 07ca 	mov.w	r7, sl, lsl #3
 800703a:	ebae 0c06 	sub.w	ip, lr, r6
 800703e:	9703      	str	r7, [sp, #12]
 8007040:	eb03 0708 	add.w	r7, r3, r8
 8007044:	9701      	str	r7, [sp, #4]
 8007046:	ea4f 07cc 	mov.w	r7, ip, lsl #3
 800704a:	9706      	str	r7, [sp, #24]
 800704c:	9f12      	ldr	r7, [sp, #72]	; 0x48
 800704e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8007052:	f10e 0104 	add.w	r1, lr, #4
 8007056:	4439      	add	r1, r7
 8007058:	443a      	add	r2, r7
 800705a:	0137      	lsls	r7, r6, #4
 800705c:	00f6      	lsls	r6, r6, #3
 800705e:	9704      	str	r7, [sp, #16]
 8007060:	9605      	str	r6, [sp, #20]
 8007062:	9f01      	ldr	r7, [sp, #4]
 8007064:	9e13      	ldr	r6, [sp, #76]	; 0x4c
 8007066:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800706a:	f04f 0c00 	mov.w	ip, #0
 800706e:	edd4 6a00 	vldr	s13, [r4]
 8007072:	edd7 1a00 	vldr	s3, [r7]
 8007076:	ed16 aa01 	vldr	s20, [r6, #-4]
 800707a:	edd5 5a00 	vldr	s11, [r5]
 800707e:	ed52 9a01 	vldr	s19, [r2, #-4]
 8007082:	ed90 6a00 	vldr	s12, [r0]
 8007086:	ed51 7a01 	vldr	s15, [r1, #-4]
 800708a:	ed93 3a00 	vldr	s6, [r3]
 800708e:	ee39 0a86 	vadd.f32	s0, s19, s12
 8007092:	ee33 2a21 	vadd.f32	s4, s6, s3
 8007096:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800709a:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800709e:	ee35 7a02 	vadd.f32	s14, s10, s4
 80070a2:	ee34 4a80 	vadd.f32	s8, s9, s0
 80070a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80070aa:	ee74 6a07 	vadd.f32	s13, s8, s14
 80070ae:	ee34 4a47 	vsub.f32	s8, s8, s14
 80070b2:	ed46 6a01 	vstr	s13, [r6, #-4]
 80070b6:	ed85 4a00 	vstr	s8, [r5]
 80070ba:	edd1 6a00 	vldr	s13, [r1]
 80070be:	ed94 9a01 	vldr	s18, [r4, #4]
 80070c2:	edd3 2a01 	vldr	s5, [r3, #4]
 80070c6:	edd7 8a01 	vldr	s17, [r7, #4]
 80070ca:	edd6 0a00 	vldr	s1, [r6]
 80070ce:	edd5 3a01 	vldr	s7, [r5, #4]
 80070d2:	ed90 8a01 	vldr	s16, [r0, #4]
 80070d6:	ed92 7a00 	vldr	s14, [r2]
 80070da:	ee33 3a61 	vsub.f32	s6, s6, s3
 80070de:	ee36 4ac9 	vsub.f32	s8, s13, s18
 80070e2:	ee72 aae8 	vsub.f32	s21, s5, s17
 80070e6:	ee77 1ac3 	vsub.f32	s3, s15, s6
 80070ea:	ee34 1a2a 	vadd.f32	s2, s8, s21
 80070ee:	ee77 7a83 	vadd.f32	s15, s15, s6
 80070f2:	ee34 4a6a 	vsub.f32	s8, s8, s21
 80070f6:	ee30 3aa3 	vadd.f32	s6, s1, s7
 80070fa:	ee39 6ac6 	vsub.f32	s12, s19, s12
 80070fe:	ee70 3ae3 	vsub.f32	s7, s1, s7
 8007102:	ee72 2aa8 	vadd.f32	s5, s5, s17
 8007106:	ee77 0a08 	vadd.f32	s1, s14, s16
 800710a:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800710e:	ee37 7a48 	vsub.f32	s14, s14, s16
 8007112:	ee61 1a8b 	vmul.f32	s3, s3, s22
 8007116:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800711a:	ee76 6a89 	vadd.f32	s13, s13, s18
 800711e:	ee24 4a0b 	vmul.f32	s8, s8, s22
 8007122:	ee67 7a8b 	vmul.f32	s15, s15, s22
 8007126:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800712a:	ee35 5a42 	vsub.f32	s10, s10, s4
 800712e:	ee36 0aa2 	vadd.f32	s0, s13, s5
 8007132:	ee33 2a20 	vadd.f32	s4, s6, s1
 8007136:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800713a:	ee33 3a60 	vsub.f32	s6, s6, s1
 800713e:	ee75 2aa1 	vadd.f32	s5, s11, s3
 8007142:	ee77 0a01 	vadd.f32	s1, s14, s2
 8007146:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800714a:	ee37 7a41 	vsub.f32	s14, s14, s2
 800714e:	ee73 1a84 	vadd.f32	s3, s7, s8
 8007152:	ee33 4ac4 	vsub.f32	s8, s7, s8
 8007156:	ee76 3a27 	vadd.f32	s7, s12, s15
 800715a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800715e:	ee32 8a00 	vadd.f32	s16, s4, s0
 8007162:	ee33 1a45 	vsub.f32	s2, s6, s10
 8007166:	ee32 2a40 	vsub.f32	s4, s4, s0
 800716a:	ee35 5a03 	vadd.f32	s10, s10, s6
 800716e:	ee34 0aa6 	vadd.f32	s0, s9, s13
 8007172:	ee32 3aa0 	vadd.f32	s6, s5, s1
 8007176:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800717a:	ee34 6a67 	vsub.f32	s12, s8, s15
 800717e:	ee75 4a87 	vadd.f32	s9, s11, s14
 8007182:	ee72 2ae0 	vsub.f32	s5, s5, s1
 8007186:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800718a:	ee77 7a84 	vadd.f32	s15, s15, s8
 800718e:	ee71 5ae3 	vsub.f32	s11, s3, s7
 8007192:	44dc      	add	ip, fp
 8007194:	ee73 3aa1 	vadd.f32	s7, s7, s3
 8007198:	45e1      	cmp	r9, ip
 800719a:	ed86 8a00 	vstr	s16, [r6]
 800719e:	ed85 2a01 	vstr	s4, [r5, #4]
 80071a2:	4456      	add	r6, sl
 80071a4:	ed02 0a01 	vstr	s0, [r2, #-4]
 80071a8:	4455      	add	r5, sl
 80071aa:	edc0 6a00 	vstr	s13, [r0]
 80071ae:	ed82 1a00 	vstr	s2, [r2]
 80071b2:	ed80 5a01 	vstr	s10, [r0, #4]
 80071b6:	4452      	add	r2, sl
 80071b8:	ed01 3a01 	vstr	s6, [r1, #-4]
 80071bc:	4450      	add	r0, sl
 80071be:	edc7 2a00 	vstr	s5, [r7]
 80071c2:	edc4 4a00 	vstr	s9, [r4]
 80071c6:	ed83 7a00 	vstr	s14, [r3]
 80071ca:	edc1 5a00 	vstr	s11, [r1]
 80071ce:	edc7 3a01 	vstr	s7, [r7, #4]
 80071d2:	4451      	add	r1, sl
 80071d4:	ed84 6a01 	vstr	s12, [r4, #4]
 80071d8:	4457      	add	r7, sl
 80071da:	edc3 7a01 	vstr	s15, [r3, #4]
 80071de:	4454      	add	r4, sl
 80071e0:	4453      	add	r3, sl
 80071e2:	f63f af44 	bhi.w	800706e <arm_radix8_butterfly_f32+0x86>
 80071e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80071e8:	2b07      	cmp	r3, #7
 80071ea:	f240 81b7 	bls.w	800755c <arm_radix8_butterfly_f32+0x574>
 80071ee:	9b06      	ldr	r3, [sp, #24]
 80071f0:	9903      	ldr	r1, [sp, #12]
 80071f2:	9812      	ldr	r0, [sp, #72]	; 0x48
 80071f4:	9e05      	ldr	r6, [sp, #20]
 80071f6:	9a04      	ldr	r2, [sp, #16]
 80071f8:	f103 0c08 	add.w	ip, r3, #8
 80071fc:	9b02      	ldr	r3, [sp, #8]
 80071fe:	3108      	adds	r1, #8
 8007200:	f108 0808 	add.w	r8, r8, #8
 8007204:	1841      	adds	r1, r0, r1
 8007206:	3608      	adds	r6, #8
 8007208:	330c      	adds	r3, #12
 800720a:	4604      	mov	r4, r0
 800720c:	4444      	add	r4, r8
 800720e:	18c3      	adds	r3, r0, r3
 8007210:	9109      	str	r1, [sp, #36]	; 0x24
 8007212:	1981      	adds	r1, r0, r6
 8007214:	f10e 0e08 	add.w	lr, lr, #8
 8007218:	3208      	adds	r2, #8
 800721a:	940b      	str	r4, [sp, #44]	; 0x2c
 800721c:	9107      	str	r1, [sp, #28]
 800721e:	4604      	mov	r4, r0
 8007220:	4601      	mov	r1, r0
 8007222:	9304      	str	r3, [sp, #16]
 8007224:	f100 030c 	add.w	r3, r0, #12
 8007228:	4474      	add	r4, lr
 800722a:	f04f 0801 	mov.w	r8, #1
 800722e:	1882      	adds	r2, r0, r2
 8007230:	4461      	add	r1, ip
 8007232:	9305      	str	r3, [sp, #20]
 8007234:	464b      	mov	r3, r9
 8007236:	940a      	str	r4, [sp, #40]	; 0x28
 8007238:	46c1      	mov	r9, r8
 800723a:	9208      	str	r2, [sp, #32]
 800723c:	46d8      	mov	r8, fp
 800723e:	9106      	str	r1, [sp, #24]
 8007240:	f04f 0e00 	mov.w	lr, #0
 8007244:	469b      	mov	fp, r3
 8007246:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007248:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800724a:	449e      	add	lr, r3
 800724c:	ea4f 03ce 	mov.w	r3, lr, lsl #3
 8007250:	441a      	add	r2, r3
 8007252:	920e      	str	r2, [sp, #56]	; 0x38
 8007254:	441a      	add	r2, r3
 8007256:	18d4      	adds	r4, r2, r3
 8007258:	18e5      	adds	r5, r4, r3
 800725a:	18ee      	adds	r6, r5, r3
 800725c:	18f7      	adds	r7, r6, r3
 800725e:	eb07 0c03 	add.w	ip, r7, r3
 8007262:	920d      	str	r2, [sp, #52]	; 0x34
 8007264:	ebae 028e 	sub.w	r2, lr, lr, lsl #2
 8007268:	eb0c 1102 	add.w	r1, ip, r2, lsl #4
 800726c:	910c      	str	r1, [sp, #48]	; 0x30
 800726e:	4419      	add	r1, r3
 8007270:	9103      	str	r1, [sp, #12]
 8007272:	4419      	add	r1, r3
 8007274:	18ca      	adds	r2, r1, r3
 8007276:	9202      	str	r2, [sp, #8]
 8007278:	441a      	add	r2, r3
 800727a:	18d0      	adds	r0, r2, r3
 800727c:	ed92 ea01 	vldr	s28, [r2, #4]
 8007280:	9a02      	ldr	r2, [sp, #8]
 8007282:	edd4 7a00 	vldr	s15, [r4]
 8007286:	edd2 da01 	vldr	s27, [r2, #4]
 800728a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800728c:	ed91 da01 	vldr	s26, [r1, #4]
 8007290:	ed92 ca01 	vldr	s24, [r2, #4]
 8007294:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007296:	9903      	ldr	r1, [sp, #12]
 8007298:	edcd 7a03 	vstr	s15, [sp, #12]
 800729c:	edd2 7a00 	vldr	s15, [r2]
 80072a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80072a2:	edcd 7a02 	vstr	s15, [sp, #8]
 80072a6:	edd2 7a00 	vldr	s15, [r2]
 80072aa:	edd0 ea01 	vldr	s29, [r0, #4]
 80072ae:	edd1 ca01 	vldr	s25, [r1, #4]
 80072b2:	eddc ba00 	vldr	s23, [ip]
 80072b6:	edd7 aa00 	vldr	s21, [r7]
 80072ba:	ed96 aa00 	vldr	s20, [r6]
 80072be:	edd5 9a00 	vldr	s19, [r5]
 80072c2:	edcd 7a01 	vstr	s15, [sp, #4]
 80072c6:	4403      	add	r3, r0
 80072c8:	ed93 fa01 	vldr	s30, [r3, #4]
 80072cc:	e9dd 7604 	ldrd	r7, r6, [sp, #16]
 80072d0:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80072d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80072d8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80072dc:	46cc      	mov	ip, r9
 80072de:	e001      	b.n	80072e4 <arm_radix8_butterfly_f32+0x2fc>
 80072e0:	3f3504f3 	.word	0x3f3504f3
 80072e4:	ed91 6a00 	vldr	s12, [r1]
 80072e8:	ed93 5a00 	vldr	s10, [r3]
 80072ec:	edd0 fa00 	vldr	s31, [r0]
 80072f0:	edd4 7a00 	vldr	s15, [r4]
 80072f4:	ed95 7a00 	vldr	s14, [r5]
 80072f8:	ed56 3a01 	vldr	s7, [r6, #-4]
 80072fc:	ed17 3a01 	vldr	s6, [r7, #-4]
 8007300:	ed92 2a00 	vldr	s4, [r2]
 8007304:	ed96 0a00 	vldr	s0, [r6]
 8007308:	ee33 8a85 	vadd.f32	s16, s7, s10
 800730c:	ee32 1a06 	vadd.f32	s2, s4, s12
 8007310:	ee33 4a2f 	vadd.f32	s8, s6, s31
 8007314:	ee77 4a87 	vadd.f32	s9, s15, s14
 8007318:	ee78 1a04 	vadd.f32	s3, s16, s8
 800731c:	ee71 6a24 	vadd.f32	s13, s2, s9
 8007320:	ee32 2a46 	vsub.f32	s4, s4, s12
 8007324:	ee31 6aa6 	vadd.f32	s12, s3, s13
 8007328:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800732c:	ed06 6a01 	vstr	s12, [r6, #-4]
 8007330:	edd4 8a01 	vldr	s17, [r4, #4]
 8007334:	ed92 9a01 	vldr	s18, [r2, #4]
 8007338:	edd7 0a00 	vldr	s1, [r7]
 800733c:	edd1 2a01 	vldr	s5, [r1, #4]
 8007340:	ed95 7a01 	vldr	s14, [r5, #4]
 8007344:	ed93 6a01 	vldr	s12, [r3, #4]
 8007348:	edd0 5a01 	vldr	s11, [r0, #4]
 800734c:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007350:	ee33 3a6f 	vsub.f32	s6, s6, s31
 8007354:	ee39 5a62 	vsub.f32	s10, s18, s5
 8007358:	ee78 fac7 	vsub.f32	s31, s17, s14
 800735c:	ee38 4a44 	vsub.f32	s8, s16, s8
 8007360:	ee38 7a87 	vadd.f32	s14, s17, s14
 8007364:	ee30 8aa5 	vadd.f32	s16, s1, s11
 8007368:	ee79 2a22 	vadd.f32	s5, s18, s5
 800736c:	ee32 9a27 	vadd.f32	s18, s4, s15
 8007370:	ee72 7a67 	vsub.f32	s15, s4, s15
 8007374:	ee30 2a06 	vadd.f32	s4, s0, s12
 8007378:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800737c:	ee71 4a64 	vsub.f32	s9, s2, s9
 8007380:	ee35 5a2f 	vadd.f32	s10, s10, s31
 8007384:	ee32 1a08 	vadd.f32	s2, s4, s16
 8007388:	ee72 fa87 	vadd.f32	s31, s5, s14
 800738c:	ee32 2a48 	vsub.f32	s4, s4, s16
 8007390:	ee68 8a8b 	vmul.f32	s17, s17, s22
 8007394:	ee25 5a0b 	vmul.f32	s10, s10, s22
 8007398:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800739c:	ee72 2ac7 	vsub.f32	s5, s5, s14
 80073a0:	ee71 6ae6 	vsub.f32	s13, s3, s13
 80073a4:	ee29 9a0b 	vmul.f32	s18, s18, s22
 80073a8:	ee71 1a6f 	vsub.f32	s3, s2, s31
 80073ac:	ee67 7a8b 	vmul.f32	s15, s15, s22
 80073b0:	ee30 6a46 	vsub.f32	s12, s0, s12
 80073b4:	ee74 0a22 	vadd.f32	s1, s8, s5
 80073b8:	ee36 0a28 	vadd.f32	s0, s12, s17
 80073bc:	ee74 2a62 	vsub.f32	s5, s8, s5
 80073c0:	ee36 6a68 	vsub.f32	s12, s12, s17
 80073c4:	ee32 4a64 	vsub.f32	s8, s4, s9
 80073c8:	ee73 8a09 	vadd.f32	s17, s6, s18
 80073cc:	ee74 4a82 	vadd.f32	s9, s9, s4
 80073d0:	ee33 9a49 	vsub.f32	s18, s6, s18
 80073d4:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 80073d8:	ee35 3a85 	vadd.f32	s6, s11, s10
 80073dc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80073e0:	ee33 5aa7 	vadd.f32	s10, s7, s15
 80073e4:	ee73 7ae7 	vsub.f32	s15, s7, s15
 80073e8:	ee69 3aa6 	vmul.f32	s7, s19, s13
 80073ec:	ee30 7a68 	vsub.f32	s14, s0, s17
 80073f0:	ee35 8a03 	vadd.f32	s16, s10, s6
 80073f4:	ee38 0a80 	vadd.f32	s0, s17, s0
 80073f8:	ee73 3a82 	vadd.f32	s7, s7, s4
 80073fc:	ee69 8aa1 	vmul.f32	s17, s19, s3
 8007400:	ed9d 2a01 	vldr	s4, [sp, #4]
 8007404:	eddd 1a02 	vldr	s3, [sp, #8]
 8007408:	ee35 5a43 	vsub.f32	s10, s10, s6
 800740c:	ee71 fa2f 	vadd.f32	s31, s2, s31
 8007410:	ee37 3aa5 	vadd.f32	s6, s15, s11
 8007414:	ee21 1aa0 	vmul.f32	s2, s3, s1
 8007418:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800741c:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 8007420:	ee76 5a49 	vsub.f32	s11, s12, s18
 8007424:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 8007428:	ee39 6a06 	vadd.f32	s12, s18, s12
 800742c:	ee2c 9a84 	vmul.f32	s18, s25, s8
 8007430:	ee21 4a84 	vmul.f32	s8, s3, s8
 8007434:	ee6c 1a07 	vmul.f32	s3, s24, s14
 8007438:	ee22 7a07 	vmul.f32	s14, s4, s14
 800743c:	ee22 2a08 	vmul.f32	s4, s4, s16
 8007440:	ee2c 8a08 	vmul.f32	s16, s24, s16
 8007444:	ee78 6ae6 	vsub.f32	s13, s17, s13
 8007448:	ee31 1a09 	vadd.f32	s2, s2, s18
 800744c:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 8007450:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 8007454:	ee74 0a60 	vsub.f32	s1, s8, s1
 8007458:	ee37 7a48 	vsub.f32	s14, s14, s16
 800745c:	ee2f 4a00 	vmul.f32	s8, s30, s0
 8007460:	ee2b 8a85 	vmul.f32	s16, s23, s10
 8007464:	ee72 1a21 	vadd.f32	s3, s4, s3
 8007468:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800746c:	ee38 2a89 	vadd.f32	s4, s17, s18
 8007470:	ee2f 5a05 	vmul.f32	s10, s30, s10
 8007474:	ee38 8a04 	vadd.f32	s16, s16, s8
 8007478:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800747c:	ee2a 4a25 	vmul.f32	s8, s20, s11
 8007480:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 8007484:	eddd 5a03 	vldr	s11, [sp, #12]
 8007488:	edc6 fa00 	vstr	s31, [r6]
 800748c:	ee2b 0a80 	vmul.f32	s0, s23, s0
 8007490:	ee74 2ae2 	vsub.f32	s5, s9, s5
 8007494:	ee30 0a45 	vsub.f32	s0, s0, s10
 8007498:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800749c:	ee65 8aa7 	vmul.f32	s17, s11, s15
 80074a0:	ee2d 5a06 	vmul.f32	s10, s26, s12
 80074a4:	ee2e 3a03 	vmul.f32	s6, s28, s6
 80074a8:	ee6d 7a27 	vmul.f32	s15, s26, s15
 80074ac:	ee25 6a86 	vmul.f32	s12, s11, s12
 80074b0:	ee74 4a89 	vadd.f32	s9, s9, s18
 80074b4:	ee34 3a43 	vsub.f32	s6, s8, s6
 80074b8:	ee78 8a85 	vadd.f32	s17, s17, s10
 80074bc:	ee36 6a67 	vsub.f32	s12, s12, s15
 80074c0:	44c4      	add	ip, r8
 80074c2:	45e3      	cmp	fp, ip
 80074c4:	edc3 3a00 	vstr	s7, [r3]
 80074c8:	edc3 6a01 	vstr	s13, [r3, #4]
 80074cc:	4456      	add	r6, sl
 80074ce:	ed07 1a01 	vstr	s2, [r7, #-4]
 80074d2:	edc7 0a00 	vstr	s1, [r7]
 80074d6:	4453      	add	r3, sl
 80074d8:	ed80 2a00 	vstr	s4, [r0]
 80074dc:	edc0 2a01 	vstr	s5, [r0, #4]
 80074e0:	4457      	add	r7, sl
 80074e2:	edc2 1a00 	vstr	s3, [r2]
 80074e6:	ed82 7a01 	vstr	s14, [r2, #4]
 80074ea:	4450      	add	r0, sl
 80074ec:	ed85 8a00 	vstr	s16, [r5]
 80074f0:	ed85 0a01 	vstr	s0, [r5, #4]
 80074f4:	4452      	add	r2, sl
 80074f6:	edc1 4a00 	vstr	s9, [r1]
 80074fa:	4455      	add	r5, sl
 80074fc:	ed81 3a01 	vstr	s6, [r1, #4]
 8007500:	edc4 8a00 	vstr	s17, [r4]
 8007504:	ed84 6a01 	vstr	s12, [r4, #4]
 8007508:	4451      	add	r1, sl
 800750a:	4454      	add	r4, sl
 800750c:	f63f aeea 	bhi.w	80072e4 <arm_radix8_butterfly_f32+0x2fc>
 8007510:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007512:	3308      	adds	r3, #8
 8007514:	930b      	str	r3, [sp, #44]	; 0x2c
 8007516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007518:	3308      	adds	r3, #8
 800751a:	930a      	str	r3, [sp, #40]	; 0x28
 800751c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800751e:	3308      	adds	r3, #8
 8007520:	9309      	str	r3, [sp, #36]	; 0x24
 8007522:	9b08      	ldr	r3, [sp, #32]
 8007524:	3308      	adds	r3, #8
 8007526:	9308      	str	r3, [sp, #32]
 8007528:	9b07      	ldr	r3, [sp, #28]
 800752a:	3308      	adds	r3, #8
 800752c:	9307      	str	r3, [sp, #28]
 800752e:	9b06      	ldr	r3, [sp, #24]
 8007530:	3308      	adds	r3, #8
 8007532:	9306      	str	r3, [sp, #24]
 8007534:	9b05      	ldr	r3, [sp, #20]
 8007536:	3308      	adds	r3, #8
 8007538:	9305      	str	r3, [sp, #20]
 800753a:	9b04      	ldr	r3, [sp, #16]
 800753c:	3308      	adds	r3, #8
 800753e:	9304      	str	r3, [sp, #16]
 8007540:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007542:	f109 0901 	add.w	r9, r9, #1
 8007546:	454b      	cmp	r3, r9
 8007548:	f47f ae7d 	bne.w	8007246 <arm_radix8_butterfly_f32+0x25e>
 800754c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	b29b      	uxth	r3, r3
 8007552:	46d9      	mov	r9, fp
 8007554:	9310      	str	r3, [sp, #64]	; 0x40
 8007556:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 800755a:	e554      	b.n	8007006 <arm_radix8_butterfly_f32+0x1e>
 800755c:	b015      	add	sp, #84	; 0x54
 800755e:	ecbd 8b10 	vpop	{d8-d15}
 8007562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007566:	bf00      	nop

08007568 <malloc>:
 8007568:	4b02      	ldr	r3, [pc, #8]	; (8007574 <malloc+0xc>)
 800756a:	4601      	mov	r1, r0
 800756c:	6818      	ldr	r0, [r3, #0]
 800756e:	f000 b823 	b.w	80075b8 <_malloc_r>
 8007572:	bf00      	nop
 8007574:	2000006c 	.word	0x2000006c

08007578 <sbrk_aligned>:
 8007578:	b570      	push	{r4, r5, r6, lr}
 800757a:	4e0e      	ldr	r6, [pc, #56]	; (80075b4 <sbrk_aligned+0x3c>)
 800757c:	460c      	mov	r4, r1
 800757e:	6831      	ldr	r1, [r6, #0]
 8007580:	4605      	mov	r5, r0
 8007582:	b911      	cbnz	r1, 800758a <sbrk_aligned+0x12>
 8007584:	f001 f920 	bl	80087c8 <_sbrk_r>
 8007588:	6030      	str	r0, [r6, #0]
 800758a:	4621      	mov	r1, r4
 800758c:	4628      	mov	r0, r5
 800758e:	f001 f91b 	bl	80087c8 <_sbrk_r>
 8007592:	1c43      	adds	r3, r0, #1
 8007594:	d00a      	beq.n	80075ac <sbrk_aligned+0x34>
 8007596:	1cc4      	adds	r4, r0, #3
 8007598:	f024 0403 	bic.w	r4, r4, #3
 800759c:	42a0      	cmp	r0, r4
 800759e:	d007      	beq.n	80075b0 <sbrk_aligned+0x38>
 80075a0:	1a21      	subs	r1, r4, r0
 80075a2:	4628      	mov	r0, r5
 80075a4:	f001 f910 	bl	80087c8 <_sbrk_r>
 80075a8:	3001      	adds	r0, #1
 80075aa:	d101      	bne.n	80075b0 <sbrk_aligned+0x38>
 80075ac:	f04f 34ff 	mov.w	r4, #4294967295
 80075b0:	4620      	mov	r0, r4
 80075b2:	bd70      	pop	{r4, r5, r6, pc}
 80075b4:	20006c68 	.word	0x20006c68

080075b8 <_malloc_r>:
 80075b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075bc:	1ccd      	adds	r5, r1, #3
 80075be:	f025 0503 	bic.w	r5, r5, #3
 80075c2:	3508      	adds	r5, #8
 80075c4:	2d0c      	cmp	r5, #12
 80075c6:	bf38      	it	cc
 80075c8:	250c      	movcc	r5, #12
 80075ca:	2d00      	cmp	r5, #0
 80075cc:	4607      	mov	r7, r0
 80075ce:	db01      	blt.n	80075d4 <_malloc_r+0x1c>
 80075d0:	42a9      	cmp	r1, r5
 80075d2:	d905      	bls.n	80075e0 <_malloc_r+0x28>
 80075d4:	230c      	movs	r3, #12
 80075d6:	603b      	str	r3, [r7, #0]
 80075d8:	2600      	movs	r6, #0
 80075da:	4630      	mov	r0, r6
 80075dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075e0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076b4 <_malloc_r+0xfc>
 80075e4:	f000 f868 	bl	80076b8 <__malloc_lock>
 80075e8:	f8d8 3000 	ldr.w	r3, [r8]
 80075ec:	461c      	mov	r4, r3
 80075ee:	bb5c      	cbnz	r4, 8007648 <_malloc_r+0x90>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4638      	mov	r0, r7
 80075f4:	f7ff ffc0 	bl	8007578 <sbrk_aligned>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	4604      	mov	r4, r0
 80075fc:	d155      	bne.n	80076aa <_malloc_r+0xf2>
 80075fe:	f8d8 4000 	ldr.w	r4, [r8]
 8007602:	4626      	mov	r6, r4
 8007604:	2e00      	cmp	r6, #0
 8007606:	d145      	bne.n	8007694 <_malloc_r+0xdc>
 8007608:	2c00      	cmp	r4, #0
 800760a:	d048      	beq.n	800769e <_malloc_r+0xe6>
 800760c:	6823      	ldr	r3, [r4, #0]
 800760e:	4631      	mov	r1, r6
 8007610:	4638      	mov	r0, r7
 8007612:	eb04 0903 	add.w	r9, r4, r3
 8007616:	f001 f8d7 	bl	80087c8 <_sbrk_r>
 800761a:	4581      	cmp	r9, r0
 800761c:	d13f      	bne.n	800769e <_malloc_r+0xe6>
 800761e:	6821      	ldr	r1, [r4, #0]
 8007620:	1a6d      	subs	r5, r5, r1
 8007622:	4629      	mov	r1, r5
 8007624:	4638      	mov	r0, r7
 8007626:	f7ff ffa7 	bl	8007578 <sbrk_aligned>
 800762a:	3001      	adds	r0, #1
 800762c:	d037      	beq.n	800769e <_malloc_r+0xe6>
 800762e:	6823      	ldr	r3, [r4, #0]
 8007630:	442b      	add	r3, r5
 8007632:	6023      	str	r3, [r4, #0]
 8007634:	f8d8 3000 	ldr.w	r3, [r8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d038      	beq.n	80076ae <_malloc_r+0xf6>
 800763c:	685a      	ldr	r2, [r3, #4]
 800763e:	42a2      	cmp	r2, r4
 8007640:	d12b      	bne.n	800769a <_malloc_r+0xe2>
 8007642:	2200      	movs	r2, #0
 8007644:	605a      	str	r2, [r3, #4]
 8007646:	e00f      	b.n	8007668 <_malloc_r+0xb0>
 8007648:	6822      	ldr	r2, [r4, #0]
 800764a:	1b52      	subs	r2, r2, r5
 800764c:	d41f      	bmi.n	800768e <_malloc_r+0xd6>
 800764e:	2a0b      	cmp	r2, #11
 8007650:	d917      	bls.n	8007682 <_malloc_r+0xca>
 8007652:	1961      	adds	r1, r4, r5
 8007654:	42a3      	cmp	r3, r4
 8007656:	6025      	str	r5, [r4, #0]
 8007658:	bf18      	it	ne
 800765a:	6059      	strne	r1, [r3, #4]
 800765c:	6863      	ldr	r3, [r4, #4]
 800765e:	bf08      	it	eq
 8007660:	f8c8 1000 	streq.w	r1, [r8]
 8007664:	5162      	str	r2, [r4, r5]
 8007666:	604b      	str	r3, [r1, #4]
 8007668:	4638      	mov	r0, r7
 800766a:	f104 060b 	add.w	r6, r4, #11
 800766e:	f000 f829 	bl	80076c4 <__malloc_unlock>
 8007672:	f026 0607 	bic.w	r6, r6, #7
 8007676:	1d23      	adds	r3, r4, #4
 8007678:	1af2      	subs	r2, r6, r3
 800767a:	d0ae      	beq.n	80075da <_malloc_r+0x22>
 800767c:	1b9b      	subs	r3, r3, r6
 800767e:	50a3      	str	r3, [r4, r2]
 8007680:	e7ab      	b.n	80075da <_malloc_r+0x22>
 8007682:	42a3      	cmp	r3, r4
 8007684:	6862      	ldr	r2, [r4, #4]
 8007686:	d1dd      	bne.n	8007644 <_malloc_r+0x8c>
 8007688:	f8c8 2000 	str.w	r2, [r8]
 800768c:	e7ec      	b.n	8007668 <_malloc_r+0xb0>
 800768e:	4623      	mov	r3, r4
 8007690:	6864      	ldr	r4, [r4, #4]
 8007692:	e7ac      	b.n	80075ee <_malloc_r+0x36>
 8007694:	4634      	mov	r4, r6
 8007696:	6876      	ldr	r6, [r6, #4]
 8007698:	e7b4      	b.n	8007604 <_malloc_r+0x4c>
 800769a:	4613      	mov	r3, r2
 800769c:	e7cc      	b.n	8007638 <_malloc_r+0x80>
 800769e:	230c      	movs	r3, #12
 80076a0:	603b      	str	r3, [r7, #0]
 80076a2:	4638      	mov	r0, r7
 80076a4:	f000 f80e 	bl	80076c4 <__malloc_unlock>
 80076a8:	e797      	b.n	80075da <_malloc_r+0x22>
 80076aa:	6025      	str	r5, [r4, #0]
 80076ac:	e7dc      	b.n	8007668 <_malloc_r+0xb0>
 80076ae:	605b      	str	r3, [r3, #4]
 80076b0:	deff      	udf	#255	; 0xff
 80076b2:	bf00      	nop
 80076b4:	20006c64 	.word	0x20006c64

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_lock+0x8>)
 80076ba:	f001 b8d2 	b.w	8008862 <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	20006dac 	.word	0x20006dac

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_unlock+0x8>)
 80076c6:	f001 b8cd 	b.w	8008864 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	20006dac 	.word	0x20006dac

080076d0 <__cvt>:
 80076d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	ec55 4b10 	vmov	r4, r5, d0
 80076d8:	2d00      	cmp	r5, #0
 80076da:	460e      	mov	r6, r1
 80076dc:	4619      	mov	r1, r3
 80076de:	462b      	mov	r3, r5
 80076e0:	bfbb      	ittet	lt
 80076e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80076e6:	461d      	movlt	r5, r3
 80076e8:	2300      	movge	r3, #0
 80076ea:	232d      	movlt	r3, #45	; 0x2d
 80076ec:	700b      	strb	r3, [r1, #0]
 80076ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80076f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80076f4:	4691      	mov	r9, r2
 80076f6:	f023 0820 	bic.w	r8, r3, #32
 80076fa:	bfbc      	itt	lt
 80076fc:	4622      	movlt	r2, r4
 80076fe:	4614      	movlt	r4, r2
 8007700:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007704:	d005      	beq.n	8007712 <__cvt+0x42>
 8007706:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800770a:	d100      	bne.n	800770e <__cvt+0x3e>
 800770c:	3601      	adds	r6, #1
 800770e:	2102      	movs	r1, #2
 8007710:	e000      	b.n	8007714 <__cvt+0x44>
 8007712:	2103      	movs	r1, #3
 8007714:	ab03      	add	r3, sp, #12
 8007716:	9301      	str	r3, [sp, #4]
 8007718:	ab02      	add	r3, sp, #8
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	ec45 4b10 	vmov	d0, r4, r5
 8007720:	4653      	mov	r3, sl
 8007722:	4632      	mov	r2, r6
 8007724:	f001 f93c 	bl	80089a0 <_dtoa_r>
 8007728:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800772c:	4607      	mov	r7, r0
 800772e:	d102      	bne.n	8007736 <__cvt+0x66>
 8007730:	f019 0f01 	tst.w	r9, #1
 8007734:	d022      	beq.n	800777c <__cvt+0xac>
 8007736:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800773a:	eb07 0906 	add.w	r9, r7, r6
 800773e:	d110      	bne.n	8007762 <__cvt+0x92>
 8007740:	783b      	ldrb	r3, [r7, #0]
 8007742:	2b30      	cmp	r3, #48	; 0x30
 8007744:	d10a      	bne.n	800775c <__cvt+0x8c>
 8007746:	2200      	movs	r2, #0
 8007748:	2300      	movs	r3, #0
 800774a:	4620      	mov	r0, r4
 800774c:	4629      	mov	r1, r5
 800774e:	f7f9 f9bb 	bl	8000ac8 <__aeabi_dcmpeq>
 8007752:	b918      	cbnz	r0, 800775c <__cvt+0x8c>
 8007754:	f1c6 0601 	rsb	r6, r6, #1
 8007758:	f8ca 6000 	str.w	r6, [sl]
 800775c:	f8da 3000 	ldr.w	r3, [sl]
 8007760:	4499      	add	r9, r3
 8007762:	2200      	movs	r2, #0
 8007764:	2300      	movs	r3, #0
 8007766:	4620      	mov	r0, r4
 8007768:	4629      	mov	r1, r5
 800776a:	f7f9 f9ad 	bl	8000ac8 <__aeabi_dcmpeq>
 800776e:	b108      	cbz	r0, 8007774 <__cvt+0xa4>
 8007770:	f8cd 900c 	str.w	r9, [sp, #12]
 8007774:	2230      	movs	r2, #48	; 0x30
 8007776:	9b03      	ldr	r3, [sp, #12]
 8007778:	454b      	cmp	r3, r9
 800777a:	d307      	bcc.n	800778c <__cvt+0xbc>
 800777c:	9b03      	ldr	r3, [sp, #12]
 800777e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007780:	1bdb      	subs	r3, r3, r7
 8007782:	4638      	mov	r0, r7
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	b004      	add	sp, #16
 8007788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800778c:	1c59      	adds	r1, r3, #1
 800778e:	9103      	str	r1, [sp, #12]
 8007790:	701a      	strb	r2, [r3, #0]
 8007792:	e7f0      	b.n	8007776 <__cvt+0xa6>

08007794 <__exponent>:
 8007794:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007796:	4603      	mov	r3, r0
 8007798:	2900      	cmp	r1, #0
 800779a:	bfb8      	it	lt
 800779c:	4249      	neglt	r1, r1
 800779e:	f803 2b02 	strb.w	r2, [r3], #2
 80077a2:	bfb4      	ite	lt
 80077a4:	222d      	movlt	r2, #45	; 0x2d
 80077a6:	222b      	movge	r2, #43	; 0x2b
 80077a8:	2909      	cmp	r1, #9
 80077aa:	7042      	strb	r2, [r0, #1]
 80077ac:	dd2a      	ble.n	8007804 <__exponent+0x70>
 80077ae:	f10d 0207 	add.w	r2, sp, #7
 80077b2:	4617      	mov	r7, r2
 80077b4:	260a      	movs	r6, #10
 80077b6:	4694      	mov	ip, r2
 80077b8:	fb91 f5f6 	sdiv	r5, r1, r6
 80077bc:	fb06 1415 	mls	r4, r6, r5, r1
 80077c0:	3430      	adds	r4, #48	; 0x30
 80077c2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80077c6:	460c      	mov	r4, r1
 80077c8:	2c63      	cmp	r4, #99	; 0x63
 80077ca:	f102 32ff 	add.w	r2, r2, #4294967295
 80077ce:	4629      	mov	r1, r5
 80077d0:	dcf1      	bgt.n	80077b6 <__exponent+0x22>
 80077d2:	3130      	adds	r1, #48	; 0x30
 80077d4:	f1ac 0402 	sub.w	r4, ip, #2
 80077d8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80077dc:	1c41      	adds	r1, r0, #1
 80077de:	4622      	mov	r2, r4
 80077e0:	42ba      	cmp	r2, r7
 80077e2:	d30a      	bcc.n	80077fa <__exponent+0x66>
 80077e4:	f10d 0209 	add.w	r2, sp, #9
 80077e8:	eba2 020c 	sub.w	r2, r2, ip
 80077ec:	42bc      	cmp	r4, r7
 80077ee:	bf88      	it	hi
 80077f0:	2200      	movhi	r2, #0
 80077f2:	4413      	add	r3, r2
 80077f4:	1a18      	subs	r0, r3, r0
 80077f6:	b003      	add	sp, #12
 80077f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077fa:	f812 5b01 	ldrb.w	r5, [r2], #1
 80077fe:	f801 5f01 	strb.w	r5, [r1, #1]!
 8007802:	e7ed      	b.n	80077e0 <__exponent+0x4c>
 8007804:	2330      	movs	r3, #48	; 0x30
 8007806:	3130      	adds	r1, #48	; 0x30
 8007808:	7083      	strb	r3, [r0, #2]
 800780a:	70c1      	strb	r1, [r0, #3]
 800780c:	1d03      	adds	r3, r0, #4
 800780e:	e7f1      	b.n	80077f4 <__exponent+0x60>

08007810 <_printf_float>:
 8007810:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007814:	ed2d 8b02 	vpush	{d8}
 8007818:	b08d      	sub	sp, #52	; 0x34
 800781a:	460c      	mov	r4, r1
 800781c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007820:	4616      	mov	r6, r2
 8007822:	461f      	mov	r7, r3
 8007824:	4605      	mov	r5, r0
 8007826:	f000 ff41 	bl	80086ac <_localeconv_r>
 800782a:	f8d0 a000 	ldr.w	sl, [r0]
 800782e:	4650      	mov	r0, sl
 8007830:	f7f8 fd1e 	bl	8000270 <strlen>
 8007834:	2300      	movs	r3, #0
 8007836:	930a      	str	r3, [sp, #40]	; 0x28
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	9305      	str	r3, [sp, #20]
 800783c:	f8d8 3000 	ldr.w	r3, [r8]
 8007840:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007844:	3307      	adds	r3, #7
 8007846:	f023 0307 	bic.w	r3, r3, #7
 800784a:	f103 0208 	add.w	r2, r3, #8
 800784e:	f8c8 2000 	str.w	r2, [r8]
 8007852:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007856:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800785a:	9307      	str	r3, [sp, #28]
 800785c:	f8cd 8018 	str.w	r8, [sp, #24]
 8007860:	ee08 0a10 	vmov	s16, r0
 8007864:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8007868:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800786c:	4b9e      	ldr	r3, [pc, #632]	; (8007ae8 <_printf_float+0x2d8>)
 800786e:	f04f 32ff 	mov.w	r2, #4294967295
 8007872:	f7f9 f95b 	bl	8000b2c <__aeabi_dcmpun>
 8007876:	bb88      	cbnz	r0, 80078dc <_printf_float+0xcc>
 8007878:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800787c:	4b9a      	ldr	r3, [pc, #616]	; (8007ae8 <_printf_float+0x2d8>)
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	f7f9 f935 	bl	8000af0 <__aeabi_dcmple>
 8007886:	bb48      	cbnz	r0, 80078dc <_printf_float+0xcc>
 8007888:	2200      	movs	r2, #0
 800788a:	2300      	movs	r3, #0
 800788c:	4640      	mov	r0, r8
 800788e:	4649      	mov	r1, r9
 8007890:	f7f9 f924 	bl	8000adc <__aeabi_dcmplt>
 8007894:	b110      	cbz	r0, 800789c <_printf_float+0x8c>
 8007896:	232d      	movs	r3, #45	; 0x2d
 8007898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800789c:	4a93      	ldr	r2, [pc, #588]	; (8007aec <_printf_float+0x2dc>)
 800789e:	4b94      	ldr	r3, [pc, #592]	; (8007af0 <_printf_float+0x2e0>)
 80078a0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80078a4:	bf94      	ite	ls
 80078a6:	4690      	movls	r8, r2
 80078a8:	4698      	movhi	r8, r3
 80078aa:	2303      	movs	r3, #3
 80078ac:	6123      	str	r3, [r4, #16]
 80078ae:	9b05      	ldr	r3, [sp, #20]
 80078b0:	f023 0304 	bic.w	r3, r3, #4
 80078b4:	6023      	str	r3, [r4, #0]
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	9700      	str	r7, [sp, #0]
 80078bc:	4633      	mov	r3, r6
 80078be:	aa0b      	add	r2, sp, #44	; 0x2c
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f9da 	bl	8007c7c <_printf_common>
 80078c8:	3001      	adds	r0, #1
 80078ca:	f040 8090 	bne.w	80079ee <_printf_float+0x1de>
 80078ce:	f04f 30ff 	mov.w	r0, #4294967295
 80078d2:	b00d      	add	sp, #52	; 0x34
 80078d4:	ecbd 8b02 	vpop	{d8}
 80078d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078dc:	4642      	mov	r2, r8
 80078de:	464b      	mov	r3, r9
 80078e0:	4640      	mov	r0, r8
 80078e2:	4649      	mov	r1, r9
 80078e4:	f7f9 f922 	bl	8000b2c <__aeabi_dcmpun>
 80078e8:	b140      	cbz	r0, 80078fc <_printf_float+0xec>
 80078ea:	464b      	mov	r3, r9
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	bfbc      	itt	lt
 80078f0:	232d      	movlt	r3, #45	; 0x2d
 80078f2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80078f6:	4a7f      	ldr	r2, [pc, #508]	; (8007af4 <_printf_float+0x2e4>)
 80078f8:	4b7f      	ldr	r3, [pc, #508]	; (8007af8 <_printf_float+0x2e8>)
 80078fa:	e7d1      	b.n	80078a0 <_printf_float+0x90>
 80078fc:	6863      	ldr	r3, [r4, #4]
 80078fe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007902:	9206      	str	r2, [sp, #24]
 8007904:	1c5a      	adds	r2, r3, #1
 8007906:	d13f      	bne.n	8007988 <_printf_float+0x178>
 8007908:	2306      	movs	r3, #6
 800790a:	6063      	str	r3, [r4, #4]
 800790c:	9b05      	ldr	r3, [sp, #20]
 800790e:	6861      	ldr	r1, [r4, #4]
 8007910:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007914:	2300      	movs	r3, #0
 8007916:	9303      	str	r3, [sp, #12]
 8007918:	ab0a      	add	r3, sp, #40	; 0x28
 800791a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800791e:	ab09      	add	r3, sp, #36	; 0x24
 8007920:	ec49 8b10 	vmov	d0, r8, r9
 8007924:	9300      	str	r3, [sp, #0]
 8007926:	6022      	str	r2, [r4, #0]
 8007928:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800792c:	4628      	mov	r0, r5
 800792e:	f7ff fecf 	bl	80076d0 <__cvt>
 8007932:	9b06      	ldr	r3, [sp, #24]
 8007934:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007936:	2b47      	cmp	r3, #71	; 0x47
 8007938:	4680      	mov	r8, r0
 800793a:	d108      	bne.n	800794e <_printf_float+0x13e>
 800793c:	1cc8      	adds	r0, r1, #3
 800793e:	db02      	blt.n	8007946 <_printf_float+0x136>
 8007940:	6863      	ldr	r3, [r4, #4]
 8007942:	4299      	cmp	r1, r3
 8007944:	dd41      	ble.n	80079ca <_printf_float+0x1ba>
 8007946:	f1ab 0302 	sub.w	r3, fp, #2
 800794a:	fa5f fb83 	uxtb.w	fp, r3
 800794e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007952:	d820      	bhi.n	8007996 <_printf_float+0x186>
 8007954:	3901      	subs	r1, #1
 8007956:	465a      	mov	r2, fp
 8007958:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800795c:	9109      	str	r1, [sp, #36]	; 0x24
 800795e:	f7ff ff19 	bl	8007794 <__exponent>
 8007962:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007964:	1813      	adds	r3, r2, r0
 8007966:	2a01      	cmp	r2, #1
 8007968:	4681      	mov	r9, r0
 800796a:	6123      	str	r3, [r4, #16]
 800796c:	dc02      	bgt.n	8007974 <_printf_float+0x164>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	07d2      	lsls	r2, r2, #31
 8007972:	d501      	bpl.n	8007978 <_printf_float+0x168>
 8007974:	3301      	adds	r3, #1
 8007976:	6123      	str	r3, [r4, #16]
 8007978:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800797c:	2b00      	cmp	r3, #0
 800797e:	d09c      	beq.n	80078ba <_printf_float+0xaa>
 8007980:	232d      	movs	r3, #45	; 0x2d
 8007982:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007986:	e798      	b.n	80078ba <_printf_float+0xaa>
 8007988:	9a06      	ldr	r2, [sp, #24]
 800798a:	2a47      	cmp	r2, #71	; 0x47
 800798c:	d1be      	bne.n	800790c <_printf_float+0xfc>
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1bc      	bne.n	800790c <_printf_float+0xfc>
 8007992:	2301      	movs	r3, #1
 8007994:	e7b9      	b.n	800790a <_printf_float+0xfa>
 8007996:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800799a:	d118      	bne.n	80079ce <_printf_float+0x1be>
 800799c:	2900      	cmp	r1, #0
 800799e:	6863      	ldr	r3, [r4, #4]
 80079a0:	dd0b      	ble.n	80079ba <_printf_float+0x1aa>
 80079a2:	6121      	str	r1, [r4, #16]
 80079a4:	b913      	cbnz	r3, 80079ac <_printf_float+0x19c>
 80079a6:	6822      	ldr	r2, [r4, #0]
 80079a8:	07d0      	lsls	r0, r2, #31
 80079aa:	d502      	bpl.n	80079b2 <_printf_float+0x1a2>
 80079ac:	3301      	adds	r3, #1
 80079ae:	440b      	add	r3, r1
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80079b4:	f04f 0900 	mov.w	r9, #0
 80079b8:	e7de      	b.n	8007978 <_printf_float+0x168>
 80079ba:	b913      	cbnz	r3, 80079c2 <_printf_float+0x1b2>
 80079bc:	6822      	ldr	r2, [r4, #0]
 80079be:	07d2      	lsls	r2, r2, #31
 80079c0:	d501      	bpl.n	80079c6 <_printf_float+0x1b6>
 80079c2:	3302      	adds	r3, #2
 80079c4:	e7f4      	b.n	80079b0 <_printf_float+0x1a0>
 80079c6:	2301      	movs	r3, #1
 80079c8:	e7f2      	b.n	80079b0 <_printf_float+0x1a0>
 80079ca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80079ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079d0:	4299      	cmp	r1, r3
 80079d2:	db05      	blt.n	80079e0 <_printf_float+0x1d0>
 80079d4:	6823      	ldr	r3, [r4, #0]
 80079d6:	6121      	str	r1, [r4, #16]
 80079d8:	07d8      	lsls	r0, r3, #31
 80079da:	d5ea      	bpl.n	80079b2 <_printf_float+0x1a2>
 80079dc:	1c4b      	adds	r3, r1, #1
 80079de:	e7e7      	b.n	80079b0 <_printf_float+0x1a0>
 80079e0:	2900      	cmp	r1, #0
 80079e2:	bfd4      	ite	le
 80079e4:	f1c1 0202 	rsble	r2, r1, #2
 80079e8:	2201      	movgt	r2, #1
 80079ea:	4413      	add	r3, r2
 80079ec:	e7e0      	b.n	80079b0 <_printf_float+0x1a0>
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	055a      	lsls	r2, r3, #21
 80079f2:	d407      	bmi.n	8007a04 <_printf_float+0x1f4>
 80079f4:	6923      	ldr	r3, [r4, #16]
 80079f6:	4642      	mov	r2, r8
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	47b8      	blx	r7
 80079fe:	3001      	adds	r0, #1
 8007a00:	d12c      	bne.n	8007a5c <_printf_float+0x24c>
 8007a02:	e764      	b.n	80078ce <_printf_float+0xbe>
 8007a04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007a08:	f240 80e0 	bls.w	8007bcc <_printf_float+0x3bc>
 8007a0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007a10:	2200      	movs	r2, #0
 8007a12:	2300      	movs	r3, #0
 8007a14:	f7f9 f858 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	d034      	beq.n	8007a86 <_printf_float+0x276>
 8007a1c:	4a37      	ldr	r2, [pc, #220]	; (8007afc <_printf_float+0x2ec>)
 8007a1e:	2301      	movs	r3, #1
 8007a20:	4631      	mov	r1, r6
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b8      	blx	r7
 8007a26:	3001      	adds	r0, #1
 8007a28:	f43f af51 	beq.w	80078ce <_printf_float+0xbe>
 8007a2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a30:	429a      	cmp	r2, r3
 8007a32:	db02      	blt.n	8007a3a <_printf_float+0x22a>
 8007a34:	6823      	ldr	r3, [r4, #0]
 8007a36:	07d8      	lsls	r0, r3, #31
 8007a38:	d510      	bpl.n	8007a5c <_printf_float+0x24c>
 8007a3a:	ee18 3a10 	vmov	r3, s16
 8007a3e:	4652      	mov	r2, sl
 8007a40:	4631      	mov	r1, r6
 8007a42:	4628      	mov	r0, r5
 8007a44:	47b8      	blx	r7
 8007a46:	3001      	adds	r0, #1
 8007a48:	f43f af41 	beq.w	80078ce <_printf_float+0xbe>
 8007a4c:	f04f 0800 	mov.w	r8, #0
 8007a50:	f104 091a 	add.w	r9, r4, #26
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	3b01      	subs	r3, #1
 8007a58:	4543      	cmp	r3, r8
 8007a5a:	dc09      	bgt.n	8007a70 <_printf_float+0x260>
 8007a5c:	6823      	ldr	r3, [r4, #0]
 8007a5e:	079b      	lsls	r3, r3, #30
 8007a60:	f100 8107 	bmi.w	8007c72 <_printf_float+0x462>
 8007a64:	68e0      	ldr	r0, [r4, #12]
 8007a66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a68:	4298      	cmp	r0, r3
 8007a6a:	bfb8      	it	lt
 8007a6c:	4618      	movlt	r0, r3
 8007a6e:	e730      	b.n	80078d2 <_printf_float+0xc2>
 8007a70:	2301      	movs	r3, #1
 8007a72:	464a      	mov	r2, r9
 8007a74:	4631      	mov	r1, r6
 8007a76:	4628      	mov	r0, r5
 8007a78:	47b8      	blx	r7
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	f43f af27 	beq.w	80078ce <_printf_float+0xbe>
 8007a80:	f108 0801 	add.w	r8, r8, #1
 8007a84:	e7e6      	b.n	8007a54 <_printf_float+0x244>
 8007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	dc39      	bgt.n	8007b00 <_printf_float+0x2f0>
 8007a8c:	4a1b      	ldr	r2, [pc, #108]	; (8007afc <_printf_float+0x2ec>)
 8007a8e:	2301      	movs	r3, #1
 8007a90:	4631      	mov	r1, r6
 8007a92:	4628      	mov	r0, r5
 8007a94:	47b8      	blx	r7
 8007a96:	3001      	adds	r0, #1
 8007a98:	f43f af19 	beq.w	80078ce <_printf_float+0xbe>
 8007a9c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007aa0:	4313      	orrs	r3, r2
 8007aa2:	d102      	bne.n	8007aaa <_printf_float+0x29a>
 8007aa4:	6823      	ldr	r3, [r4, #0]
 8007aa6:	07d9      	lsls	r1, r3, #31
 8007aa8:	d5d8      	bpl.n	8007a5c <_printf_float+0x24c>
 8007aaa:	ee18 3a10 	vmov	r3, s16
 8007aae:	4652      	mov	r2, sl
 8007ab0:	4631      	mov	r1, r6
 8007ab2:	4628      	mov	r0, r5
 8007ab4:	47b8      	blx	r7
 8007ab6:	3001      	adds	r0, #1
 8007ab8:	f43f af09 	beq.w	80078ce <_printf_float+0xbe>
 8007abc:	f04f 0900 	mov.w	r9, #0
 8007ac0:	f104 0a1a 	add.w	sl, r4, #26
 8007ac4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ac6:	425b      	negs	r3, r3
 8007ac8:	454b      	cmp	r3, r9
 8007aca:	dc01      	bgt.n	8007ad0 <_printf_float+0x2c0>
 8007acc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ace:	e792      	b.n	80079f6 <_printf_float+0x1e6>
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	4652      	mov	r2, sl
 8007ad4:	4631      	mov	r1, r6
 8007ad6:	4628      	mov	r0, r5
 8007ad8:	47b8      	blx	r7
 8007ada:	3001      	adds	r0, #1
 8007adc:	f43f aef7 	beq.w	80078ce <_printf_float+0xbe>
 8007ae0:	f109 0901 	add.w	r9, r9, #1
 8007ae4:	e7ee      	b.n	8007ac4 <_printf_float+0x2b4>
 8007ae6:	bf00      	nop
 8007ae8:	7fefffff 	.word	0x7fefffff
 8007aec:	0801ef6c 	.word	0x0801ef6c
 8007af0:	0801ef70 	.word	0x0801ef70
 8007af4:	0801ef74 	.word	0x0801ef74
 8007af8:	0801ef78 	.word	0x0801ef78
 8007afc:	0801ef7c 	.word	0x0801ef7c
 8007b00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b04:	429a      	cmp	r2, r3
 8007b06:	bfa8      	it	ge
 8007b08:	461a      	movge	r2, r3
 8007b0a:	2a00      	cmp	r2, #0
 8007b0c:	4691      	mov	r9, r2
 8007b0e:	dc37      	bgt.n	8007b80 <_printf_float+0x370>
 8007b10:	f04f 0b00 	mov.w	fp, #0
 8007b14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b18:	f104 021a 	add.w	r2, r4, #26
 8007b1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007b1e:	9305      	str	r3, [sp, #20]
 8007b20:	eba3 0309 	sub.w	r3, r3, r9
 8007b24:	455b      	cmp	r3, fp
 8007b26:	dc33      	bgt.n	8007b90 <_printf_float+0x380>
 8007b28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b2c:	429a      	cmp	r2, r3
 8007b2e:	db3b      	blt.n	8007ba8 <_printf_float+0x398>
 8007b30:	6823      	ldr	r3, [r4, #0]
 8007b32:	07da      	lsls	r2, r3, #31
 8007b34:	d438      	bmi.n	8007ba8 <_printf_float+0x398>
 8007b36:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007b3a:	eba2 0903 	sub.w	r9, r2, r3
 8007b3e:	9b05      	ldr	r3, [sp, #20]
 8007b40:	1ad2      	subs	r2, r2, r3
 8007b42:	4591      	cmp	r9, r2
 8007b44:	bfa8      	it	ge
 8007b46:	4691      	movge	r9, r2
 8007b48:	f1b9 0f00 	cmp.w	r9, #0
 8007b4c:	dc35      	bgt.n	8007bba <_printf_float+0x3aa>
 8007b4e:	f04f 0800 	mov.w	r8, #0
 8007b52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b56:	f104 0a1a 	add.w	sl, r4, #26
 8007b5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	eba3 0309 	sub.w	r3, r3, r9
 8007b64:	4543      	cmp	r3, r8
 8007b66:	f77f af79 	ble.w	8007a5c <_printf_float+0x24c>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	4652      	mov	r2, sl
 8007b6e:	4631      	mov	r1, r6
 8007b70:	4628      	mov	r0, r5
 8007b72:	47b8      	blx	r7
 8007b74:	3001      	adds	r0, #1
 8007b76:	f43f aeaa 	beq.w	80078ce <_printf_float+0xbe>
 8007b7a:	f108 0801 	add.w	r8, r8, #1
 8007b7e:	e7ec      	b.n	8007b5a <_printf_float+0x34a>
 8007b80:	4613      	mov	r3, r2
 8007b82:	4631      	mov	r1, r6
 8007b84:	4642      	mov	r2, r8
 8007b86:	4628      	mov	r0, r5
 8007b88:	47b8      	blx	r7
 8007b8a:	3001      	adds	r0, #1
 8007b8c:	d1c0      	bne.n	8007b10 <_printf_float+0x300>
 8007b8e:	e69e      	b.n	80078ce <_printf_float+0xbe>
 8007b90:	2301      	movs	r3, #1
 8007b92:	4631      	mov	r1, r6
 8007b94:	4628      	mov	r0, r5
 8007b96:	9205      	str	r2, [sp, #20]
 8007b98:	47b8      	blx	r7
 8007b9a:	3001      	adds	r0, #1
 8007b9c:	f43f ae97 	beq.w	80078ce <_printf_float+0xbe>
 8007ba0:	9a05      	ldr	r2, [sp, #20]
 8007ba2:	f10b 0b01 	add.w	fp, fp, #1
 8007ba6:	e7b9      	b.n	8007b1c <_printf_float+0x30c>
 8007ba8:	ee18 3a10 	vmov	r3, s16
 8007bac:	4652      	mov	r2, sl
 8007bae:	4631      	mov	r1, r6
 8007bb0:	4628      	mov	r0, r5
 8007bb2:	47b8      	blx	r7
 8007bb4:	3001      	adds	r0, #1
 8007bb6:	d1be      	bne.n	8007b36 <_printf_float+0x326>
 8007bb8:	e689      	b.n	80078ce <_printf_float+0xbe>
 8007bba:	9a05      	ldr	r2, [sp, #20]
 8007bbc:	464b      	mov	r3, r9
 8007bbe:	4442      	add	r2, r8
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	47b8      	blx	r7
 8007bc6:	3001      	adds	r0, #1
 8007bc8:	d1c1      	bne.n	8007b4e <_printf_float+0x33e>
 8007bca:	e680      	b.n	80078ce <_printf_float+0xbe>
 8007bcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007bce:	2a01      	cmp	r2, #1
 8007bd0:	dc01      	bgt.n	8007bd6 <_printf_float+0x3c6>
 8007bd2:	07db      	lsls	r3, r3, #31
 8007bd4:	d53a      	bpl.n	8007c4c <_printf_float+0x43c>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	4642      	mov	r2, r8
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f ae74 	beq.w	80078ce <_printf_float+0xbe>
 8007be6:	ee18 3a10 	vmov	r3, s16
 8007bea:	4652      	mov	r2, sl
 8007bec:	4631      	mov	r1, r6
 8007bee:	4628      	mov	r0, r5
 8007bf0:	47b8      	blx	r7
 8007bf2:	3001      	adds	r0, #1
 8007bf4:	f43f ae6b 	beq.w	80078ce <_printf_float+0xbe>
 8007bf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2300      	movs	r3, #0
 8007c00:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8007c04:	f7f8 ff60 	bl	8000ac8 <__aeabi_dcmpeq>
 8007c08:	b9d8      	cbnz	r0, 8007c42 <_printf_float+0x432>
 8007c0a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8007c0e:	f108 0201 	add.w	r2, r8, #1
 8007c12:	4631      	mov	r1, r6
 8007c14:	4628      	mov	r0, r5
 8007c16:	47b8      	blx	r7
 8007c18:	3001      	adds	r0, #1
 8007c1a:	d10e      	bne.n	8007c3a <_printf_float+0x42a>
 8007c1c:	e657      	b.n	80078ce <_printf_float+0xbe>
 8007c1e:	2301      	movs	r3, #1
 8007c20:	4652      	mov	r2, sl
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f43f ae50 	beq.w	80078ce <_printf_float+0xbe>
 8007c2e:	f108 0801 	add.w	r8, r8, #1
 8007c32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007c34:	3b01      	subs	r3, #1
 8007c36:	4543      	cmp	r3, r8
 8007c38:	dcf1      	bgt.n	8007c1e <_printf_float+0x40e>
 8007c3a:	464b      	mov	r3, r9
 8007c3c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007c40:	e6da      	b.n	80079f8 <_printf_float+0x1e8>
 8007c42:	f04f 0800 	mov.w	r8, #0
 8007c46:	f104 0a1a 	add.w	sl, r4, #26
 8007c4a:	e7f2      	b.n	8007c32 <_printf_float+0x422>
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	4642      	mov	r2, r8
 8007c50:	e7df      	b.n	8007c12 <_printf_float+0x402>
 8007c52:	2301      	movs	r3, #1
 8007c54:	464a      	mov	r2, r9
 8007c56:	4631      	mov	r1, r6
 8007c58:	4628      	mov	r0, r5
 8007c5a:	47b8      	blx	r7
 8007c5c:	3001      	adds	r0, #1
 8007c5e:	f43f ae36 	beq.w	80078ce <_printf_float+0xbe>
 8007c62:	f108 0801 	add.w	r8, r8, #1
 8007c66:	68e3      	ldr	r3, [r4, #12]
 8007c68:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007c6a:	1a5b      	subs	r3, r3, r1
 8007c6c:	4543      	cmp	r3, r8
 8007c6e:	dcf0      	bgt.n	8007c52 <_printf_float+0x442>
 8007c70:	e6f8      	b.n	8007a64 <_printf_float+0x254>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	f104 0919 	add.w	r9, r4, #25
 8007c7a:	e7f4      	b.n	8007c66 <_printf_float+0x456>

08007c7c <_printf_common>:
 8007c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c80:	4616      	mov	r6, r2
 8007c82:	4699      	mov	r9, r3
 8007c84:	688a      	ldr	r2, [r1, #8]
 8007c86:	690b      	ldr	r3, [r1, #16]
 8007c88:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c8c:	4293      	cmp	r3, r2
 8007c8e:	bfb8      	it	lt
 8007c90:	4613      	movlt	r3, r2
 8007c92:	6033      	str	r3, [r6, #0]
 8007c94:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c98:	4607      	mov	r7, r0
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_printf_common+0x26>
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	6033      	str	r3, [r6, #0]
 8007ca2:	6823      	ldr	r3, [r4, #0]
 8007ca4:	0699      	lsls	r1, r3, #26
 8007ca6:	bf42      	ittt	mi
 8007ca8:	6833      	ldrmi	r3, [r6, #0]
 8007caa:	3302      	addmi	r3, #2
 8007cac:	6033      	strmi	r3, [r6, #0]
 8007cae:	6825      	ldr	r5, [r4, #0]
 8007cb0:	f015 0506 	ands.w	r5, r5, #6
 8007cb4:	d106      	bne.n	8007cc4 <_printf_common+0x48>
 8007cb6:	f104 0a19 	add.w	sl, r4, #25
 8007cba:	68e3      	ldr	r3, [r4, #12]
 8007cbc:	6832      	ldr	r2, [r6, #0]
 8007cbe:	1a9b      	subs	r3, r3, r2
 8007cc0:	42ab      	cmp	r3, r5
 8007cc2:	dc26      	bgt.n	8007d12 <_printf_common+0x96>
 8007cc4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007cc8:	1e13      	subs	r3, r2, #0
 8007cca:	6822      	ldr	r2, [r4, #0]
 8007ccc:	bf18      	it	ne
 8007cce:	2301      	movne	r3, #1
 8007cd0:	0692      	lsls	r2, r2, #26
 8007cd2:	d42b      	bmi.n	8007d2c <_printf_common+0xb0>
 8007cd4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007cd8:	4649      	mov	r1, r9
 8007cda:	4638      	mov	r0, r7
 8007cdc:	47c0      	blx	r8
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d01e      	beq.n	8007d20 <_printf_common+0xa4>
 8007ce2:	6823      	ldr	r3, [r4, #0]
 8007ce4:	6922      	ldr	r2, [r4, #16]
 8007ce6:	f003 0306 	and.w	r3, r3, #6
 8007cea:	2b04      	cmp	r3, #4
 8007cec:	bf02      	ittt	eq
 8007cee:	68e5      	ldreq	r5, [r4, #12]
 8007cf0:	6833      	ldreq	r3, [r6, #0]
 8007cf2:	1aed      	subeq	r5, r5, r3
 8007cf4:	68a3      	ldr	r3, [r4, #8]
 8007cf6:	bf0c      	ite	eq
 8007cf8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007cfc:	2500      	movne	r5, #0
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	bfc4      	itt	gt
 8007d02:	1a9b      	subgt	r3, r3, r2
 8007d04:	18ed      	addgt	r5, r5, r3
 8007d06:	2600      	movs	r6, #0
 8007d08:	341a      	adds	r4, #26
 8007d0a:	42b5      	cmp	r5, r6
 8007d0c:	d11a      	bne.n	8007d44 <_printf_common+0xc8>
 8007d0e:	2000      	movs	r0, #0
 8007d10:	e008      	b.n	8007d24 <_printf_common+0xa8>
 8007d12:	2301      	movs	r3, #1
 8007d14:	4652      	mov	r2, sl
 8007d16:	4649      	mov	r1, r9
 8007d18:	4638      	mov	r0, r7
 8007d1a:	47c0      	blx	r8
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d103      	bne.n	8007d28 <_printf_common+0xac>
 8007d20:	f04f 30ff 	mov.w	r0, #4294967295
 8007d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d28:	3501      	adds	r5, #1
 8007d2a:	e7c6      	b.n	8007cba <_printf_common+0x3e>
 8007d2c:	18e1      	adds	r1, r4, r3
 8007d2e:	1c5a      	adds	r2, r3, #1
 8007d30:	2030      	movs	r0, #48	; 0x30
 8007d32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d36:	4422      	add	r2, r4
 8007d38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d40:	3302      	adds	r3, #2
 8007d42:	e7c7      	b.n	8007cd4 <_printf_common+0x58>
 8007d44:	2301      	movs	r3, #1
 8007d46:	4622      	mov	r2, r4
 8007d48:	4649      	mov	r1, r9
 8007d4a:	4638      	mov	r0, r7
 8007d4c:	47c0      	blx	r8
 8007d4e:	3001      	adds	r0, #1
 8007d50:	d0e6      	beq.n	8007d20 <_printf_common+0xa4>
 8007d52:	3601      	adds	r6, #1
 8007d54:	e7d9      	b.n	8007d0a <_printf_common+0x8e>
	...

08007d58 <_printf_i>:
 8007d58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5c:	7e0f      	ldrb	r7, [r1, #24]
 8007d5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007d60:	2f78      	cmp	r7, #120	; 0x78
 8007d62:	4691      	mov	r9, r2
 8007d64:	4680      	mov	r8, r0
 8007d66:	460c      	mov	r4, r1
 8007d68:	469a      	mov	sl, r3
 8007d6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007d6e:	d807      	bhi.n	8007d80 <_printf_i+0x28>
 8007d70:	2f62      	cmp	r7, #98	; 0x62
 8007d72:	d80a      	bhi.n	8007d8a <_printf_i+0x32>
 8007d74:	2f00      	cmp	r7, #0
 8007d76:	f000 80d4 	beq.w	8007f22 <_printf_i+0x1ca>
 8007d7a:	2f58      	cmp	r7, #88	; 0x58
 8007d7c:	f000 80c0 	beq.w	8007f00 <_printf_i+0x1a8>
 8007d80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d88:	e03a      	b.n	8007e00 <_printf_i+0xa8>
 8007d8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d8e:	2b15      	cmp	r3, #21
 8007d90:	d8f6      	bhi.n	8007d80 <_printf_i+0x28>
 8007d92:	a101      	add	r1, pc, #4	; (adr r1, 8007d98 <_printf_i+0x40>)
 8007d94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d98:	08007df1 	.word	0x08007df1
 8007d9c:	08007e05 	.word	0x08007e05
 8007da0:	08007d81 	.word	0x08007d81
 8007da4:	08007d81 	.word	0x08007d81
 8007da8:	08007d81 	.word	0x08007d81
 8007dac:	08007d81 	.word	0x08007d81
 8007db0:	08007e05 	.word	0x08007e05
 8007db4:	08007d81 	.word	0x08007d81
 8007db8:	08007d81 	.word	0x08007d81
 8007dbc:	08007d81 	.word	0x08007d81
 8007dc0:	08007d81 	.word	0x08007d81
 8007dc4:	08007f09 	.word	0x08007f09
 8007dc8:	08007e31 	.word	0x08007e31
 8007dcc:	08007ec3 	.word	0x08007ec3
 8007dd0:	08007d81 	.word	0x08007d81
 8007dd4:	08007d81 	.word	0x08007d81
 8007dd8:	08007f2b 	.word	0x08007f2b
 8007ddc:	08007d81 	.word	0x08007d81
 8007de0:	08007e31 	.word	0x08007e31
 8007de4:	08007d81 	.word	0x08007d81
 8007de8:	08007d81 	.word	0x08007d81
 8007dec:	08007ecb 	.word	0x08007ecb
 8007df0:	682b      	ldr	r3, [r5, #0]
 8007df2:	1d1a      	adds	r2, r3, #4
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	602a      	str	r2, [r5, #0]
 8007df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007dfc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09f      	b.n	8007f44 <_printf_i+0x1ec>
 8007e04:	6820      	ldr	r0, [r4, #0]
 8007e06:	682b      	ldr	r3, [r5, #0]
 8007e08:	0607      	lsls	r7, r0, #24
 8007e0a:	f103 0104 	add.w	r1, r3, #4
 8007e0e:	6029      	str	r1, [r5, #0]
 8007e10:	d501      	bpl.n	8007e16 <_printf_i+0xbe>
 8007e12:	681e      	ldr	r6, [r3, #0]
 8007e14:	e003      	b.n	8007e1e <_printf_i+0xc6>
 8007e16:	0646      	lsls	r6, r0, #25
 8007e18:	d5fb      	bpl.n	8007e12 <_printf_i+0xba>
 8007e1a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007e1e:	2e00      	cmp	r6, #0
 8007e20:	da03      	bge.n	8007e2a <_printf_i+0xd2>
 8007e22:	232d      	movs	r3, #45	; 0x2d
 8007e24:	4276      	negs	r6, r6
 8007e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e2a:	485a      	ldr	r0, [pc, #360]	; (8007f94 <_printf_i+0x23c>)
 8007e2c:	230a      	movs	r3, #10
 8007e2e:	e012      	b.n	8007e56 <_printf_i+0xfe>
 8007e30:	682b      	ldr	r3, [r5, #0]
 8007e32:	6820      	ldr	r0, [r4, #0]
 8007e34:	1d19      	adds	r1, r3, #4
 8007e36:	6029      	str	r1, [r5, #0]
 8007e38:	0605      	lsls	r5, r0, #24
 8007e3a:	d501      	bpl.n	8007e40 <_printf_i+0xe8>
 8007e3c:	681e      	ldr	r6, [r3, #0]
 8007e3e:	e002      	b.n	8007e46 <_printf_i+0xee>
 8007e40:	0641      	lsls	r1, r0, #25
 8007e42:	d5fb      	bpl.n	8007e3c <_printf_i+0xe4>
 8007e44:	881e      	ldrh	r6, [r3, #0]
 8007e46:	4853      	ldr	r0, [pc, #332]	; (8007f94 <_printf_i+0x23c>)
 8007e48:	2f6f      	cmp	r7, #111	; 0x6f
 8007e4a:	bf0c      	ite	eq
 8007e4c:	2308      	moveq	r3, #8
 8007e4e:	230a      	movne	r3, #10
 8007e50:	2100      	movs	r1, #0
 8007e52:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007e56:	6865      	ldr	r5, [r4, #4]
 8007e58:	60a5      	str	r5, [r4, #8]
 8007e5a:	2d00      	cmp	r5, #0
 8007e5c:	bfa2      	ittt	ge
 8007e5e:	6821      	ldrge	r1, [r4, #0]
 8007e60:	f021 0104 	bicge.w	r1, r1, #4
 8007e64:	6021      	strge	r1, [r4, #0]
 8007e66:	b90e      	cbnz	r6, 8007e6c <_printf_i+0x114>
 8007e68:	2d00      	cmp	r5, #0
 8007e6a:	d04b      	beq.n	8007f04 <_printf_i+0x1ac>
 8007e6c:	4615      	mov	r5, r2
 8007e6e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007e72:	fb03 6711 	mls	r7, r3, r1, r6
 8007e76:	5dc7      	ldrb	r7, [r0, r7]
 8007e78:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e7c:	4637      	mov	r7, r6
 8007e7e:	42bb      	cmp	r3, r7
 8007e80:	460e      	mov	r6, r1
 8007e82:	d9f4      	bls.n	8007e6e <_printf_i+0x116>
 8007e84:	2b08      	cmp	r3, #8
 8007e86:	d10b      	bne.n	8007ea0 <_printf_i+0x148>
 8007e88:	6823      	ldr	r3, [r4, #0]
 8007e8a:	07de      	lsls	r6, r3, #31
 8007e8c:	d508      	bpl.n	8007ea0 <_printf_i+0x148>
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	6861      	ldr	r1, [r4, #4]
 8007e92:	4299      	cmp	r1, r3
 8007e94:	bfde      	ittt	le
 8007e96:	2330      	movle	r3, #48	; 0x30
 8007e98:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e9c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007ea0:	1b52      	subs	r2, r2, r5
 8007ea2:	6122      	str	r2, [r4, #16]
 8007ea4:	f8cd a000 	str.w	sl, [sp]
 8007ea8:	464b      	mov	r3, r9
 8007eaa:	aa03      	add	r2, sp, #12
 8007eac:	4621      	mov	r1, r4
 8007eae:	4640      	mov	r0, r8
 8007eb0:	f7ff fee4 	bl	8007c7c <_printf_common>
 8007eb4:	3001      	adds	r0, #1
 8007eb6:	d14a      	bne.n	8007f4e <_printf_i+0x1f6>
 8007eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ebc:	b004      	add	sp, #16
 8007ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ec2:	6823      	ldr	r3, [r4, #0]
 8007ec4:	f043 0320 	orr.w	r3, r3, #32
 8007ec8:	6023      	str	r3, [r4, #0]
 8007eca:	4833      	ldr	r0, [pc, #204]	; (8007f98 <_printf_i+0x240>)
 8007ecc:	2778      	movs	r7, #120	; 0x78
 8007ece:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007ed2:	6823      	ldr	r3, [r4, #0]
 8007ed4:	6829      	ldr	r1, [r5, #0]
 8007ed6:	061f      	lsls	r7, r3, #24
 8007ed8:	f851 6b04 	ldr.w	r6, [r1], #4
 8007edc:	d402      	bmi.n	8007ee4 <_printf_i+0x18c>
 8007ede:	065f      	lsls	r7, r3, #25
 8007ee0:	bf48      	it	mi
 8007ee2:	b2b6      	uxthmi	r6, r6
 8007ee4:	07df      	lsls	r7, r3, #31
 8007ee6:	bf48      	it	mi
 8007ee8:	f043 0320 	orrmi.w	r3, r3, #32
 8007eec:	6029      	str	r1, [r5, #0]
 8007eee:	bf48      	it	mi
 8007ef0:	6023      	strmi	r3, [r4, #0]
 8007ef2:	b91e      	cbnz	r6, 8007efc <_printf_i+0x1a4>
 8007ef4:	6823      	ldr	r3, [r4, #0]
 8007ef6:	f023 0320 	bic.w	r3, r3, #32
 8007efa:	6023      	str	r3, [r4, #0]
 8007efc:	2310      	movs	r3, #16
 8007efe:	e7a7      	b.n	8007e50 <_printf_i+0xf8>
 8007f00:	4824      	ldr	r0, [pc, #144]	; (8007f94 <_printf_i+0x23c>)
 8007f02:	e7e4      	b.n	8007ece <_printf_i+0x176>
 8007f04:	4615      	mov	r5, r2
 8007f06:	e7bd      	b.n	8007e84 <_printf_i+0x12c>
 8007f08:	682b      	ldr	r3, [r5, #0]
 8007f0a:	6826      	ldr	r6, [r4, #0]
 8007f0c:	6961      	ldr	r1, [r4, #20]
 8007f0e:	1d18      	adds	r0, r3, #4
 8007f10:	6028      	str	r0, [r5, #0]
 8007f12:	0635      	lsls	r5, r6, #24
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	d501      	bpl.n	8007f1c <_printf_i+0x1c4>
 8007f18:	6019      	str	r1, [r3, #0]
 8007f1a:	e002      	b.n	8007f22 <_printf_i+0x1ca>
 8007f1c:	0670      	lsls	r0, r6, #25
 8007f1e:	d5fb      	bpl.n	8007f18 <_printf_i+0x1c0>
 8007f20:	8019      	strh	r1, [r3, #0]
 8007f22:	2300      	movs	r3, #0
 8007f24:	6123      	str	r3, [r4, #16]
 8007f26:	4615      	mov	r5, r2
 8007f28:	e7bc      	b.n	8007ea4 <_printf_i+0x14c>
 8007f2a:	682b      	ldr	r3, [r5, #0]
 8007f2c:	1d1a      	adds	r2, r3, #4
 8007f2e:	602a      	str	r2, [r5, #0]
 8007f30:	681d      	ldr	r5, [r3, #0]
 8007f32:	6862      	ldr	r2, [r4, #4]
 8007f34:	2100      	movs	r1, #0
 8007f36:	4628      	mov	r0, r5
 8007f38:	f7f8 f94a 	bl	80001d0 <memchr>
 8007f3c:	b108      	cbz	r0, 8007f42 <_printf_i+0x1ea>
 8007f3e:	1b40      	subs	r0, r0, r5
 8007f40:	6060      	str	r0, [r4, #4]
 8007f42:	6863      	ldr	r3, [r4, #4]
 8007f44:	6123      	str	r3, [r4, #16]
 8007f46:	2300      	movs	r3, #0
 8007f48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f4c:	e7aa      	b.n	8007ea4 <_printf_i+0x14c>
 8007f4e:	6923      	ldr	r3, [r4, #16]
 8007f50:	462a      	mov	r2, r5
 8007f52:	4649      	mov	r1, r9
 8007f54:	4640      	mov	r0, r8
 8007f56:	47d0      	blx	sl
 8007f58:	3001      	adds	r0, #1
 8007f5a:	d0ad      	beq.n	8007eb8 <_printf_i+0x160>
 8007f5c:	6823      	ldr	r3, [r4, #0]
 8007f5e:	079b      	lsls	r3, r3, #30
 8007f60:	d413      	bmi.n	8007f8a <_printf_i+0x232>
 8007f62:	68e0      	ldr	r0, [r4, #12]
 8007f64:	9b03      	ldr	r3, [sp, #12]
 8007f66:	4298      	cmp	r0, r3
 8007f68:	bfb8      	it	lt
 8007f6a:	4618      	movlt	r0, r3
 8007f6c:	e7a6      	b.n	8007ebc <_printf_i+0x164>
 8007f6e:	2301      	movs	r3, #1
 8007f70:	4632      	mov	r2, r6
 8007f72:	4649      	mov	r1, r9
 8007f74:	4640      	mov	r0, r8
 8007f76:	47d0      	blx	sl
 8007f78:	3001      	adds	r0, #1
 8007f7a:	d09d      	beq.n	8007eb8 <_printf_i+0x160>
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	68e3      	ldr	r3, [r4, #12]
 8007f80:	9903      	ldr	r1, [sp, #12]
 8007f82:	1a5b      	subs	r3, r3, r1
 8007f84:	42ab      	cmp	r3, r5
 8007f86:	dcf2      	bgt.n	8007f6e <_printf_i+0x216>
 8007f88:	e7eb      	b.n	8007f62 <_printf_i+0x20a>
 8007f8a:	2500      	movs	r5, #0
 8007f8c:	f104 0619 	add.w	r6, r4, #25
 8007f90:	e7f5      	b.n	8007f7e <_printf_i+0x226>
 8007f92:	bf00      	nop
 8007f94:	0801ef7e 	.word	0x0801ef7e
 8007f98:	0801ef8f 	.word	0x0801ef8f

08007f9c <_scanf_float>:
 8007f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	b087      	sub	sp, #28
 8007fa2:	4617      	mov	r7, r2
 8007fa4:	9303      	str	r3, [sp, #12]
 8007fa6:	688b      	ldr	r3, [r1, #8]
 8007fa8:	1e5a      	subs	r2, r3, #1
 8007faa:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007fae:	bf83      	ittte	hi
 8007fb0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007fb4:	195b      	addhi	r3, r3, r5
 8007fb6:	9302      	strhi	r3, [sp, #8]
 8007fb8:	2300      	movls	r3, #0
 8007fba:	bf86      	itte	hi
 8007fbc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007fc0:	608b      	strhi	r3, [r1, #8]
 8007fc2:	9302      	strls	r3, [sp, #8]
 8007fc4:	680b      	ldr	r3, [r1, #0]
 8007fc6:	468b      	mov	fp, r1
 8007fc8:	2500      	movs	r5, #0
 8007fca:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007fce:	f84b 3b1c 	str.w	r3, [fp], #28
 8007fd2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007fd6:	4680      	mov	r8, r0
 8007fd8:	460c      	mov	r4, r1
 8007fda:	465e      	mov	r6, fp
 8007fdc:	46aa      	mov	sl, r5
 8007fde:	46a9      	mov	r9, r5
 8007fe0:	9501      	str	r5, [sp, #4]
 8007fe2:	68a2      	ldr	r2, [r4, #8]
 8007fe4:	b152      	cbz	r2, 8007ffc <_scanf_float+0x60>
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	2b4e      	cmp	r3, #78	; 0x4e
 8007fec:	d864      	bhi.n	80080b8 <_scanf_float+0x11c>
 8007fee:	2b40      	cmp	r3, #64	; 0x40
 8007ff0:	d83c      	bhi.n	800806c <_scanf_float+0xd0>
 8007ff2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007ff6:	b2c8      	uxtb	r0, r1
 8007ff8:	280e      	cmp	r0, #14
 8007ffa:	d93a      	bls.n	8008072 <_scanf_float+0xd6>
 8007ffc:	f1b9 0f00 	cmp.w	r9, #0
 8008000:	d003      	beq.n	800800a <_scanf_float+0x6e>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008008:	6023      	str	r3, [r4, #0]
 800800a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800800e:	f1ba 0f01 	cmp.w	sl, #1
 8008012:	f200 8113 	bhi.w	800823c <_scanf_float+0x2a0>
 8008016:	455e      	cmp	r6, fp
 8008018:	f200 8105 	bhi.w	8008226 <_scanf_float+0x28a>
 800801c:	2501      	movs	r5, #1
 800801e:	4628      	mov	r0, r5
 8008020:	b007      	add	sp, #28
 8008022:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008026:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800802a:	2a0d      	cmp	r2, #13
 800802c:	d8e6      	bhi.n	8007ffc <_scanf_float+0x60>
 800802e:	a101      	add	r1, pc, #4	; (adr r1, 8008034 <_scanf_float+0x98>)
 8008030:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008034:	08008173 	.word	0x08008173
 8008038:	08007ffd 	.word	0x08007ffd
 800803c:	08007ffd 	.word	0x08007ffd
 8008040:	08007ffd 	.word	0x08007ffd
 8008044:	080081d3 	.word	0x080081d3
 8008048:	080081ab 	.word	0x080081ab
 800804c:	08007ffd 	.word	0x08007ffd
 8008050:	08007ffd 	.word	0x08007ffd
 8008054:	08008181 	.word	0x08008181
 8008058:	08007ffd 	.word	0x08007ffd
 800805c:	08007ffd 	.word	0x08007ffd
 8008060:	08007ffd 	.word	0x08007ffd
 8008064:	08007ffd 	.word	0x08007ffd
 8008068:	08008139 	.word	0x08008139
 800806c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008070:	e7db      	b.n	800802a <_scanf_float+0x8e>
 8008072:	290e      	cmp	r1, #14
 8008074:	d8c2      	bhi.n	8007ffc <_scanf_float+0x60>
 8008076:	a001      	add	r0, pc, #4	; (adr r0, 800807c <_scanf_float+0xe0>)
 8008078:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800807c:	0800812b 	.word	0x0800812b
 8008080:	08007ffd 	.word	0x08007ffd
 8008084:	0800812b 	.word	0x0800812b
 8008088:	080081bf 	.word	0x080081bf
 800808c:	08007ffd 	.word	0x08007ffd
 8008090:	080080d9 	.word	0x080080d9
 8008094:	08008115 	.word	0x08008115
 8008098:	08008115 	.word	0x08008115
 800809c:	08008115 	.word	0x08008115
 80080a0:	08008115 	.word	0x08008115
 80080a4:	08008115 	.word	0x08008115
 80080a8:	08008115 	.word	0x08008115
 80080ac:	08008115 	.word	0x08008115
 80080b0:	08008115 	.word	0x08008115
 80080b4:	08008115 	.word	0x08008115
 80080b8:	2b6e      	cmp	r3, #110	; 0x6e
 80080ba:	d809      	bhi.n	80080d0 <_scanf_float+0x134>
 80080bc:	2b60      	cmp	r3, #96	; 0x60
 80080be:	d8b2      	bhi.n	8008026 <_scanf_float+0x8a>
 80080c0:	2b54      	cmp	r3, #84	; 0x54
 80080c2:	d077      	beq.n	80081b4 <_scanf_float+0x218>
 80080c4:	2b59      	cmp	r3, #89	; 0x59
 80080c6:	d199      	bne.n	8007ffc <_scanf_float+0x60>
 80080c8:	2d07      	cmp	r5, #7
 80080ca:	d197      	bne.n	8007ffc <_scanf_float+0x60>
 80080cc:	2508      	movs	r5, #8
 80080ce:	e029      	b.n	8008124 <_scanf_float+0x188>
 80080d0:	2b74      	cmp	r3, #116	; 0x74
 80080d2:	d06f      	beq.n	80081b4 <_scanf_float+0x218>
 80080d4:	2b79      	cmp	r3, #121	; 0x79
 80080d6:	e7f6      	b.n	80080c6 <_scanf_float+0x12a>
 80080d8:	6821      	ldr	r1, [r4, #0]
 80080da:	05c8      	lsls	r0, r1, #23
 80080dc:	d51a      	bpl.n	8008114 <_scanf_float+0x178>
 80080de:	9b02      	ldr	r3, [sp, #8]
 80080e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80080e4:	6021      	str	r1, [r4, #0]
 80080e6:	f109 0901 	add.w	r9, r9, #1
 80080ea:	b11b      	cbz	r3, 80080f4 <_scanf_float+0x158>
 80080ec:	3b01      	subs	r3, #1
 80080ee:	3201      	adds	r2, #1
 80080f0:	9302      	str	r3, [sp, #8]
 80080f2:	60a2      	str	r2, [r4, #8]
 80080f4:	68a3      	ldr	r3, [r4, #8]
 80080f6:	3b01      	subs	r3, #1
 80080f8:	60a3      	str	r3, [r4, #8]
 80080fa:	6923      	ldr	r3, [r4, #16]
 80080fc:	3301      	adds	r3, #1
 80080fe:	6123      	str	r3, [r4, #16]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3b01      	subs	r3, #1
 8008104:	2b00      	cmp	r3, #0
 8008106:	607b      	str	r3, [r7, #4]
 8008108:	f340 8084 	ble.w	8008214 <_scanf_float+0x278>
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	3301      	adds	r3, #1
 8008110:	603b      	str	r3, [r7, #0]
 8008112:	e766      	b.n	8007fe2 <_scanf_float+0x46>
 8008114:	eb1a 0f05 	cmn.w	sl, r5
 8008118:	f47f af70 	bne.w	8007ffc <_scanf_float+0x60>
 800811c:	6822      	ldr	r2, [r4, #0]
 800811e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008122:	6022      	str	r2, [r4, #0]
 8008124:	f806 3b01 	strb.w	r3, [r6], #1
 8008128:	e7e4      	b.n	80080f4 <_scanf_float+0x158>
 800812a:	6822      	ldr	r2, [r4, #0]
 800812c:	0610      	lsls	r0, r2, #24
 800812e:	f57f af65 	bpl.w	8007ffc <_scanf_float+0x60>
 8008132:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008136:	e7f4      	b.n	8008122 <_scanf_float+0x186>
 8008138:	f1ba 0f00 	cmp.w	sl, #0
 800813c:	d10e      	bne.n	800815c <_scanf_float+0x1c0>
 800813e:	f1b9 0f00 	cmp.w	r9, #0
 8008142:	d10e      	bne.n	8008162 <_scanf_float+0x1c6>
 8008144:	6822      	ldr	r2, [r4, #0]
 8008146:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800814a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800814e:	d108      	bne.n	8008162 <_scanf_float+0x1c6>
 8008150:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008154:	6022      	str	r2, [r4, #0]
 8008156:	f04f 0a01 	mov.w	sl, #1
 800815a:	e7e3      	b.n	8008124 <_scanf_float+0x188>
 800815c:	f1ba 0f02 	cmp.w	sl, #2
 8008160:	d055      	beq.n	800820e <_scanf_float+0x272>
 8008162:	2d01      	cmp	r5, #1
 8008164:	d002      	beq.n	800816c <_scanf_float+0x1d0>
 8008166:	2d04      	cmp	r5, #4
 8008168:	f47f af48 	bne.w	8007ffc <_scanf_float+0x60>
 800816c:	3501      	adds	r5, #1
 800816e:	b2ed      	uxtb	r5, r5
 8008170:	e7d8      	b.n	8008124 <_scanf_float+0x188>
 8008172:	f1ba 0f01 	cmp.w	sl, #1
 8008176:	f47f af41 	bne.w	8007ffc <_scanf_float+0x60>
 800817a:	f04f 0a02 	mov.w	sl, #2
 800817e:	e7d1      	b.n	8008124 <_scanf_float+0x188>
 8008180:	b97d      	cbnz	r5, 80081a2 <_scanf_float+0x206>
 8008182:	f1b9 0f00 	cmp.w	r9, #0
 8008186:	f47f af3c 	bne.w	8008002 <_scanf_float+0x66>
 800818a:	6822      	ldr	r2, [r4, #0]
 800818c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008190:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008194:	f47f af39 	bne.w	800800a <_scanf_float+0x6e>
 8008198:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800819c:	6022      	str	r2, [r4, #0]
 800819e:	2501      	movs	r5, #1
 80081a0:	e7c0      	b.n	8008124 <_scanf_float+0x188>
 80081a2:	2d03      	cmp	r5, #3
 80081a4:	d0e2      	beq.n	800816c <_scanf_float+0x1d0>
 80081a6:	2d05      	cmp	r5, #5
 80081a8:	e7de      	b.n	8008168 <_scanf_float+0x1cc>
 80081aa:	2d02      	cmp	r5, #2
 80081ac:	f47f af26 	bne.w	8007ffc <_scanf_float+0x60>
 80081b0:	2503      	movs	r5, #3
 80081b2:	e7b7      	b.n	8008124 <_scanf_float+0x188>
 80081b4:	2d06      	cmp	r5, #6
 80081b6:	f47f af21 	bne.w	8007ffc <_scanf_float+0x60>
 80081ba:	2507      	movs	r5, #7
 80081bc:	e7b2      	b.n	8008124 <_scanf_float+0x188>
 80081be:	6822      	ldr	r2, [r4, #0]
 80081c0:	0591      	lsls	r1, r2, #22
 80081c2:	f57f af1b 	bpl.w	8007ffc <_scanf_float+0x60>
 80081c6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80081ca:	6022      	str	r2, [r4, #0]
 80081cc:	f8cd 9004 	str.w	r9, [sp, #4]
 80081d0:	e7a8      	b.n	8008124 <_scanf_float+0x188>
 80081d2:	6822      	ldr	r2, [r4, #0]
 80081d4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80081d8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80081dc:	d006      	beq.n	80081ec <_scanf_float+0x250>
 80081de:	0550      	lsls	r0, r2, #21
 80081e0:	f57f af0c 	bpl.w	8007ffc <_scanf_float+0x60>
 80081e4:	f1b9 0f00 	cmp.w	r9, #0
 80081e8:	f43f af0f 	beq.w	800800a <_scanf_float+0x6e>
 80081ec:	0591      	lsls	r1, r2, #22
 80081ee:	bf58      	it	pl
 80081f0:	9901      	ldrpl	r1, [sp, #4]
 80081f2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80081f6:	bf58      	it	pl
 80081f8:	eba9 0101 	subpl.w	r1, r9, r1
 80081fc:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008200:	bf58      	it	pl
 8008202:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008206:	6022      	str	r2, [r4, #0]
 8008208:	f04f 0900 	mov.w	r9, #0
 800820c:	e78a      	b.n	8008124 <_scanf_float+0x188>
 800820e:	f04f 0a03 	mov.w	sl, #3
 8008212:	e787      	b.n	8008124 <_scanf_float+0x188>
 8008214:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008218:	4639      	mov	r1, r7
 800821a:	4640      	mov	r0, r8
 800821c:	4798      	blx	r3
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f aedf 	beq.w	8007fe2 <_scanf_float+0x46>
 8008224:	e6ea      	b.n	8007ffc <_scanf_float+0x60>
 8008226:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800822a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800822e:	463a      	mov	r2, r7
 8008230:	4640      	mov	r0, r8
 8008232:	4798      	blx	r3
 8008234:	6923      	ldr	r3, [r4, #16]
 8008236:	3b01      	subs	r3, #1
 8008238:	6123      	str	r3, [r4, #16]
 800823a:	e6ec      	b.n	8008016 <_scanf_float+0x7a>
 800823c:	1e6b      	subs	r3, r5, #1
 800823e:	2b06      	cmp	r3, #6
 8008240:	d825      	bhi.n	800828e <_scanf_float+0x2f2>
 8008242:	2d02      	cmp	r5, #2
 8008244:	d836      	bhi.n	80082b4 <_scanf_float+0x318>
 8008246:	455e      	cmp	r6, fp
 8008248:	f67f aee8 	bls.w	800801c <_scanf_float+0x80>
 800824c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008250:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008254:	463a      	mov	r2, r7
 8008256:	4640      	mov	r0, r8
 8008258:	4798      	blx	r3
 800825a:	6923      	ldr	r3, [r4, #16]
 800825c:	3b01      	subs	r3, #1
 800825e:	6123      	str	r3, [r4, #16]
 8008260:	e7f1      	b.n	8008246 <_scanf_float+0x2aa>
 8008262:	9802      	ldr	r0, [sp, #8]
 8008264:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008268:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800826c:	9002      	str	r0, [sp, #8]
 800826e:	463a      	mov	r2, r7
 8008270:	4640      	mov	r0, r8
 8008272:	4798      	blx	r3
 8008274:	6923      	ldr	r3, [r4, #16]
 8008276:	3b01      	subs	r3, #1
 8008278:	6123      	str	r3, [r4, #16]
 800827a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800827e:	fa5f fa8a 	uxtb.w	sl, sl
 8008282:	f1ba 0f02 	cmp.w	sl, #2
 8008286:	d1ec      	bne.n	8008262 <_scanf_float+0x2c6>
 8008288:	3d03      	subs	r5, #3
 800828a:	b2ed      	uxtb	r5, r5
 800828c:	1b76      	subs	r6, r6, r5
 800828e:	6823      	ldr	r3, [r4, #0]
 8008290:	05da      	lsls	r2, r3, #23
 8008292:	d52f      	bpl.n	80082f4 <_scanf_float+0x358>
 8008294:	055b      	lsls	r3, r3, #21
 8008296:	d510      	bpl.n	80082ba <_scanf_float+0x31e>
 8008298:	455e      	cmp	r6, fp
 800829a:	f67f aebf 	bls.w	800801c <_scanf_float+0x80>
 800829e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80082a6:	463a      	mov	r2, r7
 80082a8:	4640      	mov	r0, r8
 80082aa:	4798      	blx	r3
 80082ac:	6923      	ldr	r3, [r4, #16]
 80082ae:	3b01      	subs	r3, #1
 80082b0:	6123      	str	r3, [r4, #16]
 80082b2:	e7f1      	b.n	8008298 <_scanf_float+0x2fc>
 80082b4:	46aa      	mov	sl, r5
 80082b6:	9602      	str	r6, [sp, #8]
 80082b8:	e7df      	b.n	800827a <_scanf_float+0x2de>
 80082ba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80082be:	6923      	ldr	r3, [r4, #16]
 80082c0:	2965      	cmp	r1, #101	; 0x65
 80082c2:	f103 33ff 	add.w	r3, r3, #4294967295
 80082c6:	f106 35ff 	add.w	r5, r6, #4294967295
 80082ca:	6123      	str	r3, [r4, #16]
 80082cc:	d00c      	beq.n	80082e8 <_scanf_float+0x34c>
 80082ce:	2945      	cmp	r1, #69	; 0x45
 80082d0:	d00a      	beq.n	80082e8 <_scanf_float+0x34c>
 80082d2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082d6:	463a      	mov	r2, r7
 80082d8:	4640      	mov	r0, r8
 80082da:	4798      	blx	r3
 80082dc:	6923      	ldr	r3, [r4, #16]
 80082de:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80082e2:	3b01      	subs	r3, #1
 80082e4:	1eb5      	subs	r5, r6, #2
 80082e6:	6123      	str	r3, [r4, #16]
 80082e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80082ec:	463a      	mov	r2, r7
 80082ee:	4640      	mov	r0, r8
 80082f0:	4798      	blx	r3
 80082f2:	462e      	mov	r6, r5
 80082f4:	6825      	ldr	r5, [r4, #0]
 80082f6:	f015 0510 	ands.w	r5, r5, #16
 80082fa:	d158      	bne.n	80083ae <_scanf_float+0x412>
 80082fc:	7035      	strb	r5, [r6, #0]
 80082fe:	6823      	ldr	r3, [r4, #0]
 8008300:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008308:	d11c      	bne.n	8008344 <_scanf_float+0x3a8>
 800830a:	9b01      	ldr	r3, [sp, #4]
 800830c:	454b      	cmp	r3, r9
 800830e:	eba3 0209 	sub.w	r2, r3, r9
 8008312:	d124      	bne.n	800835e <_scanf_float+0x3c2>
 8008314:	2200      	movs	r2, #0
 8008316:	4659      	mov	r1, fp
 8008318:	4640      	mov	r0, r8
 800831a:	f002 fc39 	bl	800ab90 <_strtod_r>
 800831e:	9b03      	ldr	r3, [sp, #12]
 8008320:	6821      	ldr	r1, [r4, #0]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f011 0f02 	tst.w	r1, #2
 8008328:	ec57 6b10 	vmov	r6, r7, d0
 800832c:	f103 0204 	add.w	r2, r3, #4
 8008330:	d020      	beq.n	8008374 <_scanf_float+0x3d8>
 8008332:	9903      	ldr	r1, [sp, #12]
 8008334:	600a      	str	r2, [r1, #0]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	e9c3 6700 	strd	r6, r7, [r3]
 800833c:	68e3      	ldr	r3, [r4, #12]
 800833e:	3301      	adds	r3, #1
 8008340:	60e3      	str	r3, [r4, #12]
 8008342:	e66c      	b.n	800801e <_scanf_float+0x82>
 8008344:	9b04      	ldr	r3, [sp, #16]
 8008346:	2b00      	cmp	r3, #0
 8008348:	d0e4      	beq.n	8008314 <_scanf_float+0x378>
 800834a:	9905      	ldr	r1, [sp, #20]
 800834c:	230a      	movs	r3, #10
 800834e:	462a      	mov	r2, r5
 8008350:	3101      	adds	r1, #1
 8008352:	4640      	mov	r0, r8
 8008354:	f002 fca4 	bl	800aca0 <_strtol_r>
 8008358:	9b04      	ldr	r3, [sp, #16]
 800835a:	9e05      	ldr	r6, [sp, #20]
 800835c:	1ac2      	subs	r2, r0, r3
 800835e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008362:	429e      	cmp	r6, r3
 8008364:	bf28      	it	cs
 8008366:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800836a:	4912      	ldr	r1, [pc, #72]	; (80083b4 <_scanf_float+0x418>)
 800836c:	4630      	mov	r0, r6
 800836e:	f000 f8f9 	bl	8008564 <siprintf>
 8008372:	e7cf      	b.n	8008314 <_scanf_float+0x378>
 8008374:	f011 0f04 	tst.w	r1, #4
 8008378:	9903      	ldr	r1, [sp, #12]
 800837a:	600a      	str	r2, [r1, #0]
 800837c:	d1db      	bne.n	8008336 <_scanf_float+0x39a>
 800837e:	f8d3 8000 	ldr.w	r8, [r3]
 8008382:	ee10 2a10 	vmov	r2, s0
 8008386:	ee10 0a10 	vmov	r0, s0
 800838a:	463b      	mov	r3, r7
 800838c:	4639      	mov	r1, r7
 800838e:	f7f8 fbcd 	bl	8000b2c <__aeabi_dcmpun>
 8008392:	b128      	cbz	r0, 80083a0 <_scanf_float+0x404>
 8008394:	4808      	ldr	r0, [pc, #32]	; (80083b8 <_scanf_float+0x41c>)
 8008396:	f000 fa75 	bl	8008884 <nanf>
 800839a:	ed88 0a00 	vstr	s0, [r8]
 800839e:	e7cd      	b.n	800833c <_scanf_float+0x3a0>
 80083a0:	4630      	mov	r0, r6
 80083a2:	4639      	mov	r1, r7
 80083a4:	f7f8 fc20 	bl	8000be8 <__aeabi_d2f>
 80083a8:	f8c8 0000 	str.w	r0, [r8]
 80083ac:	e7c6      	b.n	800833c <_scanf_float+0x3a0>
 80083ae:	2500      	movs	r5, #0
 80083b0:	e635      	b.n	800801e <_scanf_float+0x82>
 80083b2:	bf00      	nop
 80083b4:	0801efa0 	.word	0x0801efa0
 80083b8:	0801f335 	.word	0x0801f335

080083bc <std>:
 80083bc:	2300      	movs	r3, #0
 80083be:	b510      	push	{r4, lr}
 80083c0:	4604      	mov	r4, r0
 80083c2:	e9c0 3300 	strd	r3, r3, [r0]
 80083c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083ca:	6083      	str	r3, [r0, #8]
 80083cc:	8181      	strh	r1, [r0, #12]
 80083ce:	6643      	str	r3, [r0, #100]	; 0x64
 80083d0:	81c2      	strh	r2, [r0, #14]
 80083d2:	6183      	str	r3, [r0, #24]
 80083d4:	4619      	mov	r1, r3
 80083d6:	2208      	movs	r2, #8
 80083d8:	305c      	adds	r0, #92	; 0x5c
 80083da:	f000 f95f 	bl	800869c <memset>
 80083de:	4b0d      	ldr	r3, [pc, #52]	; (8008414 <std+0x58>)
 80083e0:	6263      	str	r3, [r4, #36]	; 0x24
 80083e2:	4b0d      	ldr	r3, [pc, #52]	; (8008418 <std+0x5c>)
 80083e4:	62a3      	str	r3, [r4, #40]	; 0x28
 80083e6:	4b0d      	ldr	r3, [pc, #52]	; (800841c <std+0x60>)
 80083e8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083ea:	4b0d      	ldr	r3, [pc, #52]	; (8008420 <std+0x64>)
 80083ec:	6323      	str	r3, [r4, #48]	; 0x30
 80083ee:	4b0d      	ldr	r3, [pc, #52]	; (8008424 <std+0x68>)
 80083f0:	6224      	str	r4, [r4, #32]
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d006      	beq.n	8008404 <std+0x48>
 80083f6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083fa:	4294      	cmp	r4, r2
 80083fc:	d002      	beq.n	8008404 <std+0x48>
 80083fe:	33d0      	adds	r3, #208	; 0xd0
 8008400:	429c      	cmp	r4, r3
 8008402:	d105      	bne.n	8008410 <std+0x54>
 8008404:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800840c:	f000 ba28 	b.w	8008860 <__retarget_lock_init_recursive>
 8008410:	bd10      	pop	{r4, pc}
 8008412:	bf00      	nop
 8008414:	080085a5 	.word	0x080085a5
 8008418:	080085c7 	.word	0x080085c7
 800841c:	080085ff 	.word	0x080085ff
 8008420:	08008623 	.word	0x08008623
 8008424:	20006c6c 	.word	0x20006c6c

08008428 <stdio_exit_handler>:
 8008428:	4a02      	ldr	r2, [pc, #8]	; (8008434 <stdio_exit_handler+0xc>)
 800842a:	4903      	ldr	r1, [pc, #12]	; (8008438 <stdio_exit_handler+0x10>)
 800842c:	4803      	ldr	r0, [pc, #12]	; (800843c <stdio_exit_handler+0x14>)
 800842e:	f000 b869 	b.w	8008504 <_fwalk_sglue>
 8008432:	bf00      	nop
 8008434:	20000014 	.word	0x20000014
 8008438:	0800b2e9 	.word	0x0800b2e9
 800843c:	20000020 	.word	0x20000020

08008440 <cleanup_stdio>:
 8008440:	6841      	ldr	r1, [r0, #4]
 8008442:	4b0c      	ldr	r3, [pc, #48]	; (8008474 <cleanup_stdio+0x34>)
 8008444:	4299      	cmp	r1, r3
 8008446:	b510      	push	{r4, lr}
 8008448:	4604      	mov	r4, r0
 800844a:	d001      	beq.n	8008450 <cleanup_stdio+0x10>
 800844c:	f002 ff4c 	bl	800b2e8 <_fflush_r>
 8008450:	68a1      	ldr	r1, [r4, #8]
 8008452:	4b09      	ldr	r3, [pc, #36]	; (8008478 <cleanup_stdio+0x38>)
 8008454:	4299      	cmp	r1, r3
 8008456:	d002      	beq.n	800845e <cleanup_stdio+0x1e>
 8008458:	4620      	mov	r0, r4
 800845a:	f002 ff45 	bl	800b2e8 <_fflush_r>
 800845e:	68e1      	ldr	r1, [r4, #12]
 8008460:	4b06      	ldr	r3, [pc, #24]	; (800847c <cleanup_stdio+0x3c>)
 8008462:	4299      	cmp	r1, r3
 8008464:	d004      	beq.n	8008470 <cleanup_stdio+0x30>
 8008466:	4620      	mov	r0, r4
 8008468:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800846c:	f002 bf3c 	b.w	800b2e8 <_fflush_r>
 8008470:	bd10      	pop	{r4, pc}
 8008472:	bf00      	nop
 8008474:	20006c6c 	.word	0x20006c6c
 8008478:	20006cd4 	.word	0x20006cd4
 800847c:	20006d3c 	.word	0x20006d3c

08008480 <global_stdio_init.part.0>:
 8008480:	b510      	push	{r4, lr}
 8008482:	4b0b      	ldr	r3, [pc, #44]	; (80084b0 <global_stdio_init.part.0+0x30>)
 8008484:	4c0b      	ldr	r4, [pc, #44]	; (80084b4 <global_stdio_init.part.0+0x34>)
 8008486:	4a0c      	ldr	r2, [pc, #48]	; (80084b8 <global_stdio_init.part.0+0x38>)
 8008488:	601a      	str	r2, [r3, #0]
 800848a:	4620      	mov	r0, r4
 800848c:	2200      	movs	r2, #0
 800848e:	2104      	movs	r1, #4
 8008490:	f7ff ff94 	bl	80083bc <std>
 8008494:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008498:	2201      	movs	r2, #1
 800849a:	2109      	movs	r1, #9
 800849c:	f7ff ff8e 	bl	80083bc <std>
 80084a0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80084a4:	2202      	movs	r2, #2
 80084a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084aa:	2112      	movs	r1, #18
 80084ac:	f7ff bf86 	b.w	80083bc <std>
 80084b0:	20006da4 	.word	0x20006da4
 80084b4:	20006c6c 	.word	0x20006c6c
 80084b8:	08008429 	.word	0x08008429

080084bc <__sfp_lock_acquire>:
 80084bc:	4801      	ldr	r0, [pc, #4]	; (80084c4 <__sfp_lock_acquire+0x8>)
 80084be:	f000 b9d0 	b.w	8008862 <__retarget_lock_acquire_recursive>
 80084c2:	bf00      	nop
 80084c4:	20006dad 	.word	0x20006dad

080084c8 <__sfp_lock_release>:
 80084c8:	4801      	ldr	r0, [pc, #4]	; (80084d0 <__sfp_lock_release+0x8>)
 80084ca:	f000 b9cb 	b.w	8008864 <__retarget_lock_release_recursive>
 80084ce:	bf00      	nop
 80084d0:	20006dad 	.word	0x20006dad

080084d4 <__sinit>:
 80084d4:	b510      	push	{r4, lr}
 80084d6:	4604      	mov	r4, r0
 80084d8:	f7ff fff0 	bl	80084bc <__sfp_lock_acquire>
 80084dc:	6a23      	ldr	r3, [r4, #32]
 80084de:	b11b      	cbz	r3, 80084e8 <__sinit+0x14>
 80084e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e4:	f7ff bff0 	b.w	80084c8 <__sfp_lock_release>
 80084e8:	4b04      	ldr	r3, [pc, #16]	; (80084fc <__sinit+0x28>)
 80084ea:	6223      	str	r3, [r4, #32]
 80084ec:	4b04      	ldr	r3, [pc, #16]	; (8008500 <__sinit+0x2c>)
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1f5      	bne.n	80084e0 <__sinit+0xc>
 80084f4:	f7ff ffc4 	bl	8008480 <global_stdio_init.part.0>
 80084f8:	e7f2      	b.n	80084e0 <__sinit+0xc>
 80084fa:	bf00      	nop
 80084fc:	08008441 	.word	0x08008441
 8008500:	20006da4 	.word	0x20006da4

08008504 <_fwalk_sglue>:
 8008504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008508:	4607      	mov	r7, r0
 800850a:	4688      	mov	r8, r1
 800850c:	4614      	mov	r4, r2
 800850e:	2600      	movs	r6, #0
 8008510:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008514:	f1b9 0901 	subs.w	r9, r9, #1
 8008518:	d505      	bpl.n	8008526 <_fwalk_sglue+0x22>
 800851a:	6824      	ldr	r4, [r4, #0]
 800851c:	2c00      	cmp	r4, #0
 800851e:	d1f7      	bne.n	8008510 <_fwalk_sglue+0xc>
 8008520:	4630      	mov	r0, r6
 8008522:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	2b01      	cmp	r3, #1
 800852a:	d907      	bls.n	800853c <_fwalk_sglue+0x38>
 800852c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008530:	3301      	adds	r3, #1
 8008532:	d003      	beq.n	800853c <_fwalk_sglue+0x38>
 8008534:	4629      	mov	r1, r5
 8008536:	4638      	mov	r0, r7
 8008538:	47c0      	blx	r8
 800853a:	4306      	orrs	r6, r0
 800853c:	3568      	adds	r5, #104	; 0x68
 800853e:	e7e9      	b.n	8008514 <_fwalk_sglue+0x10>

08008540 <iprintf>:
 8008540:	b40f      	push	{r0, r1, r2, r3}
 8008542:	b507      	push	{r0, r1, r2, lr}
 8008544:	4906      	ldr	r1, [pc, #24]	; (8008560 <iprintf+0x20>)
 8008546:	ab04      	add	r3, sp, #16
 8008548:	6808      	ldr	r0, [r1, #0]
 800854a:	f853 2b04 	ldr.w	r2, [r3], #4
 800854e:	6881      	ldr	r1, [r0, #8]
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	f002 fd29 	bl	800afa8 <_vfiprintf_r>
 8008556:	b003      	add	sp, #12
 8008558:	f85d eb04 	ldr.w	lr, [sp], #4
 800855c:	b004      	add	sp, #16
 800855e:	4770      	bx	lr
 8008560:	2000006c 	.word	0x2000006c

08008564 <siprintf>:
 8008564:	b40e      	push	{r1, r2, r3}
 8008566:	b500      	push	{lr}
 8008568:	b09c      	sub	sp, #112	; 0x70
 800856a:	ab1d      	add	r3, sp, #116	; 0x74
 800856c:	9002      	str	r0, [sp, #8]
 800856e:	9006      	str	r0, [sp, #24]
 8008570:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008574:	4809      	ldr	r0, [pc, #36]	; (800859c <siprintf+0x38>)
 8008576:	9107      	str	r1, [sp, #28]
 8008578:	9104      	str	r1, [sp, #16]
 800857a:	4909      	ldr	r1, [pc, #36]	; (80085a0 <siprintf+0x3c>)
 800857c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008580:	9105      	str	r1, [sp, #20]
 8008582:	6800      	ldr	r0, [r0, #0]
 8008584:	9301      	str	r3, [sp, #4]
 8008586:	a902      	add	r1, sp, #8
 8008588:	f002 fbe6 	bl	800ad58 <_svfiprintf_r>
 800858c:	9b02      	ldr	r3, [sp, #8]
 800858e:	2200      	movs	r2, #0
 8008590:	701a      	strb	r2, [r3, #0]
 8008592:	b01c      	add	sp, #112	; 0x70
 8008594:	f85d eb04 	ldr.w	lr, [sp], #4
 8008598:	b003      	add	sp, #12
 800859a:	4770      	bx	lr
 800859c:	2000006c 	.word	0x2000006c
 80085a0:	ffff0208 	.word	0xffff0208

080085a4 <__sread>:
 80085a4:	b510      	push	{r4, lr}
 80085a6:	460c      	mov	r4, r1
 80085a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085ac:	f000 f8fa 	bl	80087a4 <_read_r>
 80085b0:	2800      	cmp	r0, #0
 80085b2:	bfab      	itete	ge
 80085b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085b6:	89a3      	ldrhlt	r3, [r4, #12]
 80085b8:	181b      	addge	r3, r3, r0
 80085ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085be:	bfac      	ite	ge
 80085c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80085c2:	81a3      	strhlt	r3, [r4, #12]
 80085c4:	bd10      	pop	{r4, pc}

080085c6 <__swrite>:
 80085c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085ca:	461f      	mov	r7, r3
 80085cc:	898b      	ldrh	r3, [r1, #12]
 80085ce:	05db      	lsls	r3, r3, #23
 80085d0:	4605      	mov	r5, r0
 80085d2:	460c      	mov	r4, r1
 80085d4:	4616      	mov	r6, r2
 80085d6:	d505      	bpl.n	80085e4 <__swrite+0x1e>
 80085d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085dc:	2302      	movs	r3, #2
 80085de:	2200      	movs	r2, #0
 80085e0:	f000 f8ce 	bl	8008780 <_lseek_r>
 80085e4:	89a3      	ldrh	r3, [r4, #12]
 80085e6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80085ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80085ee:	81a3      	strh	r3, [r4, #12]
 80085f0:	4632      	mov	r2, r6
 80085f2:	463b      	mov	r3, r7
 80085f4:	4628      	mov	r0, r5
 80085f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80085fa:	f000 b8f5 	b.w	80087e8 <_write_r>

080085fe <__sseek>:
 80085fe:	b510      	push	{r4, lr}
 8008600:	460c      	mov	r4, r1
 8008602:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008606:	f000 f8bb 	bl	8008780 <_lseek_r>
 800860a:	1c43      	adds	r3, r0, #1
 800860c:	89a3      	ldrh	r3, [r4, #12]
 800860e:	bf15      	itete	ne
 8008610:	6560      	strne	r0, [r4, #84]	; 0x54
 8008612:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008616:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800861a:	81a3      	strheq	r3, [r4, #12]
 800861c:	bf18      	it	ne
 800861e:	81a3      	strhne	r3, [r4, #12]
 8008620:	bd10      	pop	{r4, pc}

08008622 <__sclose>:
 8008622:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008626:	f000 b845 	b.w	80086b4 <_close_r>

0800862a <_vsniprintf_r>:
 800862a:	b530      	push	{r4, r5, lr}
 800862c:	4614      	mov	r4, r2
 800862e:	2c00      	cmp	r4, #0
 8008630:	b09b      	sub	sp, #108	; 0x6c
 8008632:	4605      	mov	r5, r0
 8008634:	461a      	mov	r2, r3
 8008636:	da05      	bge.n	8008644 <_vsniprintf_r+0x1a>
 8008638:	238b      	movs	r3, #139	; 0x8b
 800863a:	6003      	str	r3, [r0, #0]
 800863c:	f04f 30ff 	mov.w	r0, #4294967295
 8008640:	b01b      	add	sp, #108	; 0x6c
 8008642:	bd30      	pop	{r4, r5, pc}
 8008644:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008648:	f8ad 300c 	strh.w	r3, [sp, #12]
 800864c:	bf14      	ite	ne
 800864e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008652:	4623      	moveq	r3, r4
 8008654:	9302      	str	r3, [sp, #8]
 8008656:	9305      	str	r3, [sp, #20]
 8008658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800865c:	9100      	str	r1, [sp, #0]
 800865e:	9104      	str	r1, [sp, #16]
 8008660:	f8ad 300e 	strh.w	r3, [sp, #14]
 8008664:	4669      	mov	r1, sp
 8008666:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8008668:	f002 fb76 	bl	800ad58 <_svfiprintf_r>
 800866c:	1c43      	adds	r3, r0, #1
 800866e:	bfbc      	itt	lt
 8008670:	238b      	movlt	r3, #139	; 0x8b
 8008672:	602b      	strlt	r3, [r5, #0]
 8008674:	2c00      	cmp	r4, #0
 8008676:	d0e3      	beq.n	8008640 <_vsniprintf_r+0x16>
 8008678:	9b00      	ldr	r3, [sp, #0]
 800867a:	2200      	movs	r2, #0
 800867c:	701a      	strb	r2, [r3, #0]
 800867e:	e7df      	b.n	8008640 <_vsniprintf_r+0x16>

08008680 <vsniprintf>:
 8008680:	b507      	push	{r0, r1, r2, lr}
 8008682:	9300      	str	r3, [sp, #0]
 8008684:	4613      	mov	r3, r2
 8008686:	460a      	mov	r2, r1
 8008688:	4601      	mov	r1, r0
 800868a:	4803      	ldr	r0, [pc, #12]	; (8008698 <vsniprintf+0x18>)
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f7ff ffcc 	bl	800862a <_vsniprintf_r>
 8008692:	b003      	add	sp, #12
 8008694:	f85d fb04 	ldr.w	pc, [sp], #4
 8008698:	2000006c 	.word	0x2000006c

0800869c <memset>:
 800869c:	4402      	add	r2, r0
 800869e:	4603      	mov	r3, r0
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d100      	bne.n	80086a6 <memset+0xa>
 80086a4:	4770      	bx	lr
 80086a6:	f803 1b01 	strb.w	r1, [r3], #1
 80086aa:	e7f9      	b.n	80086a0 <memset+0x4>

080086ac <_localeconv_r>:
 80086ac:	4800      	ldr	r0, [pc, #0]	; (80086b0 <_localeconv_r+0x4>)
 80086ae:	4770      	bx	lr
 80086b0:	20000160 	.word	0x20000160

080086b4 <_close_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d06      	ldr	r5, [pc, #24]	; (80086d0 <_close_r+0x1c>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	602b      	str	r3, [r5, #0]
 80086c0:	f7f9 fa07 	bl	8001ad2 <_close>
 80086c4:	1c43      	adds	r3, r0, #1
 80086c6:	d102      	bne.n	80086ce <_close_r+0x1a>
 80086c8:	682b      	ldr	r3, [r5, #0]
 80086ca:	b103      	cbz	r3, 80086ce <_close_r+0x1a>
 80086cc:	6023      	str	r3, [r4, #0]
 80086ce:	bd38      	pop	{r3, r4, r5, pc}
 80086d0:	20006da8 	.word	0x20006da8

080086d4 <_reclaim_reent>:
 80086d4:	4b29      	ldr	r3, [pc, #164]	; (800877c <_reclaim_reent+0xa8>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	4283      	cmp	r3, r0
 80086da:	b570      	push	{r4, r5, r6, lr}
 80086dc:	4604      	mov	r4, r0
 80086de:	d04b      	beq.n	8008778 <_reclaim_reent+0xa4>
 80086e0:	69c3      	ldr	r3, [r0, #28]
 80086e2:	b143      	cbz	r3, 80086f6 <_reclaim_reent+0x22>
 80086e4:	68db      	ldr	r3, [r3, #12]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d144      	bne.n	8008774 <_reclaim_reent+0xa0>
 80086ea:	69e3      	ldr	r3, [r4, #28]
 80086ec:	6819      	ldr	r1, [r3, #0]
 80086ee:	b111      	cbz	r1, 80086f6 <_reclaim_reent+0x22>
 80086f0:	4620      	mov	r0, r4
 80086f2:	f000 ff47 	bl	8009584 <_free_r>
 80086f6:	6961      	ldr	r1, [r4, #20]
 80086f8:	b111      	cbz	r1, 8008700 <_reclaim_reent+0x2c>
 80086fa:	4620      	mov	r0, r4
 80086fc:	f000 ff42 	bl	8009584 <_free_r>
 8008700:	69e1      	ldr	r1, [r4, #28]
 8008702:	b111      	cbz	r1, 800870a <_reclaim_reent+0x36>
 8008704:	4620      	mov	r0, r4
 8008706:	f000 ff3d 	bl	8009584 <_free_r>
 800870a:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800870c:	b111      	cbz	r1, 8008714 <_reclaim_reent+0x40>
 800870e:	4620      	mov	r0, r4
 8008710:	f000 ff38 	bl	8009584 <_free_r>
 8008714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008716:	b111      	cbz	r1, 800871e <_reclaim_reent+0x4a>
 8008718:	4620      	mov	r0, r4
 800871a:	f000 ff33 	bl	8009584 <_free_r>
 800871e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008720:	b111      	cbz	r1, 8008728 <_reclaim_reent+0x54>
 8008722:	4620      	mov	r0, r4
 8008724:	f000 ff2e 	bl	8009584 <_free_r>
 8008728:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800872a:	b111      	cbz	r1, 8008732 <_reclaim_reent+0x5e>
 800872c:	4620      	mov	r0, r4
 800872e:	f000 ff29 	bl	8009584 <_free_r>
 8008732:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8008734:	b111      	cbz	r1, 800873c <_reclaim_reent+0x68>
 8008736:	4620      	mov	r0, r4
 8008738:	f000 ff24 	bl	8009584 <_free_r>
 800873c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800873e:	b111      	cbz	r1, 8008746 <_reclaim_reent+0x72>
 8008740:	4620      	mov	r0, r4
 8008742:	f000 ff1f 	bl	8009584 <_free_r>
 8008746:	6a23      	ldr	r3, [r4, #32]
 8008748:	b1b3      	cbz	r3, 8008778 <_reclaim_reent+0xa4>
 800874a:	4620      	mov	r0, r4
 800874c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008750:	4718      	bx	r3
 8008752:	5949      	ldr	r1, [r1, r5]
 8008754:	b941      	cbnz	r1, 8008768 <_reclaim_reent+0x94>
 8008756:	3504      	adds	r5, #4
 8008758:	69e3      	ldr	r3, [r4, #28]
 800875a:	2d80      	cmp	r5, #128	; 0x80
 800875c:	68d9      	ldr	r1, [r3, #12]
 800875e:	d1f8      	bne.n	8008752 <_reclaim_reent+0x7e>
 8008760:	4620      	mov	r0, r4
 8008762:	f000 ff0f 	bl	8009584 <_free_r>
 8008766:	e7c0      	b.n	80086ea <_reclaim_reent+0x16>
 8008768:	680e      	ldr	r6, [r1, #0]
 800876a:	4620      	mov	r0, r4
 800876c:	f000 ff0a 	bl	8009584 <_free_r>
 8008770:	4631      	mov	r1, r6
 8008772:	e7ef      	b.n	8008754 <_reclaim_reent+0x80>
 8008774:	2500      	movs	r5, #0
 8008776:	e7ef      	b.n	8008758 <_reclaim_reent+0x84>
 8008778:	bd70      	pop	{r4, r5, r6, pc}
 800877a:	bf00      	nop
 800877c:	2000006c 	.word	0x2000006c

08008780 <_lseek_r>:
 8008780:	b538      	push	{r3, r4, r5, lr}
 8008782:	4d07      	ldr	r5, [pc, #28]	; (80087a0 <_lseek_r+0x20>)
 8008784:	4604      	mov	r4, r0
 8008786:	4608      	mov	r0, r1
 8008788:	4611      	mov	r1, r2
 800878a:	2200      	movs	r2, #0
 800878c:	602a      	str	r2, [r5, #0]
 800878e:	461a      	mov	r2, r3
 8008790:	f7f9 f9c6 	bl	8001b20 <_lseek>
 8008794:	1c43      	adds	r3, r0, #1
 8008796:	d102      	bne.n	800879e <_lseek_r+0x1e>
 8008798:	682b      	ldr	r3, [r5, #0]
 800879a:	b103      	cbz	r3, 800879e <_lseek_r+0x1e>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	bd38      	pop	{r3, r4, r5, pc}
 80087a0:	20006da8 	.word	0x20006da8

080087a4 <_read_r>:
 80087a4:	b538      	push	{r3, r4, r5, lr}
 80087a6:	4d07      	ldr	r5, [pc, #28]	; (80087c4 <_read_r+0x20>)
 80087a8:	4604      	mov	r4, r0
 80087aa:	4608      	mov	r0, r1
 80087ac:	4611      	mov	r1, r2
 80087ae:	2200      	movs	r2, #0
 80087b0:	602a      	str	r2, [r5, #0]
 80087b2:	461a      	mov	r2, r3
 80087b4:	f7f9 f970 	bl	8001a98 <_read>
 80087b8:	1c43      	adds	r3, r0, #1
 80087ba:	d102      	bne.n	80087c2 <_read_r+0x1e>
 80087bc:	682b      	ldr	r3, [r5, #0]
 80087be:	b103      	cbz	r3, 80087c2 <_read_r+0x1e>
 80087c0:	6023      	str	r3, [r4, #0]
 80087c2:	bd38      	pop	{r3, r4, r5, pc}
 80087c4:	20006da8 	.word	0x20006da8

080087c8 <_sbrk_r>:
 80087c8:	b538      	push	{r3, r4, r5, lr}
 80087ca:	4d06      	ldr	r5, [pc, #24]	; (80087e4 <_sbrk_r+0x1c>)
 80087cc:	2300      	movs	r3, #0
 80087ce:	4604      	mov	r4, r0
 80087d0:	4608      	mov	r0, r1
 80087d2:	602b      	str	r3, [r5, #0]
 80087d4:	f7f9 f9b2 	bl	8001b3c <_sbrk>
 80087d8:	1c43      	adds	r3, r0, #1
 80087da:	d102      	bne.n	80087e2 <_sbrk_r+0x1a>
 80087dc:	682b      	ldr	r3, [r5, #0]
 80087de:	b103      	cbz	r3, 80087e2 <_sbrk_r+0x1a>
 80087e0:	6023      	str	r3, [r4, #0]
 80087e2:	bd38      	pop	{r3, r4, r5, pc}
 80087e4:	20006da8 	.word	0x20006da8

080087e8 <_write_r>:
 80087e8:	b538      	push	{r3, r4, r5, lr}
 80087ea:	4d07      	ldr	r5, [pc, #28]	; (8008808 <_write_r+0x20>)
 80087ec:	4604      	mov	r4, r0
 80087ee:	4608      	mov	r0, r1
 80087f0:	4611      	mov	r1, r2
 80087f2:	2200      	movs	r2, #0
 80087f4:	602a      	str	r2, [r5, #0]
 80087f6:	461a      	mov	r2, r3
 80087f8:	f7f8 fc96 	bl	8001128 <_write>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_write_r+0x1e>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_write_r+0x1e>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20006da8 	.word	0x20006da8

0800880c <__errno>:
 800880c:	4b01      	ldr	r3, [pc, #4]	; (8008814 <__errno+0x8>)
 800880e:	6818      	ldr	r0, [r3, #0]
 8008810:	4770      	bx	lr
 8008812:	bf00      	nop
 8008814:	2000006c 	.word	0x2000006c

08008818 <__libc_init_array>:
 8008818:	b570      	push	{r4, r5, r6, lr}
 800881a:	4d0d      	ldr	r5, [pc, #52]	; (8008850 <__libc_init_array+0x38>)
 800881c:	4c0d      	ldr	r4, [pc, #52]	; (8008854 <__libc_init_array+0x3c>)
 800881e:	1b64      	subs	r4, r4, r5
 8008820:	10a4      	asrs	r4, r4, #2
 8008822:	2600      	movs	r6, #0
 8008824:	42a6      	cmp	r6, r4
 8008826:	d109      	bne.n	800883c <__libc_init_array+0x24>
 8008828:	4d0b      	ldr	r5, [pc, #44]	; (8008858 <__libc_init_array+0x40>)
 800882a:	4c0c      	ldr	r4, [pc, #48]	; (800885c <__libc_init_array+0x44>)
 800882c:	f003 fb36 	bl	800be9c <_init>
 8008830:	1b64      	subs	r4, r4, r5
 8008832:	10a4      	asrs	r4, r4, #2
 8008834:	2600      	movs	r6, #0
 8008836:	42a6      	cmp	r6, r4
 8008838:	d105      	bne.n	8008846 <__libc_init_array+0x2e>
 800883a:	bd70      	pop	{r4, r5, r6, pc}
 800883c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008840:	4798      	blx	r3
 8008842:	3601      	adds	r6, #1
 8008844:	e7ee      	b.n	8008824 <__libc_init_array+0xc>
 8008846:	f855 3b04 	ldr.w	r3, [r5], #4
 800884a:	4798      	blx	r3
 800884c:	3601      	adds	r6, #1
 800884e:	e7f2      	b.n	8008836 <__libc_init_array+0x1e>
 8008850:	0801f398 	.word	0x0801f398
 8008854:	0801f398 	.word	0x0801f398
 8008858:	0801f398 	.word	0x0801f398
 800885c:	0801f39c 	.word	0x0801f39c

08008860 <__retarget_lock_init_recursive>:
 8008860:	4770      	bx	lr

08008862 <__retarget_lock_acquire_recursive>:
 8008862:	4770      	bx	lr

08008864 <__retarget_lock_release_recursive>:
 8008864:	4770      	bx	lr

08008866 <memcpy>:
 8008866:	440a      	add	r2, r1
 8008868:	4291      	cmp	r1, r2
 800886a:	f100 33ff 	add.w	r3, r0, #4294967295
 800886e:	d100      	bne.n	8008872 <memcpy+0xc>
 8008870:	4770      	bx	lr
 8008872:	b510      	push	{r4, lr}
 8008874:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008878:	f803 4f01 	strb.w	r4, [r3, #1]!
 800887c:	4291      	cmp	r1, r2
 800887e:	d1f9      	bne.n	8008874 <memcpy+0xe>
 8008880:	bd10      	pop	{r4, pc}
	...

08008884 <nanf>:
 8008884:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800888c <nanf+0x8>
 8008888:	4770      	bx	lr
 800888a:	bf00      	nop
 800888c:	7fc00000 	.word	0x7fc00000

08008890 <quorem>:
 8008890:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008894:	6903      	ldr	r3, [r0, #16]
 8008896:	690c      	ldr	r4, [r1, #16]
 8008898:	42a3      	cmp	r3, r4
 800889a:	4607      	mov	r7, r0
 800889c:	db7e      	blt.n	800899c <quorem+0x10c>
 800889e:	3c01      	subs	r4, #1
 80088a0:	f101 0814 	add.w	r8, r1, #20
 80088a4:	f100 0514 	add.w	r5, r0, #20
 80088a8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088ac:	9301      	str	r3, [sp, #4]
 80088ae:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088b6:	3301      	adds	r3, #1
 80088b8:	429a      	cmp	r2, r3
 80088ba:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80088be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80088c6:	d331      	bcc.n	800892c <quorem+0x9c>
 80088c8:	f04f 0e00 	mov.w	lr, #0
 80088cc:	4640      	mov	r0, r8
 80088ce:	46ac      	mov	ip, r5
 80088d0:	46f2      	mov	sl, lr
 80088d2:	f850 2b04 	ldr.w	r2, [r0], #4
 80088d6:	b293      	uxth	r3, r2
 80088d8:	fb06 e303 	mla	r3, r6, r3, lr
 80088dc:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088e0:	0c1a      	lsrs	r2, r3, #16
 80088e2:	b29b      	uxth	r3, r3
 80088e4:	ebaa 0303 	sub.w	r3, sl, r3
 80088e8:	f8dc a000 	ldr.w	sl, [ip]
 80088ec:	fa13 f38a 	uxtah	r3, r3, sl
 80088f0:	fb06 220e 	mla	r2, r6, lr, r2
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	9b00      	ldr	r3, [sp, #0]
 80088f8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80088fc:	b292      	uxth	r2, r2
 80088fe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008902:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008906:	f8bd 3000 	ldrh.w	r3, [sp]
 800890a:	4581      	cmp	r9, r0
 800890c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008910:	f84c 3b04 	str.w	r3, [ip], #4
 8008914:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008918:	d2db      	bcs.n	80088d2 <quorem+0x42>
 800891a:	f855 300b 	ldr.w	r3, [r5, fp]
 800891e:	b92b      	cbnz	r3, 800892c <quorem+0x9c>
 8008920:	9b01      	ldr	r3, [sp, #4]
 8008922:	3b04      	subs	r3, #4
 8008924:	429d      	cmp	r5, r3
 8008926:	461a      	mov	r2, r3
 8008928:	d32c      	bcc.n	8008984 <quorem+0xf4>
 800892a:	613c      	str	r4, [r7, #16]
 800892c:	4638      	mov	r0, r7
 800892e:	f001 f93b 	bl	8009ba8 <__mcmp>
 8008932:	2800      	cmp	r0, #0
 8008934:	db22      	blt.n	800897c <quorem+0xec>
 8008936:	3601      	adds	r6, #1
 8008938:	4629      	mov	r1, r5
 800893a:	2000      	movs	r0, #0
 800893c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008940:	f8d1 c000 	ldr.w	ip, [r1]
 8008944:	b293      	uxth	r3, r2
 8008946:	1ac3      	subs	r3, r0, r3
 8008948:	0c12      	lsrs	r2, r2, #16
 800894a:	fa13 f38c 	uxtah	r3, r3, ip
 800894e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8008952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008956:	b29b      	uxth	r3, r3
 8008958:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800895c:	45c1      	cmp	r9, r8
 800895e:	f841 3b04 	str.w	r3, [r1], #4
 8008962:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008966:	d2e9      	bcs.n	800893c <quorem+0xac>
 8008968:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800896c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008970:	b922      	cbnz	r2, 800897c <quorem+0xec>
 8008972:	3b04      	subs	r3, #4
 8008974:	429d      	cmp	r5, r3
 8008976:	461a      	mov	r2, r3
 8008978:	d30a      	bcc.n	8008990 <quorem+0x100>
 800897a:	613c      	str	r4, [r7, #16]
 800897c:	4630      	mov	r0, r6
 800897e:	b003      	add	sp, #12
 8008980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008984:	6812      	ldr	r2, [r2, #0]
 8008986:	3b04      	subs	r3, #4
 8008988:	2a00      	cmp	r2, #0
 800898a:	d1ce      	bne.n	800892a <quorem+0x9a>
 800898c:	3c01      	subs	r4, #1
 800898e:	e7c9      	b.n	8008924 <quorem+0x94>
 8008990:	6812      	ldr	r2, [r2, #0]
 8008992:	3b04      	subs	r3, #4
 8008994:	2a00      	cmp	r2, #0
 8008996:	d1f0      	bne.n	800897a <quorem+0xea>
 8008998:	3c01      	subs	r4, #1
 800899a:	e7eb      	b.n	8008974 <quorem+0xe4>
 800899c:	2000      	movs	r0, #0
 800899e:	e7ee      	b.n	800897e <quorem+0xee>

080089a0 <_dtoa_r>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	ed2d 8b04 	vpush	{d8-d9}
 80089a8:	69c5      	ldr	r5, [r0, #28]
 80089aa:	b093      	sub	sp, #76	; 0x4c
 80089ac:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089b0:	ec57 6b10 	vmov	r6, r7, d0
 80089b4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80089b8:	9107      	str	r1, [sp, #28]
 80089ba:	4604      	mov	r4, r0
 80089bc:	920a      	str	r2, [sp, #40]	; 0x28
 80089be:	930d      	str	r3, [sp, #52]	; 0x34
 80089c0:	b975      	cbnz	r5, 80089e0 <_dtoa_r+0x40>
 80089c2:	2010      	movs	r0, #16
 80089c4:	f7fe fdd0 	bl	8007568 <malloc>
 80089c8:	4602      	mov	r2, r0
 80089ca:	61e0      	str	r0, [r4, #28]
 80089cc:	b920      	cbnz	r0, 80089d8 <_dtoa_r+0x38>
 80089ce:	4bae      	ldr	r3, [pc, #696]	; (8008c88 <_dtoa_r+0x2e8>)
 80089d0:	21ef      	movs	r1, #239	; 0xef
 80089d2:	48ae      	ldr	r0, [pc, #696]	; (8008c8c <_dtoa_r+0x2ec>)
 80089d4:	f002 fd7c 	bl	800b4d0 <__assert_func>
 80089d8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80089dc:	6005      	str	r5, [r0, #0]
 80089de:	60c5      	str	r5, [r0, #12]
 80089e0:	69e3      	ldr	r3, [r4, #28]
 80089e2:	6819      	ldr	r1, [r3, #0]
 80089e4:	b151      	cbz	r1, 80089fc <_dtoa_r+0x5c>
 80089e6:	685a      	ldr	r2, [r3, #4]
 80089e8:	604a      	str	r2, [r1, #4]
 80089ea:	2301      	movs	r3, #1
 80089ec:	4093      	lsls	r3, r2
 80089ee:	608b      	str	r3, [r1, #8]
 80089f0:	4620      	mov	r0, r4
 80089f2:	f000 fe53 	bl	800969c <_Bfree>
 80089f6:	69e3      	ldr	r3, [r4, #28]
 80089f8:	2200      	movs	r2, #0
 80089fa:	601a      	str	r2, [r3, #0]
 80089fc:	1e3b      	subs	r3, r7, #0
 80089fe:	bfbb      	ittet	lt
 8008a00:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008a04:	9303      	strlt	r3, [sp, #12]
 8008a06:	2300      	movge	r3, #0
 8008a08:	2201      	movlt	r2, #1
 8008a0a:	bfac      	ite	ge
 8008a0c:	f8c8 3000 	strge.w	r3, [r8]
 8008a10:	f8c8 2000 	strlt.w	r2, [r8]
 8008a14:	4b9e      	ldr	r3, [pc, #632]	; (8008c90 <_dtoa_r+0x2f0>)
 8008a16:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8008a1a:	ea33 0308 	bics.w	r3, r3, r8
 8008a1e:	d11b      	bne.n	8008a58 <_dtoa_r+0xb8>
 8008a20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a22:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a26:	6013      	str	r3, [r2, #0]
 8008a28:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8008a2c:	4333      	orrs	r3, r6
 8008a2e:	f000 8593 	beq.w	8009558 <_dtoa_r+0xbb8>
 8008a32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a34:	b963      	cbnz	r3, 8008a50 <_dtoa_r+0xb0>
 8008a36:	4b97      	ldr	r3, [pc, #604]	; (8008c94 <_dtoa_r+0x2f4>)
 8008a38:	e027      	b.n	8008a8a <_dtoa_r+0xea>
 8008a3a:	4b97      	ldr	r3, [pc, #604]	; (8008c98 <_dtoa_r+0x2f8>)
 8008a3c:	9300      	str	r3, [sp, #0]
 8008a3e:	3308      	adds	r3, #8
 8008a40:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a42:	6013      	str	r3, [r2, #0]
 8008a44:	9800      	ldr	r0, [sp, #0]
 8008a46:	b013      	add	sp, #76	; 0x4c
 8008a48:	ecbd 8b04 	vpop	{d8-d9}
 8008a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a50:	4b90      	ldr	r3, [pc, #576]	; (8008c94 <_dtoa_r+0x2f4>)
 8008a52:	9300      	str	r3, [sp, #0]
 8008a54:	3303      	adds	r3, #3
 8008a56:	e7f3      	b.n	8008a40 <_dtoa_r+0xa0>
 8008a58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	ec51 0b17 	vmov	r0, r1, d7
 8008a62:	eeb0 8a47 	vmov.f32	s16, s14
 8008a66:	eef0 8a67 	vmov.f32	s17, s15
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	f7f8 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a70:	4681      	mov	r9, r0
 8008a72:	b160      	cbz	r0, 8008a8e <_dtoa_r+0xee>
 8008a74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008a76:	2301      	movs	r3, #1
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 8568 	beq.w	8009552 <_dtoa_r+0xbb2>
 8008a82:	4b86      	ldr	r3, [pc, #536]	; (8008c9c <_dtoa_r+0x2fc>)
 8008a84:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	9300      	str	r3, [sp, #0]
 8008a8c:	e7da      	b.n	8008a44 <_dtoa_r+0xa4>
 8008a8e:	aa10      	add	r2, sp, #64	; 0x40
 8008a90:	a911      	add	r1, sp, #68	; 0x44
 8008a92:	4620      	mov	r0, r4
 8008a94:	eeb0 0a48 	vmov.f32	s0, s16
 8008a98:	eef0 0a68 	vmov.f32	s1, s17
 8008a9c:	f001 f99a 	bl	8009dd4 <__d2b>
 8008aa0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008aa4:	4682      	mov	sl, r0
 8008aa6:	2d00      	cmp	r5, #0
 8008aa8:	d07f      	beq.n	8008baa <_dtoa_r+0x20a>
 8008aaa:	ee18 3a90 	vmov	r3, s17
 8008aae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8008ab6:	ec51 0b18 	vmov	r0, r1, d8
 8008aba:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008abe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008ac2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	2200      	movs	r2, #0
 8008aca:	4b75      	ldr	r3, [pc, #468]	; (8008ca0 <_dtoa_r+0x300>)
 8008acc:	f7f7 fbdc 	bl	8000288 <__aeabi_dsub>
 8008ad0:	a367      	add	r3, pc, #412	; (adr r3, 8008c70 <_dtoa_r+0x2d0>)
 8008ad2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad6:	f7f7 fd8f 	bl	80005f8 <__aeabi_dmul>
 8008ada:	a367      	add	r3, pc, #412	; (adr r3, 8008c78 <_dtoa_r+0x2d8>)
 8008adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae0:	f7f7 fbd4 	bl	800028c <__adddf3>
 8008ae4:	4606      	mov	r6, r0
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	460f      	mov	r7, r1
 8008aea:	f7f7 fd1b 	bl	8000524 <__aeabi_i2d>
 8008aee:	a364      	add	r3, pc, #400	; (adr r3, 8008c80 <_dtoa_r+0x2e0>)
 8008af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008af4:	f7f7 fd80 	bl	80005f8 <__aeabi_dmul>
 8008af8:	4602      	mov	r2, r0
 8008afa:	460b      	mov	r3, r1
 8008afc:	4630      	mov	r0, r6
 8008afe:	4639      	mov	r1, r7
 8008b00:	f7f7 fbc4 	bl	800028c <__adddf3>
 8008b04:	4606      	mov	r6, r0
 8008b06:	460f      	mov	r7, r1
 8008b08:	f7f8 f826 	bl	8000b58 <__aeabi_d2iz>
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	4683      	mov	fp, r0
 8008b10:	2300      	movs	r3, #0
 8008b12:	4630      	mov	r0, r6
 8008b14:	4639      	mov	r1, r7
 8008b16:	f7f7 ffe1 	bl	8000adc <__aeabi_dcmplt>
 8008b1a:	b148      	cbz	r0, 8008b30 <_dtoa_r+0x190>
 8008b1c:	4658      	mov	r0, fp
 8008b1e:	f7f7 fd01 	bl	8000524 <__aeabi_i2d>
 8008b22:	4632      	mov	r2, r6
 8008b24:	463b      	mov	r3, r7
 8008b26:	f7f7 ffcf 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b2a:	b908      	cbnz	r0, 8008b30 <_dtoa_r+0x190>
 8008b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b30:	f1bb 0f16 	cmp.w	fp, #22
 8008b34:	d857      	bhi.n	8008be6 <_dtoa_r+0x246>
 8008b36:	4b5b      	ldr	r3, [pc, #364]	; (8008ca4 <_dtoa_r+0x304>)
 8008b38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b40:	ec51 0b18 	vmov	r0, r1, d8
 8008b44:	f7f7 ffca 	bl	8000adc <__aeabi_dcmplt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	d04e      	beq.n	8008bea <_dtoa_r+0x24a>
 8008b4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008b50:	2300      	movs	r3, #0
 8008b52:	930c      	str	r3, [sp, #48]	; 0x30
 8008b54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008b56:	1b5b      	subs	r3, r3, r5
 8008b58:	1e5a      	subs	r2, r3, #1
 8008b5a:	bf45      	ittet	mi
 8008b5c:	f1c3 0301 	rsbmi	r3, r3, #1
 8008b60:	9305      	strmi	r3, [sp, #20]
 8008b62:	2300      	movpl	r3, #0
 8008b64:	2300      	movmi	r3, #0
 8008b66:	9206      	str	r2, [sp, #24]
 8008b68:	bf54      	ite	pl
 8008b6a:	9305      	strpl	r3, [sp, #20]
 8008b6c:	9306      	strmi	r3, [sp, #24]
 8008b6e:	f1bb 0f00 	cmp.w	fp, #0
 8008b72:	db3c      	blt.n	8008bee <_dtoa_r+0x24e>
 8008b74:	9b06      	ldr	r3, [sp, #24]
 8008b76:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8008b7a:	445b      	add	r3, fp
 8008b7c:	9306      	str	r3, [sp, #24]
 8008b7e:	2300      	movs	r3, #0
 8008b80:	9308      	str	r3, [sp, #32]
 8008b82:	9b07      	ldr	r3, [sp, #28]
 8008b84:	2b09      	cmp	r3, #9
 8008b86:	d868      	bhi.n	8008c5a <_dtoa_r+0x2ba>
 8008b88:	2b05      	cmp	r3, #5
 8008b8a:	bfc4      	itt	gt
 8008b8c:	3b04      	subgt	r3, #4
 8008b8e:	9307      	strgt	r3, [sp, #28]
 8008b90:	9b07      	ldr	r3, [sp, #28]
 8008b92:	f1a3 0302 	sub.w	r3, r3, #2
 8008b96:	bfcc      	ite	gt
 8008b98:	2500      	movgt	r5, #0
 8008b9a:	2501      	movle	r5, #1
 8008b9c:	2b03      	cmp	r3, #3
 8008b9e:	f200 8085 	bhi.w	8008cac <_dtoa_r+0x30c>
 8008ba2:	e8df f003 	tbb	[pc, r3]
 8008ba6:	3b2e      	.short	0x3b2e
 8008ba8:	5839      	.short	0x5839
 8008baa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008bae:	441d      	add	r5, r3
 8008bb0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008bb4:	2b20      	cmp	r3, #32
 8008bb6:	bfc1      	itttt	gt
 8008bb8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008bbc:	fa08 f803 	lslgt.w	r8, r8, r3
 8008bc0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8008bc4:	fa26 f303 	lsrgt.w	r3, r6, r3
 8008bc8:	bfd6      	itet	le
 8008bca:	f1c3 0320 	rsble	r3, r3, #32
 8008bce:	ea48 0003 	orrgt.w	r0, r8, r3
 8008bd2:	fa06 f003 	lslle.w	r0, r6, r3
 8008bd6:	f7f7 fc95 	bl	8000504 <__aeabi_ui2d>
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8008be0:	3d01      	subs	r5, #1
 8008be2:	920e      	str	r2, [sp, #56]	; 0x38
 8008be4:	e76f      	b.n	8008ac6 <_dtoa_r+0x126>
 8008be6:	2301      	movs	r3, #1
 8008be8:	e7b3      	b.n	8008b52 <_dtoa_r+0x1b2>
 8008bea:	900c      	str	r0, [sp, #48]	; 0x30
 8008bec:	e7b2      	b.n	8008b54 <_dtoa_r+0x1b4>
 8008bee:	9b05      	ldr	r3, [sp, #20]
 8008bf0:	eba3 030b 	sub.w	r3, r3, fp
 8008bf4:	9305      	str	r3, [sp, #20]
 8008bf6:	f1cb 0300 	rsb	r3, fp, #0
 8008bfa:	9308      	str	r3, [sp, #32]
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	930b      	str	r3, [sp, #44]	; 0x2c
 8008c00:	e7bf      	b.n	8008b82 <_dtoa_r+0x1e2>
 8008c02:	2300      	movs	r3, #0
 8008c04:	9309      	str	r3, [sp, #36]	; 0x24
 8008c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	dc52      	bgt.n	8008cb2 <_dtoa_r+0x312>
 8008c0c:	2301      	movs	r3, #1
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	9304      	str	r3, [sp, #16]
 8008c12:	461a      	mov	r2, r3
 8008c14:	920a      	str	r2, [sp, #40]	; 0x28
 8008c16:	e00b      	b.n	8008c30 <_dtoa_r+0x290>
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e7f3      	b.n	8008c04 <_dtoa_r+0x264>
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008c20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c22:	445b      	add	r3, fp
 8008c24:	9301      	str	r3, [sp, #4]
 8008c26:	3301      	adds	r3, #1
 8008c28:	2b01      	cmp	r3, #1
 8008c2a:	9304      	str	r3, [sp, #16]
 8008c2c:	bfb8      	it	lt
 8008c2e:	2301      	movlt	r3, #1
 8008c30:	69e0      	ldr	r0, [r4, #28]
 8008c32:	2100      	movs	r1, #0
 8008c34:	2204      	movs	r2, #4
 8008c36:	f102 0614 	add.w	r6, r2, #20
 8008c3a:	429e      	cmp	r6, r3
 8008c3c:	d93d      	bls.n	8008cba <_dtoa_r+0x31a>
 8008c3e:	6041      	str	r1, [r0, #4]
 8008c40:	4620      	mov	r0, r4
 8008c42:	f000 fceb 	bl	800961c <_Balloc>
 8008c46:	9000      	str	r0, [sp, #0]
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d139      	bne.n	8008cc0 <_dtoa_r+0x320>
 8008c4c:	4b16      	ldr	r3, [pc, #88]	; (8008ca8 <_dtoa_r+0x308>)
 8008c4e:	4602      	mov	r2, r0
 8008c50:	f240 11af 	movw	r1, #431	; 0x1af
 8008c54:	e6bd      	b.n	80089d2 <_dtoa_r+0x32>
 8008c56:	2301      	movs	r3, #1
 8008c58:	e7e1      	b.n	8008c1e <_dtoa_r+0x27e>
 8008c5a:	2501      	movs	r5, #1
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9307      	str	r3, [sp, #28]
 8008c60:	9509      	str	r5, [sp, #36]	; 0x24
 8008c62:	f04f 33ff 	mov.w	r3, #4294967295
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	9304      	str	r3, [sp, #16]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	2312      	movs	r3, #18
 8008c6e:	e7d1      	b.n	8008c14 <_dtoa_r+0x274>
 8008c70:	636f4361 	.word	0x636f4361
 8008c74:	3fd287a7 	.word	0x3fd287a7
 8008c78:	8b60c8b3 	.word	0x8b60c8b3
 8008c7c:	3fc68a28 	.word	0x3fc68a28
 8008c80:	509f79fb 	.word	0x509f79fb
 8008c84:	3fd34413 	.word	0x3fd34413
 8008c88:	0801efb2 	.word	0x0801efb2
 8008c8c:	0801efc9 	.word	0x0801efc9
 8008c90:	7ff00000 	.word	0x7ff00000
 8008c94:	0801efae 	.word	0x0801efae
 8008c98:	0801efa5 	.word	0x0801efa5
 8008c9c:	0801ef7d 	.word	0x0801ef7d
 8008ca0:	3ff80000 	.word	0x3ff80000
 8008ca4:	0801f0b8 	.word	0x0801f0b8
 8008ca8:	0801f021 	.word	0x0801f021
 8008cac:	2301      	movs	r3, #1
 8008cae:	9309      	str	r3, [sp, #36]	; 0x24
 8008cb0:	e7d7      	b.n	8008c62 <_dtoa_r+0x2c2>
 8008cb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008cb4:	9301      	str	r3, [sp, #4]
 8008cb6:	9304      	str	r3, [sp, #16]
 8008cb8:	e7ba      	b.n	8008c30 <_dtoa_r+0x290>
 8008cba:	3101      	adds	r1, #1
 8008cbc:	0052      	lsls	r2, r2, #1
 8008cbe:	e7ba      	b.n	8008c36 <_dtoa_r+0x296>
 8008cc0:	69e3      	ldr	r3, [r4, #28]
 8008cc2:	9a00      	ldr	r2, [sp, #0]
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	9b04      	ldr	r3, [sp, #16]
 8008cc8:	2b0e      	cmp	r3, #14
 8008cca:	f200 80a8 	bhi.w	8008e1e <_dtoa_r+0x47e>
 8008cce:	2d00      	cmp	r5, #0
 8008cd0:	f000 80a5 	beq.w	8008e1e <_dtoa_r+0x47e>
 8008cd4:	f1bb 0f00 	cmp.w	fp, #0
 8008cd8:	dd38      	ble.n	8008d4c <_dtoa_r+0x3ac>
 8008cda:	4bc0      	ldr	r3, [pc, #768]	; (8008fdc <_dtoa_r+0x63c>)
 8008cdc:	f00b 020f 	and.w	r2, fp, #15
 8008ce0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008ce4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008ce8:	e9d3 6700 	ldrd	r6, r7, [r3]
 8008cec:	ea4f 182b 	mov.w	r8, fp, asr #4
 8008cf0:	d019      	beq.n	8008d26 <_dtoa_r+0x386>
 8008cf2:	4bbb      	ldr	r3, [pc, #748]	; (8008fe0 <_dtoa_r+0x640>)
 8008cf4:	ec51 0b18 	vmov	r0, r1, d8
 8008cf8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008cfc:	f7f7 fda6 	bl	800084c <__aeabi_ddiv>
 8008d00:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d04:	f008 080f 	and.w	r8, r8, #15
 8008d08:	2503      	movs	r5, #3
 8008d0a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8008fe0 <_dtoa_r+0x640>
 8008d0e:	f1b8 0f00 	cmp.w	r8, #0
 8008d12:	d10a      	bne.n	8008d2a <_dtoa_r+0x38a>
 8008d14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d18:	4632      	mov	r2, r6
 8008d1a:	463b      	mov	r3, r7
 8008d1c:	f7f7 fd96 	bl	800084c <__aeabi_ddiv>
 8008d20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d24:	e02b      	b.n	8008d7e <_dtoa_r+0x3de>
 8008d26:	2502      	movs	r5, #2
 8008d28:	e7ef      	b.n	8008d0a <_dtoa_r+0x36a>
 8008d2a:	f018 0f01 	tst.w	r8, #1
 8008d2e:	d008      	beq.n	8008d42 <_dtoa_r+0x3a2>
 8008d30:	4630      	mov	r0, r6
 8008d32:	4639      	mov	r1, r7
 8008d34:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d38:	f7f7 fc5e 	bl	80005f8 <__aeabi_dmul>
 8008d3c:	3501      	adds	r5, #1
 8008d3e:	4606      	mov	r6, r0
 8008d40:	460f      	mov	r7, r1
 8008d42:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008d46:	f109 0908 	add.w	r9, r9, #8
 8008d4a:	e7e0      	b.n	8008d0e <_dtoa_r+0x36e>
 8008d4c:	f000 809f 	beq.w	8008e8e <_dtoa_r+0x4ee>
 8008d50:	f1cb 0600 	rsb	r6, fp, #0
 8008d54:	4ba1      	ldr	r3, [pc, #644]	; (8008fdc <_dtoa_r+0x63c>)
 8008d56:	4fa2      	ldr	r7, [pc, #648]	; (8008fe0 <_dtoa_r+0x640>)
 8008d58:	f006 020f 	and.w	r2, r6, #15
 8008d5c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d64:	ec51 0b18 	vmov	r0, r1, d8
 8008d68:	f7f7 fc46 	bl	80005f8 <__aeabi_dmul>
 8008d6c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d70:	1136      	asrs	r6, r6, #4
 8008d72:	2300      	movs	r3, #0
 8008d74:	2502      	movs	r5, #2
 8008d76:	2e00      	cmp	r6, #0
 8008d78:	d17e      	bne.n	8008e78 <_dtoa_r+0x4d8>
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d1d0      	bne.n	8008d20 <_dtoa_r+0x380>
 8008d7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008d80:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	f000 8084 	beq.w	8008e92 <_dtoa_r+0x4f2>
 8008d8a:	4b96      	ldr	r3, [pc, #600]	; (8008fe4 <_dtoa_r+0x644>)
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	4640      	mov	r0, r8
 8008d90:	4649      	mov	r1, r9
 8008d92:	f7f7 fea3 	bl	8000adc <__aeabi_dcmplt>
 8008d96:	2800      	cmp	r0, #0
 8008d98:	d07b      	beq.n	8008e92 <_dtoa_r+0x4f2>
 8008d9a:	9b04      	ldr	r3, [sp, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d078      	beq.n	8008e92 <_dtoa_r+0x4f2>
 8008da0:	9b01      	ldr	r3, [sp, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	dd39      	ble.n	8008e1a <_dtoa_r+0x47a>
 8008da6:	4b90      	ldr	r3, [pc, #576]	; (8008fe8 <_dtoa_r+0x648>)
 8008da8:	2200      	movs	r2, #0
 8008daa:	4640      	mov	r0, r8
 8008dac:	4649      	mov	r1, r9
 8008dae:	f7f7 fc23 	bl	80005f8 <__aeabi_dmul>
 8008db2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008db6:	9e01      	ldr	r6, [sp, #4]
 8008db8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008dbc:	3501      	adds	r5, #1
 8008dbe:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8008dc2:	4628      	mov	r0, r5
 8008dc4:	f7f7 fbae 	bl	8000524 <__aeabi_i2d>
 8008dc8:	4642      	mov	r2, r8
 8008dca:	464b      	mov	r3, r9
 8008dcc:	f7f7 fc14 	bl	80005f8 <__aeabi_dmul>
 8008dd0:	4b86      	ldr	r3, [pc, #536]	; (8008fec <_dtoa_r+0x64c>)
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	f7f7 fa5a 	bl	800028c <__adddf3>
 8008dd8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8008ddc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	2e00      	cmp	r6, #0
 8008de4:	d158      	bne.n	8008e98 <_dtoa_r+0x4f8>
 8008de6:	4b82      	ldr	r3, [pc, #520]	; (8008ff0 <_dtoa_r+0x650>)
 8008de8:	2200      	movs	r2, #0
 8008dea:	4640      	mov	r0, r8
 8008dec:	4649      	mov	r1, r9
 8008dee:	f7f7 fa4b 	bl	8000288 <__aeabi_dsub>
 8008df2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008df6:	4680      	mov	r8, r0
 8008df8:	4689      	mov	r9, r1
 8008dfa:	f7f7 fe8d 	bl	8000b18 <__aeabi_dcmpgt>
 8008dfe:	2800      	cmp	r0, #0
 8008e00:	f040 8296 	bne.w	8009330 <_dtoa_r+0x990>
 8008e04:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8008e08:	4640      	mov	r0, r8
 8008e0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e0e:	4649      	mov	r1, r9
 8008e10:	f7f7 fe64 	bl	8000adc <__aeabi_dcmplt>
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f040 8289 	bne.w	800932c <_dtoa_r+0x98c>
 8008e1a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008e1e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f2c0 814e 	blt.w	80090c2 <_dtoa_r+0x722>
 8008e26:	f1bb 0f0e 	cmp.w	fp, #14
 8008e2a:	f300 814a 	bgt.w	80090c2 <_dtoa_r+0x722>
 8008e2e:	4b6b      	ldr	r3, [pc, #428]	; (8008fdc <_dtoa_r+0x63c>)
 8008e30:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008e34:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	f280 80dc 	bge.w	8008ff8 <_dtoa_r+0x658>
 8008e40:	9b04      	ldr	r3, [sp, #16]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f300 80d8 	bgt.w	8008ff8 <_dtoa_r+0x658>
 8008e48:	f040 826f 	bne.w	800932a <_dtoa_r+0x98a>
 8008e4c:	4b68      	ldr	r3, [pc, #416]	; (8008ff0 <_dtoa_r+0x650>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	4640      	mov	r0, r8
 8008e52:	4649      	mov	r1, r9
 8008e54:	f7f7 fbd0 	bl	80005f8 <__aeabi_dmul>
 8008e58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008e5c:	f7f7 fe52 	bl	8000b04 <__aeabi_dcmpge>
 8008e60:	9e04      	ldr	r6, [sp, #16]
 8008e62:	4637      	mov	r7, r6
 8008e64:	2800      	cmp	r0, #0
 8008e66:	f040 8245 	bne.w	80092f4 <_dtoa_r+0x954>
 8008e6a:	9d00      	ldr	r5, [sp, #0]
 8008e6c:	2331      	movs	r3, #49	; 0x31
 8008e6e:	f805 3b01 	strb.w	r3, [r5], #1
 8008e72:	f10b 0b01 	add.w	fp, fp, #1
 8008e76:	e241      	b.n	80092fc <_dtoa_r+0x95c>
 8008e78:	07f2      	lsls	r2, r6, #31
 8008e7a:	d505      	bpl.n	8008e88 <_dtoa_r+0x4e8>
 8008e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e80:	f7f7 fbba 	bl	80005f8 <__aeabi_dmul>
 8008e84:	3501      	adds	r5, #1
 8008e86:	2301      	movs	r3, #1
 8008e88:	1076      	asrs	r6, r6, #1
 8008e8a:	3708      	adds	r7, #8
 8008e8c:	e773      	b.n	8008d76 <_dtoa_r+0x3d6>
 8008e8e:	2502      	movs	r5, #2
 8008e90:	e775      	b.n	8008d7e <_dtoa_r+0x3de>
 8008e92:	9e04      	ldr	r6, [sp, #16]
 8008e94:	465f      	mov	r7, fp
 8008e96:	e792      	b.n	8008dbe <_dtoa_r+0x41e>
 8008e98:	9900      	ldr	r1, [sp, #0]
 8008e9a:	4b50      	ldr	r3, [pc, #320]	; (8008fdc <_dtoa_r+0x63c>)
 8008e9c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008ea0:	4431      	add	r1, r6
 8008ea2:	9102      	str	r1, [sp, #8]
 8008ea4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008ea6:	eeb0 9a47 	vmov.f32	s18, s14
 8008eaa:	eef0 9a67 	vmov.f32	s19, s15
 8008eae:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008eb2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eb6:	2900      	cmp	r1, #0
 8008eb8:	d044      	beq.n	8008f44 <_dtoa_r+0x5a4>
 8008eba:	494e      	ldr	r1, [pc, #312]	; (8008ff4 <_dtoa_r+0x654>)
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	f7f7 fcc5 	bl	800084c <__aeabi_ddiv>
 8008ec2:	ec53 2b19 	vmov	r2, r3, d9
 8008ec6:	f7f7 f9df 	bl	8000288 <__aeabi_dsub>
 8008eca:	9d00      	ldr	r5, [sp, #0]
 8008ecc:	ec41 0b19 	vmov	d9, r0, r1
 8008ed0:	4649      	mov	r1, r9
 8008ed2:	4640      	mov	r0, r8
 8008ed4:	f7f7 fe40 	bl	8000b58 <__aeabi_d2iz>
 8008ed8:	4606      	mov	r6, r0
 8008eda:	f7f7 fb23 	bl	8000524 <__aeabi_i2d>
 8008ede:	4602      	mov	r2, r0
 8008ee0:	460b      	mov	r3, r1
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	4649      	mov	r1, r9
 8008ee6:	f7f7 f9cf 	bl	8000288 <__aeabi_dsub>
 8008eea:	3630      	adds	r6, #48	; 0x30
 8008eec:	f805 6b01 	strb.w	r6, [r5], #1
 8008ef0:	ec53 2b19 	vmov	r2, r3, d9
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	4689      	mov	r9, r1
 8008ef8:	f7f7 fdf0 	bl	8000adc <__aeabi_dcmplt>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d164      	bne.n	8008fca <_dtoa_r+0x62a>
 8008f00:	4642      	mov	r2, r8
 8008f02:	464b      	mov	r3, r9
 8008f04:	4937      	ldr	r1, [pc, #220]	; (8008fe4 <_dtoa_r+0x644>)
 8008f06:	2000      	movs	r0, #0
 8008f08:	f7f7 f9be 	bl	8000288 <__aeabi_dsub>
 8008f0c:	ec53 2b19 	vmov	r2, r3, d9
 8008f10:	f7f7 fde4 	bl	8000adc <__aeabi_dcmplt>
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f040 80b6 	bne.w	8009086 <_dtoa_r+0x6e6>
 8008f1a:	9b02      	ldr	r3, [sp, #8]
 8008f1c:	429d      	cmp	r5, r3
 8008f1e:	f43f af7c 	beq.w	8008e1a <_dtoa_r+0x47a>
 8008f22:	4b31      	ldr	r3, [pc, #196]	; (8008fe8 <_dtoa_r+0x648>)
 8008f24:	ec51 0b19 	vmov	r0, r1, d9
 8008f28:	2200      	movs	r2, #0
 8008f2a:	f7f7 fb65 	bl	80005f8 <__aeabi_dmul>
 8008f2e:	4b2e      	ldr	r3, [pc, #184]	; (8008fe8 <_dtoa_r+0x648>)
 8008f30:	ec41 0b19 	vmov	d9, r0, r1
 8008f34:	2200      	movs	r2, #0
 8008f36:	4640      	mov	r0, r8
 8008f38:	4649      	mov	r1, r9
 8008f3a:	f7f7 fb5d 	bl	80005f8 <__aeabi_dmul>
 8008f3e:	4680      	mov	r8, r0
 8008f40:	4689      	mov	r9, r1
 8008f42:	e7c5      	b.n	8008ed0 <_dtoa_r+0x530>
 8008f44:	ec51 0b17 	vmov	r0, r1, d7
 8008f48:	f7f7 fb56 	bl	80005f8 <__aeabi_dmul>
 8008f4c:	9b02      	ldr	r3, [sp, #8]
 8008f4e:	9d00      	ldr	r5, [sp, #0]
 8008f50:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f52:	ec41 0b19 	vmov	d9, r0, r1
 8008f56:	4649      	mov	r1, r9
 8008f58:	4640      	mov	r0, r8
 8008f5a:	f7f7 fdfd 	bl	8000b58 <__aeabi_d2iz>
 8008f5e:	4606      	mov	r6, r0
 8008f60:	f7f7 fae0 	bl	8000524 <__aeabi_i2d>
 8008f64:	3630      	adds	r6, #48	; 0x30
 8008f66:	4602      	mov	r2, r0
 8008f68:	460b      	mov	r3, r1
 8008f6a:	4640      	mov	r0, r8
 8008f6c:	4649      	mov	r1, r9
 8008f6e:	f7f7 f98b 	bl	8000288 <__aeabi_dsub>
 8008f72:	f805 6b01 	strb.w	r6, [r5], #1
 8008f76:	9b02      	ldr	r3, [sp, #8]
 8008f78:	429d      	cmp	r5, r3
 8008f7a:	4680      	mov	r8, r0
 8008f7c:	4689      	mov	r9, r1
 8008f7e:	f04f 0200 	mov.w	r2, #0
 8008f82:	d124      	bne.n	8008fce <_dtoa_r+0x62e>
 8008f84:	4b1b      	ldr	r3, [pc, #108]	; (8008ff4 <_dtoa_r+0x654>)
 8008f86:	ec51 0b19 	vmov	r0, r1, d9
 8008f8a:	f7f7 f97f 	bl	800028c <__adddf3>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4640      	mov	r0, r8
 8008f94:	4649      	mov	r1, r9
 8008f96:	f7f7 fdbf 	bl	8000b18 <__aeabi_dcmpgt>
 8008f9a:	2800      	cmp	r0, #0
 8008f9c:	d173      	bne.n	8009086 <_dtoa_r+0x6e6>
 8008f9e:	ec53 2b19 	vmov	r2, r3, d9
 8008fa2:	4914      	ldr	r1, [pc, #80]	; (8008ff4 <_dtoa_r+0x654>)
 8008fa4:	2000      	movs	r0, #0
 8008fa6:	f7f7 f96f 	bl	8000288 <__aeabi_dsub>
 8008faa:	4602      	mov	r2, r0
 8008fac:	460b      	mov	r3, r1
 8008fae:	4640      	mov	r0, r8
 8008fb0:	4649      	mov	r1, r9
 8008fb2:	f7f7 fd93 	bl	8000adc <__aeabi_dcmplt>
 8008fb6:	2800      	cmp	r0, #0
 8008fb8:	f43f af2f 	beq.w	8008e1a <_dtoa_r+0x47a>
 8008fbc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008fbe:	1e6b      	subs	r3, r5, #1
 8008fc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fc2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008fc6:	2b30      	cmp	r3, #48	; 0x30
 8008fc8:	d0f8      	beq.n	8008fbc <_dtoa_r+0x61c>
 8008fca:	46bb      	mov	fp, r7
 8008fcc:	e04a      	b.n	8009064 <_dtoa_r+0x6c4>
 8008fce:	4b06      	ldr	r3, [pc, #24]	; (8008fe8 <_dtoa_r+0x648>)
 8008fd0:	f7f7 fb12 	bl	80005f8 <__aeabi_dmul>
 8008fd4:	4680      	mov	r8, r0
 8008fd6:	4689      	mov	r9, r1
 8008fd8:	e7bd      	b.n	8008f56 <_dtoa_r+0x5b6>
 8008fda:	bf00      	nop
 8008fdc:	0801f0b8 	.word	0x0801f0b8
 8008fe0:	0801f090 	.word	0x0801f090
 8008fe4:	3ff00000 	.word	0x3ff00000
 8008fe8:	40240000 	.word	0x40240000
 8008fec:	401c0000 	.word	0x401c0000
 8008ff0:	40140000 	.word	0x40140000
 8008ff4:	3fe00000 	.word	0x3fe00000
 8008ff8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008ffc:	9d00      	ldr	r5, [sp, #0]
 8008ffe:	4642      	mov	r2, r8
 8009000:	464b      	mov	r3, r9
 8009002:	4630      	mov	r0, r6
 8009004:	4639      	mov	r1, r7
 8009006:	f7f7 fc21 	bl	800084c <__aeabi_ddiv>
 800900a:	f7f7 fda5 	bl	8000b58 <__aeabi_d2iz>
 800900e:	9001      	str	r0, [sp, #4]
 8009010:	f7f7 fa88 	bl	8000524 <__aeabi_i2d>
 8009014:	4642      	mov	r2, r8
 8009016:	464b      	mov	r3, r9
 8009018:	f7f7 faee 	bl	80005f8 <__aeabi_dmul>
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	4630      	mov	r0, r6
 8009022:	4639      	mov	r1, r7
 8009024:	f7f7 f930 	bl	8000288 <__aeabi_dsub>
 8009028:	9e01      	ldr	r6, [sp, #4]
 800902a:	9f04      	ldr	r7, [sp, #16]
 800902c:	3630      	adds	r6, #48	; 0x30
 800902e:	f805 6b01 	strb.w	r6, [r5], #1
 8009032:	9e00      	ldr	r6, [sp, #0]
 8009034:	1bae      	subs	r6, r5, r6
 8009036:	42b7      	cmp	r7, r6
 8009038:	4602      	mov	r2, r0
 800903a:	460b      	mov	r3, r1
 800903c:	d134      	bne.n	80090a8 <_dtoa_r+0x708>
 800903e:	f7f7 f925 	bl	800028c <__adddf3>
 8009042:	4642      	mov	r2, r8
 8009044:	464b      	mov	r3, r9
 8009046:	4606      	mov	r6, r0
 8009048:	460f      	mov	r7, r1
 800904a:	f7f7 fd65 	bl	8000b18 <__aeabi_dcmpgt>
 800904e:	b9c8      	cbnz	r0, 8009084 <_dtoa_r+0x6e4>
 8009050:	4642      	mov	r2, r8
 8009052:	464b      	mov	r3, r9
 8009054:	4630      	mov	r0, r6
 8009056:	4639      	mov	r1, r7
 8009058:	f7f7 fd36 	bl	8000ac8 <__aeabi_dcmpeq>
 800905c:	b110      	cbz	r0, 8009064 <_dtoa_r+0x6c4>
 800905e:	9b01      	ldr	r3, [sp, #4]
 8009060:	07db      	lsls	r3, r3, #31
 8009062:	d40f      	bmi.n	8009084 <_dtoa_r+0x6e4>
 8009064:	4651      	mov	r1, sl
 8009066:	4620      	mov	r0, r4
 8009068:	f000 fb18 	bl	800969c <_Bfree>
 800906c:	2300      	movs	r3, #0
 800906e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009070:	702b      	strb	r3, [r5, #0]
 8009072:	f10b 0301 	add.w	r3, fp, #1
 8009076:	6013      	str	r3, [r2, #0]
 8009078:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800907a:	2b00      	cmp	r3, #0
 800907c:	f43f ace2 	beq.w	8008a44 <_dtoa_r+0xa4>
 8009080:	601d      	str	r5, [r3, #0]
 8009082:	e4df      	b.n	8008a44 <_dtoa_r+0xa4>
 8009084:	465f      	mov	r7, fp
 8009086:	462b      	mov	r3, r5
 8009088:	461d      	mov	r5, r3
 800908a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800908e:	2a39      	cmp	r2, #57	; 0x39
 8009090:	d106      	bne.n	80090a0 <_dtoa_r+0x700>
 8009092:	9a00      	ldr	r2, [sp, #0]
 8009094:	429a      	cmp	r2, r3
 8009096:	d1f7      	bne.n	8009088 <_dtoa_r+0x6e8>
 8009098:	9900      	ldr	r1, [sp, #0]
 800909a:	2230      	movs	r2, #48	; 0x30
 800909c:	3701      	adds	r7, #1
 800909e:	700a      	strb	r2, [r1, #0]
 80090a0:	781a      	ldrb	r2, [r3, #0]
 80090a2:	3201      	adds	r2, #1
 80090a4:	701a      	strb	r2, [r3, #0]
 80090a6:	e790      	b.n	8008fca <_dtoa_r+0x62a>
 80090a8:	4ba3      	ldr	r3, [pc, #652]	; (8009338 <_dtoa_r+0x998>)
 80090aa:	2200      	movs	r2, #0
 80090ac:	f7f7 faa4 	bl	80005f8 <__aeabi_dmul>
 80090b0:	2200      	movs	r2, #0
 80090b2:	2300      	movs	r3, #0
 80090b4:	4606      	mov	r6, r0
 80090b6:	460f      	mov	r7, r1
 80090b8:	f7f7 fd06 	bl	8000ac8 <__aeabi_dcmpeq>
 80090bc:	2800      	cmp	r0, #0
 80090be:	d09e      	beq.n	8008ffe <_dtoa_r+0x65e>
 80090c0:	e7d0      	b.n	8009064 <_dtoa_r+0x6c4>
 80090c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80090c4:	2a00      	cmp	r2, #0
 80090c6:	f000 80ca 	beq.w	800925e <_dtoa_r+0x8be>
 80090ca:	9a07      	ldr	r2, [sp, #28]
 80090cc:	2a01      	cmp	r2, #1
 80090ce:	f300 80ad 	bgt.w	800922c <_dtoa_r+0x88c>
 80090d2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090d4:	2a00      	cmp	r2, #0
 80090d6:	f000 80a5 	beq.w	8009224 <_dtoa_r+0x884>
 80090da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80090de:	9e08      	ldr	r6, [sp, #32]
 80090e0:	9d05      	ldr	r5, [sp, #20]
 80090e2:	9a05      	ldr	r2, [sp, #20]
 80090e4:	441a      	add	r2, r3
 80090e6:	9205      	str	r2, [sp, #20]
 80090e8:	9a06      	ldr	r2, [sp, #24]
 80090ea:	2101      	movs	r1, #1
 80090ec:	441a      	add	r2, r3
 80090ee:	4620      	mov	r0, r4
 80090f0:	9206      	str	r2, [sp, #24]
 80090f2:	f000 fbd3 	bl	800989c <__i2b>
 80090f6:	4607      	mov	r7, r0
 80090f8:	b165      	cbz	r5, 8009114 <_dtoa_r+0x774>
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	dd09      	ble.n	8009114 <_dtoa_r+0x774>
 8009100:	42ab      	cmp	r3, r5
 8009102:	9a05      	ldr	r2, [sp, #20]
 8009104:	bfa8      	it	ge
 8009106:	462b      	movge	r3, r5
 8009108:	1ad2      	subs	r2, r2, r3
 800910a:	9205      	str	r2, [sp, #20]
 800910c:	9a06      	ldr	r2, [sp, #24]
 800910e:	1aed      	subs	r5, r5, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	9306      	str	r3, [sp, #24]
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	b1f3      	cbz	r3, 8009156 <_dtoa_r+0x7b6>
 8009118:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800911a:	2b00      	cmp	r3, #0
 800911c:	f000 80a3 	beq.w	8009266 <_dtoa_r+0x8c6>
 8009120:	2e00      	cmp	r6, #0
 8009122:	dd10      	ble.n	8009146 <_dtoa_r+0x7a6>
 8009124:	4639      	mov	r1, r7
 8009126:	4632      	mov	r2, r6
 8009128:	4620      	mov	r0, r4
 800912a:	f000 fc77 	bl	8009a1c <__pow5mult>
 800912e:	4652      	mov	r2, sl
 8009130:	4601      	mov	r1, r0
 8009132:	4607      	mov	r7, r0
 8009134:	4620      	mov	r0, r4
 8009136:	f000 fbc7 	bl	80098c8 <__multiply>
 800913a:	4651      	mov	r1, sl
 800913c:	4680      	mov	r8, r0
 800913e:	4620      	mov	r0, r4
 8009140:	f000 faac 	bl	800969c <_Bfree>
 8009144:	46c2      	mov	sl, r8
 8009146:	9b08      	ldr	r3, [sp, #32]
 8009148:	1b9a      	subs	r2, r3, r6
 800914a:	d004      	beq.n	8009156 <_dtoa_r+0x7b6>
 800914c:	4651      	mov	r1, sl
 800914e:	4620      	mov	r0, r4
 8009150:	f000 fc64 	bl	8009a1c <__pow5mult>
 8009154:	4682      	mov	sl, r0
 8009156:	2101      	movs	r1, #1
 8009158:	4620      	mov	r0, r4
 800915a:	f000 fb9f 	bl	800989c <__i2b>
 800915e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009160:	2b00      	cmp	r3, #0
 8009162:	4606      	mov	r6, r0
 8009164:	f340 8081 	ble.w	800926a <_dtoa_r+0x8ca>
 8009168:	461a      	mov	r2, r3
 800916a:	4601      	mov	r1, r0
 800916c:	4620      	mov	r0, r4
 800916e:	f000 fc55 	bl	8009a1c <__pow5mult>
 8009172:	9b07      	ldr	r3, [sp, #28]
 8009174:	2b01      	cmp	r3, #1
 8009176:	4606      	mov	r6, r0
 8009178:	dd7a      	ble.n	8009270 <_dtoa_r+0x8d0>
 800917a:	f04f 0800 	mov.w	r8, #0
 800917e:	6933      	ldr	r3, [r6, #16]
 8009180:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009184:	6918      	ldr	r0, [r3, #16]
 8009186:	f000 fb3b 	bl	8009800 <__hi0bits>
 800918a:	f1c0 0020 	rsb	r0, r0, #32
 800918e:	9b06      	ldr	r3, [sp, #24]
 8009190:	4418      	add	r0, r3
 8009192:	f010 001f 	ands.w	r0, r0, #31
 8009196:	f000 8094 	beq.w	80092c2 <_dtoa_r+0x922>
 800919a:	f1c0 0320 	rsb	r3, r0, #32
 800919e:	2b04      	cmp	r3, #4
 80091a0:	f340 8085 	ble.w	80092ae <_dtoa_r+0x90e>
 80091a4:	9b05      	ldr	r3, [sp, #20]
 80091a6:	f1c0 001c 	rsb	r0, r0, #28
 80091aa:	4403      	add	r3, r0
 80091ac:	9305      	str	r3, [sp, #20]
 80091ae:	9b06      	ldr	r3, [sp, #24]
 80091b0:	4403      	add	r3, r0
 80091b2:	4405      	add	r5, r0
 80091b4:	9306      	str	r3, [sp, #24]
 80091b6:	9b05      	ldr	r3, [sp, #20]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	dd05      	ble.n	80091c8 <_dtoa_r+0x828>
 80091bc:	4651      	mov	r1, sl
 80091be:	461a      	mov	r2, r3
 80091c0:	4620      	mov	r0, r4
 80091c2:	f000 fc85 	bl	8009ad0 <__lshift>
 80091c6:	4682      	mov	sl, r0
 80091c8:	9b06      	ldr	r3, [sp, #24]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	dd05      	ble.n	80091da <_dtoa_r+0x83a>
 80091ce:	4631      	mov	r1, r6
 80091d0:	461a      	mov	r2, r3
 80091d2:	4620      	mov	r0, r4
 80091d4:	f000 fc7c 	bl	8009ad0 <__lshift>
 80091d8:	4606      	mov	r6, r0
 80091da:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d072      	beq.n	80092c6 <_dtoa_r+0x926>
 80091e0:	4631      	mov	r1, r6
 80091e2:	4650      	mov	r0, sl
 80091e4:	f000 fce0 	bl	8009ba8 <__mcmp>
 80091e8:	2800      	cmp	r0, #0
 80091ea:	da6c      	bge.n	80092c6 <_dtoa_r+0x926>
 80091ec:	2300      	movs	r3, #0
 80091ee:	4651      	mov	r1, sl
 80091f0:	220a      	movs	r2, #10
 80091f2:	4620      	mov	r0, r4
 80091f4:	f000 fa74 	bl	80096e0 <__multadd>
 80091f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091fa:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091fe:	4682      	mov	sl, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	f000 81b0 	beq.w	8009566 <_dtoa_r+0xbc6>
 8009206:	2300      	movs	r3, #0
 8009208:	4639      	mov	r1, r7
 800920a:	220a      	movs	r2, #10
 800920c:	4620      	mov	r0, r4
 800920e:	f000 fa67 	bl	80096e0 <__multadd>
 8009212:	9b01      	ldr	r3, [sp, #4]
 8009214:	2b00      	cmp	r3, #0
 8009216:	4607      	mov	r7, r0
 8009218:	f300 8096 	bgt.w	8009348 <_dtoa_r+0x9a8>
 800921c:	9b07      	ldr	r3, [sp, #28]
 800921e:	2b02      	cmp	r3, #2
 8009220:	dc59      	bgt.n	80092d6 <_dtoa_r+0x936>
 8009222:	e091      	b.n	8009348 <_dtoa_r+0x9a8>
 8009224:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009226:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800922a:	e758      	b.n	80090de <_dtoa_r+0x73e>
 800922c:	9b04      	ldr	r3, [sp, #16]
 800922e:	1e5e      	subs	r6, r3, #1
 8009230:	9b08      	ldr	r3, [sp, #32]
 8009232:	42b3      	cmp	r3, r6
 8009234:	bfbf      	itttt	lt
 8009236:	9b08      	ldrlt	r3, [sp, #32]
 8009238:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800923a:	9608      	strlt	r6, [sp, #32]
 800923c:	1af3      	sublt	r3, r6, r3
 800923e:	bfb4      	ite	lt
 8009240:	18d2      	addlt	r2, r2, r3
 8009242:	1b9e      	subge	r6, r3, r6
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	bfbc      	itt	lt
 8009248:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800924a:	2600      	movlt	r6, #0
 800924c:	2b00      	cmp	r3, #0
 800924e:	bfb7      	itett	lt
 8009250:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009254:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009258:	1a9d      	sublt	r5, r3, r2
 800925a:	2300      	movlt	r3, #0
 800925c:	e741      	b.n	80090e2 <_dtoa_r+0x742>
 800925e:	9e08      	ldr	r6, [sp, #32]
 8009260:	9d05      	ldr	r5, [sp, #20]
 8009262:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009264:	e748      	b.n	80090f8 <_dtoa_r+0x758>
 8009266:	9a08      	ldr	r2, [sp, #32]
 8009268:	e770      	b.n	800914c <_dtoa_r+0x7ac>
 800926a:	9b07      	ldr	r3, [sp, #28]
 800926c:	2b01      	cmp	r3, #1
 800926e:	dc19      	bgt.n	80092a4 <_dtoa_r+0x904>
 8009270:	9b02      	ldr	r3, [sp, #8]
 8009272:	b9bb      	cbnz	r3, 80092a4 <_dtoa_r+0x904>
 8009274:	9b03      	ldr	r3, [sp, #12]
 8009276:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800927a:	b99b      	cbnz	r3, 80092a4 <_dtoa_r+0x904>
 800927c:	9b03      	ldr	r3, [sp, #12]
 800927e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009282:	0d1b      	lsrs	r3, r3, #20
 8009284:	051b      	lsls	r3, r3, #20
 8009286:	b183      	cbz	r3, 80092aa <_dtoa_r+0x90a>
 8009288:	9b05      	ldr	r3, [sp, #20]
 800928a:	3301      	adds	r3, #1
 800928c:	9305      	str	r3, [sp, #20]
 800928e:	9b06      	ldr	r3, [sp, #24]
 8009290:	3301      	adds	r3, #1
 8009292:	9306      	str	r3, [sp, #24]
 8009294:	f04f 0801 	mov.w	r8, #1
 8009298:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800929a:	2b00      	cmp	r3, #0
 800929c:	f47f af6f 	bne.w	800917e <_dtoa_r+0x7de>
 80092a0:	2001      	movs	r0, #1
 80092a2:	e774      	b.n	800918e <_dtoa_r+0x7ee>
 80092a4:	f04f 0800 	mov.w	r8, #0
 80092a8:	e7f6      	b.n	8009298 <_dtoa_r+0x8f8>
 80092aa:	4698      	mov	r8, r3
 80092ac:	e7f4      	b.n	8009298 <_dtoa_r+0x8f8>
 80092ae:	d082      	beq.n	80091b6 <_dtoa_r+0x816>
 80092b0:	9a05      	ldr	r2, [sp, #20]
 80092b2:	331c      	adds	r3, #28
 80092b4:	441a      	add	r2, r3
 80092b6:	9205      	str	r2, [sp, #20]
 80092b8:	9a06      	ldr	r2, [sp, #24]
 80092ba:	441a      	add	r2, r3
 80092bc:	441d      	add	r5, r3
 80092be:	9206      	str	r2, [sp, #24]
 80092c0:	e779      	b.n	80091b6 <_dtoa_r+0x816>
 80092c2:	4603      	mov	r3, r0
 80092c4:	e7f4      	b.n	80092b0 <_dtoa_r+0x910>
 80092c6:	9b04      	ldr	r3, [sp, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	dc37      	bgt.n	800933c <_dtoa_r+0x99c>
 80092cc:	9b07      	ldr	r3, [sp, #28]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	dd34      	ble.n	800933c <_dtoa_r+0x99c>
 80092d2:	9b04      	ldr	r3, [sp, #16]
 80092d4:	9301      	str	r3, [sp, #4]
 80092d6:	9b01      	ldr	r3, [sp, #4]
 80092d8:	b963      	cbnz	r3, 80092f4 <_dtoa_r+0x954>
 80092da:	4631      	mov	r1, r6
 80092dc:	2205      	movs	r2, #5
 80092de:	4620      	mov	r0, r4
 80092e0:	f000 f9fe 	bl	80096e0 <__multadd>
 80092e4:	4601      	mov	r1, r0
 80092e6:	4606      	mov	r6, r0
 80092e8:	4650      	mov	r0, sl
 80092ea:	f000 fc5d 	bl	8009ba8 <__mcmp>
 80092ee:	2800      	cmp	r0, #0
 80092f0:	f73f adbb 	bgt.w	8008e6a <_dtoa_r+0x4ca>
 80092f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f6:	9d00      	ldr	r5, [sp, #0]
 80092f8:	ea6f 0b03 	mvn.w	fp, r3
 80092fc:	f04f 0800 	mov.w	r8, #0
 8009300:	4631      	mov	r1, r6
 8009302:	4620      	mov	r0, r4
 8009304:	f000 f9ca 	bl	800969c <_Bfree>
 8009308:	2f00      	cmp	r7, #0
 800930a:	f43f aeab 	beq.w	8009064 <_dtoa_r+0x6c4>
 800930e:	f1b8 0f00 	cmp.w	r8, #0
 8009312:	d005      	beq.n	8009320 <_dtoa_r+0x980>
 8009314:	45b8      	cmp	r8, r7
 8009316:	d003      	beq.n	8009320 <_dtoa_r+0x980>
 8009318:	4641      	mov	r1, r8
 800931a:	4620      	mov	r0, r4
 800931c:	f000 f9be 	bl	800969c <_Bfree>
 8009320:	4639      	mov	r1, r7
 8009322:	4620      	mov	r0, r4
 8009324:	f000 f9ba 	bl	800969c <_Bfree>
 8009328:	e69c      	b.n	8009064 <_dtoa_r+0x6c4>
 800932a:	2600      	movs	r6, #0
 800932c:	4637      	mov	r7, r6
 800932e:	e7e1      	b.n	80092f4 <_dtoa_r+0x954>
 8009330:	46bb      	mov	fp, r7
 8009332:	4637      	mov	r7, r6
 8009334:	e599      	b.n	8008e6a <_dtoa_r+0x4ca>
 8009336:	bf00      	nop
 8009338:	40240000 	.word	0x40240000
 800933c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800933e:	2b00      	cmp	r3, #0
 8009340:	f000 80c8 	beq.w	80094d4 <_dtoa_r+0xb34>
 8009344:	9b04      	ldr	r3, [sp, #16]
 8009346:	9301      	str	r3, [sp, #4]
 8009348:	2d00      	cmp	r5, #0
 800934a:	dd05      	ble.n	8009358 <_dtoa_r+0x9b8>
 800934c:	4639      	mov	r1, r7
 800934e:	462a      	mov	r2, r5
 8009350:	4620      	mov	r0, r4
 8009352:	f000 fbbd 	bl	8009ad0 <__lshift>
 8009356:	4607      	mov	r7, r0
 8009358:	f1b8 0f00 	cmp.w	r8, #0
 800935c:	d05b      	beq.n	8009416 <_dtoa_r+0xa76>
 800935e:	6879      	ldr	r1, [r7, #4]
 8009360:	4620      	mov	r0, r4
 8009362:	f000 f95b 	bl	800961c <_Balloc>
 8009366:	4605      	mov	r5, r0
 8009368:	b928      	cbnz	r0, 8009376 <_dtoa_r+0x9d6>
 800936a:	4b83      	ldr	r3, [pc, #524]	; (8009578 <_dtoa_r+0xbd8>)
 800936c:	4602      	mov	r2, r0
 800936e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009372:	f7ff bb2e 	b.w	80089d2 <_dtoa_r+0x32>
 8009376:	693a      	ldr	r2, [r7, #16]
 8009378:	3202      	adds	r2, #2
 800937a:	0092      	lsls	r2, r2, #2
 800937c:	f107 010c 	add.w	r1, r7, #12
 8009380:	300c      	adds	r0, #12
 8009382:	f7ff fa70 	bl	8008866 <memcpy>
 8009386:	2201      	movs	r2, #1
 8009388:	4629      	mov	r1, r5
 800938a:	4620      	mov	r0, r4
 800938c:	f000 fba0 	bl	8009ad0 <__lshift>
 8009390:	9b00      	ldr	r3, [sp, #0]
 8009392:	3301      	adds	r3, #1
 8009394:	9304      	str	r3, [sp, #16]
 8009396:	e9dd 2300 	ldrd	r2, r3, [sp]
 800939a:	4413      	add	r3, r2
 800939c:	9308      	str	r3, [sp, #32]
 800939e:	9b02      	ldr	r3, [sp, #8]
 80093a0:	f003 0301 	and.w	r3, r3, #1
 80093a4:	46b8      	mov	r8, r7
 80093a6:	9306      	str	r3, [sp, #24]
 80093a8:	4607      	mov	r7, r0
 80093aa:	9b04      	ldr	r3, [sp, #16]
 80093ac:	4631      	mov	r1, r6
 80093ae:	3b01      	subs	r3, #1
 80093b0:	4650      	mov	r0, sl
 80093b2:	9301      	str	r3, [sp, #4]
 80093b4:	f7ff fa6c 	bl	8008890 <quorem>
 80093b8:	4641      	mov	r1, r8
 80093ba:	9002      	str	r0, [sp, #8]
 80093bc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80093c0:	4650      	mov	r0, sl
 80093c2:	f000 fbf1 	bl	8009ba8 <__mcmp>
 80093c6:	463a      	mov	r2, r7
 80093c8:	9005      	str	r0, [sp, #20]
 80093ca:	4631      	mov	r1, r6
 80093cc:	4620      	mov	r0, r4
 80093ce:	f000 fc07 	bl	8009be0 <__mdiff>
 80093d2:	68c2      	ldr	r2, [r0, #12]
 80093d4:	4605      	mov	r5, r0
 80093d6:	bb02      	cbnz	r2, 800941a <_dtoa_r+0xa7a>
 80093d8:	4601      	mov	r1, r0
 80093da:	4650      	mov	r0, sl
 80093dc:	f000 fbe4 	bl	8009ba8 <__mcmp>
 80093e0:	4602      	mov	r2, r0
 80093e2:	4629      	mov	r1, r5
 80093e4:	4620      	mov	r0, r4
 80093e6:	9209      	str	r2, [sp, #36]	; 0x24
 80093e8:	f000 f958 	bl	800969c <_Bfree>
 80093ec:	9b07      	ldr	r3, [sp, #28]
 80093ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80093f0:	9d04      	ldr	r5, [sp, #16]
 80093f2:	ea43 0102 	orr.w	r1, r3, r2
 80093f6:	9b06      	ldr	r3, [sp, #24]
 80093f8:	4319      	orrs	r1, r3
 80093fa:	d110      	bne.n	800941e <_dtoa_r+0xa7e>
 80093fc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009400:	d029      	beq.n	8009456 <_dtoa_r+0xab6>
 8009402:	9b05      	ldr	r3, [sp, #20]
 8009404:	2b00      	cmp	r3, #0
 8009406:	dd02      	ble.n	800940e <_dtoa_r+0xa6e>
 8009408:	9b02      	ldr	r3, [sp, #8]
 800940a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800940e:	9b01      	ldr	r3, [sp, #4]
 8009410:	f883 9000 	strb.w	r9, [r3]
 8009414:	e774      	b.n	8009300 <_dtoa_r+0x960>
 8009416:	4638      	mov	r0, r7
 8009418:	e7ba      	b.n	8009390 <_dtoa_r+0x9f0>
 800941a:	2201      	movs	r2, #1
 800941c:	e7e1      	b.n	80093e2 <_dtoa_r+0xa42>
 800941e:	9b05      	ldr	r3, [sp, #20]
 8009420:	2b00      	cmp	r3, #0
 8009422:	db04      	blt.n	800942e <_dtoa_r+0xa8e>
 8009424:	9907      	ldr	r1, [sp, #28]
 8009426:	430b      	orrs	r3, r1
 8009428:	9906      	ldr	r1, [sp, #24]
 800942a:	430b      	orrs	r3, r1
 800942c:	d120      	bne.n	8009470 <_dtoa_r+0xad0>
 800942e:	2a00      	cmp	r2, #0
 8009430:	dded      	ble.n	800940e <_dtoa_r+0xa6e>
 8009432:	4651      	mov	r1, sl
 8009434:	2201      	movs	r2, #1
 8009436:	4620      	mov	r0, r4
 8009438:	f000 fb4a 	bl	8009ad0 <__lshift>
 800943c:	4631      	mov	r1, r6
 800943e:	4682      	mov	sl, r0
 8009440:	f000 fbb2 	bl	8009ba8 <__mcmp>
 8009444:	2800      	cmp	r0, #0
 8009446:	dc03      	bgt.n	8009450 <_dtoa_r+0xab0>
 8009448:	d1e1      	bne.n	800940e <_dtoa_r+0xa6e>
 800944a:	f019 0f01 	tst.w	r9, #1
 800944e:	d0de      	beq.n	800940e <_dtoa_r+0xa6e>
 8009450:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009454:	d1d8      	bne.n	8009408 <_dtoa_r+0xa68>
 8009456:	9a01      	ldr	r2, [sp, #4]
 8009458:	2339      	movs	r3, #57	; 0x39
 800945a:	7013      	strb	r3, [r2, #0]
 800945c:	462b      	mov	r3, r5
 800945e:	461d      	mov	r5, r3
 8009460:	3b01      	subs	r3, #1
 8009462:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009466:	2a39      	cmp	r2, #57	; 0x39
 8009468:	d06c      	beq.n	8009544 <_dtoa_r+0xba4>
 800946a:	3201      	adds	r2, #1
 800946c:	701a      	strb	r2, [r3, #0]
 800946e:	e747      	b.n	8009300 <_dtoa_r+0x960>
 8009470:	2a00      	cmp	r2, #0
 8009472:	dd07      	ble.n	8009484 <_dtoa_r+0xae4>
 8009474:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009478:	d0ed      	beq.n	8009456 <_dtoa_r+0xab6>
 800947a:	9a01      	ldr	r2, [sp, #4]
 800947c:	f109 0301 	add.w	r3, r9, #1
 8009480:	7013      	strb	r3, [r2, #0]
 8009482:	e73d      	b.n	8009300 <_dtoa_r+0x960>
 8009484:	9b04      	ldr	r3, [sp, #16]
 8009486:	9a08      	ldr	r2, [sp, #32]
 8009488:	f803 9c01 	strb.w	r9, [r3, #-1]
 800948c:	4293      	cmp	r3, r2
 800948e:	d043      	beq.n	8009518 <_dtoa_r+0xb78>
 8009490:	4651      	mov	r1, sl
 8009492:	2300      	movs	r3, #0
 8009494:	220a      	movs	r2, #10
 8009496:	4620      	mov	r0, r4
 8009498:	f000 f922 	bl	80096e0 <__multadd>
 800949c:	45b8      	cmp	r8, r7
 800949e:	4682      	mov	sl, r0
 80094a0:	f04f 0300 	mov.w	r3, #0
 80094a4:	f04f 020a 	mov.w	r2, #10
 80094a8:	4641      	mov	r1, r8
 80094aa:	4620      	mov	r0, r4
 80094ac:	d107      	bne.n	80094be <_dtoa_r+0xb1e>
 80094ae:	f000 f917 	bl	80096e0 <__multadd>
 80094b2:	4680      	mov	r8, r0
 80094b4:	4607      	mov	r7, r0
 80094b6:	9b04      	ldr	r3, [sp, #16]
 80094b8:	3301      	adds	r3, #1
 80094ba:	9304      	str	r3, [sp, #16]
 80094bc:	e775      	b.n	80093aa <_dtoa_r+0xa0a>
 80094be:	f000 f90f 	bl	80096e0 <__multadd>
 80094c2:	4639      	mov	r1, r7
 80094c4:	4680      	mov	r8, r0
 80094c6:	2300      	movs	r3, #0
 80094c8:	220a      	movs	r2, #10
 80094ca:	4620      	mov	r0, r4
 80094cc:	f000 f908 	bl	80096e0 <__multadd>
 80094d0:	4607      	mov	r7, r0
 80094d2:	e7f0      	b.n	80094b6 <_dtoa_r+0xb16>
 80094d4:	9b04      	ldr	r3, [sp, #16]
 80094d6:	9301      	str	r3, [sp, #4]
 80094d8:	9d00      	ldr	r5, [sp, #0]
 80094da:	4631      	mov	r1, r6
 80094dc:	4650      	mov	r0, sl
 80094de:	f7ff f9d7 	bl	8008890 <quorem>
 80094e2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80094e6:	9b00      	ldr	r3, [sp, #0]
 80094e8:	f805 9b01 	strb.w	r9, [r5], #1
 80094ec:	1aea      	subs	r2, r5, r3
 80094ee:	9b01      	ldr	r3, [sp, #4]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	dd07      	ble.n	8009504 <_dtoa_r+0xb64>
 80094f4:	4651      	mov	r1, sl
 80094f6:	2300      	movs	r3, #0
 80094f8:	220a      	movs	r2, #10
 80094fa:	4620      	mov	r0, r4
 80094fc:	f000 f8f0 	bl	80096e0 <__multadd>
 8009500:	4682      	mov	sl, r0
 8009502:	e7ea      	b.n	80094da <_dtoa_r+0xb3a>
 8009504:	9b01      	ldr	r3, [sp, #4]
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfc8      	it	gt
 800950a:	461d      	movgt	r5, r3
 800950c:	9b00      	ldr	r3, [sp, #0]
 800950e:	bfd8      	it	le
 8009510:	2501      	movle	r5, #1
 8009512:	441d      	add	r5, r3
 8009514:	f04f 0800 	mov.w	r8, #0
 8009518:	4651      	mov	r1, sl
 800951a:	2201      	movs	r2, #1
 800951c:	4620      	mov	r0, r4
 800951e:	f000 fad7 	bl	8009ad0 <__lshift>
 8009522:	4631      	mov	r1, r6
 8009524:	4682      	mov	sl, r0
 8009526:	f000 fb3f 	bl	8009ba8 <__mcmp>
 800952a:	2800      	cmp	r0, #0
 800952c:	dc96      	bgt.n	800945c <_dtoa_r+0xabc>
 800952e:	d102      	bne.n	8009536 <_dtoa_r+0xb96>
 8009530:	f019 0f01 	tst.w	r9, #1
 8009534:	d192      	bne.n	800945c <_dtoa_r+0xabc>
 8009536:	462b      	mov	r3, r5
 8009538:	461d      	mov	r5, r3
 800953a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800953e:	2a30      	cmp	r2, #48	; 0x30
 8009540:	d0fa      	beq.n	8009538 <_dtoa_r+0xb98>
 8009542:	e6dd      	b.n	8009300 <_dtoa_r+0x960>
 8009544:	9a00      	ldr	r2, [sp, #0]
 8009546:	429a      	cmp	r2, r3
 8009548:	d189      	bne.n	800945e <_dtoa_r+0xabe>
 800954a:	f10b 0b01 	add.w	fp, fp, #1
 800954e:	2331      	movs	r3, #49	; 0x31
 8009550:	e796      	b.n	8009480 <_dtoa_r+0xae0>
 8009552:	4b0a      	ldr	r3, [pc, #40]	; (800957c <_dtoa_r+0xbdc>)
 8009554:	f7ff ba99 	b.w	8008a8a <_dtoa_r+0xea>
 8009558:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800955a:	2b00      	cmp	r3, #0
 800955c:	f47f aa6d 	bne.w	8008a3a <_dtoa_r+0x9a>
 8009560:	4b07      	ldr	r3, [pc, #28]	; (8009580 <_dtoa_r+0xbe0>)
 8009562:	f7ff ba92 	b.w	8008a8a <_dtoa_r+0xea>
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	2b00      	cmp	r3, #0
 800956a:	dcb5      	bgt.n	80094d8 <_dtoa_r+0xb38>
 800956c:	9b07      	ldr	r3, [sp, #28]
 800956e:	2b02      	cmp	r3, #2
 8009570:	f73f aeb1 	bgt.w	80092d6 <_dtoa_r+0x936>
 8009574:	e7b0      	b.n	80094d8 <_dtoa_r+0xb38>
 8009576:	bf00      	nop
 8009578:	0801f021 	.word	0x0801f021
 800957c:	0801ef7c 	.word	0x0801ef7c
 8009580:	0801efa5 	.word	0x0801efa5

08009584 <_free_r>:
 8009584:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009586:	2900      	cmp	r1, #0
 8009588:	d044      	beq.n	8009614 <_free_r+0x90>
 800958a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800958e:	9001      	str	r0, [sp, #4]
 8009590:	2b00      	cmp	r3, #0
 8009592:	f1a1 0404 	sub.w	r4, r1, #4
 8009596:	bfb8      	it	lt
 8009598:	18e4      	addlt	r4, r4, r3
 800959a:	f7fe f88d 	bl	80076b8 <__malloc_lock>
 800959e:	4a1e      	ldr	r2, [pc, #120]	; (8009618 <_free_r+0x94>)
 80095a0:	9801      	ldr	r0, [sp, #4]
 80095a2:	6813      	ldr	r3, [r2, #0]
 80095a4:	b933      	cbnz	r3, 80095b4 <_free_r+0x30>
 80095a6:	6063      	str	r3, [r4, #4]
 80095a8:	6014      	str	r4, [r2, #0]
 80095aa:	b003      	add	sp, #12
 80095ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80095b0:	f7fe b888 	b.w	80076c4 <__malloc_unlock>
 80095b4:	42a3      	cmp	r3, r4
 80095b6:	d908      	bls.n	80095ca <_free_r+0x46>
 80095b8:	6825      	ldr	r5, [r4, #0]
 80095ba:	1961      	adds	r1, r4, r5
 80095bc:	428b      	cmp	r3, r1
 80095be:	bf01      	itttt	eq
 80095c0:	6819      	ldreq	r1, [r3, #0]
 80095c2:	685b      	ldreq	r3, [r3, #4]
 80095c4:	1949      	addeq	r1, r1, r5
 80095c6:	6021      	streq	r1, [r4, #0]
 80095c8:	e7ed      	b.n	80095a6 <_free_r+0x22>
 80095ca:	461a      	mov	r2, r3
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	b10b      	cbz	r3, 80095d4 <_free_r+0x50>
 80095d0:	42a3      	cmp	r3, r4
 80095d2:	d9fa      	bls.n	80095ca <_free_r+0x46>
 80095d4:	6811      	ldr	r1, [r2, #0]
 80095d6:	1855      	adds	r5, r2, r1
 80095d8:	42a5      	cmp	r5, r4
 80095da:	d10b      	bne.n	80095f4 <_free_r+0x70>
 80095dc:	6824      	ldr	r4, [r4, #0]
 80095de:	4421      	add	r1, r4
 80095e0:	1854      	adds	r4, r2, r1
 80095e2:	42a3      	cmp	r3, r4
 80095e4:	6011      	str	r1, [r2, #0]
 80095e6:	d1e0      	bne.n	80095aa <_free_r+0x26>
 80095e8:	681c      	ldr	r4, [r3, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	6053      	str	r3, [r2, #4]
 80095ee:	440c      	add	r4, r1
 80095f0:	6014      	str	r4, [r2, #0]
 80095f2:	e7da      	b.n	80095aa <_free_r+0x26>
 80095f4:	d902      	bls.n	80095fc <_free_r+0x78>
 80095f6:	230c      	movs	r3, #12
 80095f8:	6003      	str	r3, [r0, #0]
 80095fa:	e7d6      	b.n	80095aa <_free_r+0x26>
 80095fc:	6825      	ldr	r5, [r4, #0]
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	428b      	cmp	r3, r1
 8009602:	bf04      	itt	eq
 8009604:	6819      	ldreq	r1, [r3, #0]
 8009606:	685b      	ldreq	r3, [r3, #4]
 8009608:	6063      	str	r3, [r4, #4]
 800960a:	bf04      	itt	eq
 800960c:	1949      	addeq	r1, r1, r5
 800960e:	6021      	streq	r1, [r4, #0]
 8009610:	6054      	str	r4, [r2, #4]
 8009612:	e7ca      	b.n	80095aa <_free_r+0x26>
 8009614:	b003      	add	sp, #12
 8009616:	bd30      	pop	{r4, r5, pc}
 8009618:	20006c64 	.word	0x20006c64

0800961c <_Balloc>:
 800961c:	b570      	push	{r4, r5, r6, lr}
 800961e:	69c6      	ldr	r6, [r0, #28]
 8009620:	4604      	mov	r4, r0
 8009622:	460d      	mov	r5, r1
 8009624:	b976      	cbnz	r6, 8009644 <_Balloc+0x28>
 8009626:	2010      	movs	r0, #16
 8009628:	f7fd ff9e 	bl	8007568 <malloc>
 800962c:	4602      	mov	r2, r0
 800962e:	61e0      	str	r0, [r4, #28]
 8009630:	b920      	cbnz	r0, 800963c <_Balloc+0x20>
 8009632:	4b18      	ldr	r3, [pc, #96]	; (8009694 <_Balloc+0x78>)
 8009634:	4818      	ldr	r0, [pc, #96]	; (8009698 <_Balloc+0x7c>)
 8009636:	216b      	movs	r1, #107	; 0x6b
 8009638:	f001 ff4a 	bl	800b4d0 <__assert_func>
 800963c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009640:	6006      	str	r6, [r0, #0]
 8009642:	60c6      	str	r6, [r0, #12]
 8009644:	69e6      	ldr	r6, [r4, #28]
 8009646:	68f3      	ldr	r3, [r6, #12]
 8009648:	b183      	cbz	r3, 800966c <_Balloc+0x50>
 800964a:	69e3      	ldr	r3, [r4, #28]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009652:	b9b8      	cbnz	r0, 8009684 <_Balloc+0x68>
 8009654:	2101      	movs	r1, #1
 8009656:	fa01 f605 	lsl.w	r6, r1, r5
 800965a:	1d72      	adds	r2, r6, #5
 800965c:	0092      	lsls	r2, r2, #2
 800965e:	4620      	mov	r0, r4
 8009660:	f001 ff54 	bl	800b50c <_calloc_r>
 8009664:	b160      	cbz	r0, 8009680 <_Balloc+0x64>
 8009666:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800966a:	e00e      	b.n	800968a <_Balloc+0x6e>
 800966c:	2221      	movs	r2, #33	; 0x21
 800966e:	2104      	movs	r1, #4
 8009670:	4620      	mov	r0, r4
 8009672:	f001 ff4b 	bl	800b50c <_calloc_r>
 8009676:	69e3      	ldr	r3, [r4, #28]
 8009678:	60f0      	str	r0, [r6, #12]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d1e4      	bne.n	800964a <_Balloc+0x2e>
 8009680:	2000      	movs	r0, #0
 8009682:	bd70      	pop	{r4, r5, r6, pc}
 8009684:	6802      	ldr	r2, [r0, #0]
 8009686:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800968a:	2300      	movs	r3, #0
 800968c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009690:	e7f7      	b.n	8009682 <_Balloc+0x66>
 8009692:	bf00      	nop
 8009694:	0801efb2 	.word	0x0801efb2
 8009698:	0801f032 	.word	0x0801f032

0800969c <_Bfree>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	69c6      	ldr	r6, [r0, #28]
 80096a0:	4605      	mov	r5, r0
 80096a2:	460c      	mov	r4, r1
 80096a4:	b976      	cbnz	r6, 80096c4 <_Bfree+0x28>
 80096a6:	2010      	movs	r0, #16
 80096a8:	f7fd ff5e 	bl	8007568 <malloc>
 80096ac:	4602      	mov	r2, r0
 80096ae:	61e8      	str	r0, [r5, #28]
 80096b0:	b920      	cbnz	r0, 80096bc <_Bfree+0x20>
 80096b2:	4b09      	ldr	r3, [pc, #36]	; (80096d8 <_Bfree+0x3c>)
 80096b4:	4809      	ldr	r0, [pc, #36]	; (80096dc <_Bfree+0x40>)
 80096b6:	218f      	movs	r1, #143	; 0x8f
 80096b8:	f001 ff0a 	bl	800b4d0 <__assert_func>
 80096bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80096c0:	6006      	str	r6, [r0, #0]
 80096c2:	60c6      	str	r6, [r0, #12]
 80096c4:	b13c      	cbz	r4, 80096d6 <_Bfree+0x3a>
 80096c6:	69eb      	ldr	r3, [r5, #28]
 80096c8:	6862      	ldr	r2, [r4, #4]
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80096d0:	6021      	str	r1, [r4, #0]
 80096d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80096d6:	bd70      	pop	{r4, r5, r6, pc}
 80096d8:	0801efb2 	.word	0x0801efb2
 80096dc:	0801f032 	.word	0x0801f032

080096e0 <__multadd>:
 80096e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096e4:	690d      	ldr	r5, [r1, #16]
 80096e6:	4607      	mov	r7, r0
 80096e8:	460c      	mov	r4, r1
 80096ea:	461e      	mov	r6, r3
 80096ec:	f101 0c14 	add.w	ip, r1, #20
 80096f0:	2000      	movs	r0, #0
 80096f2:	f8dc 3000 	ldr.w	r3, [ip]
 80096f6:	b299      	uxth	r1, r3
 80096f8:	fb02 6101 	mla	r1, r2, r1, r6
 80096fc:	0c1e      	lsrs	r6, r3, #16
 80096fe:	0c0b      	lsrs	r3, r1, #16
 8009700:	fb02 3306 	mla	r3, r2, r6, r3
 8009704:	b289      	uxth	r1, r1
 8009706:	3001      	adds	r0, #1
 8009708:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800970c:	4285      	cmp	r5, r0
 800970e:	f84c 1b04 	str.w	r1, [ip], #4
 8009712:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009716:	dcec      	bgt.n	80096f2 <__multadd+0x12>
 8009718:	b30e      	cbz	r6, 800975e <__multadd+0x7e>
 800971a:	68a3      	ldr	r3, [r4, #8]
 800971c:	42ab      	cmp	r3, r5
 800971e:	dc19      	bgt.n	8009754 <__multadd+0x74>
 8009720:	6861      	ldr	r1, [r4, #4]
 8009722:	4638      	mov	r0, r7
 8009724:	3101      	adds	r1, #1
 8009726:	f7ff ff79 	bl	800961c <_Balloc>
 800972a:	4680      	mov	r8, r0
 800972c:	b928      	cbnz	r0, 800973a <__multadd+0x5a>
 800972e:	4602      	mov	r2, r0
 8009730:	4b0c      	ldr	r3, [pc, #48]	; (8009764 <__multadd+0x84>)
 8009732:	480d      	ldr	r0, [pc, #52]	; (8009768 <__multadd+0x88>)
 8009734:	21ba      	movs	r1, #186	; 0xba
 8009736:	f001 fecb 	bl	800b4d0 <__assert_func>
 800973a:	6922      	ldr	r2, [r4, #16]
 800973c:	3202      	adds	r2, #2
 800973e:	f104 010c 	add.w	r1, r4, #12
 8009742:	0092      	lsls	r2, r2, #2
 8009744:	300c      	adds	r0, #12
 8009746:	f7ff f88e 	bl	8008866 <memcpy>
 800974a:	4621      	mov	r1, r4
 800974c:	4638      	mov	r0, r7
 800974e:	f7ff ffa5 	bl	800969c <_Bfree>
 8009752:	4644      	mov	r4, r8
 8009754:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009758:	3501      	adds	r5, #1
 800975a:	615e      	str	r6, [r3, #20]
 800975c:	6125      	str	r5, [r4, #16]
 800975e:	4620      	mov	r0, r4
 8009760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009764:	0801f021 	.word	0x0801f021
 8009768:	0801f032 	.word	0x0801f032

0800976c <__s2b>:
 800976c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009770:	460c      	mov	r4, r1
 8009772:	4615      	mov	r5, r2
 8009774:	461f      	mov	r7, r3
 8009776:	2209      	movs	r2, #9
 8009778:	3308      	adds	r3, #8
 800977a:	4606      	mov	r6, r0
 800977c:	fb93 f3f2 	sdiv	r3, r3, r2
 8009780:	2100      	movs	r1, #0
 8009782:	2201      	movs	r2, #1
 8009784:	429a      	cmp	r2, r3
 8009786:	db09      	blt.n	800979c <__s2b+0x30>
 8009788:	4630      	mov	r0, r6
 800978a:	f7ff ff47 	bl	800961c <_Balloc>
 800978e:	b940      	cbnz	r0, 80097a2 <__s2b+0x36>
 8009790:	4602      	mov	r2, r0
 8009792:	4b19      	ldr	r3, [pc, #100]	; (80097f8 <__s2b+0x8c>)
 8009794:	4819      	ldr	r0, [pc, #100]	; (80097fc <__s2b+0x90>)
 8009796:	21d3      	movs	r1, #211	; 0xd3
 8009798:	f001 fe9a 	bl	800b4d0 <__assert_func>
 800979c:	0052      	lsls	r2, r2, #1
 800979e:	3101      	adds	r1, #1
 80097a0:	e7f0      	b.n	8009784 <__s2b+0x18>
 80097a2:	9b08      	ldr	r3, [sp, #32]
 80097a4:	6143      	str	r3, [r0, #20]
 80097a6:	2d09      	cmp	r5, #9
 80097a8:	f04f 0301 	mov.w	r3, #1
 80097ac:	6103      	str	r3, [r0, #16]
 80097ae:	dd16      	ble.n	80097de <__s2b+0x72>
 80097b0:	f104 0909 	add.w	r9, r4, #9
 80097b4:	46c8      	mov	r8, r9
 80097b6:	442c      	add	r4, r5
 80097b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80097bc:	4601      	mov	r1, r0
 80097be:	3b30      	subs	r3, #48	; 0x30
 80097c0:	220a      	movs	r2, #10
 80097c2:	4630      	mov	r0, r6
 80097c4:	f7ff ff8c 	bl	80096e0 <__multadd>
 80097c8:	45a0      	cmp	r8, r4
 80097ca:	d1f5      	bne.n	80097b8 <__s2b+0x4c>
 80097cc:	f1a5 0408 	sub.w	r4, r5, #8
 80097d0:	444c      	add	r4, r9
 80097d2:	1b2d      	subs	r5, r5, r4
 80097d4:	1963      	adds	r3, r4, r5
 80097d6:	42bb      	cmp	r3, r7
 80097d8:	db04      	blt.n	80097e4 <__s2b+0x78>
 80097da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097de:	340a      	adds	r4, #10
 80097e0:	2509      	movs	r5, #9
 80097e2:	e7f6      	b.n	80097d2 <__s2b+0x66>
 80097e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80097e8:	4601      	mov	r1, r0
 80097ea:	3b30      	subs	r3, #48	; 0x30
 80097ec:	220a      	movs	r2, #10
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ff76 	bl	80096e0 <__multadd>
 80097f4:	e7ee      	b.n	80097d4 <__s2b+0x68>
 80097f6:	bf00      	nop
 80097f8:	0801f021 	.word	0x0801f021
 80097fc:	0801f032 	.word	0x0801f032

08009800 <__hi0bits>:
 8009800:	0c03      	lsrs	r3, r0, #16
 8009802:	041b      	lsls	r3, r3, #16
 8009804:	b9d3      	cbnz	r3, 800983c <__hi0bits+0x3c>
 8009806:	0400      	lsls	r0, r0, #16
 8009808:	2310      	movs	r3, #16
 800980a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800980e:	bf04      	itt	eq
 8009810:	0200      	lsleq	r0, r0, #8
 8009812:	3308      	addeq	r3, #8
 8009814:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009818:	bf04      	itt	eq
 800981a:	0100      	lsleq	r0, r0, #4
 800981c:	3304      	addeq	r3, #4
 800981e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009822:	bf04      	itt	eq
 8009824:	0080      	lsleq	r0, r0, #2
 8009826:	3302      	addeq	r3, #2
 8009828:	2800      	cmp	r0, #0
 800982a:	db05      	blt.n	8009838 <__hi0bits+0x38>
 800982c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009830:	f103 0301 	add.w	r3, r3, #1
 8009834:	bf08      	it	eq
 8009836:	2320      	moveq	r3, #32
 8009838:	4618      	mov	r0, r3
 800983a:	4770      	bx	lr
 800983c:	2300      	movs	r3, #0
 800983e:	e7e4      	b.n	800980a <__hi0bits+0xa>

08009840 <__lo0bits>:
 8009840:	6803      	ldr	r3, [r0, #0]
 8009842:	f013 0207 	ands.w	r2, r3, #7
 8009846:	d00c      	beq.n	8009862 <__lo0bits+0x22>
 8009848:	07d9      	lsls	r1, r3, #31
 800984a:	d422      	bmi.n	8009892 <__lo0bits+0x52>
 800984c:	079a      	lsls	r2, r3, #30
 800984e:	bf49      	itett	mi
 8009850:	085b      	lsrmi	r3, r3, #1
 8009852:	089b      	lsrpl	r3, r3, #2
 8009854:	6003      	strmi	r3, [r0, #0]
 8009856:	2201      	movmi	r2, #1
 8009858:	bf5c      	itt	pl
 800985a:	6003      	strpl	r3, [r0, #0]
 800985c:	2202      	movpl	r2, #2
 800985e:	4610      	mov	r0, r2
 8009860:	4770      	bx	lr
 8009862:	b299      	uxth	r1, r3
 8009864:	b909      	cbnz	r1, 800986a <__lo0bits+0x2a>
 8009866:	0c1b      	lsrs	r3, r3, #16
 8009868:	2210      	movs	r2, #16
 800986a:	b2d9      	uxtb	r1, r3
 800986c:	b909      	cbnz	r1, 8009872 <__lo0bits+0x32>
 800986e:	3208      	adds	r2, #8
 8009870:	0a1b      	lsrs	r3, r3, #8
 8009872:	0719      	lsls	r1, r3, #28
 8009874:	bf04      	itt	eq
 8009876:	091b      	lsreq	r3, r3, #4
 8009878:	3204      	addeq	r2, #4
 800987a:	0799      	lsls	r1, r3, #30
 800987c:	bf04      	itt	eq
 800987e:	089b      	lsreq	r3, r3, #2
 8009880:	3202      	addeq	r2, #2
 8009882:	07d9      	lsls	r1, r3, #31
 8009884:	d403      	bmi.n	800988e <__lo0bits+0x4e>
 8009886:	085b      	lsrs	r3, r3, #1
 8009888:	f102 0201 	add.w	r2, r2, #1
 800988c:	d003      	beq.n	8009896 <__lo0bits+0x56>
 800988e:	6003      	str	r3, [r0, #0]
 8009890:	e7e5      	b.n	800985e <__lo0bits+0x1e>
 8009892:	2200      	movs	r2, #0
 8009894:	e7e3      	b.n	800985e <__lo0bits+0x1e>
 8009896:	2220      	movs	r2, #32
 8009898:	e7e1      	b.n	800985e <__lo0bits+0x1e>
	...

0800989c <__i2b>:
 800989c:	b510      	push	{r4, lr}
 800989e:	460c      	mov	r4, r1
 80098a0:	2101      	movs	r1, #1
 80098a2:	f7ff febb 	bl	800961c <_Balloc>
 80098a6:	4602      	mov	r2, r0
 80098a8:	b928      	cbnz	r0, 80098b6 <__i2b+0x1a>
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <__i2b+0x24>)
 80098ac:	4805      	ldr	r0, [pc, #20]	; (80098c4 <__i2b+0x28>)
 80098ae:	f240 1145 	movw	r1, #325	; 0x145
 80098b2:	f001 fe0d 	bl	800b4d0 <__assert_func>
 80098b6:	2301      	movs	r3, #1
 80098b8:	6144      	str	r4, [r0, #20]
 80098ba:	6103      	str	r3, [r0, #16]
 80098bc:	bd10      	pop	{r4, pc}
 80098be:	bf00      	nop
 80098c0:	0801f021 	.word	0x0801f021
 80098c4:	0801f032 	.word	0x0801f032

080098c8 <__multiply>:
 80098c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098cc:	4691      	mov	r9, r2
 80098ce:	690a      	ldr	r2, [r1, #16]
 80098d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	bfb8      	it	lt
 80098d8:	460b      	movlt	r3, r1
 80098da:	460c      	mov	r4, r1
 80098dc:	bfbc      	itt	lt
 80098de:	464c      	movlt	r4, r9
 80098e0:	4699      	movlt	r9, r3
 80098e2:	6927      	ldr	r7, [r4, #16]
 80098e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	6861      	ldr	r1, [r4, #4]
 80098ec:	eb07 060a 	add.w	r6, r7, sl
 80098f0:	42b3      	cmp	r3, r6
 80098f2:	b085      	sub	sp, #20
 80098f4:	bfb8      	it	lt
 80098f6:	3101      	addlt	r1, #1
 80098f8:	f7ff fe90 	bl	800961c <_Balloc>
 80098fc:	b930      	cbnz	r0, 800990c <__multiply+0x44>
 80098fe:	4602      	mov	r2, r0
 8009900:	4b44      	ldr	r3, [pc, #272]	; (8009a14 <__multiply+0x14c>)
 8009902:	4845      	ldr	r0, [pc, #276]	; (8009a18 <__multiply+0x150>)
 8009904:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8009908:	f001 fde2 	bl	800b4d0 <__assert_func>
 800990c:	f100 0514 	add.w	r5, r0, #20
 8009910:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009914:	462b      	mov	r3, r5
 8009916:	2200      	movs	r2, #0
 8009918:	4543      	cmp	r3, r8
 800991a:	d321      	bcc.n	8009960 <__multiply+0x98>
 800991c:	f104 0314 	add.w	r3, r4, #20
 8009920:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009924:	f109 0314 	add.w	r3, r9, #20
 8009928:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800992c:	9202      	str	r2, [sp, #8]
 800992e:	1b3a      	subs	r2, r7, r4
 8009930:	3a15      	subs	r2, #21
 8009932:	f022 0203 	bic.w	r2, r2, #3
 8009936:	3204      	adds	r2, #4
 8009938:	f104 0115 	add.w	r1, r4, #21
 800993c:	428f      	cmp	r7, r1
 800993e:	bf38      	it	cc
 8009940:	2204      	movcc	r2, #4
 8009942:	9201      	str	r2, [sp, #4]
 8009944:	9a02      	ldr	r2, [sp, #8]
 8009946:	9303      	str	r3, [sp, #12]
 8009948:	429a      	cmp	r2, r3
 800994a:	d80c      	bhi.n	8009966 <__multiply+0x9e>
 800994c:	2e00      	cmp	r6, #0
 800994e:	dd03      	ble.n	8009958 <__multiply+0x90>
 8009950:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009954:	2b00      	cmp	r3, #0
 8009956:	d05b      	beq.n	8009a10 <__multiply+0x148>
 8009958:	6106      	str	r6, [r0, #16]
 800995a:	b005      	add	sp, #20
 800995c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009960:	f843 2b04 	str.w	r2, [r3], #4
 8009964:	e7d8      	b.n	8009918 <__multiply+0x50>
 8009966:	f8b3 a000 	ldrh.w	sl, [r3]
 800996a:	f1ba 0f00 	cmp.w	sl, #0
 800996e:	d024      	beq.n	80099ba <__multiply+0xf2>
 8009970:	f104 0e14 	add.w	lr, r4, #20
 8009974:	46a9      	mov	r9, r5
 8009976:	f04f 0c00 	mov.w	ip, #0
 800997a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800997e:	f8d9 1000 	ldr.w	r1, [r9]
 8009982:	fa1f fb82 	uxth.w	fp, r2
 8009986:	b289      	uxth	r1, r1
 8009988:	fb0a 110b 	mla	r1, sl, fp, r1
 800998c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009990:	f8d9 2000 	ldr.w	r2, [r9]
 8009994:	4461      	add	r1, ip
 8009996:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800999a:	fb0a c20b 	mla	r2, sl, fp, ip
 800999e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80099a2:	b289      	uxth	r1, r1
 80099a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099a8:	4577      	cmp	r7, lr
 80099aa:	f849 1b04 	str.w	r1, [r9], #4
 80099ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80099b2:	d8e2      	bhi.n	800997a <__multiply+0xb2>
 80099b4:	9a01      	ldr	r2, [sp, #4]
 80099b6:	f845 c002 	str.w	ip, [r5, r2]
 80099ba:	9a03      	ldr	r2, [sp, #12]
 80099bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80099c0:	3304      	adds	r3, #4
 80099c2:	f1b9 0f00 	cmp.w	r9, #0
 80099c6:	d021      	beq.n	8009a0c <__multiply+0x144>
 80099c8:	6829      	ldr	r1, [r5, #0]
 80099ca:	f104 0c14 	add.w	ip, r4, #20
 80099ce:	46ae      	mov	lr, r5
 80099d0:	f04f 0a00 	mov.w	sl, #0
 80099d4:	f8bc b000 	ldrh.w	fp, [ip]
 80099d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80099dc:	fb09 220b 	mla	r2, r9, fp, r2
 80099e0:	4452      	add	r2, sl
 80099e2:	b289      	uxth	r1, r1
 80099e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80099e8:	f84e 1b04 	str.w	r1, [lr], #4
 80099ec:	f85c 1b04 	ldr.w	r1, [ip], #4
 80099f0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80099f4:	f8be 1000 	ldrh.w	r1, [lr]
 80099f8:	fb09 110a 	mla	r1, r9, sl, r1
 80099fc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8009a00:	4567      	cmp	r7, ip
 8009a02:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009a06:	d8e5      	bhi.n	80099d4 <__multiply+0x10c>
 8009a08:	9a01      	ldr	r2, [sp, #4]
 8009a0a:	50a9      	str	r1, [r5, r2]
 8009a0c:	3504      	adds	r5, #4
 8009a0e:	e799      	b.n	8009944 <__multiply+0x7c>
 8009a10:	3e01      	subs	r6, #1
 8009a12:	e79b      	b.n	800994c <__multiply+0x84>
 8009a14:	0801f021 	.word	0x0801f021
 8009a18:	0801f032 	.word	0x0801f032

08009a1c <__pow5mult>:
 8009a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a20:	4615      	mov	r5, r2
 8009a22:	f012 0203 	ands.w	r2, r2, #3
 8009a26:	4606      	mov	r6, r0
 8009a28:	460f      	mov	r7, r1
 8009a2a:	d007      	beq.n	8009a3c <__pow5mult+0x20>
 8009a2c:	4c25      	ldr	r4, [pc, #148]	; (8009ac4 <__pow5mult+0xa8>)
 8009a2e:	3a01      	subs	r2, #1
 8009a30:	2300      	movs	r3, #0
 8009a32:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009a36:	f7ff fe53 	bl	80096e0 <__multadd>
 8009a3a:	4607      	mov	r7, r0
 8009a3c:	10ad      	asrs	r5, r5, #2
 8009a3e:	d03d      	beq.n	8009abc <__pow5mult+0xa0>
 8009a40:	69f4      	ldr	r4, [r6, #28]
 8009a42:	b97c      	cbnz	r4, 8009a64 <__pow5mult+0x48>
 8009a44:	2010      	movs	r0, #16
 8009a46:	f7fd fd8f 	bl	8007568 <malloc>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	61f0      	str	r0, [r6, #28]
 8009a4e:	b928      	cbnz	r0, 8009a5c <__pow5mult+0x40>
 8009a50:	4b1d      	ldr	r3, [pc, #116]	; (8009ac8 <__pow5mult+0xac>)
 8009a52:	481e      	ldr	r0, [pc, #120]	; (8009acc <__pow5mult+0xb0>)
 8009a54:	f240 11b3 	movw	r1, #435	; 0x1b3
 8009a58:	f001 fd3a 	bl	800b4d0 <__assert_func>
 8009a5c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009a60:	6004      	str	r4, [r0, #0]
 8009a62:	60c4      	str	r4, [r0, #12]
 8009a64:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8009a68:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009a6c:	b94c      	cbnz	r4, 8009a82 <__pow5mult+0x66>
 8009a6e:	f240 2171 	movw	r1, #625	; 0x271
 8009a72:	4630      	mov	r0, r6
 8009a74:	f7ff ff12 	bl	800989c <__i2b>
 8009a78:	2300      	movs	r3, #0
 8009a7a:	f8c8 0008 	str.w	r0, [r8, #8]
 8009a7e:	4604      	mov	r4, r0
 8009a80:	6003      	str	r3, [r0, #0]
 8009a82:	f04f 0900 	mov.w	r9, #0
 8009a86:	07eb      	lsls	r3, r5, #31
 8009a88:	d50a      	bpl.n	8009aa0 <__pow5mult+0x84>
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4622      	mov	r2, r4
 8009a8e:	4630      	mov	r0, r6
 8009a90:	f7ff ff1a 	bl	80098c8 <__multiply>
 8009a94:	4639      	mov	r1, r7
 8009a96:	4680      	mov	r8, r0
 8009a98:	4630      	mov	r0, r6
 8009a9a:	f7ff fdff 	bl	800969c <_Bfree>
 8009a9e:	4647      	mov	r7, r8
 8009aa0:	106d      	asrs	r5, r5, #1
 8009aa2:	d00b      	beq.n	8009abc <__pow5mult+0xa0>
 8009aa4:	6820      	ldr	r0, [r4, #0]
 8009aa6:	b938      	cbnz	r0, 8009ab8 <__pow5mult+0x9c>
 8009aa8:	4622      	mov	r2, r4
 8009aaa:	4621      	mov	r1, r4
 8009aac:	4630      	mov	r0, r6
 8009aae:	f7ff ff0b 	bl	80098c8 <__multiply>
 8009ab2:	6020      	str	r0, [r4, #0]
 8009ab4:	f8c0 9000 	str.w	r9, [r0]
 8009ab8:	4604      	mov	r4, r0
 8009aba:	e7e4      	b.n	8009a86 <__pow5mult+0x6a>
 8009abc:	4638      	mov	r0, r7
 8009abe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ac2:	bf00      	nop
 8009ac4:	0801f180 	.word	0x0801f180
 8009ac8:	0801efb2 	.word	0x0801efb2
 8009acc:	0801f032 	.word	0x0801f032

08009ad0 <__lshift>:
 8009ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ad4:	460c      	mov	r4, r1
 8009ad6:	6849      	ldr	r1, [r1, #4]
 8009ad8:	6923      	ldr	r3, [r4, #16]
 8009ada:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ade:	68a3      	ldr	r3, [r4, #8]
 8009ae0:	4607      	mov	r7, r0
 8009ae2:	4691      	mov	r9, r2
 8009ae4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ae8:	f108 0601 	add.w	r6, r8, #1
 8009aec:	42b3      	cmp	r3, r6
 8009aee:	db0b      	blt.n	8009b08 <__lshift+0x38>
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff fd93 	bl	800961c <_Balloc>
 8009af6:	4605      	mov	r5, r0
 8009af8:	b948      	cbnz	r0, 8009b0e <__lshift+0x3e>
 8009afa:	4602      	mov	r2, r0
 8009afc:	4b28      	ldr	r3, [pc, #160]	; (8009ba0 <__lshift+0xd0>)
 8009afe:	4829      	ldr	r0, [pc, #164]	; (8009ba4 <__lshift+0xd4>)
 8009b00:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8009b04:	f001 fce4 	bl	800b4d0 <__assert_func>
 8009b08:	3101      	adds	r1, #1
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	e7ee      	b.n	8009aec <__lshift+0x1c>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	f100 0114 	add.w	r1, r0, #20
 8009b14:	f100 0210 	add.w	r2, r0, #16
 8009b18:	4618      	mov	r0, r3
 8009b1a:	4553      	cmp	r3, sl
 8009b1c:	db33      	blt.n	8009b86 <__lshift+0xb6>
 8009b1e:	6920      	ldr	r0, [r4, #16]
 8009b20:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009b24:	f104 0314 	add.w	r3, r4, #20
 8009b28:	f019 091f 	ands.w	r9, r9, #31
 8009b2c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009b30:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009b34:	d02b      	beq.n	8009b8e <__lshift+0xbe>
 8009b36:	f1c9 0e20 	rsb	lr, r9, #32
 8009b3a:	468a      	mov	sl, r1
 8009b3c:	2200      	movs	r2, #0
 8009b3e:	6818      	ldr	r0, [r3, #0]
 8009b40:	fa00 f009 	lsl.w	r0, r0, r9
 8009b44:	4310      	orrs	r0, r2
 8009b46:	f84a 0b04 	str.w	r0, [sl], #4
 8009b4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b4e:	459c      	cmp	ip, r3
 8009b50:	fa22 f20e 	lsr.w	r2, r2, lr
 8009b54:	d8f3      	bhi.n	8009b3e <__lshift+0x6e>
 8009b56:	ebac 0304 	sub.w	r3, ip, r4
 8009b5a:	3b15      	subs	r3, #21
 8009b5c:	f023 0303 	bic.w	r3, r3, #3
 8009b60:	3304      	adds	r3, #4
 8009b62:	f104 0015 	add.w	r0, r4, #21
 8009b66:	4584      	cmp	ip, r0
 8009b68:	bf38      	it	cc
 8009b6a:	2304      	movcc	r3, #4
 8009b6c:	50ca      	str	r2, [r1, r3]
 8009b6e:	b10a      	cbz	r2, 8009b74 <__lshift+0xa4>
 8009b70:	f108 0602 	add.w	r6, r8, #2
 8009b74:	3e01      	subs	r6, #1
 8009b76:	4638      	mov	r0, r7
 8009b78:	612e      	str	r6, [r5, #16]
 8009b7a:	4621      	mov	r1, r4
 8009b7c:	f7ff fd8e 	bl	800969c <_Bfree>
 8009b80:	4628      	mov	r0, r5
 8009b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b86:	f842 0f04 	str.w	r0, [r2, #4]!
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	e7c5      	b.n	8009b1a <__lshift+0x4a>
 8009b8e:	3904      	subs	r1, #4
 8009b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b94:	f841 2f04 	str.w	r2, [r1, #4]!
 8009b98:	459c      	cmp	ip, r3
 8009b9a:	d8f9      	bhi.n	8009b90 <__lshift+0xc0>
 8009b9c:	e7ea      	b.n	8009b74 <__lshift+0xa4>
 8009b9e:	bf00      	nop
 8009ba0:	0801f021 	.word	0x0801f021
 8009ba4:	0801f032 	.word	0x0801f032

08009ba8 <__mcmp>:
 8009ba8:	b530      	push	{r4, r5, lr}
 8009baa:	6902      	ldr	r2, [r0, #16]
 8009bac:	690c      	ldr	r4, [r1, #16]
 8009bae:	1b12      	subs	r2, r2, r4
 8009bb0:	d10e      	bne.n	8009bd0 <__mcmp+0x28>
 8009bb2:	f100 0314 	add.w	r3, r0, #20
 8009bb6:	3114      	adds	r1, #20
 8009bb8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009bbc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009bc0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009bc4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009bc8:	42a5      	cmp	r5, r4
 8009bca:	d003      	beq.n	8009bd4 <__mcmp+0x2c>
 8009bcc:	d305      	bcc.n	8009bda <__mcmp+0x32>
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4610      	mov	r0, r2
 8009bd2:	bd30      	pop	{r4, r5, pc}
 8009bd4:	4283      	cmp	r3, r0
 8009bd6:	d3f3      	bcc.n	8009bc0 <__mcmp+0x18>
 8009bd8:	e7fa      	b.n	8009bd0 <__mcmp+0x28>
 8009bda:	f04f 32ff 	mov.w	r2, #4294967295
 8009bde:	e7f7      	b.n	8009bd0 <__mcmp+0x28>

08009be0 <__mdiff>:
 8009be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009be4:	460c      	mov	r4, r1
 8009be6:	4606      	mov	r6, r0
 8009be8:	4611      	mov	r1, r2
 8009bea:	4620      	mov	r0, r4
 8009bec:	4690      	mov	r8, r2
 8009bee:	f7ff ffdb 	bl	8009ba8 <__mcmp>
 8009bf2:	1e05      	subs	r5, r0, #0
 8009bf4:	d110      	bne.n	8009c18 <__mdiff+0x38>
 8009bf6:	4629      	mov	r1, r5
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	f7ff fd0f 	bl	800961c <_Balloc>
 8009bfe:	b930      	cbnz	r0, 8009c0e <__mdiff+0x2e>
 8009c00:	4b3a      	ldr	r3, [pc, #232]	; (8009cec <__mdiff+0x10c>)
 8009c02:	4602      	mov	r2, r0
 8009c04:	f240 2137 	movw	r1, #567	; 0x237
 8009c08:	4839      	ldr	r0, [pc, #228]	; (8009cf0 <__mdiff+0x110>)
 8009c0a:	f001 fc61 	bl	800b4d0 <__assert_func>
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009c14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c18:	bfa4      	itt	ge
 8009c1a:	4643      	movge	r3, r8
 8009c1c:	46a0      	movge	r8, r4
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009c24:	bfa6      	itte	ge
 8009c26:	461c      	movge	r4, r3
 8009c28:	2500      	movge	r5, #0
 8009c2a:	2501      	movlt	r5, #1
 8009c2c:	f7ff fcf6 	bl	800961c <_Balloc>
 8009c30:	b920      	cbnz	r0, 8009c3c <__mdiff+0x5c>
 8009c32:	4b2e      	ldr	r3, [pc, #184]	; (8009cec <__mdiff+0x10c>)
 8009c34:	4602      	mov	r2, r0
 8009c36:	f240 2145 	movw	r1, #581	; 0x245
 8009c3a:	e7e5      	b.n	8009c08 <__mdiff+0x28>
 8009c3c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009c40:	6926      	ldr	r6, [r4, #16]
 8009c42:	60c5      	str	r5, [r0, #12]
 8009c44:	f104 0914 	add.w	r9, r4, #20
 8009c48:	f108 0514 	add.w	r5, r8, #20
 8009c4c:	f100 0e14 	add.w	lr, r0, #20
 8009c50:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009c54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009c58:	f108 0210 	add.w	r2, r8, #16
 8009c5c:	46f2      	mov	sl, lr
 8009c5e:	2100      	movs	r1, #0
 8009c60:	f859 3b04 	ldr.w	r3, [r9], #4
 8009c64:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009c68:	fa11 f88b 	uxtah	r8, r1, fp
 8009c6c:	b299      	uxth	r1, r3
 8009c6e:	0c1b      	lsrs	r3, r3, #16
 8009c70:	eba8 0801 	sub.w	r8, r8, r1
 8009c74:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009c78:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009c7c:	fa1f f888 	uxth.w	r8, r8
 8009c80:	1419      	asrs	r1, r3, #16
 8009c82:	454e      	cmp	r6, r9
 8009c84:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009c88:	f84a 3b04 	str.w	r3, [sl], #4
 8009c8c:	d8e8      	bhi.n	8009c60 <__mdiff+0x80>
 8009c8e:	1b33      	subs	r3, r6, r4
 8009c90:	3b15      	subs	r3, #21
 8009c92:	f023 0303 	bic.w	r3, r3, #3
 8009c96:	3304      	adds	r3, #4
 8009c98:	3415      	adds	r4, #21
 8009c9a:	42a6      	cmp	r6, r4
 8009c9c:	bf38      	it	cc
 8009c9e:	2304      	movcc	r3, #4
 8009ca0:	441d      	add	r5, r3
 8009ca2:	4473      	add	r3, lr
 8009ca4:	469e      	mov	lr, r3
 8009ca6:	462e      	mov	r6, r5
 8009ca8:	4566      	cmp	r6, ip
 8009caa:	d30e      	bcc.n	8009cca <__mdiff+0xea>
 8009cac:	f10c 0203 	add.w	r2, ip, #3
 8009cb0:	1b52      	subs	r2, r2, r5
 8009cb2:	f022 0203 	bic.w	r2, r2, #3
 8009cb6:	3d03      	subs	r5, #3
 8009cb8:	45ac      	cmp	ip, r5
 8009cba:	bf38      	it	cc
 8009cbc:	2200      	movcc	r2, #0
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8009cc4:	b17a      	cbz	r2, 8009ce6 <__mdiff+0x106>
 8009cc6:	6107      	str	r7, [r0, #16]
 8009cc8:	e7a4      	b.n	8009c14 <__mdiff+0x34>
 8009cca:	f856 8b04 	ldr.w	r8, [r6], #4
 8009cce:	fa11 f288 	uxtah	r2, r1, r8
 8009cd2:	1414      	asrs	r4, r2, #16
 8009cd4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009cd8:	b292      	uxth	r2, r2
 8009cda:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009cde:	f84e 2b04 	str.w	r2, [lr], #4
 8009ce2:	1421      	asrs	r1, r4, #16
 8009ce4:	e7e0      	b.n	8009ca8 <__mdiff+0xc8>
 8009ce6:	3f01      	subs	r7, #1
 8009ce8:	e7ea      	b.n	8009cc0 <__mdiff+0xe0>
 8009cea:	bf00      	nop
 8009cec:	0801f021 	.word	0x0801f021
 8009cf0:	0801f032 	.word	0x0801f032

08009cf4 <__ulp>:
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	ed8d 0b00 	vstr	d0, [sp]
 8009cfa:	9a01      	ldr	r2, [sp, #4]
 8009cfc:	4b0f      	ldr	r3, [pc, #60]	; (8009d3c <__ulp+0x48>)
 8009cfe:	4013      	ands	r3, r2
 8009d00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	dc08      	bgt.n	8009d1a <__ulp+0x26>
 8009d08:	425b      	negs	r3, r3
 8009d0a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8009d0e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8009d12:	da04      	bge.n	8009d1e <__ulp+0x2a>
 8009d14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8009d18:	4113      	asrs	r3, r2
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	e008      	b.n	8009d30 <__ulp+0x3c>
 8009d1e:	f1a2 0314 	sub.w	r3, r2, #20
 8009d22:	2b1e      	cmp	r3, #30
 8009d24:	bfda      	itte	le
 8009d26:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8009d2a:	40da      	lsrle	r2, r3
 8009d2c:	2201      	movgt	r2, #1
 8009d2e:	2300      	movs	r3, #0
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	ec41 0b10 	vmov	d0, r0, r1
 8009d38:	b002      	add	sp, #8
 8009d3a:	4770      	bx	lr
 8009d3c:	7ff00000 	.word	0x7ff00000

08009d40 <__b2d>:
 8009d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d44:	6906      	ldr	r6, [r0, #16]
 8009d46:	f100 0814 	add.w	r8, r0, #20
 8009d4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8009d4e:	1f37      	subs	r7, r6, #4
 8009d50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009d54:	4610      	mov	r0, r2
 8009d56:	f7ff fd53 	bl	8009800 <__hi0bits>
 8009d5a:	f1c0 0320 	rsb	r3, r0, #32
 8009d5e:	280a      	cmp	r0, #10
 8009d60:	600b      	str	r3, [r1, #0]
 8009d62:	491b      	ldr	r1, [pc, #108]	; (8009dd0 <__b2d+0x90>)
 8009d64:	dc15      	bgt.n	8009d92 <__b2d+0x52>
 8009d66:	f1c0 0c0b 	rsb	ip, r0, #11
 8009d6a:	fa22 f30c 	lsr.w	r3, r2, ip
 8009d6e:	45b8      	cmp	r8, r7
 8009d70:	ea43 0501 	orr.w	r5, r3, r1
 8009d74:	bf34      	ite	cc
 8009d76:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d7a:	2300      	movcs	r3, #0
 8009d7c:	3015      	adds	r0, #21
 8009d7e:	fa02 f000 	lsl.w	r0, r2, r0
 8009d82:	fa23 f30c 	lsr.w	r3, r3, ip
 8009d86:	4303      	orrs	r3, r0
 8009d88:	461c      	mov	r4, r3
 8009d8a:	ec45 4b10 	vmov	d0, r4, r5
 8009d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d92:	45b8      	cmp	r8, r7
 8009d94:	bf3a      	itte	cc
 8009d96:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009d9a:	f1a6 0708 	subcc.w	r7, r6, #8
 8009d9e:	2300      	movcs	r3, #0
 8009da0:	380b      	subs	r0, #11
 8009da2:	d012      	beq.n	8009dca <__b2d+0x8a>
 8009da4:	f1c0 0120 	rsb	r1, r0, #32
 8009da8:	fa23 f401 	lsr.w	r4, r3, r1
 8009dac:	4082      	lsls	r2, r0
 8009dae:	4322      	orrs	r2, r4
 8009db0:	4547      	cmp	r7, r8
 8009db2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8009db6:	bf8c      	ite	hi
 8009db8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8009dbc:	2200      	movls	r2, #0
 8009dbe:	4083      	lsls	r3, r0
 8009dc0:	40ca      	lsrs	r2, r1
 8009dc2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009dc6:	4313      	orrs	r3, r2
 8009dc8:	e7de      	b.n	8009d88 <__b2d+0x48>
 8009dca:	ea42 0501 	orr.w	r5, r2, r1
 8009dce:	e7db      	b.n	8009d88 <__b2d+0x48>
 8009dd0:	3ff00000 	.word	0x3ff00000

08009dd4 <__d2b>:
 8009dd4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009dd8:	460f      	mov	r7, r1
 8009dda:	2101      	movs	r1, #1
 8009ddc:	ec59 8b10 	vmov	r8, r9, d0
 8009de0:	4616      	mov	r6, r2
 8009de2:	f7ff fc1b 	bl	800961c <_Balloc>
 8009de6:	4604      	mov	r4, r0
 8009de8:	b930      	cbnz	r0, 8009df8 <__d2b+0x24>
 8009dea:	4602      	mov	r2, r0
 8009dec:	4b24      	ldr	r3, [pc, #144]	; (8009e80 <__d2b+0xac>)
 8009dee:	4825      	ldr	r0, [pc, #148]	; (8009e84 <__d2b+0xb0>)
 8009df0:	f240 310f 	movw	r1, #783	; 0x30f
 8009df4:	f001 fb6c 	bl	800b4d0 <__assert_func>
 8009df8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009dfc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009e00:	bb2d      	cbnz	r5, 8009e4e <__d2b+0x7a>
 8009e02:	9301      	str	r3, [sp, #4]
 8009e04:	f1b8 0300 	subs.w	r3, r8, #0
 8009e08:	d026      	beq.n	8009e58 <__d2b+0x84>
 8009e0a:	4668      	mov	r0, sp
 8009e0c:	9300      	str	r3, [sp, #0]
 8009e0e:	f7ff fd17 	bl	8009840 <__lo0bits>
 8009e12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009e16:	b1e8      	cbz	r0, 8009e54 <__d2b+0x80>
 8009e18:	f1c0 0320 	rsb	r3, r0, #32
 8009e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009e20:	430b      	orrs	r3, r1
 8009e22:	40c2      	lsrs	r2, r0
 8009e24:	6163      	str	r3, [r4, #20]
 8009e26:	9201      	str	r2, [sp, #4]
 8009e28:	9b01      	ldr	r3, [sp, #4]
 8009e2a:	61a3      	str	r3, [r4, #24]
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	bf14      	ite	ne
 8009e30:	2202      	movne	r2, #2
 8009e32:	2201      	moveq	r2, #1
 8009e34:	6122      	str	r2, [r4, #16]
 8009e36:	b1bd      	cbz	r5, 8009e68 <__d2b+0x94>
 8009e38:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009e3c:	4405      	add	r5, r0
 8009e3e:	603d      	str	r5, [r7, #0]
 8009e40:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009e44:	6030      	str	r0, [r6, #0]
 8009e46:	4620      	mov	r0, r4
 8009e48:	b003      	add	sp, #12
 8009e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009e52:	e7d6      	b.n	8009e02 <__d2b+0x2e>
 8009e54:	6161      	str	r1, [r4, #20]
 8009e56:	e7e7      	b.n	8009e28 <__d2b+0x54>
 8009e58:	a801      	add	r0, sp, #4
 8009e5a:	f7ff fcf1 	bl	8009840 <__lo0bits>
 8009e5e:	9b01      	ldr	r3, [sp, #4]
 8009e60:	6163      	str	r3, [r4, #20]
 8009e62:	3020      	adds	r0, #32
 8009e64:	2201      	movs	r2, #1
 8009e66:	e7e5      	b.n	8009e34 <__d2b+0x60>
 8009e68:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009e6c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009e70:	6038      	str	r0, [r7, #0]
 8009e72:	6918      	ldr	r0, [r3, #16]
 8009e74:	f7ff fcc4 	bl	8009800 <__hi0bits>
 8009e78:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009e7c:	e7e2      	b.n	8009e44 <__d2b+0x70>
 8009e7e:	bf00      	nop
 8009e80:	0801f021 	.word	0x0801f021
 8009e84:	0801f032 	.word	0x0801f032

08009e88 <__ratio>:
 8009e88:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e8c:	4688      	mov	r8, r1
 8009e8e:	4669      	mov	r1, sp
 8009e90:	4681      	mov	r9, r0
 8009e92:	f7ff ff55 	bl	8009d40 <__b2d>
 8009e96:	a901      	add	r1, sp, #4
 8009e98:	4640      	mov	r0, r8
 8009e9a:	ec55 4b10 	vmov	r4, r5, d0
 8009e9e:	f7ff ff4f 	bl	8009d40 <__b2d>
 8009ea2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009ea6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8009eaa:	eba3 0c02 	sub.w	ip, r3, r2
 8009eae:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009eb2:	1a9b      	subs	r3, r3, r2
 8009eb4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009eb8:	ec51 0b10 	vmov	r0, r1, d0
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	bfd6      	itet	le
 8009ec0:	460a      	movle	r2, r1
 8009ec2:	462a      	movgt	r2, r5
 8009ec4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009ec8:	468b      	mov	fp, r1
 8009eca:	462f      	mov	r7, r5
 8009ecc:	bfd4      	ite	le
 8009ece:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8009ed2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8009ed6:	4620      	mov	r0, r4
 8009ed8:	ee10 2a10 	vmov	r2, s0
 8009edc:	465b      	mov	r3, fp
 8009ede:	4639      	mov	r1, r7
 8009ee0:	f7f6 fcb4 	bl	800084c <__aeabi_ddiv>
 8009ee4:	ec41 0b10 	vmov	d0, r0, r1
 8009ee8:	b003      	add	sp, #12
 8009eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009eee <__copybits>:
 8009eee:	3901      	subs	r1, #1
 8009ef0:	b570      	push	{r4, r5, r6, lr}
 8009ef2:	1149      	asrs	r1, r1, #5
 8009ef4:	6914      	ldr	r4, [r2, #16]
 8009ef6:	3101      	adds	r1, #1
 8009ef8:	f102 0314 	add.w	r3, r2, #20
 8009efc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009f00:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009f04:	1f05      	subs	r5, r0, #4
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	d30c      	bcc.n	8009f24 <__copybits+0x36>
 8009f0a:	1aa3      	subs	r3, r4, r2
 8009f0c:	3b11      	subs	r3, #17
 8009f0e:	f023 0303 	bic.w	r3, r3, #3
 8009f12:	3211      	adds	r2, #17
 8009f14:	42a2      	cmp	r2, r4
 8009f16:	bf88      	it	hi
 8009f18:	2300      	movhi	r3, #0
 8009f1a:	4418      	add	r0, r3
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	4288      	cmp	r0, r1
 8009f20:	d305      	bcc.n	8009f2e <__copybits+0x40>
 8009f22:	bd70      	pop	{r4, r5, r6, pc}
 8009f24:	f853 6b04 	ldr.w	r6, [r3], #4
 8009f28:	f845 6f04 	str.w	r6, [r5, #4]!
 8009f2c:	e7eb      	b.n	8009f06 <__copybits+0x18>
 8009f2e:	f840 3b04 	str.w	r3, [r0], #4
 8009f32:	e7f4      	b.n	8009f1e <__copybits+0x30>

08009f34 <__any_on>:
 8009f34:	f100 0214 	add.w	r2, r0, #20
 8009f38:	6900      	ldr	r0, [r0, #16]
 8009f3a:	114b      	asrs	r3, r1, #5
 8009f3c:	4298      	cmp	r0, r3
 8009f3e:	b510      	push	{r4, lr}
 8009f40:	db11      	blt.n	8009f66 <__any_on+0x32>
 8009f42:	dd0a      	ble.n	8009f5a <__any_on+0x26>
 8009f44:	f011 011f 	ands.w	r1, r1, #31
 8009f48:	d007      	beq.n	8009f5a <__any_on+0x26>
 8009f4a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009f4e:	fa24 f001 	lsr.w	r0, r4, r1
 8009f52:	fa00 f101 	lsl.w	r1, r0, r1
 8009f56:	428c      	cmp	r4, r1
 8009f58:	d10b      	bne.n	8009f72 <__any_on+0x3e>
 8009f5a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d803      	bhi.n	8009f6a <__any_on+0x36>
 8009f62:	2000      	movs	r0, #0
 8009f64:	bd10      	pop	{r4, pc}
 8009f66:	4603      	mov	r3, r0
 8009f68:	e7f7      	b.n	8009f5a <__any_on+0x26>
 8009f6a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009f6e:	2900      	cmp	r1, #0
 8009f70:	d0f5      	beq.n	8009f5e <__any_on+0x2a>
 8009f72:	2001      	movs	r0, #1
 8009f74:	e7f6      	b.n	8009f64 <__any_on+0x30>

08009f76 <sulp>:
 8009f76:	b570      	push	{r4, r5, r6, lr}
 8009f78:	4604      	mov	r4, r0
 8009f7a:	460d      	mov	r5, r1
 8009f7c:	ec45 4b10 	vmov	d0, r4, r5
 8009f80:	4616      	mov	r6, r2
 8009f82:	f7ff feb7 	bl	8009cf4 <__ulp>
 8009f86:	ec51 0b10 	vmov	r0, r1, d0
 8009f8a:	b17e      	cbz	r6, 8009fac <sulp+0x36>
 8009f8c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009f90:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	dd09      	ble.n	8009fac <sulp+0x36>
 8009f98:	051b      	lsls	r3, r3, #20
 8009f9a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009f9e:	2400      	movs	r4, #0
 8009fa0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009fa4:	4622      	mov	r2, r4
 8009fa6:	462b      	mov	r3, r5
 8009fa8:	f7f6 fb26 	bl	80005f8 <__aeabi_dmul>
 8009fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08009fb0 <_strtod_l>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	ed2d 8b02 	vpush	{d8}
 8009fb8:	b09b      	sub	sp, #108	; 0x6c
 8009fba:	4604      	mov	r4, r0
 8009fbc:	9213      	str	r2, [sp, #76]	; 0x4c
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	9216      	str	r2, [sp, #88]	; 0x58
 8009fc2:	460d      	mov	r5, r1
 8009fc4:	f04f 0800 	mov.w	r8, #0
 8009fc8:	f04f 0900 	mov.w	r9, #0
 8009fcc:	460a      	mov	r2, r1
 8009fce:	9215      	str	r2, [sp, #84]	; 0x54
 8009fd0:	7811      	ldrb	r1, [r2, #0]
 8009fd2:	292b      	cmp	r1, #43	; 0x2b
 8009fd4:	d04c      	beq.n	800a070 <_strtod_l+0xc0>
 8009fd6:	d83a      	bhi.n	800a04e <_strtod_l+0x9e>
 8009fd8:	290d      	cmp	r1, #13
 8009fda:	d834      	bhi.n	800a046 <_strtod_l+0x96>
 8009fdc:	2908      	cmp	r1, #8
 8009fde:	d834      	bhi.n	800a04a <_strtod_l+0x9a>
 8009fe0:	2900      	cmp	r1, #0
 8009fe2:	d03d      	beq.n	800a060 <_strtod_l+0xb0>
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	920a      	str	r2, [sp, #40]	; 0x28
 8009fe8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009fea:	7832      	ldrb	r2, [r6, #0]
 8009fec:	2a30      	cmp	r2, #48	; 0x30
 8009fee:	f040 80b4 	bne.w	800a15a <_strtod_l+0x1aa>
 8009ff2:	7872      	ldrb	r2, [r6, #1]
 8009ff4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009ff8:	2a58      	cmp	r2, #88	; 0x58
 8009ffa:	d170      	bne.n	800a0de <_strtod_l+0x12e>
 8009ffc:	9302      	str	r3, [sp, #8]
 8009ffe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a000:	9301      	str	r3, [sp, #4]
 800a002:	ab16      	add	r3, sp, #88	; 0x58
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	4a8e      	ldr	r2, [pc, #568]	; (800a240 <_strtod_l+0x290>)
 800a008:	ab17      	add	r3, sp, #92	; 0x5c
 800a00a:	a915      	add	r1, sp, #84	; 0x54
 800a00c:	4620      	mov	r0, r4
 800a00e:	f001 fafb 	bl	800b608 <__gethex>
 800a012:	f010 070f 	ands.w	r7, r0, #15
 800a016:	4605      	mov	r5, r0
 800a018:	d005      	beq.n	800a026 <_strtod_l+0x76>
 800a01a:	2f06      	cmp	r7, #6
 800a01c:	d12a      	bne.n	800a074 <_strtod_l+0xc4>
 800a01e:	3601      	adds	r6, #1
 800a020:	2300      	movs	r3, #0
 800a022:	9615      	str	r6, [sp, #84]	; 0x54
 800a024:	930a      	str	r3, [sp, #40]	; 0x28
 800a026:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a028:	2b00      	cmp	r3, #0
 800a02a:	f040 857f 	bne.w	800ab2c <_strtod_l+0xb7c>
 800a02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a030:	b1db      	cbz	r3, 800a06a <_strtod_l+0xba>
 800a032:	4642      	mov	r2, r8
 800a034:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a038:	ec43 2b10 	vmov	d0, r2, r3
 800a03c:	b01b      	add	sp, #108	; 0x6c
 800a03e:	ecbd 8b02 	vpop	{d8}
 800a042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a046:	2920      	cmp	r1, #32
 800a048:	d1cc      	bne.n	8009fe4 <_strtod_l+0x34>
 800a04a:	3201      	adds	r2, #1
 800a04c:	e7bf      	b.n	8009fce <_strtod_l+0x1e>
 800a04e:	292d      	cmp	r1, #45	; 0x2d
 800a050:	d1c8      	bne.n	8009fe4 <_strtod_l+0x34>
 800a052:	2101      	movs	r1, #1
 800a054:	910a      	str	r1, [sp, #40]	; 0x28
 800a056:	1c51      	adds	r1, r2, #1
 800a058:	9115      	str	r1, [sp, #84]	; 0x54
 800a05a:	7852      	ldrb	r2, [r2, #1]
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d1c3      	bne.n	8009fe8 <_strtod_l+0x38>
 800a060:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a062:	9515      	str	r5, [sp, #84]	; 0x54
 800a064:	2b00      	cmp	r3, #0
 800a066:	f040 855f 	bne.w	800ab28 <_strtod_l+0xb78>
 800a06a:	4642      	mov	r2, r8
 800a06c:	464b      	mov	r3, r9
 800a06e:	e7e3      	b.n	800a038 <_strtod_l+0x88>
 800a070:	2100      	movs	r1, #0
 800a072:	e7ef      	b.n	800a054 <_strtod_l+0xa4>
 800a074:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a076:	b13a      	cbz	r2, 800a088 <_strtod_l+0xd8>
 800a078:	2135      	movs	r1, #53	; 0x35
 800a07a:	a818      	add	r0, sp, #96	; 0x60
 800a07c:	f7ff ff37 	bl	8009eee <__copybits>
 800a080:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a082:	4620      	mov	r0, r4
 800a084:	f7ff fb0a 	bl	800969c <_Bfree>
 800a088:	3f01      	subs	r7, #1
 800a08a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a08c:	2f04      	cmp	r7, #4
 800a08e:	d806      	bhi.n	800a09e <_strtod_l+0xee>
 800a090:	e8df f007 	tbb	[pc, r7]
 800a094:	201d0314 	.word	0x201d0314
 800a098:	14          	.byte	0x14
 800a099:	00          	.byte	0x00
 800a09a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800a09e:	05e9      	lsls	r1, r5, #23
 800a0a0:	bf48      	it	mi
 800a0a2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800a0a6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a0aa:	0d1b      	lsrs	r3, r3, #20
 800a0ac:	051b      	lsls	r3, r3, #20
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1b9      	bne.n	800a026 <_strtod_l+0x76>
 800a0b2:	f7fe fbab 	bl	800880c <__errno>
 800a0b6:	2322      	movs	r3, #34	; 0x22
 800a0b8:	6003      	str	r3, [r0, #0]
 800a0ba:	e7b4      	b.n	800a026 <_strtod_l+0x76>
 800a0bc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800a0c0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a0c4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a0c8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a0cc:	e7e7      	b.n	800a09e <_strtod_l+0xee>
 800a0ce:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a248 <_strtod_l+0x298>
 800a0d2:	e7e4      	b.n	800a09e <_strtod_l+0xee>
 800a0d4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a0d8:	f04f 38ff 	mov.w	r8, #4294967295
 800a0dc:	e7df      	b.n	800a09e <_strtod_l+0xee>
 800a0de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0e0:	1c5a      	adds	r2, r3, #1
 800a0e2:	9215      	str	r2, [sp, #84]	; 0x54
 800a0e4:	785b      	ldrb	r3, [r3, #1]
 800a0e6:	2b30      	cmp	r3, #48	; 0x30
 800a0e8:	d0f9      	beq.n	800a0de <_strtod_l+0x12e>
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d09b      	beq.n	800a026 <_strtod_l+0x76>
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	f04f 0a00 	mov.w	sl, #0
 800a0f4:	9304      	str	r3, [sp, #16]
 800a0f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0f8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0fa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800a0fe:	46d3      	mov	fp, sl
 800a100:	220a      	movs	r2, #10
 800a102:	9815      	ldr	r0, [sp, #84]	; 0x54
 800a104:	7806      	ldrb	r6, [r0, #0]
 800a106:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a10a:	b2d9      	uxtb	r1, r3
 800a10c:	2909      	cmp	r1, #9
 800a10e:	d926      	bls.n	800a15e <_strtod_l+0x1ae>
 800a110:	494c      	ldr	r1, [pc, #304]	; (800a244 <_strtod_l+0x294>)
 800a112:	2201      	movs	r2, #1
 800a114:	f001 f9c0 	bl	800b498 <strncmp>
 800a118:	2800      	cmp	r0, #0
 800a11a:	d030      	beq.n	800a17e <_strtod_l+0x1ce>
 800a11c:	2000      	movs	r0, #0
 800a11e:	4632      	mov	r2, r6
 800a120:	9005      	str	r0, [sp, #20]
 800a122:	465e      	mov	r6, fp
 800a124:	4603      	mov	r3, r0
 800a126:	2a65      	cmp	r2, #101	; 0x65
 800a128:	d001      	beq.n	800a12e <_strtod_l+0x17e>
 800a12a:	2a45      	cmp	r2, #69	; 0x45
 800a12c:	d113      	bne.n	800a156 <_strtod_l+0x1a6>
 800a12e:	b91e      	cbnz	r6, 800a138 <_strtod_l+0x188>
 800a130:	9a04      	ldr	r2, [sp, #16]
 800a132:	4302      	orrs	r2, r0
 800a134:	d094      	beq.n	800a060 <_strtod_l+0xb0>
 800a136:	2600      	movs	r6, #0
 800a138:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a13a:	1c6a      	adds	r2, r5, #1
 800a13c:	9215      	str	r2, [sp, #84]	; 0x54
 800a13e:	786a      	ldrb	r2, [r5, #1]
 800a140:	2a2b      	cmp	r2, #43	; 0x2b
 800a142:	d074      	beq.n	800a22e <_strtod_l+0x27e>
 800a144:	2a2d      	cmp	r2, #45	; 0x2d
 800a146:	d078      	beq.n	800a23a <_strtod_l+0x28a>
 800a148:	f04f 0c00 	mov.w	ip, #0
 800a14c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a150:	2909      	cmp	r1, #9
 800a152:	d97f      	bls.n	800a254 <_strtod_l+0x2a4>
 800a154:	9515      	str	r5, [sp, #84]	; 0x54
 800a156:	2700      	movs	r7, #0
 800a158:	e09e      	b.n	800a298 <_strtod_l+0x2e8>
 800a15a:	2300      	movs	r3, #0
 800a15c:	e7c8      	b.n	800a0f0 <_strtod_l+0x140>
 800a15e:	f1bb 0f08 	cmp.w	fp, #8
 800a162:	bfd8      	it	le
 800a164:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a166:	f100 0001 	add.w	r0, r0, #1
 800a16a:	bfda      	itte	le
 800a16c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a170:	9309      	strle	r3, [sp, #36]	; 0x24
 800a172:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800a176:	f10b 0b01 	add.w	fp, fp, #1
 800a17a:	9015      	str	r0, [sp, #84]	; 0x54
 800a17c:	e7c1      	b.n	800a102 <_strtod_l+0x152>
 800a17e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a180:	1c5a      	adds	r2, r3, #1
 800a182:	9215      	str	r2, [sp, #84]	; 0x54
 800a184:	785a      	ldrb	r2, [r3, #1]
 800a186:	f1bb 0f00 	cmp.w	fp, #0
 800a18a:	d037      	beq.n	800a1fc <_strtod_l+0x24c>
 800a18c:	9005      	str	r0, [sp, #20]
 800a18e:	465e      	mov	r6, fp
 800a190:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a194:	2b09      	cmp	r3, #9
 800a196:	d912      	bls.n	800a1be <_strtod_l+0x20e>
 800a198:	2301      	movs	r3, #1
 800a19a:	e7c4      	b.n	800a126 <_strtod_l+0x176>
 800a19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a19e:	1c5a      	adds	r2, r3, #1
 800a1a0:	9215      	str	r2, [sp, #84]	; 0x54
 800a1a2:	785a      	ldrb	r2, [r3, #1]
 800a1a4:	3001      	adds	r0, #1
 800a1a6:	2a30      	cmp	r2, #48	; 0x30
 800a1a8:	d0f8      	beq.n	800a19c <_strtod_l+0x1ec>
 800a1aa:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a1ae:	2b08      	cmp	r3, #8
 800a1b0:	f200 84c1 	bhi.w	800ab36 <_strtod_l+0xb86>
 800a1b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a1b6:	9005      	str	r0, [sp, #20]
 800a1b8:	2000      	movs	r0, #0
 800a1ba:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1bc:	4606      	mov	r6, r0
 800a1be:	3a30      	subs	r2, #48	; 0x30
 800a1c0:	f100 0301 	add.w	r3, r0, #1
 800a1c4:	d014      	beq.n	800a1f0 <_strtod_l+0x240>
 800a1c6:	9905      	ldr	r1, [sp, #20]
 800a1c8:	4419      	add	r1, r3
 800a1ca:	9105      	str	r1, [sp, #20]
 800a1cc:	4633      	mov	r3, r6
 800a1ce:	eb00 0c06 	add.w	ip, r0, r6
 800a1d2:	210a      	movs	r1, #10
 800a1d4:	4563      	cmp	r3, ip
 800a1d6:	d113      	bne.n	800a200 <_strtod_l+0x250>
 800a1d8:	1833      	adds	r3, r6, r0
 800a1da:	2b08      	cmp	r3, #8
 800a1dc:	f106 0601 	add.w	r6, r6, #1
 800a1e0:	4406      	add	r6, r0
 800a1e2:	dc1a      	bgt.n	800a21a <_strtod_l+0x26a>
 800a1e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1e6:	230a      	movs	r3, #10
 800a1e8:	fb03 2301 	mla	r3, r3, r1, r2
 800a1ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a1f2:	1c51      	adds	r1, r2, #1
 800a1f4:	9115      	str	r1, [sp, #84]	; 0x54
 800a1f6:	7852      	ldrb	r2, [r2, #1]
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	e7c9      	b.n	800a190 <_strtod_l+0x1e0>
 800a1fc:	4658      	mov	r0, fp
 800a1fe:	e7d2      	b.n	800a1a6 <_strtod_l+0x1f6>
 800a200:	2b08      	cmp	r3, #8
 800a202:	f103 0301 	add.w	r3, r3, #1
 800a206:	dc03      	bgt.n	800a210 <_strtod_l+0x260>
 800a208:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a20a:	434f      	muls	r7, r1
 800a20c:	9709      	str	r7, [sp, #36]	; 0x24
 800a20e:	e7e1      	b.n	800a1d4 <_strtod_l+0x224>
 800a210:	2b10      	cmp	r3, #16
 800a212:	bfd8      	it	le
 800a214:	fb01 fa0a 	mulle.w	sl, r1, sl
 800a218:	e7dc      	b.n	800a1d4 <_strtod_l+0x224>
 800a21a:	2e10      	cmp	r6, #16
 800a21c:	bfdc      	itt	le
 800a21e:	230a      	movle	r3, #10
 800a220:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800a224:	e7e3      	b.n	800a1ee <_strtod_l+0x23e>
 800a226:	2300      	movs	r3, #0
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	2301      	movs	r3, #1
 800a22c:	e780      	b.n	800a130 <_strtod_l+0x180>
 800a22e:	f04f 0c00 	mov.w	ip, #0
 800a232:	1caa      	adds	r2, r5, #2
 800a234:	9215      	str	r2, [sp, #84]	; 0x54
 800a236:	78aa      	ldrb	r2, [r5, #2]
 800a238:	e788      	b.n	800a14c <_strtod_l+0x19c>
 800a23a:	f04f 0c01 	mov.w	ip, #1
 800a23e:	e7f8      	b.n	800a232 <_strtod_l+0x282>
 800a240:	0801f190 	.word	0x0801f190
 800a244:	0801f18c 	.word	0x0801f18c
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a24e:	1c51      	adds	r1, r2, #1
 800a250:	9115      	str	r1, [sp, #84]	; 0x54
 800a252:	7852      	ldrb	r2, [r2, #1]
 800a254:	2a30      	cmp	r2, #48	; 0x30
 800a256:	d0f9      	beq.n	800a24c <_strtod_l+0x29c>
 800a258:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a25c:	2908      	cmp	r1, #8
 800a25e:	f63f af7a 	bhi.w	800a156 <_strtod_l+0x1a6>
 800a262:	3a30      	subs	r2, #48	; 0x30
 800a264:	9208      	str	r2, [sp, #32]
 800a266:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a268:	920c      	str	r2, [sp, #48]	; 0x30
 800a26a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800a26c:	1c57      	adds	r7, r2, #1
 800a26e:	9715      	str	r7, [sp, #84]	; 0x54
 800a270:	7852      	ldrb	r2, [r2, #1]
 800a272:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a276:	f1be 0f09 	cmp.w	lr, #9
 800a27a:	d938      	bls.n	800a2ee <_strtod_l+0x33e>
 800a27c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800a27e:	1a7f      	subs	r7, r7, r1
 800a280:	2f08      	cmp	r7, #8
 800a282:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a286:	dc03      	bgt.n	800a290 <_strtod_l+0x2e0>
 800a288:	9908      	ldr	r1, [sp, #32]
 800a28a:	428f      	cmp	r7, r1
 800a28c:	bfa8      	it	ge
 800a28e:	460f      	movge	r7, r1
 800a290:	f1bc 0f00 	cmp.w	ip, #0
 800a294:	d000      	beq.n	800a298 <_strtod_l+0x2e8>
 800a296:	427f      	negs	r7, r7
 800a298:	2e00      	cmp	r6, #0
 800a29a:	d14f      	bne.n	800a33c <_strtod_l+0x38c>
 800a29c:	9904      	ldr	r1, [sp, #16]
 800a29e:	4301      	orrs	r1, r0
 800a2a0:	f47f aec1 	bne.w	800a026 <_strtod_l+0x76>
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	f47f aedb 	bne.w	800a060 <_strtod_l+0xb0>
 800a2aa:	2a69      	cmp	r2, #105	; 0x69
 800a2ac:	d029      	beq.n	800a302 <_strtod_l+0x352>
 800a2ae:	dc26      	bgt.n	800a2fe <_strtod_l+0x34e>
 800a2b0:	2a49      	cmp	r2, #73	; 0x49
 800a2b2:	d026      	beq.n	800a302 <_strtod_l+0x352>
 800a2b4:	2a4e      	cmp	r2, #78	; 0x4e
 800a2b6:	f47f aed3 	bne.w	800a060 <_strtod_l+0xb0>
 800a2ba:	499b      	ldr	r1, [pc, #620]	; (800a528 <_strtod_l+0x578>)
 800a2bc:	a815      	add	r0, sp, #84	; 0x54
 800a2be:	f001 fbe3 	bl	800ba88 <__match>
 800a2c2:	2800      	cmp	r0, #0
 800a2c4:	f43f aecc 	beq.w	800a060 <_strtod_l+0xb0>
 800a2c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	2b28      	cmp	r3, #40	; 0x28
 800a2ce:	d12f      	bne.n	800a330 <_strtod_l+0x380>
 800a2d0:	4996      	ldr	r1, [pc, #600]	; (800a52c <_strtod_l+0x57c>)
 800a2d2:	aa18      	add	r2, sp, #96	; 0x60
 800a2d4:	a815      	add	r0, sp, #84	; 0x54
 800a2d6:	f001 fbeb 	bl	800bab0 <__hexnan>
 800a2da:	2805      	cmp	r0, #5
 800a2dc:	d128      	bne.n	800a330 <_strtod_l+0x380>
 800a2de:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a2e0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a2e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a2e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a2ec:	e69b      	b.n	800a026 <_strtod_l+0x76>
 800a2ee:	9f08      	ldr	r7, [sp, #32]
 800a2f0:	210a      	movs	r1, #10
 800a2f2:	fb01 2107 	mla	r1, r1, r7, r2
 800a2f6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800a2fa:	9208      	str	r2, [sp, #32]
 800a2fc:	e7b5      	b.n	800a26a <_strtod_l+0x2ba>
 800a2fe:	2a6e      	cmp	r2, #110	; 0x6e
 800a300:	e7d9      	b.n	800a2b6 <_strtod_l+0x306>
 800a302:	498b      	ldr	r1, [pc, #556]	; (800a530 <_strtod_l+0x580>)
 800a304:	a815      	add	r0, sp, #84	; 0x54
 800a306:	f001 fbbf 	bl	800ba88 <__match>
 800a30a:	2800      	cmp	r0, #0
 800a30c:	f43f aea8 	beq.w	800a060 <_strtod_l+0xb0>
 800a310:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a312:	4988      	ldr	r1, [pc, #544]	; (800a534 <_strtod_l+0x584>)
 800a314:	3b01      	subs	r3, #1
 800a316:	a815      	add	r0, sp, #84	; 0x54
 800a318:	9315      	str	r3, [sp, #84]	; 0x54
 800a31a:	f001 fbb5 	bl	800ba88 <__match>
 800a31e:	b910      	cbnz	r0, 800a326 <_strtod_l+0x376>
 800a320:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a322:	3301      	adds	r3, #1
 800a324:	9315      	str	r3, [sp, #84]	; 0x54
 800a326:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800a544 <_strtod_l+0x594>
 800a32a:	f04f 0800 	mov.w	r8, #0
 800a32e:	e67a      	b.n	800a026 <_strtod_l+0x76>
 800a330:	4881      	ldr	r0, [pc, #516]	; (800a538 <_strtod_l+0x588>)
 800a332:	f001 f8c5 	bl	800b4c0 <nan>
 800a336:	ec59 8b10 	vmov	r8, r9, d0
 800a33a:	e674      	b.n	800a026 <_strtod_l+0x76>
 800a33c:	9b05      	ldr	r3, [sp, #20]
 800a33e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a340:	1afb      	subs	r3, r7, r3
 800a342:	f1bb 0f00 	cmp.w	fp, #0
 800a346:	bf08      	it	eq
 800a348:	46b3      	moveq	fp, r6
 800a34a:	2e10      	cmp	r6, #16
 800a34c:	9308      	str	r3, [sp, #32]
 800a34e:	4635      	mov	r5, r6
 800a350:	bfa8      	it	ge
 800a352:	2510      	movge	r5, #16
 800a354:	f7f6 f8d6 	bl	8000504 <__aeabi_ui2d>
 800a358:	2e09      	cmp	r6, #9
 800a35a:	4680      	mov	r8, r0
 800a35c:	4689      	mov	r9, r1
 800a35e:	dd13      	ble.n	800a388 <_strtod_l+0x3d8>
 800a360:	4b76      	ldr	r3, [pc, #472]	; (800a53c <_strtod_l+0x58c>)
 800a362:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a366:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a36a:	f7f6 f945 	bl	80005f8 <__aeabi_dmul>
 800a36e:	4680      	mov	r8, r0
 800a370:	4650      	mov	r0, sl
 800a372:	4689      	mov	r9, r1
 800a374:	f7f6 f8c6 	bl	8000504 <__aeabi_ui2d>
 800a378:	4602      	mov	r2, r0
 800a37a:	460b      	mov	r3, r1
 800a37c:	4640      	mov	r0, r8
 800a37e:	4649      	mov	r1, r9
 800a380:	f7f5 ff84 	bl	800028c <__adddf3>
 800a384:	4680      	mov	r8, r0
 800a386:	4689      	mov	r9, r1
 800a388:	2e0f      	cmp	r6, #15
 800a38a:	dc38      	bgt.n	800a3fe <_strtod_l+0x44e>
 800a38c:	9b08      	ldr	r3, [sp, #32]
 800a38e:	2b00      	cmp	r3, #0
 800a390:	f43f ae49 	beq.w	800a026 <_strtod_l+0x76>
 800a394:	dd24      	ble.n	800a3e0 <_strtod_l+0x430>
 800a396:	2b16      	cmp	r3, #22
 800a398:	dc0b      	bgt.n	800a3b2 <_strtod_l+0x402>
 800a39a:	4968      	ldr	r1, [pc, #416]	; (800a53c <_strtod_l+0x58c>)
 800a39c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a3a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	464b      	mov	r3, r9
 800a3a8:	f7f6 f926 	bl	80005f8 <__aeabi_dmul>
 800a3ac:	4680      	mov	r8, r0
 800a3ae:	4689      	mov	r9, r1
 800a3b0:	e639      	b.n	800a026 <_strtod_l+0x76>
 800a3b2:	9a08      	ldr	r2, [sp, #32]
 800a3b4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	db20      	blt.n	800a3fe <_strtod_l+0x44e>
 800a3bc:	4c5f      	ldr	r4, [pc, #380]	; (800a53c <_strtod_l+0x58c>)
 800a3be:	f1c6 060f 	rsb	r6, r6, #15
 800a3c2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800a3c6:	4642      	mov	r2, r8
 800a3c8:	464b      	mov	r3, r9
 800a3ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a3ce:	f7f6 f913 	bl	80005f8 <__aeabi_dmul>
 800a3d2:	9b08      	ldr	r3, [sp, #32]
 800a3d4:	1b9e      	subs	r6, r3, r6
 800a3d6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800a3da:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a3de:	e7e3      	b.n	800a3a8 <_strtod_l+0x3f8>
 800a3e0:	9b08      	ldr	r3, [sp, #32]
 800a3e2:	3316      	adds	r3, #22
 800a3e4:	db0b      	blt.n	800a3fe <_strtod_l+0x44e>
 800a3e6:	9b05      	ldr	r3, [sp, #20]
 800a3e8:	1bdf      	subs	r7, r3, r7
 800a3ea:	4b54      	ldr	r3, [pc, #336]	; (800a53c <_strtod_l+0x58c>)
 800a3ec:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	4649      	mov	r1, r9
 800a3f8:	f7f6 fa28 	bl	800084c <__aeabi_ddiv>
 800a3fc:	e7d6      	b.n	800a3ac <_strtod_l+0x3fc>
 800a3fe:	9b08      	ldr	r3, [sp, #32]
 800a400:	1b75      	subs	r5, r6, r5
 800a402:	441d      	add	r5, r3
 800a404:	2d00      	cmp	r5, #0
 800a406:	dd70      	ble.n	800a4ea <_strtod_l+0x53a>
 800a408:	f015 030f 	ands.w	r3, r5, #15
 800a40c:	d00a      	beq.n	800a424 <_strtod_l+0x474>
 800a40e:	494b      	ldr	r1, [pc, #300]	; (800a53c <_strtod_l+0x58c>)
 800a410:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a414:	4642      	mov	r2, r8
 800a416:	464b      	mov	r3, r9
 800a418:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a41c:	f7f6 f8ec 	bl	80005f8 <__aeabi_dmul>
 800a420:	4680      	mov	r8, r0
 800a422:	4689      	mov	r9, r1
 800a424:	f035 050f 	bics.w	r5, r5, #15
 800a428:	d04d      	beq.n	800a4c6 <_strtod_l+0x516>
 800a42a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800a42e:	dd22      	ble.n	800a476 <_strtod_l+0x4c6>
 800a430:	2500      	movs	r5, #0
 800a432:	46ab      	mov	fp, r5
 800a434:	9509      	str	r5, [sp, #36]	; 0x24
 800a436:	9505      	str	r5, [sp, #20]
 800a438:	2322      	movs	r3, #34	; 0x22
 800a43a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800a544 <_strtod_l+0x594>
 800a43e:	6023      	str	r3, [r4, #0]
 800a440:	f04f 0800 	mov.w	r8, #0
 800a444:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a446:	2b00      	cmp	r3, #0
 800a448:	f43f aded 	beq.w	800a026 <_strtod_l+0x76>
 800a44c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a44e:	4620      	mov	r0, r4
 800a450:	f7ff f924 	bl	800969c <_Bfree>
 800a454:	9905      	ldr	r1, [sp, #20]
 800a456:	4620      	mov	r0, r4
 800a458:	f7ff f920 	bl	800969c <_Bfree>
 800a45c:	4659      	mov	r1, fp
 800a45e:	4620      	mov	r0, r4
 800a460:	f7ff f91c 	bl	800969c <_Bfree>
 800a464:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a466:	4620      	mov	r0, r4
 800a468:	f7ff f918 	bl	800969c <_Bfree>
 800a46c:	4629      	mov	r1, r5
 800a46e:	4620      	mov	r0, r4
 800a470:	f7ff f914 	bl	800969c <_Bfree>
 800a474:	e5d7      	b.n	800a026 <_strtod_l+0x76>
 800a476:	4b32      	ldr	r3, [pc, #200]	; (800a540 <_strtod_l+0x590>)
 800a478:	9304      	str	r3, [sp, #16]
 800a47a:	2300      	movs	r3, #0
 800a47c:	112d      	asrs	r5, r5, #4
 800a47e:	4640      	mov	r0, r8
 800a480:	4649      	mov	r1, r9
 800a482:	469a      	mov	sl, r3
 800a484:	2d01      	cmp	r5, #1
 800a486:	dc21      	bgt.n	800a4cc <_strtod_l+0x51c>
 800a488:	b10b      	cbz	r3, 800a48e <_strtod_l+0x4de>
 800a48a:	4680      	mov	r8, r0
 800a48c:	4689      	mov	r9, r1
 800a48e:	492c      	ldr	r1, [pc, #176]	; (800a540 <_strtod_l+0x590>)
 800a490:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a494:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800a498:	4642      	mov	r2, r8
 800a49a:	464b      	mov	r3, r9
 800a49c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4a0:	f7f6 f8aa 	bl	80005f8 <__aeabi_dmul>
 800a4a4:	4b27      	ldr	r3, [pc, #156]	; (800a544 <_strtod_l+0x594>)
 800a4a6:	460a      	mov	r2, r1
 800a4a8:	400b      	ands	r3, r1
 800a4aa:	4927      	ldr	r1, [pc, #156]	; (800a548 <_strtod_l+0x598>)
 800a4ac:	428b      	cmp	r3, r1
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	d8be      	bhi.n	800a430 <_strtod_l+0x480>
 800a4b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a4b6:	428b      	cmp	r3, r1
 800a4b8:	bf86      	itte	hi
 800a4ba:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800a54c <_strtod_l+0x59c>
 800a4be:	f04f 38ff 	movhi.w	r8, #4294967295
 800a4c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	e07b      	b.n	800a5c4 <_strtod_l+0x614>
 800a4cc:	07ea      	lsls	r2, r5, #31
 800a4ce:	d505      	bpl.n	800a4dc <_strtod_l+0x52c>
 800a4d0:	9b04      	ldr	r3, [sp, #16]
 800a4d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4d6:	f7f6 f88f 	bl	80005f8 <__aeabi_dmul>
 800a4da:	2301      	movs	r3, #1
 800a4dc:	9a04      	ldr	r2, [sp, #16]
 800a4de:	3208      	adds	r2, #8
 800a4e0:	f10a 0a01 	add.w	sl, sl, #1
 800a4e4:	106d      	asrs	r5, r5, #1
 800a4e6:	9204      	str	r2, [sp, #16]
 800a4e8:	e7cc      	b.n	800a484 <_strtod_l+0x4d4>
 800a4ea:	d0ec      	beq.n	800a4c6 <_strtod_l+0x516>
 800a4ec:	426d      	negs	r5, r5
 800a4ee:	f015 020f 	ands.w	r2, r5, #15
 800a4f2:	d00a      	beq.n	800a50a <_strtod_l+0x55a>
 800a4f4:	4b11      	ldr	r3, [pc, #68]	; (800a53c <_strtod_l+0x58c>)
 800a4f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4fa:	4640      	mov	r0, r8
 800a4fc:	4649      	mov	r1, r9
 800a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a502:	f7f6 f9a3 	bl	800084c <__aeabi_ddiv>
 800a506:	4680      	mov	r8, r0
 800a508:	4689      	mov	r9, r1
 800a50a:	112d      	asrs	r5, r5, #4
 800a50c:	d0db      	beq.n	800a4c6 <_strtod_l+0x516>
 800a50e:	2d1f      	cmp	r5, #31
 800a510:	dd1e      	ble.n	800a550 <_strtod_l+0x5a0>
 800a512:	2500      	movs	r5, #0
 800a514:	46ab      	mov	fp, r5
 800a516:	9509      	str	r5, [sp, #36]	; 0x24
 800a518:	9505      	str	r5, [sp, #20]
 800a51a:	2322      	movs	r3, #34	; 0x22
 800a51c:	f04f 0800 	mov.w	r8, #0
 800a520:	f04f 0900 	mov.w	r9, #0
 800a524:	6023      	str	r3, [r4, #0]
 800a526:	e78d      	b.n	800a444 <_strtod_l+0x494>
 800a528:	0801ef79 	.word	0x0801ef79
 800a52c:	0801f1a4 	.word	0x0801f1a4
 800a530:	0801ef71 	.word	0x0801ef71
 800a534:	0801efa8 	.word	0x0801efa8
 800a538:	0801f335 	.word	0x0801f335
 800a53c:	0801f0b8 	.word	0x0801f0b8
 800a540:	0801f090 	.word	0x0801f090
 800a544:	7ff00000 	.word	0x7ff00000
 800a548:	7ca00000 	.word	0x7ca00000
 800a54c:	7fefffff 	.word	0x7fefffff
 800a550:	f015 0310 	ands.w	r3, r5, #16
 800a554:	bf18      	it	ne
 800a556:	236a      	movne	r3, #106	; 0x6a
 800a558:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a8fc <_strtod_l+0x94c>
 800a55c:	9304      	str	r3, [sp, #16]
 800a55e:	4640      	mov	r0, r8
 800a560:	4649      	mov	r1, r9
 800a562:	2300      	movs	r3, #0
 800a564:	07ea      	lsls	r2, r5, #31
 800a566:	d504      	bpl.n	800a572 <_strtod_l+0x5c2>
 800a568:	e9da 2300 	ldrd	r2, r3, [sl]
 800a56c:	f7f6 f844 	bl	80005f8 <__aeabi_dmul>
 800a570:	2301      	movs	r3, #1
 800a572:	106d      	asrs	r5, r5, #1
 800a574:	f10a 0a08 	add.w	sl, sl, #8
 800a578:	d1f4      	bne.n	800a564 <_strtod_l+0x5b4>
 800a57a:	b10b      	cbz	r3, 800a580 <_strtod_l+0x5d0>
 800a57c:	4680      	mov	r8, r0
 800a57e:	4689      	mov	r9, r1
 800a580:	9b04      	ldr	r3, [sp, #16]
 800a582:	b1bb      	cbz	r3, 800a5b4 <_strtod_l+0x604>
 800a584:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a588:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	4649      	mov	r1, r9
 800a590:	dd10      	ble.n	800a5b4 <_strtod_l+0x604>
 800a592:	2b1f      	cmp	r3, #31
 800a594:	f340 811e 	ble.w	800a7d4 <_strtod_l+0x824>
 800a598:	2b34      	cmp	r3, #52	; 0x34
 800a59a:	bfde      	ittt	le
 800a59c:	f04f 33ff 	movle.w	r3, #4294967295
 800a5a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a5a4:	4093      	lslle	r3, r2
 800a5a6:	f04f 0800 	mov.w	r8, #0
 800a5aa:	bfcc      	ite	gt
 800a5ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a5b0:	ea03 0901 	andle.w	r9, r3, r1
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	4640      	mov	r0, r8
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	f7f6 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800a5c0:	2800      	cmp	r0, #0
 800a5c2:	d1a6      	bne.n	800a512 <_strtod_l+0x562>
 800a5c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a5ca:	4633      	mov	r3, r6
 800a5cc:	465a      	mov	r2, fp
 800a5ce:	4620      	mov	r0, r4
 800a5d0:	f7ff f8cc 	bl	800976c <__s2b>
 800a5d4:	9009      	str	r0, [sp, #36]	; 0x24
 800a5d6:	2800      	cmp	r0, #0
 800a5d8:	f43f af2a 	beq.w	800a430 <_strtod_l+0x480>
 800a5dc:	9a08      	ldr	r2, [sp, #32]
 800a5de:	9b05      	ldr	r3, [sp, #20]
 800a5e0:	2a00      	cmp	r2, #0
 800a5e2:	eba3 0307 	sub.w	r3, r3, r7
 800a5e6:	bfa8      	it	ge
 800a5e8:	2300      	movge	r3, #0
 800a5ea:	930c      	str	r3, [sp, #48]	; 0x30
 800a5ec:	2500      	movs	r5, #0
 800a5ee:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a5f2:	9312      	str	r3, [sp, #72]	; 0x48
 800a5f4:	46ab      	mov	fp, r5
 800a5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5f8:	4620      	mov	r0, r4
 800a5fa:	6859      	ldr	r1, [r3, #4]
 800a5fc:	f7ff f80e 	bl	800961c <_Balloc>
 800a600:	9005      	str	r0, [sp, #20]
 800a602:	2800      	cmp	r0, #0
 800a604:	f43f af18 	beq.w	800a438 <_strtod_l+0x488>
 800a608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60a:	691a      	ldr	r2, [r3, #16]
 800a60c:	3202      	adds	r2, #2
 800a60e:	f103 010c 	add.w	r1, r3, #12
 800a612:	0092      	lsls	r2, r2, #2
 800a614:	300c      	adds	r0, #12
 800a616:	f7fe f926 	bl	8008866 <memcpy>
 800a61a:	ec49 8b10 	vmov	d0, r8, r9
 800a61e:	aa18      	add	r2, sp, #96	; 0x60
 800a620:	a917      	add	r1, sp, #92	; 0x5c
 800a622:	4620      	mov	r0, r4
 800a624:	f7ff fbd6 	bl	8009dd4 <__d2b>
 800a628:	ec49 8b18 	vmov	d8, r8, r9
 800a62c:	9016      	str	r0, [sp, #88]	; 0x58
 800a62e:	2800      	cmp	r0, #0
 800a630:	f43f af02 	beq.w	800a438 <_strtod_l+0x488>
 800a634:	2101      	movs	r1, #1
 800a636:	4620      	mov	r0, r4
 800a638:	f7ff f930 	bl	800989c <__i2b>
 800a63c:	4683      	mov	fp, r0
 800a63e:	2800      	cmp	r0, #0
 800a640:	f43f aefa 	beq.w	800a438 <_strtod_l+0x488>
 800a644:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a646:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a648:	2e00      	cmp	r6, #0
 800a64a:	bfab      	itete	ge
 800a64c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800a64e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800a650:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a652:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800a656:	bfac      	ite	ge
 800a658:	eb06 0a03 	addge.w	sl, r6, r3
 800a65c:	1b9f      	sublt	r7, r3, r6
 800a65e:	9b04      	ldr	r3, [sp, #16]
 800a660:	1af6      	subs	r6, r6, r3
 800a662:	4416      	add	r6, r2
 800a664:	4ba0      	ldr	r3, [pc, #640]	; (800a8e8 <_strtod_l+0x938>)
 800a666:	3e01      	subs	r6, #1
 800a668:	429e      	cmp	r6, r3
 800a66a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a66e:	f280 80c4 	bge.w	800a7fa <_strtod_l+0x84a>
 800a672:	1b9b      	subs	r3, r3, r6
 800a674:	2b1f      	cmp	r3, #31
 800a676:	eba2 0203 	sub.w	r2, r2, r3
 800a67a:	f04f 0101 	mov.w	r1, #1
 800a67e:	f300 80b0 	bgt.w	800a7e2 <_strtod_l+0x832>
 800a682:	fa01 f303 	lsl.w	r3, r1, r3
 800a686:	930e      	str	r3, [sp, #56]	; 0x38
 800a688:	2300      	movs	r3, #0
 800a68a:	930d      	str	r3, [sp, #52]	; 0x34
 800a68c:	eb0a 0602 	add.w	r6, sl, r2
 800a690:	9b04      	ldr	r3, [sp, #16]
 800a692:	45b2      	cmp	sl, r6
 800a694:	4417      	add	r7, r2
 800a696:	441f      	add	r7, r3
 800a698:	4653      	mov	r3, sl
 800a69a:	bfa8      	it	ge
 800a69c:	4633      	movge	r3, r6
 800a69e:	42bb      	cmp	r3, r7
 800a6a0:	bfa8      	it	ge
 800a6a2:	463b      	movge	r3, r7
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	bfc2      	ittt	gt
 800a6a8:	1af6      	subgt	r6, r6, r3
 800a6aa:	1aff      	subgt	r7, r7, r3
 800a6ac:	ebaa 0a03 	subgt.w	sl, sl, r3
 800a6b0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	dd17      	ble.n	800a6e6 <_strtod_l+0x736>
 800a6b6:	4659      	mov	r1, fp
 800a6b8:	461a      	mov	r2, r3
 800a6ba:	4620      	mov	r0, r4
 800a6bc:	f7ff f9ae 	bl	8009a1c <__pow5mult>
 800a6c0:	4683      	mov	fp, r0
 800a6c2:	2800      	cmp	r0, #0
 800a6c4:	f43f aeb8 	beq.w	800a438 <_strtod_l+0x488>
 800a6c8:	4601      	mov	r1, r0
 800a6ca:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	f7ff f8fb 	bl	80098c8 <__multiply>
 800a6d2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a6d4:	2800      	cmp	r0, #0
 800a6d6:	f43f aeaf 	beq.w	800a438 <_strtod_l+0x488>
 800a6da:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a6dc:	4620      	mov	r0, r4
 800a6de:	f7fe ffdd 	bl	800969c <_Bfree>
 800a6e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6e4:	9316      	str	r3, [sp, #88]	; 0x58
 800a6e6:	2e00      	cmp	r6, #0
 800a6e8:	f300 808c 	bgt.w	800a804 <_strtod_l+0x854>
 800a6ec:	9b08      	ldr	r3, [sp, #32]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	dd08      	ble.n	800a704 <_strtod_l+0x754>
 800a6f2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a6f4:	9905      	ldr	r1, [sp, #20]
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f7ff f990 	bl	8009a1c <__pow5mult>
 800a6fc:	9005      	str	r0, [sp, #20]
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f43f ae9a 	beq.w	800a438 <_strtod_l+0x488>
 800a704:	2f00      	cmp	r7, #0
 800a706:	dd08      	ble.n	800a71a <_strtod_l+0x76a>
 800a708:	9905      	ldr	r1, [sp, #20]
 800a70a:	463a      	mov	r2, r7
 800a70c:	4620      	mov	r0, r4
 800a70e:	f7ff f9df 	bl	8009ad0 <__lshift>
 800a712:	9005      	str	r0, [sp, #20]
 800a714:	2800      	cmp	r0, #0
 800a716:	f43f ae8f 	beq.w	800a438 <_strtod_l+0x488>
 800a71a:	f1ba 0f00 	cmp.w	sl, #0
 800a71e:	dd08      	ble.n	800a732 <_strtod_l+0x782>
 800a720:	4659      	mov	r1, fp
 800a722:	4652      	mov	r2, sl
 800a724:	4620      	mov	r0, r4
 800a726:	f7ff f9d3 	bl	8009ad0 <__lshift>
 800a72a:	4683      	mov	fp, r0
 800a72c:	2800      	cmp	r0, #0
 800a72e:	f43f ae83 	beq.w	800a438 <_strtod_l+0x488>
 800a732:	9a05      	ldr	r2, [sp, #20]
 800a734:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a736:	4620      	mov	r0, r4
 800a738:	f7ff fa52 	bl	8009be0 <__mdiff>
 800a73c:	4605      	mov	r5, r0
 800a73e:	2800      	cmp	r0, #0
 800a740:	f43f ae7a 	beq.w	800a438 <_strtod_l+0x488>
 800a744:	68c3      	ldr	r3, [r0, #12]
 800a746:	930b      	str	r3, [sp, #44]	; 0x2c
 800a748:	2300      	movs	r3, #0
 800a74a:	60c3      	str	r3, [r0, #12]
 800a74c:	4659      	mov	r1, fp
 800a74e:	f7ff fa2b 	bl	8009ba8 <__mcmp>
 800a752:	2800      	cmp	r0, #0
 800a754:	da60      	bge.n	800a818 <_strtod_l+0x868>
 800a756:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a758:	ea53 0308 	orrs.w	r3, r3, r8
 800a75c:	f040 8084 	bne.w	800a868 <_strtod_l+0x8b8>
 800a760:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a764:	2b00      	cmp	r3, #0
 800a766:	d17f      	bne.n	800a868 <_strtod_l+0x8b8>
 800a768:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a76c:	0d1b      	lsrs	r3, r3, #20
 800a76e:	051b      	lsls	r3, r3, #20
 800a770:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a774:	d978      	bls.n	800a868 <_strtod_l+0x8b8>
 800a776:	696b      	ldr	r3, [r5, #20]
 800a778:	b913      	cbnz	r3, 800a780 <_strtod_l+0x7d0>
 800a77a:	692b      	ldr	r3, [r5, #16]
 800a77c:	2b01      	cmp	r3, #1
 800a77e:	dd73      	ble.n	800a868 <_strtod_l+0x8b8>
 800a780:	4629      	mov	r1, r5
 800a782:	2201      	movs	r2, #1
 800a784:	4620      	mov	r0, r4
 800a786:	f7ff f9a3 	bl	8009ad0 <__lshift>
 800a78a:	4659      	mov	r1, fp
 800a78c:	4605      	mov	r5, r0
 800a78e:	f7ff fa0b 	bl	8009ba8 <__mcmp>
 800a792:	2800      	cmp	r0, #0
 800a794:	dd68      	ble.n	800a868 <_strtod_l+0x8b8>
 800a796:	9904      	ldr	r1, [sp, #16]
 800a798:	4a54      	ldr	r2, [pc, #336]	; (800a8ec <_strtod_l+0x93c>)
 800a79a:	464b      	mov	r3, r9
 800a79c:	2900      	cmp	r1, #0
 800a79e:	f000 8084 	beq.w	800a8aa <_strtod_l+0x8fa>
 800a7a2:	ea02 0109 	and.w	r1, r2, r9
 800a7a6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a7aa:	dc7e      	bgt.n	800a8aa <_strtod_l+0x8fa>
 800a7ac:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a7b0:	f77f aeb3 	ble.w	800a51a <_strtod_l+0x56a>
 800a7b4:	4b4e      	ldr	r3, [pc, #312]	; (800a8f0 <_strtod_l+0x940>)
 800a7b6:	4640      	mov	r0, r8
 800a7b8:	4649      	mov	r1, r9
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	f7f5 ff1c 	bl	80005f8 <__aeabi_dmul>
 800a7c0:	4b4a      	ldr	r3, [pc, #296]	; (800a8ec <_strtod_l+0x93c>)
 800a7c2:	400b      	ands	r3, r1
 800a7c4:	4680      	mov	r8, r0
 800a7c6:	4689      	mov	r9, r1
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	f47f ae3f 	bne.w	800a44c <_strtod_l+0x49c>
 800a7ce:	2322      	movs	r3, #34	; 0x22
 800a7d0:	6023      	str	r3, [r4, #0]
 800a7d2:	e63b      	b.n	800a44c <_strtod_l+0x49c>
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	fa02 f303 	lsl.w	r3, r2, r3
 800a7dc:	ea03 0808 	and.w	r8, r3, r8
 800a7e0:	e6e8      	b.n	800a5b4 <_strtod_l+0x604>
 800a7e2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800a7e6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800a7ea:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800a7ee:	36e2      	adds	r6, #226	; 0xe2
 800a7f0:	fa01 f306 	lsl.w	r3, r1, r6
 800a7f4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800a7f8:	e748      	b.n	800a68c <_strtod_l+0x6dc>
 800a7fa:	2100      	movs	r1, #0
 800a7fc:	2301      	movs	r3, #1
 800a7fe:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800a802:	e743      	b.n	800a68c <_strtod_l+0x6dc>
 800a804:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a806:	4632      	mov	r2, r6
 800a808:	4620      	mov	r0, r4
 800a80a:	f7ff f961 	bl	8009ad0 <__lshift>
 800a80e:	9016      	str	r0, [sp, #88]	; 0x58
 800a810:	2800      	cmp	r0, #0
 800a812:	f47f af6b 	bne.w	800a6ec <_strtod_l+0x73c>
 800a816:	e60f      	b.n	800a438 <_strtod_l+0x488>
 800a818:	46ca      	mov	sl, r9
 800a81a:	d171      	bne.n	800a900 <_strtod_l+0x950>
 800a81c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a81e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a822:	b352      	cbz	r2, 800a87a <_strtod_l+0x8ca>
 800a824:	4a33      	ldr	r2, [pc, #204]	; (800a8f4 <_strtod_l+0x944>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d12a      	bne.n	800a880 <_strtod_l+0x8d0>
 800a82a:	9b04      	ldr	r3, [sp, #16]
 800a82c:	4641      	mov	r1, r8
 800a82e:	b1fb      	cbz	r3, 800a870 <_strtod_l+0x8c0>
 800a830:	4b2e      	ldr	r3, [pc, #184]	; (800a8ec <_strtod_l+0x93c>)
 800a832:	ea09 0303 	and.w	r3, r9, r3
 800a836:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a83a:	f04f 32ff 	mov.w	r2, #4294967295
 800a83e:	d81a      	bhi.n	800a876 <_strtod_l+0x8c6>
 800a840:	0d1b      	lsrs	r3, r3, #20
 800a842:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a846:	fa02 f303 	lsl.w	r3, r2, r3
 800a84a:	4299      	cmp	r1, r3
 800a84c:	d118      	bne.n	800a880 <_strtod_l+0x8d0>
 800a84e:	4b2a      	ldr	r3, [pc, #168]	; (800a8f8 <_strtod_l+0x948>)
 800a850:	459a      	cmp	sl, r3
 800a852:	d102      	bne.n	800a85a <_strtod_l+0x8aa>
 800a854:	3101      	adds	r1, #1
 800a856:	f43f adef 	beq.w	800a438 <_strtod_l+0x488>
 800a85a:	4b24      	ldr	r3, [pc, #144]	; (800a8ec <_strtod_l+0x93c>)
 800a85c:	ea0a 0303 	and.w	r3, sl, r3
 800a860:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a864:	f04f 0800 	mov.w	r8, #0
 800a868:	9b04      	ldr	r3, [sp, #16]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d1a2      	bne.n	800a7b4 <_strtod_l+0x804>
 800a86e:	e5ed      	b.n	800a44c <_strtod_l+0x49c>
 800a870:	f04f 33ff 	mov.w	r3, #4294967295
 800a874:	e7e9      	b.n	800a84a <_strtod_l+0x89a>
 800a876:	4613      	mov	r3, r2
 800a878:	e7e7      	b.n	800a84a <_strtod_l+0x89a>
 800a87a:	ea53 0308 	orrs.w	r3, r3, r8
 800a87e:	d08a      	beq.n	800a796 <_strtod_l+0x7e6>
 800a880:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a882:	b1e3      	cbz	r3, 800a8be <_strtod_l+0x90e>
 800a884:	ea13 0f0a 	tst.w	r3, sl
 800a888:	d0ee      	beq.n	800a868 <_strtod_l+0x8b8>
 800a88a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a88c:	9a04      	ldr	r2, [sp, #16]
 800a88e:	4640      	mov	r0, r8
 800a890:	4649      	mov	r1, r9
 800a892:	b1c3      	cbz	r3, 800a8c6 <_strtod_l+0x916>
 800a894:	f7ff fb6f 	bl	8009f76 <sulp>
 800a898:	4602      	mov	r2, r0
 800a89a:	460b      	mov	r3, r1
 800a89c:	ec51 0b18 	vmov	r0, r1, d8
 800a8a0:	f7f5 fcf4 	bl	800028c <__adddf3>
 800a8a4:	4680      	mov	r8, r0
 800a8a6:	4689      	mov	r9, r1
 800a8a8:	e7de      	b.n	800a868 <_strtod_l+0x8b8>
 800a8aa:	4013      	ands	r3, r2
 800a8ac:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a8b0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a8b4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a8b8:	f04f 38ff 	mov.w	r8, #4294967295
 800a8bc:	e7d4      	b.n	800a868 <_strtod_l+0x8b8>
 800a8be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8c0:	ea13 0f08 	tst.w	r3, r8
 800a8c4:	e7e0      	b.n	800a888 <_strtod_l+0x8d8>
 800a8c6:	f7ff fb56 	bl	8009f76 <sulp>
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	460b      	mov	r3, r1
 800a8ce:	ec51 0b18 	vmov	r0, r1, d8
 800a8d2:	f7f5 fcd9 	bl	8000288 <__aeabi_dsub>
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	2300      	movs	r3, #0
 800a8da:	4680      	mov	r8, r0
 800a8dc:	4689      	mov	r9, r1
 800a8de:	f7f6 f8f3 	bl	8000ac8 <__aeabi_dcmpeq>
 800a8e2:	2800      	cmp	r0, #0
 800a8e4:	d0c0      	beq.n	800a868 <_strtod_l+0x8b8>
 800a8e6:	e618      	b.n	800a51a <_strtod_l+0x56a>
 800a8e8:	fffffc02 	.word	0xfffffc02
 800a8ec:	7ff00000 	.word	0x7ff00000
 800a8f0:	39500000 	.word	0x39500000
 800a8f4:	000fffff 	.word	0x000fffff
 800a8f8:	7fefffff 	.word	0x7fefffff
 800a8fc:	0801f1b8 	.word	0x0801f1b8
 800a900:	4659      	mov	r1, fp
 800a902:	4628      	mov	r0, r5
 800a904:	f7ff fac0 	bl	8009e88 <__ratio>
 800a908:	ec57 6b10 	vmov	r6, r7, d0
 800a90c:	ee10 0a10 	vmov	r0, s0
 800a910:	2200      	movs	r2, #0
 800a912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a916:	4639      	mov	r1, r7
 800a918:	f7f6 f8ea 	bl	8000af0 <__aeabi_dcmple>
 800a91c:	2800      	cmp	r0, #0
 800a91e:	d071      	beq.n	800aa04 <_strtod_l+0xa54>
 800a920:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a922:	2b00      	cmp	r3, #0
 800a924:	d17c      	bne.n	800aa20 <_strtod_l+0xa70>
 800a926:	f1b8 0f00 	cmp.w	r8, #0
 800a92a:	d15a      	bne.n	800a9e2 <_strtod_l+0xa32>
 800a92c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a930:	2b00      	cmp	r3, #0
 800a932:	d15d      	bne.n	800a9f0 <_strtod_l+0xa40>
 800a934:	4b90      	ldr	r3, [pc, #576]	; (800ab78 <_strtod_l+0xbc8>)
 800a936:	2200      	movs	r2, #0
 800a938:	4630      	mov	r0, r6
 800a93a:	4639      	mov	r1, r7
 800a93c:	f7f6 f8ce 	bl	8000adc <__aeabi_dcmplt>
 800a940:	2800      	cmp	r0, #0
 800a942:	d15c      	bne.n	800a9fe <_strtod_l+0xa4e>
 800a944:	4630      	mov	r0, r6
 800a946:	4639      	mov	r1, r7
 800a948:	4b8c      	ldr	r3, [pc, #560]	; (800ab7c <_strtod_l+0xbcc>)
 800a94a:	2200      	movs	r2, #0
 800a94c:	f7f5 fe54 	bl	80005f8 <__aeabi_dmul>
 800a950:	4606      	mov	r6, r0
 800a952:	460f      	mov	r7, r1
 800a954:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a958:	9606      	str	r6, [sp, #24]
 800a95a:	9307      	str	r3, [sp, #28]
 800a95c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a960:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a964:	4b86      	ldr	r3, [pc, #536]	; (800ab80 <_strtod_l+0xbd0>)
 800a966:	ea0a 0303 	and.w	r3, sl, r3
 800a96a:	930d      	str	r3, [sp, #52]	; 0x34
 800a96c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a96e:	4b85      	ldr	r3, [pc, #532]	; (800ab84 <_strtod_l+0xbd4>)
 800a970:	429a      	cmp	r2, r3
 800a972:	f040 8090 	bne.w	800aa96 <_strtod_l+0xae6>
 800a976:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a97a:	ec49 8b10 	vmov	d0, r8, r9
 800a97e:	f7ff f9b9 	bl	8009cf4 <__ulp>
 800a982:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a986:	ec51 0b10 	vmov	r0, r1, d0
 800a98a:	f7f5 fe35 	bl	80005f8 <__aeabi_dmul>
 800a98e:	4642      	mov	r2, r8
 800a990:	464b      	mov	r3, r9
 800a992:	f7f5 fc7b 	bl	800028c <__adddf3>
 800a996:	460b      	mov	r3, r1
 800a998:	4979      	ldr	r1, [pc, #484]	; (800ab80 <_strtod_l+0xbd0>)
 800a99a:	4a7b      	ldr	r2, [pc, #492]	; (800ab88 <_strtod_l+0xbd8>)
 800a99c:	4019      	ands	r1, r3
 800a99e:	4291      	cmp	r1, r2
 800a9a0:	4680      	mov	r8, r0
 800a9a2:	d944      	bls.n	800aa2e <_strtod_l+0xa7e>
 800a9a4:	ee18 2a90 	vmov	r2, s17
 800a9a8:	4b78      	ldr	r3, [pc, #480]	; (800ab8c <_strtod_l+0xbdc>)
 800a9aa:	429a      	cmp	r2, r3
 800a9ac:	d104      	bne.n	800a9b8 <_strtod_l+0xa08>
 800a9ae:	ee18 3a10 	vmov	r3, s16
 800a9b2:	3301      	adds	r3, #1
 800a9b4:	f43f ad40 	beq.w	800a438 <_strtod_l+0x488>
 800a9b8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800ab8c <_strtod_l+0xbdc>
 800a9bc:	f04f 38ff 	mov.w	r8, #4294967295
 800a9c0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a9c2:	4620      	mov	r0, r4
 800a9c4:	f7fe fe6a 	bl	800969c <_Bfree>
 800a9c8:	9905      	ldr	r1, [sp, #20]
 800a9ca:	4620      	mov	r0, r4
 800a9cc:	f7fe fe66 	bl	800969c <_Bfree>
 800a9d0:	4659      	mov	r1, fp
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f7fe fe62 	bl	800969c <_Bfree>
 800a9d8:	4629      	mov	r1, r5
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f7fe fe5e 	bl	800969c <_Bfree>
 800a9e0:	e609      	b.n	800a5f6 <_strtod_l+0x646>
 800a9e2:	f1b8 0f01 	cmp.w	r8, #1
 800a9e6:	d103      	bne.n	800a9f0 <_strtod_l+0xa40>
 800a9e8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ec:	f43f ad95 	beq.w	800a51a <_strtod_l+0x56a>
 800a9f0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800ab48 <_strtod_l+0xb98>
 800a9f4:	4f60      	ldr	r7, [pc, #384]	; (800ab78 <_strtod_l+0xbc8>)
 800a9f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a9fa:	2600      	movs	r6, #0
 800a9fc:	e7ae      	b.n	800a95c <_strtod_l+0x9ac>
 800a9fe:	4f5f      	ldr	r7, [pc, #380]	; (800ab7c <_strtod_l+0xbcc>)
 800aa00:	2600      	movs	r6, #0
 800aa02:	e7a7      	b.n	800a954 <_strtod_l+0x9a4>
 800aa04:	4b5d      	ldr	r3, [pc, #372]	; (800ab7c <_strtod_l+0xbcc>)
 800aa06:	4630      	mov	r0, r6
 800aa08:	4639      	mov	r1, r7
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f7f5 fdf4 	bl	80005f8 <__aeabi_dmul>
 800aa10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa12:	4606      	mov	r6, r0
 800aa14:	460f      	mov	r7, r1
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d09c      	beq.n	800a954 <_strtod_l+0x9a4>
 800aa1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800aa1e:	e79d      	b.n	800a95c <_strtod_l+0x9ac>
 800aa20:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800ab50 <_strtod_l+0xba0>
 800aa24:	ed8d 7b06 	vstr	d7, [sp, #24]
 800aa28:	ec57 6b17 	vmov	r6, r7, d7
 800aa2c:	e796      	b.n	800a95c <_strtod_l+0x9ac>
 800aa2e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800aa32:	9b04      	ldr	r3, [sp, #16]
 800aa34:	46ca      	mov	sl, r9
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d1c2      	bne.n	800a9c0 <_strtod_l+0xa10>
 800aa3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa40:	0d1b      	lsrs	r3, r3, #20
 800aa42:	051b      	lsls	r3, r3, #20
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d1bb      	bne.n	800a9c0 <_strtod_l+0xa10>
 800aa48:	4630      	mov	r0, r6
 800aa4a:	4639      	mov	r1, r7
 800aa4c:	f7f6 f91c 	bl	8000c88 <__aeabi_d2lz>
 800aa50:	f7f5 fda4 	bl	800059c <__aeabi_l2d>
 800aa54:	4602      	mov	r2, r0
 800aa56:	460b      	mov	r3, r1
 800aa58:	4630      	mov	r0, r6
 800aa5a:	4639      	mov	r1, r7
 800aa5c:	f7f5 fc14 	bl	8000288 <__aeabi_dsub>
 800aa60:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa62:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa66:	ea43 0308 	orr.w	r3, r3, r8
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	4606      	mov	r6, r0
 800aa6e:	460f      	mov	r7, r1
 800aa70:	d054      	beq.n	800ab1c <_strtod_l+0xb6c>
 800aa72:	a339      	add	r3, pc, #228	; (adr r3, 800ab58 <_strtod_l+0xba8>)
 800aa74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa78:	f7f6 f830 	bl	8000adc <__aeabi_dcmplt>
 800aa7c:	2800      	cmp	r0, #0
 800aa7e:	f47f ace5 	bne.w	800a44c <_strtod_l+0x49c>
 800aa82:	a337      	add	r3, pc, #220	; (adr r3, 800ab60 <_strtod_l+0xbb0>)
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	4630      	mov	r0, r6
 800aa8a:	4639      	mov	r1, r7
 800aa8c:	f7f6 f844 	bl	8000b18 <__aeabi_dcmpgt>
 800aa90:	2800      	cmp	r0, #0
 800aa92:	d095      	beq.n	800a9c0 <_strtod_l+0xa10>
 800aa94:	e4da      	b.n	800a44c <_strtod_l+0x49c>
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	b333      	cbz	r3, 800aae8 <_strtod_l+0xb38>
 800aa9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa9c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aaa0:	d822      	bhi.n	800aae8 <_strtod_l+0xb38>
 800aaa2:	a331      	add	r3, pc, #196	; (adr r3, 800ab68 <_strtod_l+0xbb8>)
 800aaa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa8:	4630      	mov	r0, r6
 800aaaa:	4639      	mov	r1, r7
 800aaac:	f7f6 f820 	bl	8000af0 <__aeabi_dcmple>
 800aab0:	b1a0      	cbz	r0, 800aadc <_strtod_l+0xb2c>
 800aab2:	4639      	mov	r1, r7
 800aab4:	4630      	mov	r0, r6
 800aab6:	f7f6 f877 	bl	8000ba8 <__aeabi_d2uiz>
 800aaba:	2801      	cmp	r0, #1
 800aabc:	bf38      	it	cc
 800aabe:	2001      	movcc	r0, #1
 800aac0:	f7f5 fd20 	bl	8000504 <__aeabi_ui2d>
 800aac4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aac6:	4606      	mov	r6, r0
 800aac8:	460f      	mov	r7, r1
 800aaca:	bb23      	cbnz	r3, 800ab16 <_strtod_l+0xb66>
 800aacc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aad0:	9010      	str	r0, [sp, #64]	; 0x40
 800aad2:	9311      	str	r3, [sp, #68]	; 0x44
 800aad4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800aad8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800aadc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aae0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800aae4:	1a9b      	subs	r3, r3, r2
 800aae6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aae8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800aaec:	eeb0 0a48 	vmov.f32	s0, s16
 800aaf0:	eef0 0a68 	vmov.f32	s1, s17
 800aaf4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800aaf8:	f7ff f8fc 	bl	8009cf4 <__ulp>
 800aafc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800ab00:	ec53 2b10 	vmov	r2, r3, d0
 800ab04:	f7f5 fd78 	bl	80005f8 <__aeabi_dmul>
 800ab08:	ec53 2b18 	vmov	r2, r3, d8
 800ab0c:	f7f5 fbbe 	bl	800028c <__adddf3>
 800ab10:	4680      	mov	r8, r0
 800ab12:	4689      	mov	r9, r1
 800ab14:	e78d      	b.n	800aa32 <_strtod_l+0xa82>
 800ab16:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ab1a:	e7db      	b.n	800aad4 <_strtod_l+0xb24>
 800ab1c:	a314      	add	r3, pc, #80	; (adr r3, 800ab70 <_strtod_l+0xbc0>)
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	f7f5 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800ab26:	e7b3      	b.n	800aa90 <_strtod_l+0xae0>
 800ab28:	2300      	movs	r3, #0
 800ab2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ab2c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ab2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ab30:	6013      	str	r3, [r2, #0]
 800ab32:	f7ff ba7c 	b.w	800a02e <_strtod_l+0x7e>
 800ab36:	2a65      	cmp	r2, #101	; 0x65
 800ab38:	f43f ab75 	beq.w	800a226 <_strtod_l+0x276>
 800ab3c:	2a45      	cmp	r2, #69	; 0x45
 800ab3e:	f43f ab72 	beq.w	800a226 <_strtod_l+0x276>
 800ab42:	2301      	movs	r3, #1
 800ab44:	f7ff bbaa 	b.w	800a29c <_strtod_l+0x2ec>
 800ab48:	00000000 	.word	0x00000000
 800ab4c:	bff00000 	.word	0xbff00000
 800ab50:	00000000 	.word	0x00000000
 800ab54:	3ff00000 	.word	0x3ff00000
 800ab58:	94a03595 	.word	0x94a03595
 800ab5c:	3fdfffff 	.word	0x3fdfffff
 800ab60:	35afe535 	.word	0x35afe535
 800ab64:	3fe00000 	.word	0x3fe00000
 800ab68:	ffc00000 	.word	0xffc00000
 800ab6c:	41dfffff 	.word	0x41dfffff
 800ab70:	94a03595 	.word	0x94a03595
 800ab74:	3fcfffff 	.word	0x3fcfffff
 800ab78:	3ff00000 	.word	0x3ff00000
 800ab7c:	3fe00000 	.word	0x3fe00000
 800ab80:	7ff00000 	.word	0x7ff00000
 800ab84:	7fe00000 	.word	0x7fe00000
 800ab88:	7c9fffff 	.word	0x7c9fffff
 800ab8c:	7fefffff 	.word	0x7fefffff

0800ab90 <_strtod_r>:
 800ab90:	4b01      	ldr	r3, [pc, #4]	; (800ab98 <_strtod_r+0x8>)
 800ab92:	f7ff ba0d 	b.w	8009fb0 <_strtod_l>
 800ab96:	bf00      	nop
 800ab98:	20000070 	.word	0x20000070

0800ab9c <_strtol_l.constprop.0>:
 800ab9c:	2b01      	cmp	r3, #1
 800ab9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba2:	d001      	beq.n	800aba8 <_strtol_l.constprop.0+0xc>
 800aba4:	2b24      	cmp	r3, #36	; 0x24
 800aba6:	d906      	bls.n	800abb6 <_strtol_l.constprop.0+0x1a>
 800aba8:	f7fd fe30 	bl	800880c <__errno>
 800abac:	2316      	movs	r3, #22
 800abae:	6003      	str	r3, [r0, #0]
 800abb0:	2000      	movs	r0, #0
 800abb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abb6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ac9c <_strtol_l.constprop.0+0x100>
 800abba:	460d      	mov	r5, r1
 800abbc:	462e      	mov	r6, r5
 800abbe:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abc2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800abc6:	f017 0708 	ands.w	r7, r7, #8
 800abca:	d1f7      	bne.n	800abbc <_strtol_l.constprop.0+0x20>
 800abcc:	2c2d      	cmp	r4, #45	; 0x2d
 800abce:	d132      	bne.n	800ac36 <_strtol_l.constprop.0+0x9a>
 800abd0:	782c      	ldrb	r4, [r5, #0]
 800abd2:	2701      	movs	r7, #1
 800abd4:	1cb5      	adds	r5, r6, #2
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d05b      	beq.n	800ac92 <_strtol_l.constprop.0+0xf6>
 800abda:	2b10      	cmp	r3, #16
 800abdc:	d109      	bne.n	800abf2 <_strtol_l.constprop.0+0x56>
 800abde:	2c30      	cmp	r4, #48	; 0x30
 800abe0:	d107      	bne.n	800abf2 <_strtol_l.constprop.0+0x56>
 800abe2:	782c      	ldrb	r4, [r5, #0]
 800abe4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800abe8:	2c58      	cmp	r4, #88	; 0x58
 800abea:	d14d      	bne.n	800ac88 <_strtol_l.constprop.0+0xec>
 800abec:	786c      	ldrb	r4, [r5, #1]
 800abee:	2310      	movs	r3, #16
 800abf0:	3502      	adds	r5, #2
 800abf2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800abf6:	f108 38ff 	add.w	r8, r8, #4294967295
 800abfa:	f04f 0e00 	mov.w	lr, #0
 800abfe:	fbb8 f9f3 	udiv	r9, r8, r3
 800ac02:	4676      	mov	r6, lr
 800ac04:	fb03 8a19 	mls	sl, r3, r9, r8
 800ac08:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800ac0c:	f1bc 0f09 	cmp.w	ip, #9
 800ac10:	d816      	bhi.n	800ac40 <_strtol_l.constprop.0+0xa4>
 800ac12:	4664      	mov	r4, ip
 800ac14:	42a3      	cmp	r3, r4
 800ac16:	dd24      	ble.n	800ac62 <_strtol_l.constprop.0+0xc6>
 800ac18:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac1c:	d008      	beq.n	800ac30 <_strtol_l.constprop.0+0x94>
 800ac1e:	45b1      	cmp	r9, r6
 800ac20:	d31c      	bcc.n	800ac5c <_strtol_l.constprop.0+0xc0>
 800ac22:	d101      	bne.n	800ac28 <_strtol_l.constprop.0+0x8c>
 800ac24:	45a2      	cmp	sl, r4
 800ac26:	db19      	blt.n	800ac5c <_strtol_l.constprop.0+0xc0>
 800ac28:	fb06 4603 	mla	r6, r6, r3, r4
 800ac2c:	f04f 0e01 	mov.w	lr, #1
 800ac30:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac34:	e7e8      	b.n	800ac08 <_strtol_l.constprop.0+0x6c>
 800ac36:	2c2b      	cmp	r4, #43	; 0x2b
 800ac38:	bf04      	itt	eq
 800ac3a:	782c      	ldrbeq	r4, [r5, #0]
 800ac3c:	1cb5      	addeq	r5, r6, #2
 800ac3e:	e7ca      	b.n	800abd6 <_strtol_l.constprop.0+0x3a>
 800ac40:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ac44:	f1bc 0f19 	cmp.w	ip, #25
 800ac48:	d801      	bhi.n	800ac4e <_strtol_l.constprop.0+0xb2>
 800ac4a:	3c37      	subs	r4, #55	; 0x37
 800ac4c:	e7e2      	b.n	800ac14 <_strtol_l.constprop.0+0x78>
 800ac4e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ac52:	f1bc 0f19 	cmp.w	ip, #25
 800ac56:	d804      	bhi.n	800ac62 <_strtol_l.constprop.0+0xc6>
 800ac58:	3c57      	subs	r4, #87	; 0x57
 800ac5a:	e7db      	b.n	800ac14 <_strtol_l.constprop.0+0x78>
 800ac5c:	f04f 3eff 	mov.w	lr, #4294967295
 800ac60:	e7e6      	b.n	800ac30 <_strtol_l.constprop.0+0x94>
 800ac62:	f1be 3fff 	cmp.w	lr, #4294967295
 800ac66:	d105      	bne.n	800ac74 <_strtol_l.constprop.0+0xd8>
 800ac68:	2322      	movs	r3, #34	; 0x22
 800ac6a:	6003      	str	r3, [r0, #0]
 800ac6c:	4646      	mov	r6, r8
 800ac6e:	b942      	cbnz	r2, 800ac82 <_strtol_l.constprop.0+0xe6>
 800ac70:	4630      	mov	r0, r6
 800ac72:	e79e      	b.n	800abb2 <_strtol_l.constprop.0+0x16>
 800ac74:	b107      	cbz	r7, 800ac78 <_strtol_l.constprop.0+0xdc>
 800ac76:	4276      	negs	r6, r6
 800ac78:	2a00      	cmp	r2, #0
 800ac7a:	d0f9      	beq.n	800ac70 <_strtol_l.constprop.0+0xd4>
 800ac7c:	f1be 0f00 	cmp.w	lr, #0
 800ac80:	d000      	beq.n	800ac84 <_strtol_l.constprop.0+0xe8>
 800ac82:	1e69      	subs	r1, r5, #1
 800ac84:	6011      	str	r1, [r2, #0]
 800ac86:	e7f3      	b.n	800ac70 <_strtol_l.constprop.0+0xd4>
 800ac88:	2430      	movs	r4, #48	; 0x30
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d1b1      	bne.n	800abf2 <_strtol_l.constprop.0+0x56>
 800ac8e:	2308      	movs	r3, #8
 800ac90:	e7af      	b.n	800abf2 <_strtol_l.constprop.0+0x56>
 800ac92:	2c30      	cmp	r4, #48	; 0x30
 800ac94:	d0a5      	beq.n	800abe2 <_strtol_l.constprop.0+0x46>
 800ac96:	230a      	movs	r3, #10
 800ac98:	e7ab      	b.n	800abf2 <_strtol_l.constprop.0+0x56>
 800ac9a:	bf00      	nop
 800ac9c:	0801f1e1 	.word	0x0801f1e1

0800aca0 <_strtol_r>:
 800aca0:	f7ff bf7c 	b.w	800ab9c <_strtol_l.constprop.0>

0800aca4 <__ssputs_r>:
 800aca4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aca8:	688e      	ldr	r6, [r1, #8]
 800acaa:	461f      	mov	r7, r3
 800acac:	42be      	cmp	r6, r7
 800acae:	680b      	ldr	r3, [r1, #0]
 800acb0:	4682      	mov	sl, r0
 800acb2:	460c      	mov	r4, r1
 800acb4:	4690      	mov	r8, r2
 800acb6:	d82c      	bhi.n	800ad12 <__ssputs_r+0x6e>
 800acb8:	898a      	ldrh	r2, [r1, #12]
 800acba:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800acbe:	d026      	beq.n	800ad0e <__ssputs_r+0x6a>
 800acc0:	6965      	ldr	r5, [r4, #20]
 800acc2:	6909      	ldr	r1, [r1, #16]
 800acc4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acc8:	eba3 0901 	sub.w	r9, r3, r1
 800accc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acd0:	1c7b      	adds	r3, r7, #1
 800acd2:	444b      	add	r3, r9
 800acd4:	106d      	asrs	r5, r5, #1
 800acd6:	429d      	cmp	r5, r3
 800acd8:	bf38      	it	cc
 800acda:	461d      	movcc	r5, r3
 800acdc:	0553      	lsls	r3, r2, #21
 800acde:	d527      	bpl.n	800ad30 <__ssputs_r+0x8c>
 800ace0:	4629      	mov	r1, r5
 800ace2:	f7fc fc69 	bl	80075b8 <_malloc_r>
 800ace6:	4606      	mov	r6, r0
 800ace8:	b360      	cbz	r0, 800ad44 <__ssputs_r+0xa0>
 800acea:	6921      	ldr	r1, [r4, #16]
 800acec:	464a      	mov	r2, r9
 800acee:	f7fd fdba 	bl	8008866 <memcpy>
 800acf2:	89a3      	ldrh	r3, [r4, #12]
 800acf4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800acf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800acfc:	81a3      	strh	r3, [r4, #12]
 800acfe:	6126      	str	r6, [r4, #16]
 800ad00:	6165      	str	r5, [r4, #20]
 800ad02:	444e      	add	r6, r9
 800ad04:	eba5 0509 	sub.w	r5, r5, r9
 800ad08:	6026      	str	r6, [r4, #0]
 800ad0a:	60a5      	str	r5, [r4, #8]
 800ad0c:	463e      	mov	r6, r7
 800ad0e:	42be      	cmp	r6, r7
 800ad10:	d900      	bls.n	800ad14 <__ssputs_r+0x70>
 800ad12:	463e      	mov	r6, r7
 800ad14:	6820      	ldr	r0, [r4, #0]
 800ad16:	4632      	mov	r2, r6
 800ad18:	4641      	mov	r1, r8
 800ad1a:	f000 fba3 	bl	800b464 <memmove>
 800ad1e:	68a3      	ldr	r3, [r4, #8]
 800ad20:	1b9b      	subs	r3, r3, r6
 800ad22:	60a3      	str	r3, [r4, #8]
 800ad24:	6823      	ldr	r3, [r4, #0]
 800ad26:	4433      	add	r3, r6
 800ad28:	6023      	str	r3, [r4, #0]
 800ad2a:	2000      	movs	r0, #0
 800ad2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad30:	462a      	mov	r2, r5
 800ad32:	f000 ff6a 	bl	800bc0a <_realloc_r>
 800ad36:	4606      	mov	r6, r0
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d1e0      	bne.n	800acfe <__ssputs_r+0x5a>
 800ad3c:	6921      	ldr	r1, [r4, #16]
 800ad3e:	4650      	mov	r0, sl
 800ad40:	f7fe fc20 	bl	8009584 <_free_r>
 800ad44:	230c      	movs	r3, #12
 800ad46:	f8ca 3000 	str.w	r3, [sl]
 800ad4a:	89a3      	ldrh	r3, [r4, #12]
 800ad4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	f04f 30ff 	mov.w	r0, #4294967295
 800ad56:	e7e9      	b.n	800ad2c <__ssputs_r+0x88>

0800ad58 <_svfiprintf_r>:
 800ad58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	4698      	mov	r8, r3
 800ad5e:	898b      	ldrh	r3, [r1, #12]
 800ad60:	061b      	lsls	r3, r3, #24
 800ad62:	b09d      	sub	sp, #116	; 0x74
 800ad64:	4607      	mov	r7, r0
 800ad66:	460d      	mov	r5, r1
 800ad68:	4614      	mov	r4, r2
 800ad6a:	d50e      	bpl.n	800ad8a <_svfiprintf_r+0x32>
 800ad6c:	690b      	ldr	r3, [r1, #16]
 800ad6e:	b963      	cbnz	r3, 800ad8a <_svfiprintf_r+0x32>
 800ad70:	2140      	movs	r1, #64	; 0x40
 800ad72:	f7fc fc21 	bl	80075b8 <_malloc_r>
 800ad76:	6028      	str	r0, [r5, #0]
 800ad78:	6128      	str	r0, [r5, #16]
 800ad7a:	b920      	cbnz	r0, 800ad86 <_svfiprintf_r+0x2e>
 800ad7c:	230c      	movs	r3, #12
 800ad7e:	603b      	str	r3, [r7, #0]
 800ad80:	f04f 30ff 	mov.w	r0, #4294967295
 800ad84:	e0d0      	b.n	800af28 <_svfiprintf_r+0x1d0>
 800ad86:	2340      	movs	r3, #64	; 0x40
 800ad88:	616b      	str	r3, [r5, #20]
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	9309      	str	r3, [sp, #36]	; 0x24
 800ad8e:	2320      	movs	r3, #32
 800ad90:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ad94:	f8cd 800c 	str.w	r8, [sp, #12]
 800ad98:	2330      	movs	r3, #48	; 0x30
 800ad9a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800af40 <_svfiprintf_r+0x1e8>
 800ad9e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ada2:	f04f 0901 	mov.w	r9, #1
 800ada6:	4623      	mov	r3, r4
 800ada8:	469a      	mov	sl, r3
 800adaa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adae:	b10a      	cbz	r2, 800adb4 <_svfiprintf_r+0x5c>
 800adb0:	2a25      	cmp	r2, #37	; 0x25
 800adb2:	d1f9      	bne.n	800ada8 <_svfiprintf_r+0x50>
 800adb4:	ebba 0b04 	subs.w	fp, sl, r4
 800adb8:	d00b      	beq.n	800add2 <_svfiprintf_r+0x7a>
 800adba:	465b      	mov	r3, fp
 800adbc:	4622      	mov	r2, r4
 800adbe:	4629      	mov	r1, r5
 800adc0:	4638      	mov	r0, r7
 800adc2:	f7ff ff6f 	bl	800aca4 <__ssputs_r>
 800adc6:	3001      	adds	r0, #1
 800adc8:	f000 80a9 	beq.w	800af1e <_svfiprintf_r+0x1c6>
 800adcc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adce:	445a      	add	r2, fp
 800add0:	9209      	str	r2, [sp, #36]	; 0x24
 800add2:	f89a 3000 	ldrb.w	r3, [sl]
 800add6:	2b00      	cmp	r3, #0
 800add8:	f000 80a1 	beq.w	800af1e <_svfiprintf_r+0x1c6>
 800addc:	2300      	movs	r3, #0
 800adde:	f04f 32ff 	mov.w	r2, #4294967295
 800ade2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ade6:	f10a 0a01 	add.w	sl, sl, #1
 800adea:	9304      	str	r3, [sp, #16]
 800adec:	9307      	str	r3, [sp, #28]
 800adee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800adf2:	931a      	str	r3, [sp, #104]	; 0x68
 800adf4:	4654      	mov	r4, sl
 800adf6:	2205      	movs	r2, #5
 800adf8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adfc:	4850      	ldr	r0, [pc, #320]	; (800af40 <_svfiprintf_r+0x1e8>)
 800adfe:	f7f5 f9e7 	bl	80001d0 <memchr>
 800ae02:	9a04      	ldr	r2, [sp, #16]
 800ae04:	b9d8      	cbnz	r0, 800ae3e <_svfiprintf_r+0xe6>
 800ae06:	06d0      	lsls	r0, r2, #27
 800ae08:	bf44      	itt	mi
 800ae0a:	2320      	movmi	r3, #32
 800ae0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae10:	0711      	lsls	r1, r2, #28
 800ae12:	bf44      	itt	mi
 800ae14:	232b      	movmi	r3, #43	; 0x2b
 800ae16:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae1a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae1e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae20:	d015      	beq.n	800ae4e <_svfiprintf_r+0xf6>
 800ae22:	9a07      	ldr	r2, [sp, #28]
 800ae24:	4654      	mov	r4, sl
 800ae26:	2000      	movs	r0, #0
 800ae28:	f04f 0c0a 	mov.w	ip, #10
 800ae2c:	4621      	mov	r1, r4
 800ae2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae32:	3b30      	subs	r3, #48	; 0x30
 800ae34:	2b09      	cmp	r3, #9
 800ae36:	d94d      	bls.n	800aed4 <_svfiprintf_r+0x17c>
 800ae38:	b1b0      	cbz	r0, 800ae68 <_svfiprintf_r+0x110>
 800ae3a:	9207      	str	r2, [sp, #28]
 800ae3c:	e014      	b.n	800ae68 <_svfiprintf_r+0x110>
 800ae3e:	eba0 0308 	sub.w	r3, r0, r8
 800ae42:	fa09 f303 	lsl.w	r3, r9, r3
 800ae46:	4313      	orrs	r3, r2
 800ae48:	9304      	str	r3, [sp, #16]
 800ae4a:	46a2      	mov	sl, r4
 800ae4c:	e7d2      	b.n	800adf4 <_svfiprintf_r+0x9c>
 800ae4e:	9b03      	ldr	r3, [sp, #12]
 800ae50:	1d19      	adds	r1, r3, #4
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	9103      	str	r1, [sp, #12]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	bfbb      	ittet	lt
 800ae5a:	425b      	neglt	r3, r3
 800ae5c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae60:	9307      	strge	r3, [sp, #28]
 800ae62:	9307      	strlt	r3, [sp, #28]
 800ae64:	bfb8      	it	lt
 800ae66:	9204      	strlt	r2, [sp, #16]
 800ae68:	7823      	ldrb	r3, [r4, #0]
 800ae6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae6c:	d10c      	bne.n	800ae88 <_svfiprintf_r+0x130>
 800ae6e:	7863      	ldrb	r3, [r4, #1]
 800ae70:	2b2a      	cmp	r3, #42	; 0x2a
 800ae72:	d134      	bne.n	800aede <_svfiprintf_r+0x186>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	1d1a      	adds	r2, r3, #4
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	9203      	str	r2, [sp, #12]
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bfb8      	it	lt
 800ae80:	f04f 33ff 	movlt.w	r3, #4294967295
 800ae84:	3402      	adds	r4, #2
 800ae86:	9305      	str	r3, [sp, #20]
 800ae88:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800af50 <_svfiprintf_r+0x1f8>
 800ae8c:	7821      	ldrb	r1, [r4, #0]
 800ae8e:	2203      	movs	r2, #3
 800ae90:	4650      	mov	r0, sl
 800ae92:	f7f5 f99d 	bl	80001d0 <memchr>
 800ae96:	b138      	cbz	r0, 800aea8 <_svfiprintf_r+0x150>
 800ae98:	9b04      	ldr	r3, [sp, #16]
 800ae9a:	eba0 000a 	sub.w	r0, r0, sl
 800ae9e:	2240      	movs	r2, #64	; 0x40
 800aea0:	4082      	lsls	r2, r0
 800aea2:	4313      	orrs	r3, r2
 800aea4:	3401      	adds	r4, #1
 800aea6:	9304      	str	r3, [sp, #16]
 800aea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aeac:	4825      	ldr	r0, [pc, #148]	; (800af44 <_svfiprintf_r+0x1ec>)
 800aeae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aeb2:	2206      	movs	r2, #6
 800aeb4:	f7f5 f98c 	bl	80001d0 <memchr>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	d038      	beq.n	800af2e <_svfiprintf_r+0x1d6>
 800aebc:	4b22      	ldr	r3, [pc, #136]	; (800af48 <_svfiprintf_r+0x1f0>)
 800aebe:	bb1b      	cbnz	r3, 800af08 <_svfiprintf_r+0x1b0>
 800aec0:	9b03      	ldr	r3, [sp, #12]
 800aec2:	3307      	adds	r3, #7
 800aec4:	f023 0307 	bic.w	r3, r3, #7
 800aec8:	3308      	adds	r3, #8
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aece:	4433      	add	r3, r6
 800aed0:	9309      	str	r3, [sp, #36]	; 0x24
 800aed2:	e768      	b.n	800ada6 <_svfiprintf_r+0x4e>
 800aed4:	fb0c 3202 	mla	r2, ip, r2, r3
 800aed8:	460c      	mov	r4, r1
 800aeda:	2001      	movs	r0, #1
 800aedc:	e7a6      	b.n	800ae2c <_svfiprintf_r+0xd4>
 800aede:	2300      	movs	r3, #0
 800aee0:	3401      	adds	r4, #1
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	4619      	mov	r1, r3
 800aee6:	f04f 0c0a 	mov.w	ip, #10
 800aeea:	4620      	mov	r0, r4
 800aeec:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aef0:	3a30      	subs	r2, #48	; 0x30
 800aef2:	2a09      	cmp	r2, #9
 800aef4:	d903      	bls.n	800aefe <_svfiprintf_r+0x1a6>
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d0c6      	beq.n	800ae88 <_svfiprintf_r+0x130>
 800aefa:	9105      	str	r1, [sp, #20]
 800aefc:	e7c4      	b.n	800ae88 <_svfiprintf_r+0x130>
 800aefe:	fb0c 2101 	mla	r1, ip, r1, r2
 800af02:	4604      	mov	r4, r0
 800af04:	2301      	movs	r3, #1
 800af06:	e7f0      	b.n	800aeea <_svfiprintf_r+0x192>
 800af08:	ab03      	add	r3, sp, #12
 800af0a:	9300      	str	r3, [sp, #0]
 800af0c:	462a      	mov	r2, r5
 800af0e:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <_svfiprintf_r+0x1f4>)
 800af10:	a904      	add	r1, sp, #16
 800af12:	4638      	mov	r0, r7
 800af14:	f7fc fc7c 	bl	8007810 <_printf_float>
 800af18:	1c42      	adds	r2, r0, #1
 800af1a:	4606      	mov	r6, r0
 800af1c:	d1d6      	bne.n	800aecc <_svfiprintf_r+0x174>
 800af1e:	89ab      	ldrh	r3, [r5, #12]
 800af20:	065b      	lsls	r3, r3, #25
 800af22:	f53f af2d 	bmi.w	800ad80 <_svfiprintf_r+0x28>
 800af26:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af28:	b01d      	add	sp, #116	; 0x74
 800af2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	9300      	str	r3, [sp, #0]
 800af32:	462a      	mov	r2, r5
 800af34:	4b05      	ldr	r3, [pc, #20]	; (800af4c <_svfiprintf_r+0x1f4>)
 800af36:	a904      	add	r1, sp, #16
 800af38:	4638      	mov	r0, r7
 800af3a:	f7fc ff0d 	bl	8007d58 <_printf_i>
 800af3e:	e7eb      	b.n	800af18 <_svfiprintf_r+0x1c0>
 800af40:	0801f2e1 	.word	0x0801f2e1
 800af44:	0801f2eb 	.word	0x0801f2eb
 800af48:	08007811 	.word	0x08007811
 800af4c:	0800aca5 	.word	0x0800aca5
 800af50:	0801f2e7 	.word	0x0801f2e7

0800af54 <__sfputc_r>:
 800af54:	6893      	ldr	r3, [r2, #8]
 800af56:	3b01      	subs	r3, #1
 800af58:	2b00      	cmp	r3, #0
 800af5a:	b410      	push	{r4}
 800af5c:	6093      	str	r3, [r2, #8]
 800af5e:	da08      	bge.n	800af72 <__sfputc_r+0x1e>
 800af60:	6994      	ldr	r4, [r2, #24]
 800af62:	42a3      	cmp	r3, r4
 800af64:	db01      	blt.n	800af6a <__sfputc_r+0x16>
 800af66:	290a      	cmp	r1, #10
 800af68:	d103      	bne.n	800af72 <__sfputc_r+0x1e>
 800af6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af6e:	f000 b9e3 	b.w	800b338 <__swbuf_r>
 800af72:	6813      	ldr	r3, [r2, #0]
 800af74:	1c58      	adds	r0, r3, #1
 800af76:	6010      	str	r0, [r2, #0]
 800af78:	7019      	strb	r1, [r3, #0]
 800af7a:	4608      	mov	r0, r1
 800af7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800af80:	4770      	bx	lr

0800af82 <__sfputs_r>:
 800af82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af84:	4606      	mov	r6, r0
 800af86:	460f      	mov	r7, r1
 800af88:	4614      	mov	r4, r2
 800af8a:	18d5      	adds	r5, r2, r3
 800af8c:	42ac      	cmp	r4, r5
 800af8e:	d101      	bne.n	800af94 <__sfputs_r+0x12>
 800af90:	2000      	movs	r0, #0
 800af92:	e007      	b.n	800afa4 <__sfputs_r+0x22>
 800af94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af98:	463a      	mov	r2, r7
 800af9a:	4630      	mov	r0, r6
 800af9c:	f7ff ffda 	bl	800af54 <__sfputc_r>
 800afa0:	1c43      	adds	r3, r0, #1
 800afa2:	d1f3      	bne.n	800af8c <__sfputs_r+0xa>
 800afa4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800afa8 <_vfiprintf_r>:
 800afa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afac:	460d      	mov	r5, r1
 800afae:	b09d      	sub	sp, #116	; 0x74
 800afb0:	4614      	mov	r4, r2
 800afb2:	4698      	mov	r8, r3
 800afb4:	4606      	mov	r6, r0
 800afb6:	b118      	cbz	r0, 800afc0 <_vfiprintf_r+0x18>
 800afb8:	6a03      	ldr	r3, [r0, #32]
 800afba:	b90b      	cbnz	r3, 800afc0 <_vfiprintf_r+0x18>
 800afbc:	f7fd fa8a 	bl	80084d4 <__sinit>
 800afc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afc2:	07d9      	lsls	r1, r3, #31
 800afc4:	d405      	bmi.n	800afd2 <_vfiprintf_r+0x2a>
 800afc6:	89ab      	ldrh	r3, [r5, #12]
 800afc8:	059a      	lsls	r2, r3, #22
 800afca:	d402      	bmi.n	800afd2 <_vfiprintf_r+0x2a>
 800afcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800afce:	f7fd fc48 	bl	8008862 <__retarget_lock_acquire_recursive>
 800afd2:	89ab      	ldrh	r3, [r5, #12]
 800afd4:	071b      	lsls	r3, r3, #28
 800afd6:	d501      	bpl.n	800afdc <_vfiprintf_r+0x34>
 800afd8:	692b      	ldr	r3, [r5, #16]
 800afda:	b99b      	cbnz	r3, 800b004 <_vfiprintf_r+0x5c>
 800afdc:	4629      	mov	r1, r5
 800afde:	4630      	mov	r0, r6
 800afe0:	f000 f9e8 	bl	800b3b4 <__swsetup_r>
 800afe4:	b170      	cbz	r0, 800b004 <_vfiprintf_r+0x5c>
 800afe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800afe8:	07dc      	lsls	r4, r3, #31
 800afea:	d504      	bpl.n	800aff6 <_vfiprintf_r+0x4e>
 800afec:	f04f 30ff 	mov.w	r0, #4294967295
 800aff0:	b01d      	add	sp, #116	; 0x74
 800aff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aff6:	89ab      	ldrh	r3, [r5, #12]
 800aff8:	0598      	lsls	r0, r3, #22
 800affa:	d4f7      	bmi.n	800afec <_vfiprintf_r+0x44>
 800affc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800affe:	f7fd fc31 	bl	8008864 <__retarget_lock_release_recursive>
 800b002:	e7f3      	b.n	800afec <_vfiprintf_r+0x44>
 800b004:	2300      	movs	r3, #0
 800b006:	9309      	str	r3, [sp, #36]	; 0x24
 800b008:	2320      	movs	r3, #32
 800b00a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b00e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b012:	2330      	movs	r3, #48	; 0x30
 800b014:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800b1c8 <_vfiprintf_r+0x220>
 800b018:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b01c:	f04f 0901 	mov.w	r9, #1
 800b020:	4623      	mov	r3, r4
 800b022:	469a      	mov	sl, r3
 800b024:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b028:	b10a      	cbz	r2, 800b02e <_vfiprintf_r+0x86>
 800b02a:	2a25      	cmp	r2, #37	; 0x25
 800b02c:	d1f9      	bne.n	800b022 <_vfiprintf_r+0x7a>
 800b02e:	ebba 0b04 	subs.w	fp, sl, r4
 800b032:	d00b      	beq.n	800b04c <_vfiprintf_r+0xa4>
 800b034:	465b      	mov	r3, fp
 800b036:	4622      	mov	r2, r4
 800b038:	4629      	mov	r1, r5
 800b03a:	4630      	mov	r0, r6
 800b03c:	f7ff ffa1 	bl	800af82 <__sfputs_r>
 800b040:	3001      	adds	r0, #1
 800b042:	f000 80a9 	beq.w	800b198 <_vfiprintf_r+0x1f0>
 800b046:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b048:	445a      	add	r2, fp
 800b04a:	9209      	str	r2, [sp, #36]	; 0x24
 800b04c:	f89a 3000 	ldrb.w	r3, [sl]
 800b050:	2b00      	cmp	r3, #0
 800b052:	f000 80a1 	beq.w	800b198 <_vfiprintf_r+0x1f0>
 800b056:	2300      	movs	r3, #0
 800b058:	f04f 32ff 	mov.w	r2, #4294967295
 800b05c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b060:	f10a 0a01 	add.w	sl, sl, #1
 800b064:	9304      	str	r3, [sp, #16]
 800b066:	9307      	str	r3, [sp, #28]
 800b068:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b06c:	931a      	str	r3, [sp, #104]	; 0x68
 800b06e:	4654      	mov	r4, sl
 800b070:	2205      	movs	r2, #5
 800b072:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b076:	4854      	ldr	r0, [pc, #336]	; (800b1c8 <_vfiprintf_r+0x220>)
 800b078:	f7f5 f8aa 	bl	80001d0 <memchr>
 800b07c:	9a04      	ldr	r2, [sp, #16]
 800b07e:	b9d8      	cbnz	r0, 800b0b8 <_vfiprintf_r+0x110>
 800b080:	06d1      	lsls	r1, r2, #27
 800b082:	bf44      	itt	mi
 800b084:	2320      	movmi	r3, #32
 800b086:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b08a:	0713      	lsls	r3, r2, #28
 800b08c:	bf44      	itt	mi
 800b08e:	232b      	movmi	r3, #43	; 0x2b
 800b090:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b094:	f89a 3000 	ldrb.w	r3, [sl]
 800b098:	2b2a      	cmp	r3, #42	; 0x2a
 800b09a:	d015      	beq.n	800b0c8 <_vfiprintf_r+0x120>
 800b09c:	9a07      	ldr	r2, [sp, #28]
 800b09e:	4654      	mov	r4, sl
 800b0a0:	2000      	movs	r0, #0
 800b0a2:	f04f 0c0a 	mov.w	ip, #10
 800b0a6:	4621      	mov	r1, r4
 800b0a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0ac:	3b30      	subs	r3, #48	; 0x30
 800b0ae:	2b09      	cmp	r3, #9
 800b0b0:	d94d      	bls.n	800b14e <_vfiprintf_r+0x1a6>
 800b0b2:	b1b0      	cbz	r0, 800b0e2 <_vfiprintf_r+0x13a>
 800b0b4:	9207      	str	r2, [sp, #28]
 800b0b6:	e014      	b.n	800b0e2 <_vfiprintf_r+0x13a>
 800b0b8:	eba0 0308 	sub.w	r3, r0, r8
 800b0bc:	fa09 f303 	lsl.w	r3, r9, r3
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	9304      	str	r3, [sp, #16]
 800b0c4:	46a2      	mov	sl, r4
 800b0c6:	e7d2      	b.n	800b06e <_vfiprintf_r+0xc6>
 800b0c8:	9b03      	ldr	r3, [sp, #12]
 800b0ca:	1d19      	adds	r1, r3, #4
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	9103      	str	r1, [sp, #12]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	bfbb      	ittet	lt
 800b0d4:	425b      	neglt	r3, r3
 800b0d6:	f042 0202 	orrlt.w	r2, r2, #2
 800b0da:	9307      	strge	r3, [sp, #28]
 800b0dc:	9307      	strlt	r3, [sp, #28]
 800b0de:	bfb8      	it	lt
 800b0e0:	9204      	strlt	r2, [sp, #16]
 800b0e2:	7823      	ldrb	r3, [r4, #0]
 800b0e4:	2b2e      	cmp	r3, #46	; 0x2e
 800b0e6:	d10c      	bne.n	800b102 <_vfiprintf_r+0x15a>
 800b0e8:	7863      	ldrb	r3, [r4, #1]
 800b0ea:	2b2a      	cmp	r3, #42	; 0x2a
 800b0ec:	d134      	bne.n	800b158 <_vfiprintf_r+0x1b0>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	1d1a      	adds	r2, r3, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	9203      	str	r2, [sp, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bfb8      	it	lt
 800b0fa:	f04f 33ff 	movlt.w	r3, #4294967295
 800b0fe:	3402      	adds	r4, #2
 800b100:	9305      	str	r3, [sp, #20]
 800b102:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800b1d8 <_vfiprintf_r+0x230>
 800b106:	7821      	ldrb	r1, [r4, #0]
 800b108:	2203      	movs	r2, #3
 800b10a:	4650      	mov	r0, sl
 800b10c:	f7f5 f860 	bl	80001d0 <memchr>
 800b110:	b138      	cbz	r0, 800b122 <_vfiprintf_r+0x17a>
 800b112:	9b04      	ldr	r3, [sp, #16]
 800b114:	eba0 000a 	sub.w	r0, r0, sl
 800b118:	2240      	movs	r2, #64	; 0x40
 800b11a:	4082      	lsls	r2, r0
 800b11c:	4313      	orrs	r3, r2
 800b11e:	3401      	adds	r4, #1
 800b120:	9304      	str	r3, [sp, #16]
 800b122:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b126:	4829      	ldr	r0, [pc, #164]	; (800b1cc <_vfiprintf_r+0x224>)
 800b128:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b12c:	2206      	movs	r2, #6
 800b12e:	f7f5 f84f 	bl	80001d0 <memchr>
 800b132:	2800      	cmp	r0, #0
 800b134:	d03f      	beq.n	800b1b6 <_vfiprintf_r+0x20e>
 800b136:	4b26      	ldr	r3, [pc, #152]	; (800b1d0 <_vfiprintf_r+0x228>)
 800b138:	bb1b      	cbnz	r3, 800b182 <_vfiprintf_r+0x1da>
 800b13a:	9b03      	ldr	r3, [sp, #12]
 800b13c:	3307      	adds	r3, #7
 800b13e:	f023 0307 	bic.w	r3, r3, #7
 800b142:	3308      	adds	r3, #8
 800b144:	9303      	str	r3, [sp, #12]
 800b146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b148:	443b      	add	r3, r7
 800b14a:	9309      	str	r3, [sp, #36]	; 0x24
 800b14c:	e768      	b.n	800b020 <_vfiprintf_r+0x78>
 800b14e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b152:	460c      	mov	r4, r1
 800b154:	2001      	movs	r0, #1
 800b156:	e7a6      	b.n	800b0a6 <_vfiprintf_r+0xfe>
 800b158:	2300      	movs	r3, #0
 800b15a:	3401      	adds	r4, #1
 800b15c:	9305      	str	r3, [sp, #20]
 800b15e:	4619      	mov	r1, r3
 800b160:	f04f 0c0a 	mov.w	ip, #10
 800b164:	4620      	mov	r0, r4
 800b166:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b16a:	3a30      	subs	r2, #48	; 0x30
 800b16c:	2a09      	cmp	r2, #9
 800b16e:	d903      	bls.n	800b178 <_vfiprintf_r+0x1d0>
 800b170:	2b00      	cmp	r3, #0
 800b172:	d0c6      	beq.n	800b102 <_vfiprintf_r+0x15a>
 800b174:	9105      	str	r1, [sp, #20]
 800b176:	e7c4      	b.n	800b102 <_vfiprintf_r+0x15a>
 800b178:	fb0c 2101 	mla	r1, ip, r1, r2
 800b17c:	4604      	mov	r4, r0
 800b17e:	2301      	movs	r3, #1
 800b180:	e7f0      	b.n	800b164 <_vfiprintf_r+0x1bc>
 800b182:	ab03      	add	r3, sp, #12
 800b184:	9300      	str	r3, [sp, #0]
 800b186:	462a      	mov	r2, r5
 800b188:	4b12      	ldr	r3, [pc, #72]	; (800b1d4 <_vfiprintf_r+0x22c>)
 800b18a:	a904      	add	r1, sp, #16
 800b18c:	4630      	mov	r0, r6
 800b18e:	f7fc fb3f 	bl	8007810 <_printf_float>
 800b192:	4607      	mov	r7, r0
 800b194:	1c78      	adds	r0, r7, #1
 800b196:	d1d6      	bne.n	800b146 <_vfiprintf_r+0x19e>
 800b198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b19a:	07d9      	lsls	r1, r3, #31
 800b19c:	d405      	bmi.n	800b1aa <_vfiprintf_r+0x202>
 800b19e:	89ab      	ldrh	r3, [r5, #12]
 800b1a0:	059a      	lsls	r2, r3, #22
 800b1a2:	d402      	bmi.n	800b1aa <_vfiprintf_r+0x202>
 800b1a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1a6:	f7fd fb5d 	bl	8008864 <__retarget_lock_release_recursive>
 800b1aa:	89ab      	ldrh	r3, [r5, #12]
 800b1ac:	065b      	lsls	r3, r3, #25
 800b1ae:	f53f af1d 	bmi.w	800afec <_vfiprintf_r+0x44>
 800b1b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1b4:	e71c      	b.n	800aff0 <_vfiprintf_r+0x48>
 800b1b6:	ab03      	add	r3, sp, #12
 800b1b8:	9300      	str	r3, [sp, #0]
 800b1ba:	462a      	mov	r2, r5
 800b1bc:	4b05      	ldr	r3, [pc, #20]	; (800b1d4 <_vfiprintf_r+0x22c>)
 800b1be:	a904      	add	r1, sp, #16
 800b1c0:	4630      	mov	r0, r6
 800b1c2:	f7fc fdc9 	bl	8007d58 <_printf_i>
 800b1c6:	e7e4      	b.n	800b192 <_vfiprintf_r+0x1ea>
 800b1c8:	0801f2e1 	.word	0x0801f2e1
 800b1cc:	0801f2eb 	.word	0x0801f2eb
 800b1d0:	08007811 	.word	0x08007811
 800b1d4:	0800af83 	.word	0x0800af83
 800b1d8:	0801f2e7 	.word	0x0801f2e7

0800b1dc <__sflush_r>:
 800b1dc:	898a      	ldrh	r2, [r1, #12]
 800b1de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b1e2:	4605      	mov	r5, r0
 800b1e4:	0710      	lsls	r0, r2, #28
 800b1e6:	460c      	mov	r4, r1
 800b1e8:	d458      	bmi.n	800b29c <__sflush_r+0xc0>
 800b1ea:	684b      	ldr	r3, [r1, #4]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	dc05      	bgt.n	800b1fc <__sflush_r+0x20>
 800b1f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	dc02      	bgt.n	800b1fc <__sflush_r+0x20>
 800b1f6:	2000      	movs	r0, #0
 800b1f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b1fe:	2e00      	cmp	r6, #0
 800b200:	d0f9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b202:	2300      	movs	r3, #0
 800b204:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b208:	682f      	ldr	r7, [r5, #0]
 800b20a:	6a21      	ldr	r1, [r4, #32]
 800b20c:	602b      	str	r3, [r5, #0]
 800b20e:	d032      	beq.n	800b276 <__sflush_r+0x9a>
 800b210:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b212:	89a3      	ldrh	r3, [r4, #12]
 800b214:	075a      	lsls	r2, r3, #29
 800b216:	d505      	bpl.n	800b224 <__sflush_r+0x48>
 800b218:	6863      	ldr	r3, [r4, #4]
 800b21a:	1ac0      	subs	r0, r0, r3
 800b21c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b21e:	b10b      	cbz	r3, 800b224 <__sflush_r+0x48>
 800b220:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b222:	1ac0      	subs	r0, r0, r3
 800b224:	2300      	movs	r3, #0
 800b226:	4602      	mov	r2, r0
 800b228:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b22a:	6a21      	ldr	r1, [r4, #32]
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b0      	blx	r6
 800b230:	1c43      	adds	r3, r0, #1
 800b232:	89a3      	ldrh	r3, [r4, #12]
 800b234:	d106      	bne.n	800b244 <__sflush_r+0x68>
 800b236:	6829      	ldr	r1, [r5, #0]
 800b238:	291d      	cmp	r1, #29
 800b23a:	d82b      	bhi.n	800b294 <__sflush_r+0xb8>
 800b23c:	4a29      	ldr	r2, [pc, #164]	; (800b2e4 <__sflush_r+0x108>)
 800b23e:	410a      	asrs	r2, r1
 800b240:	07d6      	lsls	r6, r2, #31
 800b242:	d427      	bmi.n	800b294 <__sflush_r+0xb8>
 800b244:	2200      	movs	r2, #0
 800b246:	6062      	str	r2, [r4, #4]
 800b248:	04d9      	lsls	r1, r3, #19
 800b24a:	6922      	ldr	r2, [r4, #16]
 800b24c:	6022      	str	r2, [r4, #0]
 800b24e:	d504      	bpl.n	800b25a <__sflush_r+0x7e>
 800b250:	1c42      	adds	r2, r0, #1
 800b252:	d101      	bne.n	800b258 <__sflush_r+0x7c>
 800b254:	682b      	ldr	r3, [r5, #0]
 800b256:	b903      	cbnz	r3, 800b25a <__sflush_r+0x7e>
 800b258:	6560      	str	r0, [r4, #84]	; 0x54
 800b25a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b25c:	602f      	str	r7, [r5, #0]
 800b25e:	2900      	cmp	r1, #0
 800b260:	d0c9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b262:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b266:	4299      	cmp	r1, r3
 800b268:	d002      	beq.n	800b270 <__sflush_r+0x94>
 800b26a:	4628      	mov	r0, r5
 800b26c:	f7fe f98a 	bl	8009584 <_free_r>
 800b270:	2000      	movs	r0, #0
 800b272:	6360      	str	r0, [r4, #52]	; 0x34
 800b274:	e7c0      	b.n	800b1f8 <__sflush_r+0x1c>
 800b276:	2301      	movs	r3, #1
 800b278:	4628      	mov	r0, r5
 800b27a:	47b0      	blx	r6
 800b27c:	1c41      	adds	r1, r0, #1
 800b27e:	d1c8      	bne.n	800b212 <__sflush_r+0x36>
 800b280:	682b      	ldr	r3, [r5, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d0c5      	beq.n	800b212 <__sflush_r+0x36>
 800b286:	2b1d      	cmp	r3, #29
 800b288:	d001      	beq.n	800b28e <__sflush_r+0xb2>
 800b28a:	2b16      	cmp	r3, #22
 800b28c:	d101      	bne.n	800b292 <__sflush_r+0xb6>
 800b28e:	602f      	str	r7, [r5, #0]
 800b290:	e7b1      	b.n	800b1f6 <__sflush_r+0x1a>
 800b292:	89a3      	ldrh	r3, [r4, #12]
 800b294:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b298:	81a3      	strh	r3, [r4, #12]
 800b29a:	e7ad      	b.n	800b1f8 <__sflush_r+0x1c>
 800b29c:	690f      	ldr	r7, [r1, #16]
 800b29e:	2f00      	cmp	r7, #0
 800b2a0:	d0a9      	beq.n	800b1f6 <__sflush_r+0x1a>
 800b2a2:	0793      	lsls	r3, r2, #30
 800b2a4:	680e      	ldr	r6, [r1, #0]
 800b2a6:	bf08      	it	eq
 800b2a8:	694b      	ldreq	r3, [r1, #20]
 800b2aa:	600f      	str	r7, [r1, #0]
 800b2ac:	bf18      	it	ne
 800b2ae:	2300      	movne	r3, #0
 800b2b0:	eba6 0807 	sub.w	r8, r6, r7
 800b2b4:	608b      	str	r3, [r1, #8]
 800b2b6:	f1b8 0f00 	cmp.w	r8, #0
 800b2ba:	dd9c      	ble.n	800b1f6 <__sflush_r+0x1a>
 800b2bc:	6a21      	ldr	r1, [r4, #32]
 800b2be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b2c0:	4643      	mov	r3, r8
 800b2c2:	463a      	mov	r2, r7
 800b2c4:	4628      	mov	r0, r5
 800b2c6:	47b0      	blx	r6
 800b2c8:	2800      	cmp	r0, #0
 800b2ca:	dc06      	bgt.n	800b2da <__sflush_r+0xfe>
 800b2cc:	89a3      	ldrh	r3, [r4, #12]
 800b2ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2d2:	81a3      	strh	r3, [r4, #12]
 800b2d4:	f04f 30ff 	mov.w	r0, #4294967295
 800b2d8:	e78e      	b.n	800b1f8 <__sflush_r+0x1c>
 800b2da:	4407      	add	r7, r0
 800b2dc:	eba8 0800 	sub.w	r8, r8, r0
 800b2e0:	e7e9      	b.n	800b2b6 <__sflush_r+0xda>
 800b2e2:	bf00      	nop
 800b2e4:	dfbffffe 	.word	0xdfbffffe

0800b2e8 <_fflush_r>:
 800b2e8:	b538      	push	{r3, r4, r5, lr}
 800b2ea:	690b      	ldr	r3, [r1, #16]
 800b2ec:	4605      	mov	r5, r0
 800b2ee:	460c      	mov	r4, r1
 800b2f0:	b913      	cbnz	r3, 800b2f8 <_fflush_r+0x10>
 800b2f2:	2500      	movs	r5, #0
 800b2f4:	4628      	mov	r0, r5
 800b2f6:	bd38      	pop	{r3, r4, r5, pc}
 800b2f8:	b118      	cbz	r0, 800b302 <_fflush_r+0x1a>
 800b2fa:	6a03      	ldr	r3, [r0, #32]
 800b2fc:	b90b      	cbnz	r3, 800b302 <_fflush_r+0x1a>
 800b2fe:	f7fd f8e9 	bl	80084d4 <__sinit>
 800b302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b306:	2b00      	cmp	r3, #0
 800b308:	d0f3      	beq.n	800b2f2 <_fflush_r+0xa>
 800b30a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b30c:	07d0      	lsls	r0, r2, #31
 800b30e:	d404      	bmi.n	800b31a <_fflush_r+0x32>
 800b310:	0599      	lsls	r1, r3, #22
 800b312:	d402      	bmi.n	800b31a <_fflush_r+0x32>
 800b314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b316:	f7fd faa4 	bl	8008862 <__retarget_lock_acquire_recursive>
 800b31a:	4628      	mov	r0, r5
 800b31c:	4621      	mov	r1, r4
 800b31e:	f7ff ff5d 	bl	800b1dc <__sflush_r>
 800b322:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b324:	07da      	lsls	r2, r3, #31
 800b326:	4605      	mov	r5, r0
 800b328:	d4e4      	bmi.n	800b2f4 <_fflush_r+0xc>
 800b32a:	89a3      	ldrh	r3, [r4, #12]
 800b32c:	059b      	lsls	r3, r3, #22
 800b32e:	d4e1      	bmi.n	800b2f4 <_fflush_r+0xc>
 800b330:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b332:	f7fd fa97 	bl	8008864 <__retarget_lock_release_recursive>
 800b336:	e7dd      	b.n	800b2f4 <_fflush_r+0xc>

0800b338 <__swbuf_r>:
 800b338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b33a:	460e      	mov	r6, r1
 800b33c:	4614      	mov	r4, r2
 800b33e:	4605      	mov	r5, r0
 800b340:	b118      	cbz	r0, 800b34a <__swbuf_r+0x12>
 800b342:	6a03      	ldr	r3, [r0, #32]
 800b344:	b90b      	cbnz	r3, 800b34a <__swbuf_r+0x12>
 800b346:	f7fd f8c5 	bl	80084d4 <__sinit>
 800b34a:	69a3      	ldr	r3, [r4, #24]
 800b34c:	60a3      	str	r3, [r4, #8]
 800b34e:	89a3      	ldrh	r3, [r4, #12]
 800b350:	071a      	lsls	r2, r3, #28
 800b352:	d525      	bpl.n	800b3a0 <__swbuf_r+0x68>
 800b354:	6923      	ldr	r3, [r4, #16]
 800b356:	b31b      	cbz	r3, 800b3a0 <__swbuf_r+0x68>
 800b358:	6823      	ldr	r3, [r4, #0]
 800b35a:	6922      	ldr	r2, [r4, #16]
 800b35c:	1a98      	subs	r0, r3, r2
 800b35e:	6963      	ldr	r3, [r4, #20]
 800b360:	b2f6      	uxtb	r6, r6
 800b362:	4283      	cmp	r3, r0
 800b364:	4637      	mov	r7, r6
 800b366:	dc04      	bgt.n	800b372 <__swbuf_r+0x3a>
 800b368:	4621      	mov	r1, r4
 800b36a:	4628      	mov	r0, r5
 800b36c:	f7ff ffbc 	bl	800b2e8 <_fflush_r>
 800b370:	b9e0      	cbnz	r0, 800b3ac <__swbuf_r+0x74>
 800b372:	68a3      	ldr	r3, [r4, #8]
 800b374:	3b01      	subs	r3, #1
 800b376:	60a3      	str	r3, [r4, #8]
 800b378:	6823      	ldr	r3, [r4, #0]
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	6022      	str	r2, [r4, #0]
 800b37e:	701e      	strb	r6, [r3, #0]
 800b380:	6962      	ldr	r2, [r4, #20]
 800b382:	1c43      	adds	r3, r0, #1
 800b384:	429a      	cmp	r2, r3
 800b386:	d004      	beq.n	800b392 <__swbuf_r+0x5a>
 800b388:	89a3      	ldrh	r3, [r4, #12]
 800b38a:	07db      	lsls	r3, r3, #31
 800b38c:	d506      	bpl.n	800b39c <__swbuf_r+0x64>
 800b38e:	2e0a      	cmp	r6, #10
 800b390:	d104      	bne.n	800b39c <__swbuf_r+0x64>
 800b392:	4621      	mov	r1, r4
 800b394:	4628      	mov	r0, r5
 800b396:	f7ff ffa7 	bl	800b2e8 <_fflush_r>
 800b39a:	b938      	cbnz	r0, 800b3ac <__swbuf_r+0x74>
 800b39c:	4638      	mov	r0, r7
 800b39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3a0:	4621      	mov	r1, r4
 800b3a2:	4628      	mov	r0, r5
 800b3a4:	f000 f806 	bl	800b3b4 <__swsetup_r>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d0d5      	beq.n	800b358 <__swbuf_r+0x20>
 800b3ac:	f04f 37ff 	mov.w	r7, #4294967295
 800b3b0:	e7f4      	b.n	800b39c <__swbuf_r+0x64>
	...

0800b3b4 <__swsetup_r>:
 800b3b4:	b538      	push	{r3, r4, r5, lr}
 800b3b6:	4b2a      	ldr	r3, [pc, #168]	; (800b460 <__swsetup_r+0xac>)
 800b3b8:	4605      	mov	r5, r0
 800b3ba:	6818      	ldr	r0, [r3, #0]
 800b3bc:	460c      	mov	r4, r1
 800b3be:	b118      	cbz	r0, 800b3c8 <__swsetup_r+0x14>
 800b3c0:	6a03      	ldr	r3, [r0, #32]
 800b3c2:	b90b      	cbnz	r3, 800b3c8 <__swsetup_r+0x14>
 800b3c4:	f7fd f886 	bl	80084d4 <__sinit>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b3ce:	0718      	lsls	r0, r3, #28
 800b3d0:	d422      	bmi.n	800b418 <__swsetup_r+0x64>
 800b3d2:	06d9      	lsls	r1, r3, #27
 800b3d4:	d407      	bmi.n	800b3e6 <__swsetup_r+0x32>
 800b3d6:	2309      	movs	r3, #9
 800b3d8:	602b      	str	r3, [r5, #0]
 800b3da:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b3de:	81a3      	strh	r3, [r4, #12]
 800b3e0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e4:	e034      	b.n	800b450 <__swsetup_r+0x9c>
 800b3e6:	0758      	lsls	r0, r3, #29
 800b3e8:	d512      	bpl.n	800b410 <__swsetup_r+0x5c>
 800b3ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b3ec:	b141      	cbz	r1, 800b400 <__swsetup_r+0x4c>
 800b3ee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b3f2:	4299      	cmp	r1, r3
 800b3f4:	d002      	beq.n	800b3fc <__swsetup_r+0x48>
 800b3f6:	4628      	mov	r0, r5
 800b3f8:	f7fe f8c4 	bl	8009584 <_free_r>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	6363      	str	r3, [r4, #52]	; 0x34
 800b400:	89a3      	ldrh	r3, [r4, #12]
 800b402:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b406:	81a3      	strh	r3, [r4, #12]
 800b408:	2300      	movs	r3, #0
 800b40a:	6063      	str	r3, [r4, #4]
 800b40c:	6923      	ldr	r3, [r4, #16]
 800b40e:	6023      	str	r3, [r4, #0]
 800b410:	89a3      	ldrh	r3, [r4, #12]
 800b412:	f043 0308 	orr.w	r3, r3, #8
 800b416:	81a3      	strh	r3, [r4, #12]
 800b418:	6923      	ldr	r3, [r4, #16]
 800b41a:	b94b      	cbnz	r3, 800b430 <__swsetup_r+0x7c>
 800b41c:	89a3      	ldrh	r3, [r4, #12]
 800b41e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b422:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b426:	d003      	beq.n	800b430 <__swsetup_r+0x7c>
 800b428:	4621      	mov	r1, r4
 800b42a:	4628      	mov	r0, r5
 800b42c:	f000 fc62 	bl	800bcf4 <__smakebuf_r>
 800b430:	89a0      	ldrh	r0, [r4, #12]
 800b432:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b436:	f010 0301 	ands.w	r3, r0, #1
 800b43a:	d00a      	beq.n	800b452 <__swsetup_r+0x9e>
 800b43c:	2300      	movs	r3, #0
 800b43e:	60a3      	str	r3, [r4, #8]
 800b440:	6963      	ldr	r3, [r4, #20]
 800b442:	425b      	negs	r3, r3
 800b444:	61a3      	str	r3, [r4, #24]
 800b446:	6923      	ldr	r3, [r4, #16]
 800b448:	b943      	cbnz	r3, 800b45c <__swsetup_r+0xa8>
 800b44a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b44e:	d1c4      	bne.n	800b3da <__swsetup_r+0x26>
 800b450:	bd38      	pop	{r3, r4, r5, pc}
 800b452:	0781      	lsls	r1, r0, #30
 800b454:	bf58      	it	pl
 800b456:	6963      	ldrpl	r3, [r4, #20]
 800b458:	60a3      	str	r3, [r4, #8]
 800b45a:	e7f4      	b.n	800b446 <__swsetup_r+0x92>
 800b45c:	2000      	movs	r0, #0
 800b45e:	e7f7      	b.n	800b450 <__swsetup_r+0x9c>
 800b460:	2000006c 	.word	0x2000006c

0800b464 <memmove>:
 800b464:	4288      	cmp	r0, r1
 800b466:	b510      	push	{r4, lr}
 800b468:	eb01 0402 	add.w	r4, r1, r2
 800b46c:	d902      	bls.n	800b474 <memmove+0x10>
 800b46e:	4284      	cmp	r4, r0
 800b470:	4623      	mov	r3, r4
 800b472:	d807      	bhi.n	800b484 <memmove+0x20>
 800b474:	1e43      	subs	r3, r0, #1
 800b476:	42a1      	cmp	r1, r4
 800b478:	d008      	beq.n	800b48c <memmove+0x28>
 800b47a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b47e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b482:	e7f8      	b.n	800b476 <memmove+0x12>
 800b484:	4402      	add	r2, r0
 800b486:	4601      	mov	r1, r0
 800b488:	428a      	cmp	r2, r1
 800b48a:	d100      	bne.n	800b48e <memmove+0x2a>
 800b48c:	bd10      	pop	{r4, pc}
 800b48e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b492:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b496:	e7f7      	b.n	800b488 <memmove+0x24>

0800b498 <strncmp>:
 800b498:	b510      	push	{r4, lr}
 800b49a:	b16a      	cbz	r2, 800b4b8 <strncmp+0x20>
 800b49c:	3901      	subs	r1, #1
 800b49e:	1884      	adds	r4, r0, r2
 800b4a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4a4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d103      	bne.n	800b4b4 <strncmp+0x1c>
 800b4ac:	42a0      	cmp	r0, r4
 800b4ae:	d001      	beq.n	800b4b4 <strncmp+0x1c>
 800b4b0:	2a00      	cmp	r2, #0
 800b4b2:	d1f5      	bne.n	800b4a0 <strncmp+0x8>
 800b4b4:	1ad0      	subs	r0, r2, r3
 800b4b6:	bd10      	pop	{r4, pc}
 800b4b8:	4610      	mov	r0, r2
 800b4ba:	e7fc      	b.n	800b4b6 <strncmp+0x1e>
 800b4bc:	0000      	movs	r0, r0
	...

0800b4c0 <nan>:
 800b4c0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b4c8 <nan+0x8>
 800b4c4:	4770      	bx	lr
 800b4c6:	bf00      	nop
 800b4c8:	00000000 	.word	0x00000000
 800b4cc:	7ff80000 	.word	0x7ff80000

0800b4d0 <__assert_func>:
 800b4d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b4d2:	4614      	mov	r4, r2
 800b4d4:	461a      	mov	r2, r3
 800b4d6:	4b09      	ldr	r3, [pc, #36]	; (800b4fc <__assert_func+0x2c>)
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	4605      	mov	r5, r0
 800b4dc:	68d8      	ldr	r0, [r3, #12]
 800b4de:	b14c      	cbz	r4, 800b4f4 <__assert_func+0x24>
 800b4e0:	4b07      	ldr	r3, [pc, #28]	; (800b500 <__assert_func+0x30>)
 800b4e2:	9100      	str	r1, [sp, #0]
 800b4e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b4e8:	4906      	ldr	r1, [pc, #24]	; (800b504 <__assert_func+0x34>)
 800b4ea:	462b      	mov	r3, r5
 800b4ec:	f000 fbca 	bl	800bc84 <fiprintf>
 800b4f0:	f000 fc5e 	bl	800bdb0 <abort>
 800b4f4:	4b04      	ldr	r3, [pc, #16]	; (800b508 <__assert_func+0x38>)
 800b4f6:	461c      	mov	r4, r3
 800b4f8:	e7f3      	b.n	800b4e2 <__assert_func+0x12>
 800b4fa:	bf00      	nop
 800b4fc:	2000006c 	.word	0x2000006c
 800b500:	0801f2fa 	.word	0x0801f2fa
 800b504:	0801f307 	.word	0x0801f307
 800b508:	0801f335 	.word	0x0801f335

0800b50c <_calloc_r>:
 800b50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b50e:	fba1 2402 	umull	r2, r4, r1, r2
 800b512:	b94c      	cbnz	r4, 800b528 <_calloc_r+0x1c>
 800b514:	4611      	mov	r1, r2
 800b516:	9201      	str	r2, [sp, #4]
 800b518:	f7fc f84e 	bl	80075b8 <_malloc_r>
 800b51c:	9a01      	ldr	r2, [sp, #4]
 800b51e:	4605      	mov	r5, r0
 800b520:	b930      	cbnz	r0, 800b530 <_calloc_r+0x24>
 800b522:	4628      	mov	r0, r5
 800b524:	b003      	add	sp, #12
 800b526:	bd30      	pop	{r4, r5, pc}
 800b528:	220c      	movs	r2, #12
 800b52a:	6002      	str	r2, [r0, #0]
 800b52c:	2500      	movs	r5, #0
 800b52e:	e7f8      	b.n	800b522 <_calloc_r+0x16>
 800b530:	4621      	mov	r1, r4
 800b532:	f7fd f8b3 	bl	800869c <memset>
 800b536:	e7f4      	b.n	800b522 <_calloc_r+0x16>

0800b538 <rshift>:
 800b538:	6903      	ldr	r3, [r0, #16]
 800b53a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b53e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b542:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b546:	f100 0414 	add.w	r4, r0, #20
 800b54a:	dd45      	ble.n	800b5d8 <rshift+0xa0>
 800b54c:	f011 011f 	ands.w	r1, r1, #31
 800b550:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b554:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b558:	d10c      	bne.n	800b574 <rshift+0x3c>
 800b55a:	f100 0710 	add.w	r7, r0, #16
 800b55e:	4629      	mov	r1, r5
 800b560:	42b1      	cmp	r1, r6
 800b562:	d334      	bcc.n	800b5ce <rshift+0x96>
 800b564:	1a9b      	subs	r3, r3, r2
 800b566:	009b      	lsls	r3, r3, #2
 800b568:	1eea      	subs	r2, r5, #3
 800b56a:	4296      	cmp	r6, r2
 800b56c:	bf38      	it	cc
 800b56e:	2300      	movcc	r3, #0
 800b570:	4423      	add	r3, r4
 800b572:	e015      	b.n	800b5a0 <rshift+0x68>
 800b574:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b578:	f1c1 0820 	rsb	r8, r1, #32
 800b57c:	40cf      	lsrs	r7, r1
 800b57e:	f105 0e04 	add.w	lr, r5, #4
 800b582:	46a1      	mov	r9, r4
 800b584:	4576      	cmp	r6, lr
 800b586:	46f4      	mov	ip, lr
 800b588:	d815      	bhi.n	800b5b6 <rshift+0x7e>
 800b58a:	1a9a      	subs	r2, r3, r2
 800b58c:	0092      	lsls	r2, r2, #2
 800b58e:	3a04      	subs	r2, #4
 800b590:	3501      	adds	r5, #1
 800b592:	42ae      	cmp	r6, r5
 800b594:	bf38      	it	cc
 800b596:	2200      	movcc	r2, #0
 800b598:	18a3      	adds	r3, r4, r2
 800b59a:	50a7      	str	r7, [r4, r2]
 800b59c:	b107      	cbz	r7, 800b5a0 <rshift+0x68>
 800b59e:	3304      	adds	r3, #4
 800b5a0:	1b1a      	subs	r2, r3, r4
 800b5a2:	42a3      	cmp	r3, r4
 800b5a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b5a8:	bf08      	it	eq
 800b5aa:	2300      	moveq	r3, #0
 800b5ac:	6102      	str	r2, [r0, #16]
 800b5ae:	bf08      	it	eq
 800b5b0:	6143      	streq	r3, [r0, #20]
 800b5b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b5b6:	f8dc c000 	ldr.w	ip, [ip]
 800b5ba:	fa0c fc08 	lsl.w	ip, ip, r8
 800b5be:	ea4c 0707 	orr.w	r7, ip, r7
 800b5c2:	f849 7b04 	str.w	r7, [r9], #4
 800b5c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b5ca:	40cf      	lsrs	r7, r1
 800b5cc:	e7da      	b.n	800b584 <rshift+0x4c>
 800b5ce:	f851 cb04 	ldr.w	ip, [r1], #4
 800b5d2:	f847 cf04 	str.w	ip, [r7, #4]!
 800b5d6:	e7c3      	b.n	800b560 <rshift+0x28>
 800b5d8:	4623      	mov	r3, r4
 800b5da:	e7e1      	b.n	800b5a0 <rshift+0x68>

0800b5dc <__hexdig_fun>:
 800b5dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b5e0:	2b09      	cmp	r3, #9
 800b5e2:	d802      	bhi.n	800b5ea <__hexdig_fun+0xe>
 800b5e4:	3820      	subs	r0, #32
 800b5e6:	b2c0      	uxtb	r0, r0
 800b5e8:	4770      	bx	lr
 800b5ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b5ee:	2b05      	cmp	r3, #5
 800b5f0:	d801      	bhi.n	800b5f6 <__hexdig_fun+0x1a>
 800b5f2:	3847      	subs	r0, #71	; 0x47
 800b5f4:	e7f7      	b.n	800b5e6 <__hexdig_fun+0xa>
 800b5f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b5fa:	2b05      	cmp	r3, #5
 800b5fc:	d801      	bhi.n	800b602 <__hexdig_fun+0x26>
 800b5fe:	3827      	subs	r0, #39	; 0x27
 800b600:	e7f1      	b.n	800b5e6 <__hexdig_fun+0xa>
 800b602:	2000      	movs	r0, #0
 800b604:	4770      	bx	lr
	...

0800b608 <__gethex>:
 800b608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b60c:	4617      	mov	r7, r2
 800b60e:	680a      	ldr	r2, [r1, #0]
 800b610:	b085      	sub	sp, #20
 800b612:	f102 0b02 	add.w	fp, r2, #2
 800b616:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b61a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b61e:	4681      	mov	r9, r0
 800b620:	468a      	mov	sl, r1
 800b622:	9302      	str	r3, [sp, #8]
 800b624:	32fe      	adds	r2, #254	; 0xfe
 800b626:	eb02 030b 	add.w	r3, r2, fp
 800b62a:	46d8      	mov	r8, fp
 800b62c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800b630:	9301      	str	r3, [sp, #4]
 800b632:	2830      	cmp	r0, #48	; 0x30
 800b634:	d0f7      	beq.n	800b626 <__gethex+0x1e>
 800b636:	f7ff ffd1 	bl	800b5dc <__hexdig_fun>
 800b63a:	4604      	mov	r4, r0
 800b63c:	2800      	cmp	r0, #0
 800b63e:	d138      	bne.n	800b6b2 <__gethex+0xaa>
 800b640:	49a7      	ldr	r1, [pc, #668]	; (800b8e0 <__gethex+0x2d8>)
 800b642:	2201      	movs	r2, #1
 800b644:	4640      	mov	r0, r8
 800b646:	f7ff ff27 	bl	800b498 <strncmp>
 800b64a:	4606      	mov	r6, r0
 800b64c:	2800      	cmp	r0, #0
 800b64e:	d169      	bne.n	800b724 <__gethex+0x11c>
 800b650:	f898 0001 	ldrb.w	r0, [r8, #1]
 800b654:	465d      	mov	r5, fp
 800b656:	f7ff ffc1 	bl	800b5dc <__hexdig_fun>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d064      	beq.n	800b728 <__gethex+0x120>
 800b65e:	465a      	mov	r2, fp
 800b660:	7810      	ldrb	r0, [r2, #0]
 800b662:	2830      	cmp	r0, #48	; 0x30
 800b664:	4690      	mov	r8, r2
 800b666:	f102 0201 	add.w	r2, r2, #1
 800b66a:	d0f9      	beq.n	800b660 <__gethex+0x58>
 800b66c:	f7ff ffb6 	bl	800b5dc <__hexdig_fun>
 800b670:	2301      	movs	r3, #1
 800b672:	fab0 f480 	clz	r4, r0
 800b676:	0964      	lsrs	r4, r4, #5
 800b678:	465e      	mov	r6, fp
 800b67a:	9301      	str	r3, [sp, #4]
 800b67c:	4642      	mov	r2, r8
 800b67e:	4615      	mov	r5, r2
 800b680:	3201      	adds	r2, #1
 800b682:	7828      	ldrb	r0, [r5, #0]
 800b684:	f7ff ffaa 	bl	800b5dc <__hexdig_fun>
 800b688:	2800      	cmp	r0, #0
 800b68a:	d1f8      	bne.n	800b67e <__gethex+0x76>
 800b68c:	4994      	ldr	r1, [pc, #592]	; (800b8e0 <__gethex+0x2d8>)
 800b68e:	2201      	movs	r2, #1
 800b690:	4628      	mov	r0, r5
 800b692:	f7ff ff01 	bl	800b498 <strncmp>
 800b696:	b978      	cbnz	r0, 800b6b8 <__gethex+0xb0>
 800b698:	b946      	cbnz	r6, 800b6ac <__gethex+0xa4>
 800b69a:	1c6e      	adds	r6, r5, #1
 800b69c:	4632      	mov	r2, r6
 800b69e:	4615      	mov	r5, r2
 800b6a0:	3201      	adds	r2, #1
 800b6a2:	7828      	ldrb	r0, [r5, #0]
 800b6a4:	f7ff ff9a 	bl	800b5dc <__hexdig_fun>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d1f8      	bne.n	800b69e <__gethex+0x96>
 800b6ac:	1b73      	subs	r3, r6, r5
 800b6ae:	009e      	lsls	r6, r3, #2
 800b6b0:	e004      	b.n	800b6bc <__gethex+0xb4>
 800b6b2:	2400      	movs	r4, #0
 800b6b4:	4626      	mov	r6, r4
 800b6b6:	e7e1      	b.n	800b67c <__gethex+0x74>
 800b6b8:	2e00      	cmp	r6, #0
 800b6ba:	d1f7      	bne.n	800b6ac <__gethex+0xa4>
 800b6bc:	782b      	ldrb	r3, [r5, #0]
 800b6be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b6c2:	2b50      	cmp	r3, #80	; 0x50
 800b6c4:	d13d      	bne.n	800b742 <__gethex+0x13a>
 800b6c6:	786b      	ldrb	r3, [r5, #1]
 800b6c8:	2b2b      	cmp	r3, #43	; 0x2b
 800b6ca:	d02f      	beq.n	800b72c <__gethex+0x124>
 800b6cc:	2b2d      	cmp	r3, #45	; 0x2d
 800b6ce:	d031      	beq.n	800b734 <__gethex+0x12c>
 800b6d0:	1c69      	adds	r1, r5, #1
 800b6d2:	f04f 0b00 	mov.w	fp, #0
 800b6d6:	7808      	ldrb	r0, [r1, #0]
 800b6d8:	f7ff ff80 	bl	800b5dc <__hexdig_fun>
 800b6dc:	1e42      	subs	r2, r0, #1
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	2a18      	cmp	r2, #24
 800b6e2:	d82e      	bhi.n	800b742 <__gethex+0x13a>
 800b6e4:	f1a0 0210 	sub.w	r2, r0, #16
 800b6e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b6ec:	f7ff ff76 	bl	800b5dc <__hexdig_fun>
 800b6f0:	f100 3cff 	add.w	ip, r0, #4294967295
 800b6f4:	fa5f fc8c 	uxtb.w	ip, ip
 800b6f8:	f1bc 0f18 	cmp.w	ip, #24
 800b6fc:	d91d      	bls.n	800b73a <__gethex+0x132>
 800b6fe:	f1bb 0f00 	cmp.w	fp, #0
 800b702:	d000      	beq.n	800b706 <__gethex+0xfe>
 800b704:	4252      	negs	r2, r2
 800b706:	4416      	add	r6, r2
 800b708:	f8ca 1000 	str.w	r1, [sl]
 800b70c:	b1dc      	cbz	r4, 800b746 <__gethex+0x13e>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	2b00      	cmp	r3, #0
 800b712:	bf14      	ite	ne
 800b714:	f04f 0800 	movne.w	r8, #0
 800b718:	f04f 0806 	moveq.w	r8, #6
 800b71c:	4640      	mov	r0, r8
 800b71e:	b005      	add	sp, #20
 800b720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b724:	4645      	mov	r5, r8
 800b726:	4626      	mov	r6, r4
 800b728:	2401      	movs	r4, #1
 800b72a:	e7c7      	b.n	800b6bc <__gethex+0xb4>
 800b72c:	f04f 0b00 	mov.w	fp, #0
 800b730:	1ca9      	adds	r1, r5, #2
 800b732:	e7d0      	b.n	800b6d6 <__gethex+0xce>
 800b734:	f04f 0b01 	mov.w	fp, #1
 800b738:	e7fa      	b.n	800b730 <__gethex+0x128>
 800b73a:	230a      	movs	r3, #10
 800b73c:	fb03 0002 	mla	r0, r3, r2, r0
 800b740:	e7d0      	b.n	800b6e4 <__gethex+0xdc>
 800b742:	4629      	mov	r1, r5
 800b744:	e7e0      	b.n	800b708 <__gethex+0x100>
 800b746:	eba5 0308 	sub.w	r3, r5, r8
 800b74a:	3b01      	subs	r3, #1
 800b74c:	4621      	mov	r1, r4
 800b74e:	2b07      	cmp	r3, #7
 800b750:	dc0a      	bgt.n	800b768 <__gethex+0x160>
 800b752:	4648      	mov	r0, r9
 800b754:	f7fd ff62 	bl	800961c <_Balloc>
 800b758:	4604      	mov	r4, r0
 800b75a:	b940      	cbnz	r0, 800b76e <__gethex+0x166>
 800b75c:	4b61      	ldr	r3, [pc, #388]	; (800b8e4 <__gethex+0x2dc>)
 800b75e:	4602      	mov	r2, r0
 800b760:	21e4      	movs	r1, #228	; 0xe4
 800b762:	4861      	ldr	r0, [pc, #388]	; (800b8e8 <__gethex+0x2e0>)
 800b764:	f7ff feb4 	bl	800b4d0 <__assert_func>
 800b768:	3101      	adds	r1, #1
 800b76a:	105b      	asrs	r3, r3, #1
 800b76c:	e7ef      	b.n	800b74e <__gethex+0x146>
 800b76e:	f100 0a14 	add.w	sl, r0, #20
 800b772:	2300      	movs	r3, #0
 800b774:	495a      	ldr	r1, [pc, #360]	; (800b8e0 <__gethex+0x2d8>)
 800b776:	f8cd a004 	str.w	sl, [sp, #4]
 800b77a:	469b      	mov	fp, r3
 800b77c:	45a8      	cmp	r8, r5
 800b77e:	d342      	bcc.n	800b806 <__gethex+0x1fe>
 800b780:	9801      	ldr	r0, [sp, #4]
 800b782:	f840 bb04 	str.w	fp, [r0], #4
 800b786:	eba0 000a 	sub.w	r0, r0, sl
 800b78a:	1080      	asrs	r0, r0, #2
 800b78c:	6120      	str	r0, [r4, #16]
 800b78e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800b792:	4658      	mov	r0, fp
 800b794:	f7fe f834 	bl	8009800 <__hi0bits>
 800b798:	683d      	ldr	r5, [r7, #0]
 800b79a:	eba8 0000 	sub.w	r0, r8, r0
 800b79e:	42a8      	cmp	r0, r5
 800b7a0:	dd59      	ble.n	800b856 <__gethex+0x24e>
 800b7a2:	eba0 0805 	sub.w	r8, r0, r5
 800b7a6:	4641      	mov	r1, r8
 800b7a8:	4620      	mov	r0, r4
 800b7aa:	f7fe fbc3 	bl	8009f34 <__any_on>
 800b7ae:	4683      	mov	fp, r0
 800b7b0:	b1b8      	cbz	r0, 800b7e2 <__gethex+0x1da>
 800b7b2:	f108 33ff 	add.w	r3, r8, #4294967295
 800b7b6:	1159      	asrs	r1, r3, #5
 800b7b8:	f003 021f 	and.w	r2, r3, #31
 800b7bc:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800b7c0:	f04f 0b01 	mov.w	fp, #1
 800b7c4:	fa0b f202 	lsl.w	r2, fp, r2
 800b7c8:	420a      	tst	r2, r1
 800b7ca:	d00a      	beq.n	800b7e2 <__gethex+0x1da>
 800b7cc:	455b      	cmp	r3, fp
 800b7ce:	dd06      	ble.n	800b7de <__gethex+0x1d6>
 800b7d0:	f1a8 0102 	sub.w	r1, r8, #2
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7fe fbad 	bl	8009f34 <__any_on>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d138      	bne.n	800b850 <__gethex+0x248>
 800b7de:	f04f 0b02 	mov.w	fp, #2
 800b7e2:	4641      	mov	r1, r8
 800b7e4:	4620      	mov	r0, r4
 800b7e6:	f7ff fea7 	bl	800b538 <rshift>
 800b7ea:	4446      	add	r6, r8
 800b7ec:	68bb      	ldr	r3, [r7, #8]
 800b7ee:	42b3      	cmp	r3, r6
 800b7f0:	da41      	bge.n	800b876 <__gethex+0x26e>
 800b7f2:	4621      	mov	r1, r4
 800b7f4:	4648      	mov	r0, r9
 800b7f6:	f7fd ff51 	bl	800969c <_Bfree>
 800b7fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	6013      	str	r3, [r2, #0]
 800b800:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800b804:	e78a      	b.n	800b71c <__gethex+0x114>
 800b806:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800b80a:	2a2e      	cmp	r2, #46	; 0x2e
 800b80c:	d014      	beq.n	800b838 <__gethex+0x230>
 800b80e:	2b20      	cmp	r3, #32
 800b810:	d106      	bne.n	800b820 <__gethex+0x218>
 800b812:	9b01      	ldr	r3, [sp, #4]
 800b814:	f843 bb04 	str.w	fp, [r3], #4
 800b818:	f04f 0b00 	mov.w	fp, #0
 800b81c:	9301      	str	r3, [sp, #4]
 800b81e:	465b      	mov	r3, fp
 800b820:	7828      	ldrb	r0, [r5, #0]
 800b822:	9303      	str	r3, [sp, #12]
 800b824:	f7ff feda 	bl	800b5dc <__hexdig_fun>
 800b828:	9b03      	ldr	r3, [sp, #12]
 800b82a:	f000 000f 	and.w	r0, r0, #15
 800b82e:	4098      	lsls	r0, r3
 800b830:	ea4b 0b00 	orr.w	fp, fp, r0
 800b834:	3304      	adds	r3, #4
 800b836:	e7a1      	b.n	800b77c <__gethex+0x174>
 800b838:	45a8      	cmp	r8, r5
 800b83a:	d8e8      	bhi.n	800b80e <__gethex+0x206>
 800b83c:	2201      	movs	r2, #1
 800b83e:	4628      	mov	r0, r5
 800b840:	9303      	str	r3, [sp, #12]
 800b842:	f7ff fe29 	bl	800b498 <strncmp>
 800b846:	4926      	ldr	r1, [pc, #152]	; (800b8e0 <__gethex+0x2d8>)
 800b848:	9b03      	ldr	r3, [sp, #12]
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d1df      	bne.n	800b80e <__gethex+0x206>
 800b84e:	e795      	b.n	800b77c <__gethex+0x174>
 800b850:	f04f 0b03 	mov.w	fp, #3
 800b854:	e7c5      	b.n	800b7e2 <__gethex+0x1da>
 800b856:	da0b      	bge.n	800b870 <__gethex+0x268>
 800b858:	eba5 0800 	sub.w	r8, r5, r0
 800b85c:	4621      	mov	r1, r4
 800b85e:	4642      	mov	r2, r8
 800b860:	4648      	mov	r0, r9
 800b862:	f7fe f935 	bl	8009ad0 <__lshift>
 800b866:	eba6 0608 	sub.w	r6, r6, r8
 800b86a:	4604      	mov	r4, r0
 800b86c:	f100 0a14 	add.w	sl, r0, #20
 800b870:	f04f 0b00 	mov.w	fp, #0
 800b874:	e7ba      	b.n	800b7ec <__gethex+0x1e4>
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	42b3      	cmp	r3, r6
 800b87a:	dd73      	ble.n	800b964 <__gethex+0x35c>
 800b87c:	1b9e      	subs	r6, r3, r6
 800b87e:	42b5      	cmp	r5, r6
 800b880:	dc34      	bgt.n	800b8ec <__gethex+0x2e4>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	2b02      	cmp	r3, #2
 800b886:	d023      	beq.n	800b8d0 <__gethex+0x2c8>
 800b888:	2b03      	cmp	r3, #3
 800b88a:	d025      	beq.n	800b8d8 <__gethex+0x2d0>
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d115      	bne.n	800b8bc <__gethex+0x2b4>
 800b890:	42b5      	cmp	r5, r6
 800b892:	d113      	bne.n	800b8bc <__gethex+0x2b4>
 800b894:	2d01      	cmp	r5, #1
 800b896:	d10b      	bne.n	800b8b0 <__gethex+0x2a8>
 800b898:	9a02      	ldr	r2, [sp, #8]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	6013      	str	r3, [r2, #0]
 800b89e:	2301      	movs	r3, #1
 800b8a0:	6123      	str	r3, [r4, #16]
 800b8a2:	f8ca 3000 	str.w	r3, [sl]
 800b8a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b8a8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800b8ac:	601c      	str	r4, [r3, #0]
 800b8ae:	e735      	b.n	800b71c <__gethex+0x114>
 800b8b0:	1e69      	subs	r1, r5, #1
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7fe fb3e 	bl	8009f34 <__any_on>
 800b8b8:	2800      	cmp	r0, #0
 800b8ba:	d1ed      	bne.n	800b898 <__gethex+0x290>
 800b8bc:	4621      	mov	r1, r4
 800b8be:	4648      	mov	r0, r9
 800b8c0:	f7fd feec 	bl	800969c <_Bfree>
 800b8c4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	6013      	str	r3, [r2, #0]
 800b8ca:	f04f 0850 	mov.w	r8, #80	; 0x50
 800b8ce:	e725      	b.n	800b71c <__gethex+0x114>
 800b8d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d1f2      	bne.n	800b8bc <__gethex+0x2b4>
 800b8d6:	e7df      	b.n	800b898 <__gethex+0x290>
 800b8d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1dc      	bne.n	800b898 <__gethex+0x290>
 800b8de:	e7ed      	b.n	800b8bc <__gethex+0x2b4>
 800b8e0:	0801f18c 	.word	0x0801f18c
 800b8e4:	0801f021 	.word	0x0801f021
 800b8e8:	0801f336 	.word	0x0801f336
 800b8ec:	f106 38ff 	add.w	r8, r6, #4294967295
 800b8f0:	f1bb 0f00 	cmp.w	fp, #0
 800b8f4:	d133      	bne.n	800b95e <__gethex+0x356>
 800b8f6:	f1b8 0f00 	cmp.w	r8, #0
 800b8fa:	d004      	beq.n	800b906 <__gethex+0x2fe>
 800b8fc:	4641      	mov	r1, r8
 800b8fe:	4620      	mov	r0, r4
 800b900:	f7fe fb18 	bl	8009f34 <__any_on>
 800b904:	4683      	mov	fp, r0
 800b906:	ea4f 1268 	mov.w	r2, r8, asr #5
 800b90a:	2301      	movs	r3, #1
 800b90c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b910:	f008 081f 	and.w	r8, r8, #31
 800b914:	fa03 f308 	lsl.w	r3, r3, r8
 800b918:	4213      	tst	r3, r2
 800b91a:	4631      	mov	r1, r6
 800b91c:	4620      	mov	r0, r4
 800b91e:	bf18      	it	ne
 800b920:	f04b 0b02 	orrne.w	fp, fp, #2
 800b924:	1bad      	subs	r5, r5, r6
 800b926:	f7ff fe07 	bl	800b538 <rshift>
 800b92a:	687e      	ldr	r6, [r7, #4]
 800b92c:	f04f 0802 	mov.w	r8, #2
 800b930:	f1bb 0f00 	cmp.w	fp, #0
 800b934:	d04a      	beq.n	800b9cc <__gethex+0x3c4>
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	2b02      	cmp	r3, #2
 800b93a:	d016      	beq.n	800b96a <__gethex+0x362>
 800b93c:	2b03      	cmp	r3, #3
 800b93e:	d018      	beq.n	800b972 <__gethex+0x36a>
 800b940:	2b01      	cmp	r3, #1
 800b942:	d109      	bne.n	800b958 <__gethex+0x350>
 800b944:	f01b 0f02 	tst.w	fp, #2
 800b948:	d006      	beq.n	800b958 <__gethex+0x350>
 800b94a:	f8da 3000 	ldr.w	r3, [sl]
 800b94e:	ea4b 0b03 	orr.w	fp, fp, r3
 800b952:	f01b 0f01 	tst.w	fp, #1
 800b956:	d10f      	bne.n	800b978 <__gethex+0x370>
 800b958:	f048 0810 	orr.w	r8, r8, #16
 800b95c:	e036      	b.n	800b9cc <__gethex+0x3c4>
 800b95e:	f04f 0b01 	mov.w	fp, #1
 800b962:	e7d0      	b.n	800b906 <__gethex+0x2fe>
 800b964:	f04f 0801 	mov.w	r8, #1
 800b968:	e7e2      	b.n	800b930 <__gethex+0x328>
 800b96a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b96c:	f1c3 0301 	rsb	r3, r3, #1
 800b970:	930f      	str	r3, [sp, #60]	; 0x3c
 800b972:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b974:	2b00      	cmp	r3, #0
 800b976:	d0ef      	beq.n	800b958 <__gethex+0x350>
 800b978:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b97c:	f104 0214 	add.w	r2, r4, #20
 800b980:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800b984:	9301      	str	r3, [sp, #4]
 800b986:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800b98a:	2300      	movs	r3, #0
 800b98c:	4694      	mov	ip, r2
 800b98e:	f852 1b04 	ldr.w	r1, [r2], #4
 800b992:	f1b1 3fff 	cmp.w	r1, #4294967295
 800b996:	d01e      	beq.n	800b9d6 <__gethex+0x3ce>
 800b998:	3101      	adds	r1, #1
 800b99a:	f8cc 1000 	str.w	r1, [ip]
 800b99e:	f1b8 0f02 	cmp.w	r8, #2
 800b9a2:	f104 0214 	add.w	r2, r4, #20
 800b9a6:	d13d      	bne.n	800ba24 <__gethex+0x41c>
 800b9a8:	683b      	ldr	r3, [r7, #0]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	42ab      	cmp	r3, r5
 800b9ae:	d10b      	bne.n	800b9c8 <__gethex+0x3c0>
 800b9b0:	1169      	asrs	r1, r5, #5
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	f005 051f 	and.w	r5, r5, #31
 800b9b8:	fa03 f505 	lsl.w	r5, r3, r5
 800b9bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9c0:	421d      	tst	r5, r3
 800b9c2:	bf18      	it	ne
 800b9c4:	f04f 0801 	movne.w	r8, #1
 800b9c8:	f048 0820 	orr.w	r8, r8, #32
 800b9cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9ce:	601c      	str	r4, [r3, #0]
 800b9d0:	9b02      	ldr	r3, [sp, #8]
 800b9d2:	601e      	str	r6, [r3, #0]
 800b9d4:	e6a2      	b.n	800b71c <__gethex+0x114>
 800b9d6:	4290      	cmp	r0, r2
 800b9d8:	f842 3c04 	str.w	r3, [r2, #-4]
 800b9dc:	d8d6      	bhi.n	800b98c <__gethex+0x384>
 800b9de:	68a2      	ldr	r2, [r4, #8]
 800b9e0:	4593      	cmp	fp, r2
 800b9e2:	db17      	blt.n	800ba14 <__gethex+0x40c>
 800b9e4:	6861      	ldr	r1, [r4, #4]
 800b9e6:	4648      	mov	r0, r9
 800b9e8:	3101      	adds	r1, #1
 800b9ea:	f7fd fe17 	bl	800961c <_Balloc>
 800b9ee:	4682      	mov	sl, r0
 800b9f0:	b918      	cbnz	r0, 800b9fa <__gethex+0x3f2>
 800b9f2:	4b1b      	ldr	r3, [pc, #108]	; (800ba60 <__gethex+0x458>)
 800b9f4:	4602      	mov	r2, r0
 800b9f6:	2184      	movs	r1, #132	; 0x84
 800b9f8:	e6b3      	b.n	800b762 <__gethex+0x15a>
 800b9fa:	6922      	ldr	r2, [r4, #16]
 800b9fc:	3202      	adds	r2, #2
 800b9fe:	f104 010c 	add.w	r1, r4, #12
 800ba02:	0092      	lsls	r2, r2, #2
 800ba04:	300c      	adds	r0, #12
 800ba06:	f7fc ff2e 	bl	8008866 <memcpy>
 800ba0a:	4621      	mov	r1, r4
 800ba0c:	4648      	mov	r0, r9
 800ba0e:	f7fd fe45 	bl	800969c <_Bfree>
 800ba12:	4654      	mov	r4, sl
 800ba14:	6922      	ldr	r2, [r4, #16]
 800ba16:	1c51      	adds	r1, r2, #1
 800ba18:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800ba1c:	6121      	str	r1, [r4, #16]
 800ba1e:	2101      	movs	r1, #1
 800ba20:	6151      	str	r1, [r2, #20]
 800ba22:	e7bc      	b.n	800b99e <__gethex+0x396>
 800ba24:	6921      	ldr	r1, [r4, #16]
 800ba26:	4559      	cmp	r1, fp
 800ba28:	dd0b      	ble.n	800ba42 <__gethex+0x43a>
 800ba2a:	2101      	movs	r1, #1
 800ba2c:	4620      	mov	r0, r4
 800ba2e:	f7ff fd83 	bl	800b538 <rshift>
 800ba32:	68bb      	ldr	r3, [r7, #8]
 800ba34:	3601      	adds	r6, #1
 800ba36:	42b3      	cmp	r3, r6
 800ba38:	f6ff aedb 	blt.w	800b7f2 <__gethex+0x1ea>
 800ba3c:	f04f 0801 	mov.w	r8, #1
 800ba40:	e7c2      	b.n	800b9c8 <__gethex+0x3c0>
 800ba42:	f015 051f 	ands.w	r5, r5, #31
 800ba46:	d0f9      	beq.n	800ba3c <__gethex+0x434>
 800ba48:	9b01      	ldr	r3, [sp, #4]
 800ba4a:	441a      	add	r2, r3
 800ba4c:	f1c5 0520 	rsb	r5, r5, #32
 800ba50:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800ba54:	f7fd fed4 	bl	8009800 <__hi0bits>
 800ba58:	42a8      	cmp	r0, r5
 800ba5a:	dbe6      	blt.n	800ba2a <__gethex+0x422>
 800ba5c:	e7ee      	b.n	800ba3c <__gethex+0x434>
 800ba5e:	bf00      	nop
 800ba60:	0801f021 	.word	0x0801f021

0800ba64 <L_shift>:
 800ba64:	f1c2 0208 	rsb	r2, r2, #8
 800ba68:	0092      	lsls	r2, r2, #2
 800ba6a:	b570      	push	{r4, r5, r6, lr}
 800ba6c:	f1c2 0620 	rsb	r6, r2, #32
 800ba70:	6843      	ldr	r3, [r0, #4]
 800ba72:	6804      	ldr	r4, [r0, #0]
 800ba74:	fa03 f506 	lsl.w	r5, r3, r6
 800ba78:	432c      	orrs	r4, r5
 800ba7a:	40d3      	lsrs	r3, r2
 800ba7c:	6004      	str	r4, [r0, #0]
 800ba7e:	f840 3f04 	str.w	r3, [r0, #4]!
 800ba82:	4288      	cmp	r0, r1
 800ba84:	d3f4      	bcc.n	800ba70 <L_shift+0xc>
 800ba86:	bd70      	pop	{r4, r5, r6, pc}

0800ba88 <__match>:
 800ba88:	b530      	push	{r4, r5, lr}
 800ba8a:	6803      	ldr	r3, [r0, #0]
 800ba8c:	3301      	adds	r3, #1
 800ba8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba92:	b914      	cbnz	r4, 800ba9a <__match+0x12>
 800ba94:	6003      	str	r3, [r0, #0]
 800ba96:	2001      	movs	r0, #1
 800ba98:	bd30      	pop	{r4, r5, pc}
 800ba9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba9e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800baa2:	2d19      	cmp	r5, #25
 800baa4:	bf98      	it	ls
 800baa6:	3220      	addls	r2, #32
 800baa8:	42a2      	cmp	r2, r4
 800baaa:	d0f0      	beq.n	800ba8e <__match+0x6>
 800baac:	2000      	movs	r0, #0
 800baae:	e7f3      	b.n	800ba98 <__match+0x10>

0800bab0 <__hexnan>:
 800bab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bab4:	680b      	ldr	r3, [r1, #0]
 800bab6:	6801      	ldr	r1, [r0, #0]
 800bab8:	115e      	asrs	r6, r3, #5
 800baba:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800babe:	f013 031f 	ands.w	r3, r3, #31
 800bac2:	b087      	sub	sp, #28
 800bac4:	bf18      	it	ne
 800bac6:	3604      	addne	r6, #4
 800bac8:	2500      	movs	r5, #0
 800baca:	1f37      	subs	r7, r6, #4
 800bacc:	4682      	mov	sl, r0
 800bace:	4690      	mov	r8, r2
 800bad0:	9301      	str	r3, [sp, #4]
 800bad2:	f846 5c04 	str.w	r5, [r6, #-4]
 800bad6:	46b9      	mov	r9, r7
 800bad8:	463c      	mov	r4, r7
 800bada:	9502      	str	r5, [sp, #8]
 800badc:	46ab      	mov	fp, r5
 800bade:	784a      	ldrb	r2, [r1, #1]
 800bae0:	1c4b      	adds	r3, r1, #1
 800bae2:	9303      	str	r3, [sp, #12]
 800bae4:	b342      	cbz	r2, 800bb38 <__hexnan+0x88>
 800bae6:	4610      	mov	r0, r2
 800bae8:	9105      	str	r1, [sp, #20]
 800baea:	9204      	str	r2, [sp, #16]
 800baec:	f7ff fd76 	bl	800b5dc <__hexdig_fun>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d14f      	bne.n	800bb94 <__hexnan+0xe4>
 800baf4:	9a04      	ldr	r2, [sp, #16]
 800baf6:	9905      	ldr	r1, [sp, #20]
 800baf8:	2a20      	cmp	r2, #32
 800bafa:	d818      	bhi.n	800bb2e <__hexnan+0x7e>
 800bafc:	9b02      	ldr	r3, [sp, #8]
 800bafe:	459b      	cmp	fp, r3
 800bb00:	dd13      	ble.n	800bb2a <__hexnan+0x7a>
 800bb02:	454c      	cmp	r4, r9
 800bb04:	d206      	bcs.n	800bb14 <__hexnan+0x64>
 800bb06:	2d07      	cmp	r5, #7
 800bb08:	dc04      	bgt.n	800bb14 <__hexnan+0x64>
 800bb0a:	462a      	mov	r2, r5
 800bb0c:	4649      	mov	r1, r9
 800bb0e:	4620      	mov	r0, r4
 800bb10:	f7ff ffa8 	bl	800ba64 <L_shift>
 800bb14:	4544      	cmp	r4, r8
 800bb16:	d950      	bls.n	800bbba <__hexnan+0x10a>
 800bb18:	2300      	movs	r3, #0
 800bb1a:	f1a4 0904 	sub.w	r9, r4, #4
 800bb1e:	f844 3c04 	str.w	r3, [r4, #-4]
 800bb22:	f8cd b008 	str.w	fp, [sp, #8]
 800bb26:	464c      	mov	r4, r9
 800bb28:	461d      	mov	r5, r3
 800bb2a:	9903      	ldr	r1, [sp, #12]
 800bb2c:	e7d7      	b.n	800bade <__hexnan+0x2e>
 800bb2e:	2a29      	cmp	r2, #41	; 0x29
 800bb30:	d155      	bne.n	800bbde <__hexnan+0x12e>
 800bb32:	3102      	adds	r1, #2
 800bb34:	f8ca 1000 	str.w	r1, [sl]
 800bb38:	f1bb 0f00 	cmp.w	fp, #0
 800bb3c:	d04f      	beq.n	800bbde <__hexnan+0x12e>
 800bb3e:	454c      	cmp	r4, r9
 800bb40:	d206      	bcs.n	800bb50 <__hexnan+0xa0>
 800bb42:	2d07      	cmp	r5, #7
 800bb44:	dc04      	bgt.n	800bb50 <__hexnan+0xa0>
 800bb46:	462a      	mov	r2, r5
 800bb48:	4649      	mov	r1, r9
 800bb4a:	4620      	mov	r0, r4
 800bb4c:	f7ff ff8a 	bl	800ba64 <L_shift>
 800bb50:	4544      	cmp	r4, r8
 800bb52:	d934      	bls.n	800bbbe <__hexnan+0x10e>
 800bb54:	f1a8 0204 	sub.w	r2, r8, #4
 800bb58:	4623      	mov	r3, r4
 800bb5a:	f853 1b04 	ldr.w	r1, [r3], #4
 800bb5e:	f842 1f04 	str.w	r1, [r2, #4]!
 800bb62:	429f      	cmp	r7, r3
 800bb64:	d2f9      	bcs.n	800bb5a <__hexnan+0xaa>
 800bb66:	1b3b      	subs	r3, r7, r4
 800bb68:	f023 0303 	bic.w	r3, r3, #3
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	3e03      	subs	r6, #3
 800bb70:	3401      	adds	r4, #1
 800bb72:	42a6      	cmp	r6, r4
 800bb74:	bf38      	it	cc
 800bb76:	2304      	movcc	r3, #4
 800bb78:	4443      	add	r3, r8
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	f843 2b04 	str.w	r2, [r3], #4
 800bb80:	429f      	cmp	r7, r3
 800bb82:	d2fb      	bcs.n	800bb7c <__hexnan+0xcc>
 800bb84:	683b      	ldr	r3, [r7, #0]
 800bb86:	b91b      	cbnz	r3, 800bb90 <__hexnan+0xe0>
 800bb88:	4547      	cmp	r7, r8
 800bb8a:	d126      	bne.n	800bbda <__hexnan+0x12a>
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	603b      	str	r3, [r7, #0]
 800bb90:	2005      	movs	r0, #5
 800bb92:	e025      	b.n	800bbe0 <__hexnan+0x130>
 800bb94:	3501      	adds	r5, #1
 800bb96:	2d08      	cmp	r5, #8
 800bb98:	f10b 0b01 	add.w	fp, fp, #1
 800bb9c:	dd06      	ble.n	800bbac <__hexnan+0xfc>
 800bb9e:	4544      	cmp	r4, r8
 800bba0:	d9c3      	bls.n	800bb2a <__hexnan+0x7a>
 800bba2:	2300      	movs	r3, #0
 800bba4:	f844 3c04 	str.w	r3, [r4, #-4]
 800bba8:	2501      	movs	r5, #1
 800bbaa:	3c04      	subs	r4, #4
 800bbac:	6822      	ldr	r2, [r4, #0]
 800bbae:	f000 000f 	and.w	r0, r0, #15
 800bbb2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800bbb6:	6020      	str	r0, [r4, #0]
 800bbb8:	e7b7      	b.n	800bb2a <__hexnan+0x7a>
 800bbba:	2508      	movs	r5, #8
 800bbbc:	e7b5      	b.n	800bb2a <__hexnan+0x7a>
 800bbbe:	9b01      	ldr	r3, [sp, #4]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d0df      	beq.n	800bb84 <__hexnan+0xd4>
 800bbc4:	f1c3 0320 	rsb	r3, r3, #32
 800bbc8:	f04f 32ff 	mov.w	r2, #4294967295
 800bbcc:	40da      	lsrs	r2, r3
 800bbce:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800bbd2:	4013      	ands	r3, r2
 800bbd4:	f846 3c04 	str.w	r3, [r6, #-4]
 800bbd8:	e7d4      	b.n	800bb84 <__hexnan+0xd4>
 800bbda:	3f04      	subs	r7, #4
 800bbdc:	e7d2      	b.n	800bb84 <__hexnan+0xd4>
 800bbde:	2004      	movs	r0, #4
 800bbe0:	b007      	add	sp, #28
 800bbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bbe6 <__ascii_mbtowc>:
 800bbe6:	b082      	sub	sp, #8
 800bbe8:	b901      	cbnz	r1, 800bbec <__ascii_mbtowc+0x6>
 800bbea:	a901      	add	r1, sp, #4
 800bbec:	b142      	cbz	r2, 800bc00 <__ascii_mbtowc+0x1a>
 800bbee:	b14b      	cbz	r3, 800bc04 <__ascii_mbtowc+0x1e>
 800bbf0:	7813      	ldrb	r3, [r2, #0]
 800bbf2:	600b      	str	r3, [r1, #0]
 800bbf4:	7812      	ldrb	r2, [r2, #0]
 800bbf6:	1e10      	subs	r0, r2, #0
 800bbf8:	bf18      	it	ne
 800bbfa:	2001      	movne	r0, #1
 800bbfc:	b002      	add	sp, #8
 800bbfe:	4770      	bx	lr
 800bc00:	4610      	mov	r0, r2
 800bc02:	e7fb      	b.n	800bbfc <__ascii_mbtowc+0x16>
 800bc04:	f06f 0001 	mvn.w	r0, #1
 800bc08:	e7f8      	b.n	800bbfc <__ascii_mbtowc+0x16>

0800bc0a <_realloc_r>:
 800bc0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0e:	4680      	mov	r8, r0
 800bc10:	4614      	mov	r4, r2
 800bc12:	460e      	mov	r6, r1
 800bc14:	b921      	cbnz	r1, 800bc20 <_realloc_r+0x16>
 800bc16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc1a:	4611      	mov	r1, r2
 800bc1c:	f7fb bccc 	b.w	80075b8 <_malloc_r>
 800bc20:	b92a      	cbnz	r2, 800bc2e <_realloc_r+0x24>
 800bc22:	f7fd fcaf 	bl	8009584 <_free_r>
 800bc26:	4625      	mov	r5, r4
 800bc28:	4628      	mov	r0, r5
 800bc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2e:	f000 f8c6 	bl	800bdbe <_malloc_usable_size_r>
 800bc32:	4284      	cmp	r4, r0
 800bc34:	4607      	mov	r7, r0
 800bc36:	d802      	bhi.n	800bc3e <_realloc_r+0x34>
 800bc38:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc3c:	d812      	bhi.n	800bc64 <_realloc_r+0x5a>
 800bc3e:	4621      	mov	r1, r4
 800bc40:	4640      	mov	r0, r8
 800bc42:	f7fb fcb9 	bl	80075b8 <_malloc_r>
 800bc46:	4605      	mov	r5, r0
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d0ed      	beq.n	800bc28 <_realloc_r+0x1e>
 800bc4c:	42bc      	cmp	r4, r7
 800bc4e:	4622      	mov	r2, r4
 800bc50:	4631      	mov	r1, r6
 800bc52:	bf28      	it	cs
 800bc54:	463a      	movcs	r2, r7
 800bc56:	f7fc fe06 	bl	8008866 <memcpy>
 800bc5a:	4631      	mov	r1, r6
 800bc5c:	4640      	mov	r0, r8
 800bc5e:	f7fd fc91 	bl	8009584 <_free_r>
 800bc62:	e7e1      	b.n	800bc28 <_realloc_r+0x1e>
 800bc64:	4635      	mov	r5, r6
 800bc66:	e7df      	b.n	800bc28 <_realloc_r+0x1e>

0800bc68 <__ascii_wctomb>:
 800bc68:	b149      	cbz	r1, 800bc7e <__ascii_wctomb+0x16>
 800bc6a:	2aff      	cmp	r2, #255	; 0xff
 800bc6c:	bf85      	ittet	hi
 800bc6e:	238a      	movhi	r3, #138	; 0x8a
 800bc70:	6003      	strhi	r3, [r0, #0]
 800bc72:	700a      	strbls	r2, [r1, #0]
 800bc74:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc78:	bf98      	it	ls
 800bc7a:	2001      	movls	r0, #1
 800bc7c:	4770      	bx	lr
 800bc7e:	4608      	mov	r0, r1
 800bc80:	4770      	bx	lr
	...

0800bc84 <fiprintf>:
 800bc84:	b40e      	push	{r1, r2, r3}
 800bc86:	b503      	push	{r0, r1, lr}
 800bc88:	4601      	mov	r1, r0
 800bc8a:	ab03      	add	r3, sp, #12
 800bc8c:	4805      	ldr	r0, [pc, #20]	; (800bca4 <fiprintf+0x20>)
 800bc8e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc92:	6800      	ldr	r0, [r0, #0]
 800bc94:	9301      	str	r3, [sp, #4]
 800bc96:	f7ff f987 	bl	800afa8 <_vfiprintf_r>
 800bc9a:	b002      	add	sp, #8
 800bc9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800bca0:	b003      	add	sp, #12
 800bca2:	4770      	bx	lr
 800bca4:	2000006c 	.word	0x2000006c

0800bca8 <__swhatbuf_r>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	460c      	mov	r4, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	b096      	sub	sp, #88	; 0x58
 800bcb4:	4615      	mov	r5, r2
 800bcb6:	461e      	mov	r6, r3
 800bcb8:	da0d      	bge.n	800bcd6 <__swhatbuf_r+0x2e>
 800bcba:	89a3      	ldrh	r3, [r4, #12]
 800bcbc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800bcc0:	f04f 0100 	mov.w	r1, #0
 800bcc4:	bf0c      	ite	eq
 800bcc6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800bcca:	2340      	movne	r3, #64	; 0x40
 800bccc:	2000      	movs	r0, #0
 800bcce:	6031      	str	r1, [r6, #0]
 800bcd0:	602b      	str	r3, [r5, #0]
 800bcd2:	b016      	add	sp, #88	; 0x58
 800bcd4:	bd70      	pop	{r4, r5, r6, pc}
 800bcd6:	466a      	mov	r2, sp
 800bcd8:	f000 f848 	bl	800bd6c <_fstat_r>
 800bcdc:	2800      	cmp	r0, #0
 800bcde:	dbec      	blt.n	800bcba <__swhatbuf_r+0x12>
 800bce0:	9901      	ldr	r1, [sp, #4]
 800bce2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800bce6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800bcea:	4259      	negs	r1, r3
 800bcec:	4159      	adcs	r1, r3
 800bcee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcf2:	e7eb      	b.n	800bccc <__swhatbuf_r+0x24>

0800bcf4 <__smakebuf_r>:
 800bcf4:	898b      	ldrh	r3, [r1, #12]
 800bcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcf8:	079d      	lsls	r5, r3, #30
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	d507      	bpl.n	800bd10 <__smakebuf_r+0x1c>
 800bd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	b002      	add	sp, #8
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	ab01      	add	r3, sp, #4
 800bd12:	466a      	mov	r2, sp
 800bd14:	f7ff ffc8 	bl	800bca8 <__swhatbuf_r>
 800bd18:	9900      	ldr	r1, [sp, #0]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7fb fc4b 	bl	80075b8 <_malloc_r>
 800bd22:	b948      	cbnz	r0, 800bd38 <__smakebuf_r+0x44>
 800bd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d4ef      	bmi.n	800bd0c <__smakebuf_r+0x18>
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	f043 0302 	orr.w	r3, r3, #2
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	e7e3      	b.n	800bd00 <__smakebuf_r+0xc>
 800bd38:	89a3      	ldrh	r3, [r4, #12]
 800bd3a:	6020      	str	r0, [r4, #0]
 800bd3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd40:	81a3      	strh	r3, [r4, #12]
 800bd42:	9b00      	ldr	r3, [sp, #0]
 800bd44:	6163      	str	r3, [r4, #20]
 800bd46:	9b01      	ldr	r3, [sp, #4]
 800bd48:	6120      	str	r0, [r4, #16]
 800bd4a:	b15b      	cbz	r3, 800bd64 <__smakebuf_r+0x70>
 800bd4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd50:	4630      	mov	r0, r6
 800bd52:	f000 f81d 	bl	800bd90 <_isatty_r>
 800bd56:	b128      	cbz	r0, 800bd64 <__smakebuf_r+0x70>
 800bd58:	89a3      	ldrh	r3, [r4, #12]
 800bd5a:	f023 0303 	bic.w	r3, r3, #3
 800bd5e:	f043 0301 	orr.w	r3, r3, #1
 800bd62:	81a3      	strh	r3, [r4, #12]
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	431d      	orrs	r5, r3
 800bd68:	81a5      	strh	r5, [r4, #12]
 800bd6a:	e7cf      	b.n	800bd0c <__smakebuf_r+0x18>

0800bd6c <_fstat_r>:
 800bd6c:	b538      	push	{r3, r4, r5, lr}
 800bd6e:	4d07      	ldr	r5, [pc, #28]	; (800bd8c <_fstat_r+0x20>)
 800bd70:	2300      	movs	r3, #0
 800bd72:	4604      	mov	r4, r0
 800bd74:	4608      	mov	r0, r1
 800bd76:	4611      	mov	r1, r2
 800bd78:	602b      	str	r3, [r5, #0]
 800bd7a:	f7f5 feb6 	bl	8001aea <_fstat>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d102      	bne.n	800bd88 <_fstat_r+0x1c>
 800bd82:	682b      	ldr	r3, [r5, #0]
 800bd84:	b103      	cbz	r3, 800bd88 <_fstat_r+0x1c>
 800bd86:	6023      	str	r3, [r4, #0]
 800bd88:	bd38      	pop	{r3, r4, r5, pc}
 800bd8a:	bf00      	nop
 800bd8c:	20006da8 	.word	0x20006da8

0800bd90 <_isatty_r>:
 800bd90:	b538      	push	{r3, r4, r5, lr}
 800bd92:	4d06      	ldr	r5, [pc, #24]	; (800bdac <_isatty_r+0x1c>)
 800bd94:	2300      	movs	r3, #0
 800bd96:	4604      	mov	r4, r0
 800bd98:	4608      	mov	r0, r1
 800bd9a:	602b      	str	r3, [r5, #0]
 800bd9c:	f7f5 feb5 	bl	8001b0a <_isatty>
 800bda0:	1c43      	adds	r3, r0, #1
 800bda2:	d102      	bne.n	800bdaa <_isatty_r+0x1a>
 800bda4:	682b      	ldr	r3, [r5, #0]
 800bda6:	b103      	cbz	r3, 800bdaa <_isatty_r+0x1a>
 800bda8:	6023      	str	r3, [r4, #0]
 800bdaa:	bd38      	pop	{r3, r4, r5, pc}
 800bdac:	20006da8 	.word	0x20006da8

0800bdb0 <abort>:
 800bdb0:	b508      	push	{r3, lr}
 800bdb2:	2006      	movs	r0, #6
 800bdb4:	f000 f834 	bl	800be20 <raise>
 800bdb8:	2001      	movs	r0, #1
 800bdba:	f7f5 fe63 	bl	8001a84 <_exit>

0800bdbe <_malloc_usable_size_r>:
 800bdbe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdc2:	1f18      	subs	r0, r3, #4
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	bfbc      	itt	lt
 800bdc8:	580b      	ldrlt	r3, [r1, r0]
 800bdca:	18c0      	addlt	r0, r0, r3
 800bdcc:	4770      	bx	lr

0800bdce <_raise_r>:
 800bdce:	291f      	cmp	r1, #31
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	d904      	bls.n	800bde2 <_raise_r+0x14>
 800bdd8:	2316      	movs	r3, #22
 800bdda:	6003      	str	r3, [r0, #0]
 800bddc:	f04f 30ff 	mov.w	r0, #4294967295
 800bde0:	bd38      	pop	{r3, r4, r5, pc}
 800bde2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800bde4:	b112      	cbz	r2, 800bdec <_raise_r+0x1e>
 800bde6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bdea:	b94b      	cbnz	r3, 800be00 <_raise_r+0x32>
 800bdec:	4620      	mov	r0, r4
 800bdee:	f000 f831 	bl	800be54 <_getpid_r>
 800bdf2:	462a      	mov	r2, r5
 800bdf4:	4601      	mov	r1, r0
 800bdf6:	4620      	mov	r0, r4
 800bdf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bdfc:	f000 b818 	b.w	800be30 <_kill_r>
 800be00:	2b01      	cmp	r3, #1
 800be02:	d00a      	beq.n	800be1a <_raise_r+0x4c>
 800be04:	1c59      	adds	r1, r3, #1
 800be06:	d103      	bne.n	800be10 <_raise_r+0x42>
 800be08:	2316      	movs	r3, #22
 800be0a:	6003      	str	r3, [r0, #0]
 800be0c:	2001      	movs	r0, #1
 800be0e:	e7e7      	b.n	800bde0 <_raise_r+0x12>
 800be10:	2400      	movs	r4, #0
 800be12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be16:	4628      	mov	r0, r5
 800be18:	4798      	blx	r3
 800be1a:	2000      	movs	r0, #0
 800be1c:	e7e0      	b.n	800bde0 <_raise_r+0x12>
	...

0800be20 <raise>:
 800be20:	4b02      	ldr	r3, [pc, #8]	; (800be2c <raise+0xc>)
 800be22:	4601      	mov	r1, r0
 800be24:	6818      	ldr	r0, [r3, #0]
 800be26:	f7ff bfd2 	b.w	800bdce <_raise_r>
 800be2a:	bf00      	nop
 800be2c:	2000006c 	.word	0x2000006c

0800be30 <_kill_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	4d07      	ldr	r5, [pc, #28]	; (800be50 <_kill_r+0x20>)
 800be34:	2300      	movs	r3, #0
 800be36:	4604      	mov	r4, r0
 800be38:	4608      	mov	r0, r1
 800be3a:	4611      	mov	r1, r2
 800be3c:	602b      	str	r3, [r5, #0]
 800be3e:	f7f5 fe11 	bl	8001a64 <_kill>
 800be42:	1c43      	adds	r3, r0, #1
 800be44:	d102      	bne.n	800be4c <_kill_r+0x1c>
 800be46:	682b      	ldr	r3, [r5, #0]
 800be48:	b103      	cbz	r3, 800be4c <_kill_r+0x1c>
 800be4a:	6023      	str	r3, [r4, #0]
 800be4c:	bd38      	pop	{r3, r4, r5, pc}
 800be4e:	bf00      	nop
 800be50:	20006da8 	.word	0x20006da8

0800be54 <_getpid_r>:
 800be54:	f7f5 bdfe 	b.w	8001a54 <_getpid>

0800be58 <sqrtf>:
 800be58:	b508      	push	{r3, lr}
 800be5a:	ed2d 8b02 	vpush	{d8}
 800be5e:	eeb0 8a40 	vmov.f32	s16, s0
 800be62:	f000 f817 	bl	800be94 <__ieee754_sqrtf>
 800be66:	eeb4 8a48 	vcmp.f32	s16, s16
 800be6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be6e:	d60c      	bvs.n	800be8a <sqrtf+0x32>
 800be70:	eddf 8a07 	vldr	s17, [pc, #28]	; 800be90 <sqrtf+0x38>
 800be74:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800be78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be7c:	d505      	bpl.n	800be8a <sqrtf+0x32>
 800be7e:	f7fc fcc5 	bl	800880c <__errno>
 800be82:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800be86:	2321      	movs	r3, #33	; 0x21
 800be88:	6003      	str	r3, [r0, #0]
 800be8a:	ecbd 8b02 	vpop	{d8}
 800be8e:	bd08      	pop	{r3, pc}
 800be90:	00000000 	.word	0x00000000

0800be94 <__ieee754_sqrtf>:
 800be94:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800be98:	4770      	bx	lr
	...

0800be9c <_init>:
 800be9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be9e:	bf00      	nop
 800bea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bea2:	bc08      	pop	{r3}
 800bea4:	469e      	mov	lr, r3
 800bea6:	4770      	bx	lr

0800bea8 <_fini>:
 800bea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800beaa:	bf00      	nop
 800beac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800beae:	bc08      	pop	{r3}
 800beb0:	469e      	mov	lr, r3
 800beb2:	4770      	bx	lr
