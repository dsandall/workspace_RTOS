
A5_Watchdog.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080020ec  080020ec  000120ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002134  08002134  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08002134  08002134  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002134  08002134  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002134  08002134  00012134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002138  08002138  00012138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800213c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000063c  20000060  0800219c  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000069c  0800219c  0002069c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012042  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002806  00000000  00000000  00032115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f8  00000000  00000000  00034920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0c  00000000  00000000  00035a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026db1  00000000  00000000  00036724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f4d  00000000  00000000  0005d4d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6439  00000000  00000000  0006f422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004758  00000000  00000000  0016585c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00169fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080020d4 	.word	0x080020d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	080020d4 	.word	0x080020d4

080001d0 <ADC3_IRQHandler>:
	DMA1_Channel3->CCR |= DMA_CCR_EN; //must be enabled after configuration

}


void ADC3_IRQHandler(void) {
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
//		GPIOA->ODR &= ~(1 << 5);//set low
//	}



	  ADC3->ISR |= ADC_ISR_EOS;
 80001d4:	4b26      	ldr	r3, [pc, #152]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001d6:	681b      	ldr	r3, [r3, #0]
 80001d8:	4a25      	ldr	r2, [pc, #148]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001da:	f043 0308 	orr.w	r3, r3, #8
 80001de:	6013      	str	r3, [r2, #0]
	  ADC3->ISR |= ADC_ISR_EOSMP;
 80001e0:	4b23      	ldr	r3, [pc, #140]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001e2:	681b      	ldr	r3, [r3, #0]
 80001e4:	4a22      	ldr	r2, [pc, #136]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001e6:	f043 0302 	orr.w	r3, r3, #2
 80001ea:	6013      	str	r3, [r2, #0]


	//For CCR2 interrupt mode
	if (ADC3->ISR & ADC_ISR_EOC){
 80001ec:	4b20      	ldr	r3, [pc, #128]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0304 	and.w	r3, r3, #4
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00d      	beq.n	8000214 <ADC3_IRQHandler+0x44>
		ADC3->ISR |= ADC_ISR_EOC; //clear flag
 80001f8:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <ADC3_IRQHandler+0xa0>)
 80001fe:	f043 0304 	orr.w	r3, r3, #4
 8000202:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 8000204:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000208:	695b      	ldr	r3, [r3, #20]
 800020a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800020e:	f083 0320 	eor.w	r3, r3, #32
 8000212:	6153      	str	r3, [r2, #20]
	}
	if (ADC3->ISR & ADC_ISR_ADRDY){
 8000214:	4b16      	ldr	r3, [pc, #88]	; (8000270 <ADC3_IRQHandler+0xa0>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f003 0301 	and.w	r3, r3, #1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d00d      	beq.n	800023c <ADC3_IRQHandler+0x6c>
		ADC3->ISR |= ADC_ISR_ADRDY; //clear flag
 8000220:	4b13      	ldr	r3, [pc, #76]	; (8000270 <ADC3_IRQHandler+0xa0>)
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <ADC3_IRQHandler+0xa0>)
 8000226:	f043 0301 	orr.w	r3, r3, #1
 800022a:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 800022c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000230:	695b      	ldr	r3, [r3, #20]
 8000232:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000236:	f083 0320 	eor.w	r3, r3, #32
 800023a:	6153      	str	r3, [r2, #20]
	}
	if (ADC3->ISR & ADC_ISR_OVR){
 800023c:	4b0c      	ldr	r3, [pc, #48]	; (8000270 <ADC3_IRQHandler+0xa0>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f003 0310 	and.w	r3, r3, #16
 8000244:	2b00      	cmp	r3, #0
 8000246:	d00d      	beq.n	8000264 <ADC3_IRQHandler+0x94>
		ADC3->ISR |= ADC_ISR_OVR; //clear flag
 8000248:	4b09      	ldr	r3, [pc, #36]	; (8000270 <ADC3_IRQHandler+0xa0>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	4a08      	ldr	r2, [pc, #32]	; (8000270 <ADC3_IRQHandler+0xa0>)
 800024e:	f043 0310 	orr.w	r3, r3, #16
 8000252:	6013      	str	r3, [r2, #0]
		GPIOA->ODR ^= (1 << 5); //toggle onboard LED
 8000254:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000258:	695b      	ldr	r3, [r3, #20]
 800025a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800025e:	f083 0320 	eor.w	r3, r3, #32
 8000262:	6153      	str	r3, [r2, #20]
	}


}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop
 8000270:	50040200 	.word	0x50040200

08000274 <main>:
int flag = 0;

uint32_t i = 20000000;

int main(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	HAL_Init();
 8000278:	f000 fa51 	bl	800071e <HAL_Init>
	SystemClock_Config();
 800027c:	f000 f8e4 	bl	8000448 <SystemClock_Config>
//	/printf("ljkasdljkasdlkj\n");
	//  void PortA_init(void);


	// Enable GPIOA clock
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 8000280:	4b33      	ldr	r3, [pc, #204]	; (8000350 <main+0xdc>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000284:	4a32      	ldr	r2, [pc, #200]	; (8000350 <main+0xdc>)
 8000286:	f043 0301 	orr.w	r3, r3, #1
 800028a:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Set PA5 as output
	GPIOA->MODER &= ~(0x3 << 5*2);
 800028c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000296:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800029a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (0x1 << 5*2);
 800029c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002aa:	6013      	str	r3, [r2, #0]
	GPIOA->ODR |= (GPIO_PIN_5);
 80002ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b0:	695b      	ldr	r3, [r3, #20]
 80002b2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b6:	f043 0320 	orr.w	r3, r3, #32
 80002ba:	6153      	str	r3, [r2, #20]



	// turn on clock to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 80002bc:	4b24      	ldr	r3, [pc, #144]	; (8000350 <main+0xdc>)
 80002be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80002c0:	4a23      	ldr	r2, [pc, #140]	; (8000350 <main+0xdc>)
 80002c2:	f043 0304 	orr.w	r3, r3, #4
 80002c6:	64d3      	str	r3, [r2, #76]	; 0x4c
	// Configure PC13 for user button input
	GPIOC->MODER &= ~(GPIO_MODER_MODE13);
 80002c8:	4b22      	ldr	r3, [pc, #136]	; (8000354 <main+0xe0>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a21      	ldr	r2, [pc, #132]	; (8000354 <main+0xe0>)
 80002ce:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002d2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (0b01<<26);
 80002d4:	4b1f      	ldr	r3, [pc, #124]	; (8000354 <main+0xe0>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1e      	ldr	r2, [pc, #120]	; (8000354 <main+0xe0>)
 80002da:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002de:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPD13);
 80002e0:	4b1c      	ldr	r3, [pc, #112]	; (8000354 <main+0xe0>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	4a1b      	ldr	r2, [pc, #108]	; (8000354 <main+0xe0>)
 80002e6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 80002ea:	60d3      	str	r3, [r2, #12]
	GPIOC->PUPDR |= (0b01<<26);
 80002ec:	4b19      	ldr	r3, [pc, #100]	; (8000354 <main+0xe0>)
 80002ee:	68db      	ldr	r3, [r3, #12]
 80002f0:	4a18      	ldr	r2, [pc, #96]	; (8000354 <main+0xe0>)
 80002f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80002f6:	60d3      	str	r3, [r2, #12]



	GPIOC->MODER &= ~(GPIO_MODER_MODE0);
 80002f8:	4b16      	ldr	r3, [pc, #88]	; (8000354 <main+0xe0>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a15      	ldr	r2, [pc, #84]	; (8000354 <main+0xe0>)
 80002fe:	f023 0303 	bic.w	r3, r3, #3
 8000302:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= 0b01<<0;
 8000304:	4b13      	ldr	r3, [pc, #76]	; (8000354 <main+0xe0>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a12      	ldr	r2, [pc, #72]	; (8000354 <main+0xe0>)
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	6013      	str	r3, [r2, #0]
//		}
//	}



	init_EXTI();
 8000310:	f000 f824 	bl	800035c <init_EXTI>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000314:	b662      	cpsie	i
}
 8000316:	bf00      	nop

	__enable_irq();

	while(1){
		if (i < 10){
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <main+0xe4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b09      	cmp	r3, #9
 800031e:	d808      	bhi.n	8000332 <main+0xbe>
			GPIOA->ODR &= ~(GPIO_PIN_5);
 8000320:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000324:	695b      	ldr	r3, [r3, #20]
 8000326:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800032a:	f023 0320 	bic.w	r3, r3, #32
 800032e:	6153      	str	r3, [r2, #20]
 8000330:	e7f2      	b.n	8000318 <main+0xa4>
		}else{
			GPIOA->ODR |= (GPIO_PIN_5);
 8000332:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000336:	695b      	ldr	r3, [r3, #20]
 8000338:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800033c:	f043 0320 	orr.w	r3, r3, #32
 8000340:	6153      	str	r3, [r2, #20]
			i--;
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <main+0xe4>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	3b01      	subs	r3, #1
 8000348:	4a03      	ldr	r2, [pc, #12]	; (8000358 <main+0xe4>)
 800034a:	6013      	str	r3, [r2, #0]
		if (i < 10){
 800034c:	e7e4      	b.n	8000318 <main+0xa4>
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000
 8000354:	48000800 	.word	0x48000800
 8000358:	20000000 	.word	0x20000000

0800035c <init_EXTI>:

void init_IWDG(){

}

void init_EXTI(){
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
	RCC->APB2ENR |= 0b1<<0; //enable SYSCFG clock
 8000360:	4b16      	ldr	r3, [pc, #88]	; (80003bc <init_EXTI+0x60>)
 8000362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000364:	4a15      	ldr	r2, [pc, #84]	; (80003bc <init_EXTI+0x60>)
 8000366:	f043 0301 	orr.w	r3, r3, #1
 800036a:	6613      	str	r3, [r2, #96]	; 0x60

	//turn on clock
	EXTI->IMR1 |= 0b1<<13; //enable interrupts for line 13 (line 0-15 dedicated to GPIO)
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <init_EXTI+0x64>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	4a13      	ldr	r2, [pc, #76]	; (80003c0 <init_EXTI+0x64>)
 8000372:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000376:	6013      	str	r3, [r2, #0]
	EXTI->FTSR1 |= 0b1<<13; //falling edge generates interrupt
 8000378:	4b11      	ldr	r3, [pc, #68]	; (80003c0 <init_EXTI+0x64>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	4a10      	ldr	r2, [pc, #64]	; (80003c0 <init_EXTI+0x64>)
 800037e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000382:	60d3      	str	r3, [r2, #12]
	SYSCFG->EXTICR[3] &= 0b1111<<4;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <init_EXTI+0x68>)
 8000386:	695b      	ldr	r3, [r3, #20]
 8000388:	4a0e      	ldr	r2, [pc, #56]	; (80003c4 <init_EXTI+0x68>)
 800038a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800038e:	6153      	str	r3, [r2, #20]
	SYSCFG->EXTICR[3] |= 0b0010<<4; //set port c for line 13
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <init_EXTI+0x68>)
 8000392:	695b      	ldr	r3, [r3, #20]
 8000394:	4a0b      	ldr	r2, [pc, #44]	; (80003c4 <init_EXTI+0x68>)
 8000396:	f043 0320 	orr.w	r3, r3, #32
 800039a:	6153      	str	r3, [r2, #20]

	//off by one error?
	NVIC->ISER[EXTI15_10_IRQn / 32] = (1 << (EXTI15_10_IRQn & 0x1F)); //enable interrupts in the NVIC
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <init_EXTI+0x6c>)
 800039e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80003a2:	605a      	str	r2, [r3, #4]

		EXTI->PR1 |= 1<<13; //clear interrupt
 80003a4:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <init_EXTI+0x64>)
 80003a6:	695b      	ldr	r3, [r3, #20]
 80003a8:	4a05      	ldr	r2, [pc, #20]	; (80003c0 <init_EXTI+0x64>)
 80003aa:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003ae:	6153      	str	r3, [r2, #20]
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010400 	.word	0x40010400
 80003c4:	40010000 	.word	0x40010000
 80003c8:	e000e100 	.word	0xe000e100

080003cc <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(){
 80003cc:	b580      	push	{r7, lr}
 80003ce:	af00      	add	r7, sp, #0
	GPIOC->BSRR |= 1;
 80003d0:	4b1a      	ldr	r3, [pc, #104]	; (800043c <EXTI15_10_IRQHandler+0x70>)
 80003d2:	699b      	ldr	r3, [r3, #24]
 80003d4:	4a19      	ldr	r2, [pc, #100]	; (800043c <EXTI15_10_IRQHandler+0x70>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6193      	str	r3, [r2, #24]
	if (EXTI->PR1 & 1<<13){
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <EXTI15_10_IRQHandler+0x74>)
 80003de:	695b      	ldr	r3, [r3, #20]
 80003e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	d00a      	beq.n	80003fe <EXTI15_10_IRQHandler+0x32>
		EXTI->PR1 |= 1<<13; //clear interrupt
 80003e8:	4b15      	ldr	r3, [pc, #84]	; (8000440 <EXTI15_10_IRQHandler+0x74>)
 80003ea:	695b      	ldr	r3, [r3, #20]
 80003ec:	4a14      	ldr	r2, [pc, #80]	; (8000440 <EXTI15_10_IRQHandler+0x74>)
 80003ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80003f2:	6153      	str	r3, [r2, #20]

		i = 20000;
 80003f4:	4b13      	ldr	r3, [pc, #76]	; (8000444 <EXTI15_10_IRQHandler+0x78>)
 80003f6:	f644 6220 	movw	r2, #20000	; 0x4e20
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	e016      	b.n	800042c <EXTI15_10_IRQHandler+0x60>
	} else {
		while(1){

			GPIOA->ODR |= (GPIO_PIN_5);
 80003fe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000402:	695b      	ldr	r3, [r3, #20]
 8000404:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000408:	f043 0320 	orr.w	r3, r3, #32
 800040c:	6153      	str	r3, [r2, #20]
			HAL_Delay(1);
 800040e:	2001      	movs	r0, #1
 8000410:	f000 f9aa 	bl	8000768 <HAL_Delay>
			GPIOA->ODR &= ~(GPIO_PIN_5);
 8000414:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800041e:	f023 0320 	bic.w	r3, r3, #32
 8000422:	6153      	str	r3, [r2, #20]
			HAL_Delay(1);
 8000424:	2001      	movs	r0, #1
 8000426:	f000 f99f 	bl	8000768 <HAL_Delay>
			GPIOA->ODR |= (GPIO_PIN_5);
 800042a:	e7e8      	b.n	80003fe <EXTI15_10_IRQHandler+0x32>

		}
	}
	GPIOC->BRR |= 1;
 800042c:	4b03      	ldr	r3, [pc, #12]	; (800043c <EXTI15_10_IRQHandler+0x70>)
 800042e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000430:	4a02      	ldr	r2, [pc, #8]	; (800043c <EXTI15_10_IRQHandler+0x70>)
 8000432:	f043 0301 	orr.w	r3, r3, #1
 8000436:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}
 800043c:	48000800 	.word	0x48000800
 8000440:	40010400 	.word	0x40010400
 8000444:	20000000 	.word	0x20000000

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b580      	push	{r7, lr}
 800044a:	b096      	sub	sp, #88	; 0x58
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	f107 0314 	add.w	r3, r7, #20
 8000452:	2244      	movs	r2, #68	; 0x44
 8000454:	2100      	movs	r1, #0
 8000456:	4618      	mov	r0, r3
 8000458:	f001 fe10 	bl	800207c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045c:	463b      	mov	r3, r7
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]
 8000468:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800046a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800046e:	f000 fa8f 	bl	8000990 <HAL_PWREx_ControlVoltageScaling>
 8000472:	4603      	mov	r3, r0
 8000474:	2b00      	cmp	r3, #0
 8000476:	d001      	beq.n	800047c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000478:	f000 f838 	bl	80004ec <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800047c:	2310      	movs	r3, #16
 800047e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000480:	2301      	movs	r3, #1
 8000482:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000484:	2300      	movs	r3, #0
 8000486:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000488:	2360      	movs	r3, #96	; 0x60
 800048a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800048c:	2302      	movs	r3, #2
 800048e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000490:	2301      	movs	r3, #1
 8000492:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000494:	2301      	movs	r3, #1
 8000496:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000498:	2328      	movs	r3, #40	; 0x28
 800049a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800049c:	2307      	movs	r3, #7
 800049e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80004a0:	2302      	movs	r3, #2
 80004a2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80004a4:	2302      	movs	r3, #2
 80004a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a8:	f107 0314 	add.w	r3, r7, #20
 80004ac:	4618      	mov	r0, r3
 80004ae:	f000 fac5 	bl	8000a3c <HAL_RCC_OscConfig>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80004b8:	f000 f818 	bl	80004ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004bc:	230f      	movs	r3, #15
 80004be:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004c0:	2303      	movs	r3, #3
 80004c2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	2300      	movs	r3, #0
 80004c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004cc:	2300      	movs	r3, #0
 80004ce:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80004d0:	463b      	mov	r3, r7
 80004d2:	2104      	movs	r1, #4
 80004d4:	4618      	mov	r0, r3
 80004d6:	f000 fe8d 	bl	80011f4 <HAL_RCC_ClockConfig>
 80004da:	4603      	mov	r3, r0
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d001      	beq.n	80004e4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80004e0:	f000 f804 	bl	80004ec <Error_Handler>
  }
}
 80004e4:	bf00      	nop
 80004e6:	3758      	adds	r7, #88	; 0x58
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}

080004ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f0:	b672      	cpsid	i
}
 80004f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <Error_Handler+0x8>
	...

080004f8 <TIM2_IRQHandler>:

volatile unsigned long ulHighFrequencyTimerTicks;		// run time stats

/* Timer 2 is used to collect runtime stats for FreeRTOS tasks*/
void TIM2_IRQHandler(void)
{
 80004f8:	b480      	push	{r7}
 80004fa:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);
 80004fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000500:	691b      	ldr	r3, [r3, #16]
 8000502:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000506:	f023 0301 	bic.w	r3, r3, #1
 800050a:	6113      	str	r3, [r2, #16]
	ulHighFrequencyTimerTicks++;
 800050c:	4b04      	ldr	r3, [pc, #16]	; (8000520 <TIM2_IRQHandler+0x28>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	3301      	adds	r3, #1
 8000512:	4a03      	ldr	r2, [pc, #12]	; (8000520 <TIM2_IRQHandler+0x28>)
 8000514:	6013      	str	r3, [r2, #0]
}
 8000516:	bf00      	nop
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	2000007c 	.word	0x2000007c

08000524 <getRunTimeCounterValue>:
{
    ulHighFrequencyTimerTicks = 0;
    RTOS_Stats_Timer_Init();
}

unsigned long getRunTimeCounterValue(void){
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <getRunTimeCounterValue+0x14>)
 800052a:	681b      	ldr	r3, [r3, #0]
}
 800052c:	4618      	mov	r0, r3
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000007c 	.word	0x2000007c

0800053c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000542:	4b11      	ldr	r3, [pc, #68]	; (8000588 <HAL_MspInit+0x4c>)
 8000544:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000546:	4a10      	ldr	r2, [pc, #64]	; (8000588 <HAL_MspInit+0x4c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6613      	str	r3, [r2, #96]	; 0x60
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <HAL_MspInit+0x4c>)
 8000550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	607b      	str	r3, [r7, #4]
 8000558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <HAL_MspInit+0x4c>)
 800055c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055e:	4a0a      	ldr	r2, [pc, #40]	; (8000588 <HAL_MspInit+0x4c>)
 8000560:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000564:	6593      	str	r3, [r2, #88]	; 0x58
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <HAL_MspInit+0x4c>)
 8000568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800056a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056e:	603b      	str	r3, [r7, #0]
 8000570:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000572:	2200      	movs	r2, #0
 8000574:	210f      	movs	r1, #15
 8000576:	f06f 0001 	mvn.w	r0, #1
 800057a:	f000 f9d1 	bl	8000920 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800057e:	bf00      	nop
 8000580:	3708      	adds	r7, #8
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000

0800058c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000594:	2300      	movs	r3, #0
 8000596:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800059a:	4b2e      	ldr	r3, [pc, #184]	; (8000654 <HAL_InitTick+0xc8>)
 800059c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800059e:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <HAL_InitTick+0xc8>)
 80005a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005a4:	6613      	str	r3, [r2, #96]	; 0x60
 80005a6:	4b2b      	ldr	r3, [pc, #172]	; (8000654 <HAL_InitTick+0xc8>)
 80005a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ae:	60bb      	str	r3, [r7, #8]
 80005b0:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80005b2:	f107 020c 	add.w	r2, r7, #12
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f000 ffc7 	bl	8001550 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 80005c2:	f000 ffaf 	bl	8001524 <HAL_RCC_GetPCLK2Freq>
 80005c6:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80005c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ca:	4a23      	ldr	r2, [pc, #140]	; (8000658 <HAL_InitTick+0xcc>)
 80005cc:	fba2 2303 	umull	r2, r3, r2, r3
 80005d0:	0c9b      	lsrs	r3, r3, #18
 80005d2:	3b01      	subs	r3, #1
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <HAL_InitTick+0xd0>)
 80005d8:	4a21      	ldr	r2, [pc, #132]	; (8000660 <HAL_InitTick+0xd4>)
 80005da:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 80005dc:	4b1f      	ldr	r3, [pc, #124]	; (800065c <HAL_InitTick+0xd0>)
 80005de:	f240 32e7 	movw	r2, #999	; 0x3e7
 80005e2:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 80005e4:	4a1d      	ldr	r2, [pc, #116]	; (800065c <HAL_InitTick+0xd0>)
 80005e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005e8:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <HAL_InitTick+0xd0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <HAL_InitTick+0xd0>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <HAL_InitTick+0xd0>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80005fc:	4817      	ldr	r0, [pc, #92]	; (800065c <HAL_InitTick+0xd0>)
 80005fe:	f001 f839 	bl	8001674 <HAL_TIM_Base_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000608:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800060c:	2b00      	cmp	r3, #0
 800060e:	d11b      	bne.n	8000648 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000610:	4812      	ldr	r0, [pc, #72]	; (800065c <HAL_InitTick+0xd0>)
 8000612:	f001 f891 	bl	8001738 <HAL_TIM_Base_Start_IT>
 8000616:	4603      	mov	r3, r0
 8000618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800061c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000620:	2b00      	cmp	r3, #0
 8000622:	d111      	bne.n	8000648 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000624:	2019      	movs	r0, #25
 8000626:	f000 f997 	bl	8000958 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	2b0f      	cmp	r3, #15
 800062e:	d808      	bhi.n	8000642 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000630:	2200      	movs	r2, #0
 8000632:	6879      	ldr	r1, [r7, #4]
 8000634:	2019      	movs	r0, #25
 8000636:	f000 f973 	bl	8000920 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800063a:	4a0a      	ldr	r2, [pc, #40]	; (8000664 <HAL_InitTick+0xd8>)
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	6013      	str	r3, [r2, #0]
 8000640:	e002      	b.n	8000648 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000648:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800064c:	4618      	mov	r0, r3
 800064e:	3730      	adds	r7, #48	; 0x30
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	431bde83 	.word	0x431bde83
 800065c:	20000080 	.word	0x20000080
 8000660:	40014400 	.word	0x40014400
 8000664:	20000008 	.word	0x20000008

08000668 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000668:	b480      	push	{r7}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800066c:	e7fe      	b.n	800066c <NMI_Handler+0x4>

0800066e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000672:	e7fe      	b.n	8000672 <HardFault_Handler+0x4>

08000674 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000678:	e7fe      	b.n	8000678 <MemManage_Handler+0x4>

0800067a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800067a:	b480      	push	{r7}
 800067c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800067e:	e7fe      	b.n	800067e <BusFault_Handler+0x4>

08000680 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000684:	e7fe      	b.n	8000684 <UsageFault_Handler+0x4>

08000686 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000686:	b480      	push	{r7}
 8000688:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr

08000694 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8000698:	4802      	ldr	r0, [pc, #8]	; (80006a4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800069a:	f001 f8bd 	bl	8001818 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800069e:	bf00      	nop
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000080 	.word	0x20000080

080006a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80006ac:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <SystemInit+0x20>)
 80006ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80006b2:	4a05      	ldr	r2, [pc, #20]	; (80006c8 <SystemInit+0x20>)
 80006b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80006bc:	bf00      	nop
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80006cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000704 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006d0:	f7ff ffea 	bl	80006a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006d4:	480c      	ldr	r0, [pc, #48]	; (8000708 <LoopForever+0x6>)
  ldr r1, =_edata
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <LoopForever+0xa>)
  ldr r2, =_sidata
 80006d8:	4a0d      	ldr	r2, [pc, #52]	; (8000710 <LoopForever+0xe>)
  movs r3, #0
 80006da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006dc:	e002      	b.n	80006e4 <LoopCopyDataInit>

080006de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006e2:	3304      	adds	r3, #4

080006e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006e8:	d3f9      	bcc.n	80006de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006ea:	4a0a      	ldr	r2, [pc, #40]	; (8000714 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006ec:	4c0a      	ldr	r4, [pc, #40]	; (8000718 <LoopForever+0x16>)
  movs r3, #0
 80006ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006f0:	e001      	b.n	80006f6 <LoopFillZerobss>

080006f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006f4:	3204      	adds	r2, #4

080006f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006f8:	d3fb      	bcc.n	80006f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80006fa:	f001 fcc7 	bl	800208c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80006fe:	f7ff fdb9 	bl	8000274 <main>

08000702 <LoopForever>:

LoopForever:
    b LoopForever
 8000702:	e7fe      	b.n	8000702 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000704:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000708:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800070c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000710:	0800213c 	.word	0x0800213c
  ldr r2, =_sbss
 8000714:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000718:	2000069c 	.word	0x2000069c

0800071c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800071c:	e7fe      	b.n	800071c <ADC1_2_IRQHandler>

0800071e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800071e:	b580      	push	{r7, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000724:	2300      	movs	r3, #0
 8000726:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000728:	2003      	movs	r0, #3
 800072a:	f000 f8ee 	bl	800090a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800072e:	200f      	movs	r0, #15
 8000730:	f7ff ff2c 	bl	800058c <HAL_InitTick>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d002      	beq.n	8000740 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800073a:	2301      	movs	r3, #1
 800073c:	71fb      	strb	r3, [r7, #7]
 800073e:	e001      	b.n	8000744 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000740:	f7ff fefc 	bl	800053c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000744:	79fb      	ldrb	r3, [r7, #7]
}
 8000746:	4618      	mov	r0, r3
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  return uwTick;
 8000754:	4b03      	ldr	r3, [pc, #12]	; (8000764 <HAL_GetTick+0x14>)
 8000756:	681b      	ldr	r3, [r3, #0]
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000cc 	.word	0x200000cc

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff ffee 	bl	8000750 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000782:	4b0a      	ldr	r3, [pc, #40]	; (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffde 	bl	8000750 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	2000000c 	.word	0x2000000c

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	; (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f2:	4770      	bx	lr
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	; (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800081e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000822:	2b00      	cmp	r3, #0
 8000824:	db0b      	blt.n	800083e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	f003 021f 	and.w	r2, r3, #31
 800082c:	4907      	ldr	r1, [pc, #28]	; (800084c <__NVIC_EnableIRQ+0x38>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	095b      	lsrs	r3, r3, #5
 8000834:	2001      	movs	r0, #1
 8000836:	fa00 f202 	lsl.w	r2, r0, r2
 800083a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	e000e100 	.word	0xe000e100

08000850 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000850:	b480      	push	{r7}
 8000852:	b083      	sub	sp, #12
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	6039      	str	r1, [r7, #0]
 800085a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800085c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000860:	2b00      	cmp	r3, #0
 8000862:	db0a      	blt.n	800087a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000864:	683b      	ldr	r3, [r7, #0]
 8000866:	b2da      	uxtb	r2, r3
 8000868:	490c      	ldr	r1, [pc, #48]	; (800089c <__NVIC_SetPriority+0x4c>)
 800086a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800086e:	0112      	lsls	r2, r2, #4
 8000870:	b2d2      	uxtb	r2, r2
 8000872:	440b      	add	r3, r1
 8000874:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000878:	e00a      	b.n	8000890 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800087a:	683b      	ldr	r3, [r7, #0]
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4908      	ldr	r1, [pc, #32]	; (80008a0 <__NVIC_SetPriority+0x50>)
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	f003 030f 	and.w	r3, r3, #15
 8000886:	3b04      	subs	r3, #4
 8000888:	0112      	lsls	r2, r2, #4
 800088a:	b2d2      	uxtb	r2, r2
 800088c:	440b      	add	r3, r1
 800088e:	761a      	strb	r2, [r3, #24]
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr
 800089c:	e000e100 	.word	0xe000e100
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b089      	sub	sp, #36	; 0x24
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	f003 0307 	and.w	r3, r3, #7
 80008b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008b8:	69fb      	ldr	r3, [r7, #28]
 80008ba:	f1c3 0307 	rsb	r3, r3, #7
 80008be:	2b04      	cmp	r3, #4
 80008c0:	bf28      	it	cs
 80008c2:	2304      	movcs	r3, #4
 80008c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80008c6:	69fb      	ldr	r3, [r7, #28]
 80008c8:	3304      	adds	r3, #4
 80008ca:	2b06      	cmp	r3, #6
 80008cc:	d902      	bls.n	80008d4 <NVIC_EncodePriority+0x30>
 80008ce:	69fb      	ldr	r3, [r7, #28]
 80008d0:	3b03      	subs	r3, #3
 80008d2:	e000      	b.n	80008d6 <NVIC_EncodePriority+0x32>
 80008d4:	2300      	movs	r3, #0
 80008d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008d8:	f04f 32ff 	mov.w	r2, #4294967295
 80008dc:	69bb      	ldr	r3, [r7, #24]
 80008de:	fa02 f303 	lsl.w	r3, r2, r3
 80008e2:	43da      	mvns	r2, r3
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	401a      	ands	r2, r3
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008ec:	f04f 31ff 	mov.w	r1, #4294967295
 80008f0:	697b      	ldr	r3, [r7, #20]
 80008f2:	fa01 f303 	lsl.w	r3, r1, r3
 80008f6:	43d9      	mvns	r1, r3
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008fc:	4313      	orrs	r3, r2
         );
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3724      	adds	r7, #36	; 0x24
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b082      	sub	sp, #8
 800090e:	af00      	add	r7, sp, #0
 8000910:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000912:	6878      	ldr	r0, [r7, #4]
 8000914:	f7ff ff4c 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}

08000920 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b086      	sub	sp, #24
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	60b9      	str	r1, [r7, #8]
 800092a:	607a      	str	r2, [r7, #4]
 800092c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800092e:	2300      	movs	r3, #0
 8000930:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000932:	f7ff ff61 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 8000936:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	68b9      	ldr	r1, [r7, #8]
 800093c:	6978      	ldr	r0, [r7, #20]
 800093e:	f7ff ffb1 	bl	80008a4 <NVIC_EncodePriority>
 8000942:	4602      	mov	r2, r0
 8000944:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f7ff ff80 	bl	8000850 <__NVIC_SetPriority>
}
 8000950:	bf00      	nop
 8000952:	3718      	adds	r7, #24
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
 800095e:	4603      	mov	r3, r0
 8000960:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff54 	bl	8000814 <__NVIC_EnableIRQ>
}
 800096c:	bf00      	nop
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}

08000974 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000978:	4b04      	ldr	r3, [pc, #16]	; (800098c <HAL_PWREx_GetVoltageRange+0x18>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40007000 	.word	0x40007000

08000990 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000990:	b480      	push	{r7}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800099e:	d130      	bne.n	8000a02 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80009a0:	4b23      	ldr	r3, [pc, #140]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80009ac:	d038      	beq.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80009ae:	4b20      	ldr	r3, [pc, #128]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80009b6:	4a1e      	ldr	r2, [pc, #120]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009b8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009bc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80009be:	4b1d      	ldr	r3, [pc, #116]	; (8000a34 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	2232      	movs	r2, #50	; 0x32
 80009c4:	fb02 f303 	mul.w	r3, r2, r3
 80009c8:	4a1b      	ldr	r2, [pc, #108]	; (8000a38 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80009ca:	fba2 2303 	umull	r2, r3, r2, r3
 80009ce:	0c9b      	lsrs	r3, r3, #18
 80009d0:	3301      	adds	r3, #1
 80009d2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009d4:	e002      	b.n	80009dc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	3b01      	subs	r3, #1
 80009da:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80009dc:	4b14      	ldr	r3, [pc, #80]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009de:	695b      	ldr	r3, [r3, #20]
 80009e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009e8:	d102      	bne.n	80009f0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d1f2      	bne.n	80009d6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80009f0:	4b0f      	ldr	r3, [pc, #60]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80009f2:	695b      	ldr	r3, [r3, #20]
 80009f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009fc:	d110      	bne.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80009fe:	2303      	movs	r3, #3
 8000a00:	e00f      	b.n	8000a22 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000a02:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000a0e:	d007      	beq.n	8000a20 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000a10:	4b07      	ldr	r3, [pc, #28]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000a18:	4a05      	ldr	r2, [pc, #20]	; (8000a30 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000a20:	2300      	movs	r3, #0
}
 8000a22:	4618      	mov	r0, r3
 8000a24:	3714      	adds	r7, #20
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40007000 	.word	0x40007000
 8000a34:	20000004 	.word	0x20000004
 8000a38:	431bde83 	.word	0x431bde83

08000a3c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b088      	sub	sp, #32
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d101      	bne.n	8000a4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	e3ca      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000a4e:	4b97      	ldr	r3, [pc, #604]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	f003 030c 	and.w	r3, r3, #12
 8000a56:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000a58:	4b94      	ldr	r3, [pc, #592]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	f003 0303 	and.w	r3, r3, #3
 8000a60:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	f000 80e4 	beq.w	8000c38 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000a70:	69bb      	ldr	r3, [r7, #24]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d007      	beq.n	8000a86 <HAL_RCC_OscConfig+0x4a>
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	2b0c      	cmp	r3, #12
 8000a7a:	f040 808b 	bne.w	8000b94 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	f040 8087 	bne.w	8000b94 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000a86:	4b89      	ldr	r3, [pc, #548]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	f003 0302 	and.w	r3, r3, #2
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d005      	beq.n	8000a9e <HAL_RCC_OscConfig+0x62>
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	699b      	ldr	r3, [r3, #24]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d101      	bne.n	8000a9e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	e3a2      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	6a1a      	ldr	r2, [r3, #32]
 8000aa2:	4b82      	ldr	r3, [pc, #520]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0308 	and.w	r3, r3, #8
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d004      	beq.n	8000ab8 <HAL_RCC_OscConfig+0x7c>
 8000aae:	4b7f      	ldr	r3, [pc, #508]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ab6:	e005      	b.n	8000ac4 <HAL_RCC_OscConfig+0x88>
 8000ab8:	4b7c      	ldr	r3, [pc, #496]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000aba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000abe:	091b      	lsrs	r3, r3, #4
 8000ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d223      	bcs.n	8000b10 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	6a1b      	ldr	r3, [r3, #32]
 8000acc:	4618      	mov	r0, r3
 8000ace:	f000 fd71 	bl	80015b4 <RCC_SetFlashLatencyFromMSIRange>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	e383      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000adc:	4b73      	ldr	r3, [pc, #460]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a72      	ldr	r2, [pc, #456]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000ae2:	f043 0308 	orr.w	r3, r3, #8
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b70      	ldr	r3, [pc, #448]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	6a1b      	ldr	r3, [r3, #32]
 8000af4:	496d      	ldr	r1, [pc, #436]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000af6:	4313      	orrs	r3, r2
 8000af8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000afa:	4b6c      	ldr	r3, [pc, #432]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	021b      	lsls	r3, r3, #8
 8000b08:	4968      	ldr	r1, [pc, #416]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b0a:	4313      	orrs	r3, r2
 8000b0c:	604b      	str	r3, [r1, #4]
 8000b0e:	e025      	b.n	8000b5c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000b10:	4b66      	ldr	r3, [pc, #408]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a65      	ldr	r2, [pc, #404]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b16:	f043 0308 	orr.w	r3, r3, #8
 8000b1a:	6013      	str	r3, [r2, #0]
 8000b1c:	4b63      	ldr	r3, [pc, #396]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	6a1b      	ldr	r3, [r3, #32]
 8000b28:	4960      	ldr	r1, [pc, #384]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b2a:	4313      	orrs	r3, r2
 8000b2c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b2e:	4b5f      	ldr	r3, [pc, #380]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	021b      	lsls	r3, r3, #8
 8000b3c:	495b      	ldr	r1, [pc, #364]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b3e:	4313      	orrs	r3, r2
 8000b40:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000b42:	69bb      	ldr	r3, [r7, #24]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d109      	bne.n	8000b5c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	6a1b      	ldr	r3, [r3, #32]
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f000 fd31 	bl	80015b4 <RCC_SetFlashLatencyFromMSIRange>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000b58:	2301      	movs	r3, #1
 8000b5a:	e343      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000b5c:	f000 fc4a 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 8000b60:	4602      	mov	r2, r0
 8000b62:	4b52      	ldr	r3, [pc, #328]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b64:	689b      	ldr	r3, [r3, #8]
 8000b66:	091b      	lsrs	r3, r3, #4
 8000b68:	f003 030f 	and.w	r3, r3, #15
 8000b6c:	4950      	ldr	r1, [pc, #320]	; (8000cb0 <HAL_RCC_OscConfig+0x274>)
 8000b6e:	5ccb      	ldrb	r3, [r1, r3]
 8000b70:	f003 031f 	and.w	r3, r3, #31
 8000b74:	fa22 f303 	lsr.w	r3, r2, r3
 8000b78:	4a4e      	ldr	r2, [pc, #312]	; (8000cb4 <HAL_RCC_OscConfig+0x278>)
 8000b7a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000b7c:	4b4e      	ldr	r3, [pc, #312]	; (8000cb8 <HAL_RCC_OscConfig+0x27c>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4618      	mov	r0, r3
 8000b82:	f7ff fd03 	bl	800058c <HAL_InitTick>
 8000b86:	4603      	mov	r3, r0
 8000b88:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d052      	beq.n	8000c36 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000b90:	7bfb      	ldrb	r3, [r7, #15]
 8000b92:	e327      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	699b      	ldr	r3, [r3, #24]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d032      	beq.n	8000c02 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000b9c:	4b43      	ldr	r3, [pc, #268]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a42      	ldr	r2, [pc, #264]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000ba2:	f043 0301 	orr.w	r3, r3, #1
 8000ba6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ba8:	f7ff fdd2 	bl	8000750 <HAL_GetTick>
 8000bac:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bae:	e008      	b.n	8000bc2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000bb0:	f7ff fdce 	bl	8000750 <HAL_GetTick>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	2b02      	cmp	r3, #2
 8000bbc:	d901      	bls.n	8000bc2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	e310      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f0      	beq.n	8000bb0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a36      	ldr	r2, [pc, #216]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bd4:	f043 0308 	orr.w	r3, r3, #8
 8000bd8:	6013      	str	r3, [r2, #0]
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6a1b      	ldr	r3, [r3, #32]
 8000be6:	4931      	ldr	r1, [pc, #196]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000bec:	4b2f      	ldr	r3, [pc, #188]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	69db      	ldr	r3, [r3, #28]
 8000bf8:	021b      	lsls	r3, r3, #8
 8000bfa:	492c      	ldr	r1, [pc, #176]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	604b      	str	r3, [r1, #4]
 8000c00:	e01a      	b.n	8000c38 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000c02:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a29      	ldr	r2, [pc, #164]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c08:	f023 0301 	bic.w	r3, r3, #1
 8000c0c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000c0e:	f7ff fd9f 	bl	8000750 <HAL_GetTick>
 8000c12:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c14:	e008      	b.n	8000c28 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000c16:	f7ff fd9b 	bl	8000750 <HAL_GetTick>
 8000c1a:	4602      	mov	r2, r0
 8000c1c:	693b      	ldr	r3, [r7, #16]
 8000c1e:	1ad3      	subs	r3, r2, r3
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	d901      	bls.n	8000c28 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000c24:	2303      	movs	r3, #3
 8000c26:	e2dd      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	f003 0302 	and.w	r3, r3, #2
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d1f0      	bne.n	8000c16 <HAL_RCC_OscConfig+0x1da>
 8000c34:	e000      	b.n	8000c38 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000c36:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0301 	and.w	r3, r3, #1
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d074      	beq.n	8000d2e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	2b08      	cmp	r3, #8
 8000c48:	d005      	beq.n	8000c56 <HAL_RCC_OscConfig+0x21a>
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	2b0c      	cmp	r3, #12
 8000c4e:	d10e      	bne.n	8000c6e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b03      	cmp	r3, #3
 8000c54:	d10b      	bne.n	8000c6e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c56:	4b15      	ldr	r3, [pc, #84]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d064      	beq.n	8000d2c <HAL_RCC_OscConfig+0x2f0>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d160      	bne.n	8000d2c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	e2ba      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c76:	d106      	bne.n	8000c86 <HAL_RCC_OscConfig+0x24a>
 8000c78:	4b0c      	ldr	r3, [pc, #48]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0b      	ldr	r2, [pc, #44]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e026      	b.n	8000cd4 <HAL_RCC_OscConfig+0x298>
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c8e:	d115      	bne.n	8000cbc <HAL_RCC_OscConfig+0x280>
 8000c90:	4b06      	ldr	r3, [pc, #24]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c9a:	6013      	str	r3, [r2, #0]
 8000c9c:	4b03      	ldr	r3, [pc, #12]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a02      	ldr	r2, [pc, #8]	; (8000cac <HAL_RCC_OscConfig+0x270>)
 8000ca2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca6:	6013      	str	r3, [r2, #0]
 8000ca8:	e014      	b.n	8000cd4 <HAL_RCC_OscConfig+0x298>
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	080020ec 	.word	0x080020ec
 8000cb4:	20000004 	.word	0x20000004
 8000cb8:	20000008 	.word	0x20000008
 8000cbc:	4ba0      	ldr	r3, [pc, #640]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a9f      	ldr	r2, [pc, #636]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc6:	6013      	str	r3, [r2, #0]
 8000cc8:	4b9d      	ldr	r3, [pc, #628]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	4a9c      	ldr	r2, [pc, #624]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d013      	beq.n	8000d04 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cdc:	f7ff fd38 	bl	8000750 <HAL_GetTick>
 8000ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000ce2:	e008      	b.n	8000cf6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ce4:	f7ff fd34 	bl	8000750 <HAL_GetTick>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	693b      	ldr	r3, [r7, #16]
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	2b64      	cmp	r3, #100	; 0x64
 8000cf0:	d901      	bls.n	8000cf6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000cf2:	2303      	movs	r3, #3
 8000cf4:	e276      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000cf6:	4b92      	ldr	r3, [pc, #584]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d0f0      	beq.n	8000ce4 <HAL_RCC_OscConfig+0x2a8>
 8000d02:	e014      	b.n	8000d2e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d04:	f7ff fd24 	bl	8000750 <HAL_GetTick>
 8000d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d0a:	e008      	b.n	8000d1e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d0c:	f7ff fd20 	bl	8000750 <HAL_GetTick>
 8000d10:	4602      	mov	r2, r0
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	1ad3      	subs	r3, r2, r3
 8000d16:	2b64      	cmp	r3, #100	; 0x64
 8000d18:	d901      	bls.n	8000d1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	e262      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000d1e:	4b88      	ldr	r3, [pc, #544]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1f0      	bne.n	8000d0c <HAL_RCC_OscConfig+0x2d0>
 8000d2a:	e000      	b.n	8000d2e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f003 0302 	and.w	r3, r3, #2
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d060      	beq.n	8000dfc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000d3a:	69bb      	ldr	r3, [r7, #24]
 8000d3c:	2b04      	cmp	r3, #4
 8000d3e:	d005      	beq.n	8000d4c <HAL_RCC_OscConfig+0x310>
 8000d40:	69bb      	ldr	r3, [r7, #24]
 8000d42:	2b0c      	cmp	r3, #12
 8000d44:	d119      	bne.n	8000d7a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	2b02      	cmp	r3, #2
 8000d4a:	d116      	bne.n	8000d7a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d4c:	4b7c      	ldr	r3, [pc, #496]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d005      	beq.n	8000d64 <HAL_RCC_OscConfig+0x328>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	68db      	ldr	r3, [r3, #12]
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d101      	bne.n	8000d64 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000d60:	2301      	movs	r3, #1
 8000d62:	e23f      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d64:	4b76      	ldr	r3, [pc, #472]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	691b      	ldr	r3, [r3, #16]
 8000d70:	061b      	lsls	r3, r3, #24
 8000d72:	4973      	ldr	r1, [pc, #460]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000d78:	e040      	b.n	8000dfc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d023      	beq.n	8000dca <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d82:	4b6f      	ldr	r3, [pc, #444]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a6e      	ldr	r2, [pc, #440]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d8e:	f7ff fcdf 	bl	8000750 <HAL_GetTick>
 8000d92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000d94:	e008      	b.n	8000da8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d96:	f7ff fcdb 	bl	8000750 <HAL_GetTick>
 8000d9a:	4602      	mov	r2, r0
 8000d9c:	693b      	ldr	r3, [r7, #16]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	2b02      	cmp	r3, #2
 8000da2:	d901      	bls.n	8000da8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000da4:	2303      	movs	r3, #3
 8000da6:	e21d      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000da8:	4b65      	ldr	r3, [pc, #404]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d0f0      	beq.n	8000d96 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000db4:	4b62      	ldr	r3, [pc, #392]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	691b      	ldr	r3, [r3, #16]
 8000dc0:	061b      	lsls	r3, r3, #24
 8000dc2:	495f      	ldr	r1, [pc, #380]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	604b      	str	r3, [r1, #4]
 8000dc8:	e018      	b.n	8000dfc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dca:	4b5d      	ldr	r3, [pc, #372]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a5c      	ldr	r2, [pc, #368]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000dd0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000dd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd6:	f7ff fcbb 	bl	8000750 <HAL_GetTick>
 8000dda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000ddc:	e008      	b.n	8000df0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dde:	f7ff fcb7 	bl	8000750 <HAL_GetTick>
 8000de2:	4602      	mov	r2, r0
 8000de4:	693b      	ldr	r3, [r7, #16]
 8000de6:	1ad3      	subs	r3, r2, r3
 8000de8:	2b02      	cmp	r3, #2
 8000dea:	d901      	bls.n	8000df0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000dec:	2303      	movs	r3, #3
 8000dee:	e1f9      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000df0:	4b53      	ldr	r3, [pc, #332]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d1f0      	bne.n	8000dde <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 0308 	and.w	r3, r3, #8
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d03c      	beq.n	8000e82 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d01c      	beq.n	8000e4a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e10:	4b4b      	ldr	r3, [pc, #300]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e16:	4a4a      	ldr	r2, [pc, #296]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e20:	f7ff fc96 	bl	8000750 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e28:	f7ff fc92 	bl	8000750 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e1d4      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000e3a:	4b41      	ldr	r3, [pc, #260]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0ef      	beq.n	8000e28 <HAL_RCC_OscConfig+0x3ec>
 8000e48:	e01b      	b.n	8000e82 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e4a:	4b3d      	ldr	r3, [pc, #244]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e50:	4a3b      	ldr	r2, [pc, #236]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e52:	f023 0301 	bic.w	r3, r3, #1
 8000e56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e5a:	f7ff fc79 	bl	8000750 <HAL_GetTick>
 8000e5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e60:	e008      	b.n	8000e74 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e62:	f7ff fc75 	bl	8000750 <HAL_GetTick>
 8000e66:	4602      	mov	r2, r0
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	2b02      	cmp	r3, #2
 8000e6e:	d901      	bls.n	8000e74 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000e70:	2303      	movs	r3, #3
 8000e72:	e1b7      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000e74:	4b32      	ldr	r3, [pc, #200]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e7a:	f003 0302 	and.w	r3, r3, #2
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1ef      	bne.n	8000e62 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f003 0304 	and.w	r3, r3, #4
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f000 80a6 	beq.w	8000fdc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e90:	2300      	movs	r3, #0
 8000e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000e94:	4b2a      	ldr	r3, [pc, #168]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d10d      	bne.n	8000ebc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea0:	4b27      	ldr	r3, [pc, #156]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea4:	4a26      	ldr	r2, [pc, #152]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000ea6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eaa:	6593      	str	r3, [r2, #88]	; 0x58
 8000eac:	4b24      	ldr	r3, [pc, #144]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000eae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	60bb      	str	r3, [r7, #8]
 8000eb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000ebc:	4b21      	ldr	r3, [pc, #132]	; (8000f44 <HAL_RCC_OscConfig+0x508>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d118      	bne.n	8000efa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000ec8:	4b1e      	ldr	r3, [pc, #120]	; (8000f44 <HAL_RCC_OscConfig+0x508>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a1d      	ldr	r2, [pc, #116]	; (8000f44 <HAL_RCC_OscConfig+0x508>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ed4:	f7ff fc3c 	bl	8000750 <HAL_GetTick>
 8000ed8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eda:	e008      	b.n	8000eee <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000edc:	f7ff fc38 	bl	8000750 <HAL_GetTick>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	1ad3      	subs	r3, r2, r3
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d901      	bls.n	8000eee <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000eea:	2303      	movs	r3, #3
 8000eec:	e17a      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000eee:	4b15      	ldr	r3, [pc, #84]	; (8000f44 <HAL_RCC_OscConfig+0x508>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d0f0      	beq.n	8000edc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	2b01      	cmp	r3, #1
 8000f00:	d108      	bne.n	8000f14 <HAL_RCC_OscConfig+0x4d8>
 8000f02:	4b0f      	ldr	r3, [pc, #60]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f0a:	f043 0301 	orr.w	r3, r3, #1
 8000f0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f12:	e029      	b.n	8000f68 <HAL_RCC_OscConfig+0x52c>
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	689b      	ldr	r3, [r3, #8]
 8000f18:	2b05      	cmp	r3, #5
 8000f1a:	d115      	bne.n	8000f48 <HAL_RCC_OscConfig+0x50c>
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f32:	4a03      	ldr	r2, [pc, #12]	; (8000f40 <HAL_RCC_OscConfig+0x504>)
 8000f34:	f043 0301 	orr.w	r3, r3, #1
 8000f38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f3c:	e014      	b.n	8000f68 <HAL_RCC_OscConfig+0x52c>
 8000f3e:	bf00      	nop
 8000f40:	40021000 	.word	0x40021000
 8000f44:	40007000 	.word	0x40007000
 8000f48:	4b9c      	ldr	r3, [pc, #624]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f4e:	4a9b      	ldr	r2, [pc, #620]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000f50:	f023 0301 	bic.w	r3, r3, #1
 8000f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000f58:	4b98      	ldr	r3, [pc, #608]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f5e:	4a97      	ldr	r2, [pc, #604]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d016      	beq.n	8000f9e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f70:	f7ff fbee 	bl	8000750 <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f76:	e00a      	b.n	8000f8e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f78:	f7ff fbea 	bl	8000750 <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e12a      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000f8e:	4b8b      	ldr	r3, [pc, #556]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000f94:	f003 0302 	and.w	r3, r3, #2
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d0ed      	beq.n	8000f78 <HAL_RCC_OscConfig+0x53c>
 8000f9c:	e015      	b.n	8000fca <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f9e:	f7ff fbd7 	bl	8000750 <HAL_GetTick>
 8000fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fa4:	e00a      	b.n	8000fbc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fa6:	f7ff fbd3 	bl	8000750 <HAL_GetTick>
 8000faa:	4602      	mov	r2, r0
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	1ad3      	subs	r3, r2, r3
 8000fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d901      	bls.n	8000fbc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000fb8:	2303      	movs	r3, #3
 8000fba:	e113      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000fbc:	4b7f      	ldr	r3, [pc, #508]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000fc2:	f003 0302 	and.w	r3, r3, #2
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d1ed      	bne.n	8000fa6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fca:	7ffb      	ldrb	r3, [r7, #31]
 8000fcc:	2b01      	cmp	r3, #1
 8000fce:	d105      	bne.n	8000fdc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fd0:	4b7a      	ldr	r3, [pc, #488]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd4:	4a79      	ldr	r2, [pc, #484]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	f000 80fe 	beq.w	80011e2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	f040 80d0 	bne.w	8001190 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000ff0:	4b72      	ldr	r3, [pc, #456]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8000ff2:	68db      	ldr	r3, [r3, #12]
 8000ff4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	f003 0203 	and.w	r2, r3, #3
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001000:	429a      	cmp	r2, r3
 8001002:	d130      	bne.n	8001066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001004:	697b      	ldr	r3, [r7, #20]
 8001006:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100e:	3b01      	subs	r3, #1
 8001010:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001012:	429a      	cmp	r2, r3
 8001014:	d127      	bne.n	8001066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001020:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001022:	429a      	cmp	r2, r3
 8001024:	d11f      	bne.n	8001066 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102c:	687a      	ldr	r2, [r7, #4]
 800102e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001030:	2a07      	cmp	r2, #7
 8001032:	bf14      	ite	ne
 8001034:	2201      	movne	r2, #1
 8001036:	2200      	moveq	r2, #0
 8001038:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800103a:	4293      	cmp	r3, r2
 800103c:	d113      	bne.n	8001066 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	085b      	lsrs	r3, r3, #1
 800104a:	3b01      	subs	r3, #1
 800104c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800104e:	429a      	cmp	r2, r3
 8001050:	d109      	bne.n	8001066 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	085b      	lsrs	r3, r3, #1
 800105e:	3b01      	subs	r3, #1
 8001060:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001062:	429a      	cmp	r2, r3
 8001064:	d06e      	beq.n	8001144 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001066:	69bb      	ldr	r3, [r7, #24]
 8001068:	2b0c      	cmp	r3, #12
 800106a:	d069      	beq.n	8001140 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800106c:	4b53      	ldr	r3, [pc, #332]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d105      	bne.n	8001084 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001078:	4b50      	ldr	r3, [pc, #320]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e0ad      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001088:	4b4c      	ldr	r3, [pc, #304]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a4b      	ldr	r2, [pc, #300]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800108e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001092:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001094:	f7ff fb5c 	bl	8000750 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800109c:	f7ff fb58 	bl	8000750 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e09a      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ae:	4b43      	ldr	r3, [pc, #268]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80010ba:	4b40      	ldr	r3, [pc, #256]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	4b40      	ldr	r3, [pc, #256]	; (80011c0 <HAL_RCC_OscConfig+0x784>)
 80010c0:	4013      	ands	r3, r2
 80010c2:	687a      	ldr	r2, [r7, #4]
 80010c4:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80010c6:	687a      	ldr	r2, [r7, #4]
 80010c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80010ca:	3a01      	subs	r2, #1
 80010cc:	0112      	lsls	r2, r2, #4
 80010ce:	4311      	orrs	r1, r2
 80010d0:	687a      	ldr	r2, [r7, #4]
 80010d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80010d4:	0212      	lsls	r2, r2, #8
 80010d6:	4311      	orrs	r1, r2
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80010dc:	0852      	lsrs	r2, r2, #1
 80010de:	3a01      	subs	r2, #1
 80010e0:	0552      	lsls	r2, r2, #21
 80010e2:	4311      	orrs	r1, r2
 80010e4:	687a      	ldr	r2, [r7, #4]
 80010e6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80010e8:	0852      	lsrs	r2, r2, #1
 80010ea:	3a01      	subs	r2, #1
 80010ec:	0652      	lsls	r2, r2, #25
 80010ee:	4311      	orrs	r1, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80010f4:	0912      	lsrs	r2, r2, #4
 80010f6:	0452      	lsls	r2, r2, #17
 80010f8:	430a      	orrs	r2, r1
 80010fa:	4930      	ldr	r1, [pc, #192]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a2d      	ldr	r2, [pc, #180]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	4a2a      	ldr	r2, [pc, #168]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001116:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001118:	f7ff fb1a 	bl	8000750 <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001120:	f7ff fb16 	bl	8000750 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e058      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	d0f0      	beq.n	8001120 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800113e:	e050      	b.n	80011e2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e04f      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001144:	4b1d      	ldr	r3, [pc, #116]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800114c:	2b00      	cmp	r3, #0
 800114e:	d148      	bne.n	80011e2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800115a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800115c:	4b17      	ldr	r3, [pc, #92]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	4a16      	ldr	r2, [pc, #88]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001166:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001168:	f7ff faf2 	bl	8000750 <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001170:	f7ff faee 	bl	8000750 <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b02      	cmp	r3, #2
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e030      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001182:	4b0e      	ldr	r3, [pc, #56]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d0f0      	beq.n	8001170 <HAL_RCC_OscConfig+0x734>
 800118e:	e028      	b.n	80011e2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b0c      	cmp	r3, #12
 8001194:	d023      	beq.n	80011de <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a08      	ldr	r2, [pc, #32]	; (80011bc <HAL_RCC_OscConfig+0x780>)
 800119c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80011a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011a2:	f7ff fad5 	bl	8000750 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011a8:	e00c      	b.n	80011c4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011aa:	f7ff fad1 	bl	8000750 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d905      	bls.n	80011c4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e013      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
 80011bc:	40021000 	.word	0x40021000
 80011c0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <HAL_RCC_OscConfig+0x7b0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d1ec      	bne.n	80011aa <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <HAL_RCC_OscConfig+0x7b0>)
 80011d2:	68da      	ldr	r2, [r3, #12]
 80011d4:	4905      	ldr	r1, [pc, #20]	; (80011ec <HAL_RCC_OscConfig+0x7b0>)
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_RCC_OscConfig+0x7b4>)
 80011d8:	4013      	ands	r3, r2
 80011da:	60cb      	str	r3, [r1, #12]
 80011dc:	e001      	b.n	80011e2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e000      	b.n	80011e4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40021000 	.word	0x40021000
 80011f0:	feeefffc 	.word	0xfeeefffc

080011f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
 80011fc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d101      	bne.n	8001208 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e0e7      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001208:	4b75      	ldr	r3, [pc, #468]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0307 	and.w	r3, r3, #7
 8001210:	683a      	ldr	r2, [r7, #0]
 8001212:	429a      	cmp	r2, r3
 8001214:	d910      	bls.n	8001238 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001216:	4b72      	ldr	r3, [pc, #456]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f023 0207 	bic.w	r2, r3, #7
 800121e:	4970      	ldr	r1, [pc, #448]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001226:	4b6e      	ldr	r3, [pc, #440]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0307 	and.w	r3, r3, #7
 800122e:	683a      	ldr	r2, [r7, #0]
 8001230:	429a      	cmp	r2, r3
 8001232:	d001      	beq.n	8001238 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0cf      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0302 	and.w	r3, r3, #2
 8001240:	2b00      	cmp	r3, #0
 8001242:	d010      	beq.n	8001266 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	689a      	ldr	r2, [r3, #8]
 8001248:	4b66      	ldr	r3, [pc, #408]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001250:	429a      	cmp	r2, r3
 8001252:	d908      	bls.n	8001266 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001254:	4b63      	ldr	r3, [pc, #396]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	4960      	ldr	r1, [pc, #384]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001262:	4313      	orrs	r3, r2
 8001264:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f003 0301 	and.w	r3, r3, #1
 800126e:	2b00      	cmp	r3, #0
 8001270:	d04c      	beq.n	800130c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d107      	bne.n	800128a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800127a:	4b5a      	ldr	r3, [pc, #360]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d121      	bne.n	80012ca <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e0a6      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b02      	cmp	r3, #2
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001292:	4b54      	ldr	r3, [pc, #336]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d115      	bne.n	80012ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e09a      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012aa:	4b4e      	ldr	r3, [pc, #312]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d109      	bne.n	80012ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e08e      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d101      	bne.n	80012ca <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e086      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80012ca:	4b46      	ldr	r3, [pc, #280]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f023 0203 	bic.w	r2, r3, #3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	4943      	ldr	r1, [pc, #268]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80012d8:	4313      	orrs	r3, r2
 80012da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80012dc:	f7ff fa38 	bl	8000750 <HAL_GetTick>
 80012e0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	e00a      	b.n	80012fa <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e4:	f7ff fa34 	bl	8000750 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e06e      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012fa:	4b3a      	ldr	r3, [pc, #232]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 020c 	and.w	r2, r3, #12
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	429a      	cmp	r2, r3
 800130a:	d1eb      	bne.n	80012e4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d010      	beq.n	800133a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689a      	ldr	r2, [r3, #8]
 800131c:	4b31      	ldr	r3, [pc, #196]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001324:	429a      	cmp	r2, r3
 8001326:	d208      	bcs.n	800133a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001328:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	492b      	ldr	r1, [pc, #172]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800133a:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d210      	bcs.n	800136a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001348:	4b25      	ldr	r3, [pc, #148]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f023 0207 	bic.w	r2, r3, #7
 8001350:	4923      	ldr	r1, [pc, #140]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	4313      	orrs	r3, r2
 8001356:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001358:	4b21      	ldr	r3, [pc, #132]	; (80013e0 <HAL_RCC_ClockConfig+0x1ec>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0307 	and.w	r3, r3, #7
 8001360:	683a      	ldr	r2, [r7, #0]
 8001362:	429a      	cmp	r2, r3
 8001364:	d001      	beq.n	800136a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e036      	b.n	80013d8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0304 	and.w	r3, r3, #4
 8001372:	2b00      	cmp	r3, #0
 8001374:	d008      	beq.n	8001388 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001376:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	4918      	ldr	r1, [pc, #96]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001384:	4313      	orrs	r3, r2
 8001386:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001394:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	00db      	lsls	r3, r3, #3
 80013a2:	4910      	ldr	r1, [pc, #64]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013a4:	4313      	orrs	r3, r2
 80013a6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013a8:	f000 f824 	bl	80013f4 <HAL_RCC_GetSysClockFreq>
 80013ac:	4602      	mov	r2, r0
 80013ae:	4b0d      	ldr	r3, [pc, #52]	; (80013e4 <HAL_RCC_ClockConfig+0x1f0>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 030f 	and.w	r3, r3, #15
 80013b8:	490b      	ldr	r1, [pc, #44]	; (80013e8 <HAL_RCC_ClockConfig+0x1f4>)
 80013ba:	5ccb      	ldrb	r3, [r1, r3]
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa22 f303 	lsr.w	r3, r2, r3
 80013c4:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_RCC_ClockConfig+0x1f8>)
 80013c6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80013c8:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_ClockConfig+0x1fc>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff f8dd 	bl	800058c <HAL_InitTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	72fb      	strb	r3, [r7, #11]

  return status;
 80013d6:	7afb      	ldrb	r3, [r7, #11]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000
 80013e4:	40021000 	.word	0x40021000
 80013e8:	080020ec 	.word	0x080020ec
 80013ec:	20000004 	.word	0x20000004
 80013f0:	20000008 	.word	0x20000008

080013f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b089      	sub	sp, #36	; 0x24
 80013f8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80013fa:	2300      	movs	r3, #0
 80013fc:	61fb      	str	r3, [r7, #28]
 80013fe:	2300      	movs	r3, #0
 8001400:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001402:	4b3e      	ldr	r3, [pc, #248]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f003 030c 	and.w	r3, r3, #12
 800140a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800140c:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d005      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x34>
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	2b0c      	cmp	r3, #12
 8001420:	d121      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	2b01      	cmp	r3, #1
 8001426:	d11e      	bne.n	8001466 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001428:	4b34      	ldr	r3, [pc, #208]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	2b00      	cmp	r3, #0
 8001432:	d107      	bne.n	8001444 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001434:	4b31      	ldr	r3, [pc, #196]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001436:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800143a:	0a1b      	lsrs	r3, r3, #8
 800143c:	f003 030f 	and.w	r3, r3, #15
 8001440:	61fb      	str	r3, [r7, #28]
 8001442:	e005      	b.n	8001450 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001444:	4b2d      	ldr	r3, [pc, #180]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	091b      	lsrs	r3, r3, #4
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001450:	4a2b      	ldr	r2, [pc, #172]	; (8001500 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001458:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800145a:	693b      	ldr	r3, [r7, #16]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d10d      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001460:	69fb      	ldr	r3, [r7, #28]
 8001462:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001464:	e00a      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d102      	bne.n	8001472 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800146c:	4b25      	ldr	r3, [pc, #148]	; (8001504 <HAL_RCC_GetSysClockFreq+0x110>)
 800146e:	61bb      	str	r3, [r7, #24]
 8001470:	e004      	b.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	2b08      	cmp	r3, #8
 8001476:	d101      	bne.n	800147c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <HAL_RCC_GetSysClockFreq+0x114>)
 800147a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	2b0c      	cmp	r3, #12
 8001480:	d134      	bne.n	80014ec <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001482:	4b1e      	ldr	r3, [pc, #120]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	f003 0303 	and.w	r3, r3, #3
 800148a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	2b02      	cmp	r3, #2
 8001490:	d003      	beq.n	800149a <HAL_RCC_GetSysClockFreq+0xa6>
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	2b03      	cmp	r3, #3
 8001496:	d003      	beq.n	80014a0 <HAL_RCC_GetSysClockFreq+0xac>
 8001498:	e005      	b.n	80014a6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800149a:	4b1a      	ldr	r3, [pc, #104]	; (8001504 <HAL_RCC_GetSysClockFreq+0x110>)
 800149c:	617b      	str	r3, [r7, #20]
      break;
 800149e:	e005      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80014a0:	4b19      	ldr	r3, [pc, #100]	; (8001508 <HAL_RCC_GetSysClockFreq+0x114>)
 80014a2:	617b      	str	r3, [r7, #20]
      break;
 80014a4:	e002      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	617b      	str	r3, [r7, #20]
      break;
 80014aa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80014ac:	4b13      	ldr	r3, [pc, #76]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	091b      	lsrs	r3, r3, #4
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	3301      	adds	r3, #1
 80014b8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80014ba:	4b10      	ldr	r3, [pc, #64]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 80014bc:	68db      	ldr	r3, [r3, #12]
 80014be:	0a1b      	lsrs	r3, r3, #8
 80014c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014c4:	697a      	ldr	r2, [r7, #20]
 80014c6:	fb03 f202 	mul.w	r2, r3, r2
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80014d0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80014d2:	4b0a      	ldr	r3, [pc, #40]	; (80014fc <HAL_RCC_GetSysClockFreq+0x108>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	0e5b      	lsrs	r3, r3, #25
 80014d8:	f003 0303 	and.w	r3, r3, #3
 80014dc:	3301      	adds	r3, #1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80014ec:	69bb      	ldr	r3, [r7, #24]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3724      	adds	r7, #36	; 0x24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	08002104 	.word	0x08002104
 8001504:	00f42400 	.word	0x00f42400
 8001508:	007a1200 	.word	0x007a1200

0800150c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_RCC_GetHCLKFreq+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
}
 8001514:	4618      	mov	r0, r3
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001528:	f7ff fff0 	bl	800150c <HAL_RCC_GetHCLKFreq>
 800152c:	4602      	mov	r2, r0
 800152e:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	0adb      	lsrs	r3, r3, #11
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	4904      	ldr	r1, [pc, #16]	; (800154c <HAL_RCC_GetPCLK2Freq+0x28>)
 800153a:	5ccb      	ldrb	r3, [r1, r3]
 800153c:	f003 031f 	and.w	r3, r3, #31
 8001540:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	080020fc 	.word	0x080020fc

08001550 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	220f      	movs	r2, #15
 800155e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001560:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_RCC_GetClockConfig+0x5c>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 0203 	and.w	r2, r3, #3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800156c:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_RCC_GetClockConfig+0x5c>)
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001578:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <HAL_RCC_GetClockConfig+0x5c>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001584:	4b09      	ldr	r3, [pc, #36]	; (80015ac <HAL_RCC_GetClockConfig+0x5c>)
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	08db      	lsrs	r3, r3, #3
 800158a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <HAL_RCC_GetClockConfig+0x60>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0207 	and.w	r2, r3, #7
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	601a      	str	r2, [r3, #0]
}
 800159e:	bf00      	nop
 80015a0:	370c      	adds	r7, #12
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	40021000 	.word	0x40021000
 80015b0:	40022000 	.word	0x40022000

080015b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b086      	sub	sp, #24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80015bc:	2300      	movs	r3, #0
 80015be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80015c0:	4b2a      	ldr	r3, [pc, #168]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d003      	beq.n	80015d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80015cc:	f7ff f9d2 	bl	8000974 <HAL_PWREx_GetVoltageRange>
 80015d0:	6178      	str	r0, [r7, #20]
 80015d2:	e014      	b.n	80015fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	4b25      	ldr	r3, [pc, #148]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a24      	ldr	r2, [pc, #144]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b22      	ldr	r3, [pc, #136]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80015ec:	f7ff f9c2 	bl	8000974 <HAL_PWREx_GetVoltageRange>
 80015f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80015f2:	4b1e      	ldr	r3, [pc, #120]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f6:	4a1d      	ldr	r2, [pc, #116]	; (800166c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80015f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015fc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001604:	d10b      	bne.n	800161e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2b80      	cmp	r3, #128	; 0x80
 800160a:	d919      	bls.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2ba0      	cmp	r3, #160	; 0xa0
 8001610:	d902      	bls.n	8001618 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001612:	2302      	movs	r3, #2
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	e013      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001618:	2301      	movs	r3, #1
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	e010      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	2b80      	cmp	r3, #128	; 0x80
 8001622:	d902      	bls.n	800162a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001624:	2303      	movs	r3, #3
 8001626:	613b      	str	r3, [r7, #16]
 8001628:	e00a      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b80      	cmp	r3, #128	; 0x80
 800162e:	d102      	bne.n	8001636 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001630:	2302      	movs	r3, #2
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	e004      	b.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b70      	cmp	r3, #112	; 0x70
 800163a:	d101      	bne.n	8001640 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800163c:	2301      	movs	r3, #1
 800163e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001640:	4b0b      	ldr	r3, [pc, #44]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f023 0207 	bic.w	r2, r3, #7
 8001648:	4909      	ldr	r1, [pc, #36]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4313      	orrs	r3, r2
 800164e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0307 	and.w	r3, r3, #7
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	429a      	cmp	r2, r3
 800165c:	d001      	beq.n	8001662 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e000      	b.n	8001664 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40021000 	.word	0x40021000
 8001670:	40022000 	.word	0x40022000

08001674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e049      	b.n	800171a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b00      	cmp	r3, #0
 8001690:	d106      	bne.n	80016a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2200      	movs	r2, #0
 8001696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f000 f841 	bl	8001722 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	2202      	movs	r2, #2
 80016a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3304      	adds	r3, #4
 80016b0:	4619      	mov	r1, r3
 80016b2:	4610      	mov	r0, r2
 80016b4:	f000 f9e4 	bl	8001a80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2201      	movs	r2, #1
 80016bc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	2201      	movs	r2, #1
 80016d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2201      	movs	r2, #1
 80016dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2201      	movs	r2, #1
 80016e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2201      	movs	r2, #1
 80016ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2201      	movs	r2, #1
 800170c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2201      	movs	r2, #1
 8001714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001738:	b480      	push	{r7}
 800173a:	b085      	sub	sp, #20
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001746:	b2db      	uxtb	r3, r3
 8001748:	2b01      	cmp	r3, #1
 800174a:	d001      	beq.n	8001750 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800174c:	2301      	movs	r3, #1
 800174e:	e04f      	b.n	80017f0 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2202      	movs	r2, #2
 8001754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	68da      	ldr	r2, [r3, #12]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f042 0201 	orr.w	r2, r2, #1
 8001766:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a23      	ldr	r2, [pc, #140]	; (80017fc <HAL_TIM_Base_Start_IT+0xc4>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d01d      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800177a:	d018      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1f      	ldr	r2, [pc, #124]	; (8001800 <HAL_TIM_Base_Start_IT+0xc8>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d013      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	4a1e      	ldr	r2, [pc, #120]	; (8001804 <HAL_TIM_Base_Start_IT+0xcc>)
 800178c:	4293      	cmp	r3, r2
 800178e:	d00e      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <HAL_TIM_Base_Start_IT+0xd0>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d009      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a1b      	ldr	r2, [pc, #108]	; (800180c <HAL_TIM_Base_Start_IT+0xd4>)
 80017a0:	4293      	cmp	r3, r2
 80017a2:	d004      	beq.n	80017ae <HAL_TIM_Base_Start_IT+0x76>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a19      	ldr	r2, [pc, #100]	; (8001810 <HAL_TIM_Base_Start_IT+0xd8>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d115      	bne.n	80017da <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	689a      	ldr	r2, [r3, #8]
 80017b4:	4b17      	ldr	r3, [pc, #92]	; (8001814 <HAL_TIM_Base_Start_IT+0xdc>)
 80017b6:	4013      	ands	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	2b06      	cmp	r3, #6
 80017be:	d015      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0xb4>
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c6:	d011      	beq.n	80017ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0201 	orr.w	r2, r2, #1
 80017d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017d8:	e008      	b.n	80017ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 0201 	orr.w	r2, r2, #1
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e000      	b.n	80017ee <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80017ec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40012c00 	.word	0x40012c00
 8001800:	40000400 	.word	0x40000400
 8001804:	40000800 	.word	0x40000800
 8001808:	40000c00 	.word	0x40000c00
 800180c:	40013400 	.word	0x40013400
 8001810:	40014000 	.word	0x40014000
 8001814:	00010007 	.word	0x00010007

08001818 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b084      	sub	sp, #16
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	68db      	ldr	r3, [r3, #12]
 8001826:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b00      	cmp	r3, #0
 8001838:	d020      	beq.n	800187c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d01b      	beq.n	800187c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f06f 0202 	mvn.w	r2, #2
 800184c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	699b      	ldr	r3, [r3, #24]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	2b00      	cmp	r3, #0
 8001860:	d003      	beq.n	800186a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001862:	6878      	ldr	r0, [r7, #4]
 8001864:	f000 f8ee 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8001868:	e005      	b.n	8001876 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 f8e0 	bl	8001a30 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f8f1 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	f003 0304 	and.w	r3, r3, #4
 8001882:	2b00      	cmp	r3, #0
 8001884:	d020      	beq.n	80018c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 0304 	and.w	r3, r3, #4
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01b      	beq.n	80018c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f06f 0204 	mvn.w	r2, #4
 8001898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2202      	movs	r2, #2
 800189e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	699b      	ldr	r3, [r3, #24]
 80018a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 f8c8 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 80018b4:	e005      	b.n	80018c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f000 f8ba 	bl	8001a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f8cb 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80018c8:	68bb      	ldr	r3, [r7, #8]
 80018ca:	f003 0308 	and.w	r3, r3, #8
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d020      	beq.n	8001914 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	f003 0308 	and.w	r3, r3, #8
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d01b      	beq.n	8001914 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f06f 0208 	mvn.w	r2, #8
 80018e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2204      	movs	r2, #4
 80018ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	69db      	ldr	r3, [r3, #28]
 80018f2:	f003 0303 	and.w	r3, r3, #3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d003      	beq.n	8001902 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80018fa:	6878      	ldr	r0, [r7, #4]
 80018fc:	f000 f8a2 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 8001900:	e005      	b.n	800190e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 f894 	bl	8001a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f000 f8a5 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001914:	68bb      	ldr	r3, [r7, #8]
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	2b00      	cmp	r3, #0
 800191c:	d020      	beq.n	8001960 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f003 0310 	and.w	r3, r3, #16
 8001924:	2b00      	cmp	r3, #0
 8001926:	d01b      	beq.n	8001960 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f06f 0210 	mvn.w	r2, #16
 8001930:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2208      	movs	r2, #8
 8001936:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	69db      	ldr	r3, [r3, #28]
 800193e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f000 f87c 	bl	8001a44 <HAL_TIM_IC_CaptureCallback>
 800194c:	e005      	b.n	800195a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f000 f86e 	bl	8001a30 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f000 f87f 	bl	8001a58 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d00c      	beq.n	8001984 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f003 0301 	and.w	r3, r3, #1
 8001970:	2b00      	cmp	r3, #0
 8001972:	d007      	beq.n	8001984 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f06f 0201 	mvn.w	r2, #1
 800197c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 f84c 	bl	8001a1c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800198a:	2b00      	cmp	r3, #0
 800198c:	d00c      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001994:	2b00      	cmp	r3, #0
 8001996:	d007      	beq.n	80019a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80019a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f910 	bl	8001bc8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d00c      	beq.n	80019cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d007      	beq.n	80019cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80019c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f000 f908 	bl	8001bdc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d00c      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d007      	beq.n	80019f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80019e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f000 f83e 	bl	8001a6c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	f003 0320 	and.w	r3, r3, #32
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d00c      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f003 0320 	and.w	r3, r3, #32
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d007      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f06f 0220 	mvn.w	r2, #32
 8001a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f8d0 	bl	8001bb4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001a14:	bf00      	nop
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8001a24:	bf00      	nop
 8001a26:	370c      	adds	r7, #12
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr

08001a30 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr

08001a80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a40      	ldr	r2, [pc, #256]	; (8001b94 <TIM_Base_SetConfig+0x114>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d013      	beq.n	8001ac0 <TIM_Base_SetConfig+0x40>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a9e:	d00f      	beq.n	8001ac0 <TIM_Base_SetConfig+0x40>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	4a3d      	ldr	r2, [pc, #244]	; (8001b98 <TIM_Base_SetConfig+0x118>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d00b      	beq.n	8001ac0 <TIM_Base_SetConfig+0x40>
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	4a3c      	ldr	r2, [pc, #240]	; (8001b9c <TIM_Base_SetConfig+0x11c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d007      	beq.n	8001ac0 <TIM_Base_SetConfig+0x40>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	4a3b      	ldr	r2, [pc, #236]	; (8001ba0 <TIM_Base_SetConfig+0x120>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d003      	beq.n	8001ac0 <TIM_Base_SetConfig+0x40>
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a3a      	ldr	r2, [pc, #232]	; (8001ba4 <TIM_Base_SetConfig+0x124>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d108      	bne.n	8001ad2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ac6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	68fa      	ldr	r2, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a2f      	ldr	r2, [pc, #188]	; (8001b94 <TIM_Base_SetConfig+0x114>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d01f      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d01b      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <TIM_Base_SetConfig+0x118>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d017      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a2b      	ldr	r2, [pc, #172]	; (8001b9c <TIM_Base_SetConfig+0x11c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d013      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <TIM_Base_SetConfig+0x120>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d00f      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a29      	ldr	r2, [pc, #164]	; (8001ba4 <TIM_Base_SetConfig+0x124>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d00b      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a28      	ldr	r2, [pc, #160]	; (8001ba8 <TIM_Base_SetConfig+0x128>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d007      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a27      	ldr	r2, [pc, #156]	; (8001bac <TIM_Base_SetConfig+0x12c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d003      	beq.n	8001b1a <TIM_Base_SetConfig+0x9a>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a26      	ldr	r2, [pc, #152]	; (8001bb0 <TIM_Base_SetConfig+0x130>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d108      	bne.n	8001b2c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	68fa      	ldr	r2, [r7, #12]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	68fa      	ldr	r2, [r7, #12]
 8001b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a10      	ldr	r2, [pc, #64]	; (8001b94 <TIM_Base_SetConfig+0x114>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d00f      	beq.n	8001b78 <TIM_Base_SetConfig+0xf8>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <TIM_Base_SetConfig+0x124>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d00b      	beq.n	8001b78 <TIM_Base_SetConfig+0xf8>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <TIM_Base_SetConfig+0x128>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d007      	beq.n	8001b78 <TIM_Base_SetConfig+0xf8>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <TIM_Base_SetConfig+0x12c>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d003      	beq.n	8001b78 <TIM_Base_SetConfig+0xf8>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0f      	ldr	r2, [pc, #60]	; (8001bb0 <TIM_Base_SetConfig+0x130>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d103      	bne.n	8001b80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	615a      	str	r2, [r3, #20]
}
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b90:	4770      	bx	lr
 8001b92:	bf00      	nop
 8001b94:	40012c00 	.word	0x40012c00
 8001b98:	40000400 	.word	0x40000400
 8001b9c:	40000800 	.word	0x40000800
 8001ba0:	40000c00 	.word	0x40000c00
 8001ba4:	40013400 	.word	0x40013400
 8001ba8:	40014000 	.word	0x40014000
 8001bac:	40014400 	.word	0x40014400
 8001bb0:	40014800 	.word	0x40014800

08001bb4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001bd0:	bf00      	nop
 8001bd2:	370c      	adds	r7, #12
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bda:	4770      	bx	lr

08001bdc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001be4:	bf00      	nop
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <SysTick_Handler+0x1c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001bf8:	f000 f9b2 	bl	8001f60 <xTaskGetSchedulerState>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b01      	cmp	r3, #1
 8001c00:	d001      	beq.n	8001c06 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001c02:	f000 fa19 	bl	8002038 <xPortSysTickHandler>
  }
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	e000e010 	.word	0xe000e010

08001c10 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c10:	b480      	push	{r7}
 8001c12:	b085      	sub	sp, #20
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
 8001c18:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	68fa      	ldr	r2, [r7, #12]
 8001c24:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	689a      	ldr	r2, [r3, #8]
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	689b      	ldr	r3, [r3, #8]
 8001c32:	683a      	ldr	r2, [r7, #0]
 8001c34:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	601a      	str	r2, [r3, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b085      	sub	sp, #20
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	687a      	ldr	r2, [r7, #4]
 8001c6c:	6892      	ldr	r2, [r2, #8]
 8001c6e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	6852      	ldr	r2, [r2, #4]
 8001c78:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d103      	bne.n	8001c8c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	689a      	ldr	r2, [r3, #8]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	1e5a      	subs	r2, r3, #1
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	681b      	ldr	r3, [r3, #0]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001cb6:	4b4f      	ldr	r3, [pc, #316]	; (8001df4 <xTaskIncrementTick+0x148>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f040 808f 	bne.w	8001dde <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001cc0:	4b4d      	ldr	r3, [pc, #308]	; (8001df8 <xTaskIncrementTick+0x14c>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <xTaskIncrementTick+0x14c>)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d120      	bne.n	8001d16 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8001cd4:	4b49      	ldr	r3, [pc, #292]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d00a      	beq.n	8001cf4 <xTaskIncrementTick+0x48>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ce2:	f383 8811 	msr	BASEPRI, r3
 8001ce6:	f3bf 8f6f 	isb	sy
 8001cea:	f3bf 8f4f 	dsb	sy
 8001cee:	603b      	str	r3, [r7, #0]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001cf0:	bf00      	nop
 8001cf2:	e7fe      	b.n	8001cf2 <xTaskIncrementTick+0x46>
 8001cf4:	4b41      	ldr	r3, [pc, #260]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	4b41      	ldr	r3, [pc, #260]	; (8001e00 <xTaskIncrementTick+0x154>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4a3f      	ldr	r2, [pc, #252]	; (8001e00 <xTaskIncrementTick+0x154>)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	6013      	str	r3, [r2, #0]
 8001d08:	4b3e      	ldr	r3, [pc, #248]	; (8001e04 <xTaskIncrementTick+0x158>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	4a3d      	ldr	r2, [pc, #244]	; (8001e04 <xTaskIncrementTick+0x158>)
 8001d10:	6013      	str	r3, [r2, #0]
 8001d12:	f000 f905 	bl	8001f20 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8001d16:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d349      	bcc.n	8001db4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001d20:	4b36      	ldr	r3, [pc, #216]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d104      	bne.n	8001d34 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d2a:	4b37      	ldr	r3, [pc, #220]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d30:	601a      	str	r2, [r3, #0]
					break;
 8001d32:	e03f      	b.n	8001db4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001d34:	4b31      	ldr	r3, [pc, #196]	; (8001dfc <xTaskIncrementTick+0x150>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8001d3e:	68bb      	ldr	r3, [r7, #8]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d203      	bcs.n	8001d54 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8001d4c:	4a2e      	ldr	r2, [pc, #184]	; (8001e08 <xTaskIncrementTick+0x15c>)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001d52:	e02f      	b.n	8001db4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	3304      	adds	r3, #4
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff ff7d 	bl	8001c58 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d004      	beq.n	8001d70 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	3318      	adds	r3, #24
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff ff74 	bl	8001c58 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8001d70:	68bb      	ldr	r3, [r7, #8]
 8001d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d74:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <xTaskIncrementTick+0x160>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d903      	bls.n	8001d84 <xTaskIncrementTick+0xd8>
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	4a22      	ldr	r2, [pc, #136]	; (8001e0c <xTaskIncrementTick+0x160>)
 8001d82:	6013      	str	r3, [r2, #0]
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4a1f      	ldr	r2, [pc, #124]	; (8001e10 <xTaskIncrementTick+0x164>)
 8001d92:	441a      	add	r2, r3
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	3304      	adds	r3, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4610      	mov	r0, r2
 8001d9c:	f7ff ff38 	bl	8001c10 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <xTaskIncrementTick+0x168>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	429a      	cmp	r2, r3
 8001dac:	d3b8      	bcc.n	8001d20 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8001dae:	2301      	movs	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001db2:	e7b5      	b.n	8001d20 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001db4:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <xTaskIncrementTick+0x168>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001dba:	4915      	ldr	r1, [pc, #84]	; (8001e10 <xTaskIncrementTick+0x164>)
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	009b      	lsls	r3, r3, #2
 8001dc0:	4413      	add	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	440b      	add	r3, r1
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d901      	bls.n	8001dd0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <xTaskIncrementTick+0x16c>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d007      	beq.n	8001de8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	617b      	str	r3, [r7, #20]
 8001ddc:	e004      	b.n	8001de8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001dde:	4b0f      	ldr	r3, [pc, #60]	; (8001e1c <xTaskIncrementTick+0x170>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a0d      	ldr	r2, [pc, #52]	; (8001e1c <xTaskIncrementTick+0x170>)
 8001de6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001de8:	697b      	ldr	r3, [r7, #20]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000558 	.word	0x20000558
 8001df8:	2000053c 	.word	0x2000053c
 8001dfc:	20000534 	.word	0x20000534
 8001e00:	20000538 	.word	0x20000538
 8001e04:	20000550 	.word	0x20000550
 8001e08:	20000554 	.word	0x20000554
 8001e0c:	20000540 	.word	0x20000540
 8001e10:	200000d4 	.word	0x200000d4
 8001e14:	200000d0 	.word	0x200000d0
 8001e18:	2000054c 	.word	0x2000054c
 8001e1c:	20000548 	.word	0x20000548

08001e20 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b084      	sub	sp, #16
 8001e24:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001e26:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <vTaskSwitchContext+0xe0>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001e2e:	4b35      	ldr	r3, [pc, #212]	; (8001f04 <vTaskSwitchContext+0xe4>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001e34:	e05f      	b.n	8001ef6 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8001e36:	4b33      	ldr	r3, [pc, #204]	; (8001f04 <vTaskSwitchContext+0xe4>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8001e3c:	f7fe fb72 	bl	8000524 <getRunTimeCounterValue>
 8001e40:	4603      	mov	r3, r0
 8001e42:	4a31      	ldr	r2, [pc, #196]	; (8001f08 <vTaskSwitchContext+0xe8>)
 8001e44:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8001e46:	4b30      	ldr	r3, [pc, #192]	; (8001f08 <vTaskSwitchContext+0xe8>)
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <vTaskSwitchContext+0xec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d909      	bls.n	8001e66 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8001e52:	4b2f      	ldr	r3, [pc, #188]	; (8001f10 <vTaskSwitchContext+0xf0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001e58:	4a2b      	ldr	r2, [pc, #172]	; (8001f08 <vTaskSwitchContext+0xe8>)
 8001e5a:	6810      	ldr	r0, [r2, #0]
 8001e5c:	4a2b      	ldr	r2, [pc, #172]	; (8001f0c <vTaskSwitchContext+0xec>)
 8001e5e:	6812      	ldr	r2, [r2, #0]
 8001e60:	1a82      	subs	r2, r0, r2
 8001e62:	440a      	add	r2, r1
 8001e64:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8001e66:	4b28      	ldr	r3, [pc, #160]	; (8001f08 <vTaskSwitchContext+0xe8>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a28      	ldr	r2, [pc, #160]	; (8001f0c <vTaskSwitchContext+0xec>)
 8001e6c:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e6e:	4b29      	ldr	r3, [pc, #164]	; (8001f14 <vTaskSwitchContext+0xf4>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	e010      	b.n	8001e98 <vTaskSwitchContext+0x78>
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d10a      	bne.n	8001e92 <vTaskSwitchContext+0x72>
	__asm volatile
 8001e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e80:	f383 8811 	msr	BASEPRI, r3
 8001e84:	f3bf 8f6f 	isb	sy
 8001e88:	f3bf 8f4f 	dsb	sy
 8001e8c:	607b      	str	r3, [r7, #4]
}
 8001e8e:	bf00      	nop
 8001e90:	e7fe      	b.n	8001e90 <vTaskSwitchContext+0x70>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	3b01      	subs	r3, #1
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	491f      	ldr	r1, [pc, #124]	; (8001f18 <vTaskSwitchContext+0xf8>)
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	440b      	add	r3, r1
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0e4      	beq.n	8001e76 <vTaskSwitchContext+0x56>
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	009b      	lsls	r3, r3, #2
 8001eb2:	4413      	add	r3, r2
 8001eb4:	009b      	lsls	r3, r3, #2
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <vTaskSwitchContext+0xf8>)
 8001eb8:	4413      	add	r3, r2
 8001eba:	60bb      	str	r3, [r7, #8]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	685a      	ldr	r2, [r3, #4]
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	3308      	adds	r3, #8
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d104      	bne.n	8001edc <vTaskSwitchContext+0xbc>
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	685a      	ldr	r2, [r3, #4]
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	605a      	str	r2, [r3, #4]
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	68db      	ldr	r3, [r3, #12]
 8001ee2:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <vTaskSwitchContext+0xf0>)
 8001ee4:	6013      	str	r3, [r2, #0]
 8001ee6:	4a0b      	ldr	r2, [pc, #44]	; (8001f14 <vTaskSwitchContext+0xf4>)
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8001eec:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <vTaskSwitchContext+0xf0>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	3358      	adds	r3, #88	; 0x58
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <vTaskSwitchContext+0xfc>)
 8001ef4:	6013      	str	r3, [r2, #0]
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000558 	.word	0x20000558
 8001f04:	2000054c 	.word	0x2000054c
 8001f08:	20000560 	.word	0x20000560
 8001f0c:	2000055c 	.word	0x2000055c
 8001f10:	200000d0 	.word	0x200000d0
 8001f14:	20000540 	.word	0x20000540
 8001f18:	200000d4 	.word	0x200000d4
 8001f1c:	2000005c 	.word	0x2000005c

08001f20 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <prvResetNextTaskUnblockTime+0x38>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d104      	bne.n	8001f3a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <prvResetNextTaskUnblockTime+0x3c>)
 8001f32:	f04f 32ff 	mov.w	r2, #4294967295
 8001f36:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001f38:	e008      	b.n	8001f4c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <prvResetNextTaskUnblockTime+0x38>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	4a04      	ldr	r2, [pc, #16]	; (8001f5c <prvResetNextTaskUnblockTime+0x3c>)
 8001f4a:	6013      	str	r3, [r2, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	20000534 	.word	0x20000534
 8001f5c:	20000554 	.word	0x20000554

08001f60 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <xTaskGetSchedulerState+0x34>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d102      	bne.n	8001f74 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	e008      	b.n	8001f86 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f74:	4b08      	ldr	r3, [pc, #32]	; (8001f98 <xTaskGetSchedulerState+0x38>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d102      	bne.n	8001f82 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8001f7c:	2302      	movs	r3, #2
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	e001      	b.n	8001f86 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8001f86:	687b      	ldr	r3, [r7, #4]
	}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	370c      	adds	r7, #12
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f92:	4770      	bx	lr
 8001f94:	20000544 	.word	0x20000544
 8001f98:	20000558 	.word	0x20000558
 8001f9c:	00000000 	.word	0x00000000

08001fa0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <pxCurrentTCBConst2>)
 8001fa2:	6819      	ldr	r1, [r3, #0]
 8001fa4:	6808      	ldr	r0, [r1, #0]
 8001fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001faa:	f380 8809 	msr	PSP, r0
 8001fae:	f3bf 8f6f 	isb	sy
 8001fb2:	f04f 0000 	mov.w	r0, #0
 8001fb6:	f380 8811 	msr	BASEPRI, r0
 8001fba:	4770      	bx	lr
 8001fbc:	f3af 8000 	nop.w

08001fc0 <pxCurrentTCBConst2>:
 8001fc0:	200000d0 	.word	0x200000d0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
	...

08001fd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001fd0:	f3ef 8009 	mrs	r0, PSP
 8001fd4:	f3bf 8f6f 	isb	sy
 8001fd8:	4b15      	ldr	r3, [pc, #84]	; (8002030 <pxCurrentTCBConst>)
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	f01e 0f10 	tst.w	lr, #16
 8001fe0:	bf08      	it	eq
 8001fe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001fe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fea:	6010      	str	r0, [r2, #0]
 8001fec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001ff0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001ff4:	f380 8811 	msr	BASEPRI, r0
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	f3bf 8f6f 	isb	sy
 8002000:	f7ff ff0e 	bl	8001e20 <vTaskSwitchContext>
 8002004:	f04f 0000 	mov.w	r0, #0
 8002008:	f380 8811 	msr	BASEPRI, r0
 800200c:	bc09      	pop	{r0, r3}
 800200e:	6819      	ldr	r1, [r3, #0]
 8002010:	6808      	ldr	r0, [r1, #0]
 8002012:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002016:	f01e 0f10 	tst.w	lr, #16
 800201a:	bf08      	it	eq
 800201c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002020:	f380 8809 	msr	PSP, r0
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	f3af 8000 	nop.w

08002030 <pxCurrentTCBConst>:
 8002030:	200000d0 	.word	0x200000d0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop

08002038 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
	__asm volatile
 800203e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002042:	f383 8811 	msr	BASEPRI, r3
 8002046:	f3bf 8f6f 	isb	sy
 800204a:	f3bf 8f4f 	dsb	sy
 800204e:	607b      	str	r3, [r7, #4]
}
 8002050:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002052:	f7ff fe2b 	bl	8001cac <xTaskIncrementTick>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d003      	beq.n	8002064 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800205c:	4b06      	ldr	r3, [pc, #24]	; (8002078 <xPortSysTickHandler+0x40>)
 800205e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800206e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002070:	bf00      	nop
 8002072:	3708      	adds	r7, #8
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	e000ed04 	.word	0xe000ed04

0800207c <memset>:
 800207c:	4402      	add	r2, r0
 800207e:	4603      	mov	r3, r0
 8002080:	4293      	cmp	r3, r2
 8002082:	d100      	bne.n	8002086 <memset+0xa>
 8002084:	4770      	bx	lr
 8002086:	f803 1b01 	strb.w	r1, [r3], #1
 800208a:	e7f9      	b.n	8002080 <memset+0x4>

0800208c <__libc_init_array>:
 800208c:	b570      	push	{r4, r5, r6, lr}
 800208e:	4d0d      	ldr	r5, [pc, #52]	; (80020c4 <__libc_init_array+0x38>)
 8002090:	4c0d      	ldr	r4, [pc, #52]	; (80020c8 <__libc_init_array+0x3c>)
 8002092:	1b64      	subs	r4, r4, r5
 8002094:	10a4      	asrs	r4, r4, #2
 8002096:	2600      	movs	r6, #0
 8002098:	42a6      	cmp	r6, r4
 800209a:	d109      	bne.n	80020b0 <__libc_init_array+0x24>
 800209c:	4d0b      	ldr	r5, [pc, #44]	; (80020cc <__libc_init_array+0x40>)
 800209e:	4c0c      	ldr	r4, [pc, #48]	; (80020d0 <__libc_init_array+0x44>)
 80020a0:	f000 f818 	bl	80020d4 <_init>
 80020a4:	1b64      	subs	r4, r4, r5
 80020a6:	10a4      	asrs	r4, r4, #2
 80020a8:	2600      	movs	r6, #0
 80020aa:	42a6      	cmp	r6, r4
 80020ac:	d105      	bne.n	80020ba <__libc_init_array+0x2e>
 80020ae:	bd70      	pop	{r4, r5, r6, pc}
 80020b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b4:	4798      	blx	r3
 80020b6:	3601      	adds	r6, #1
 80020b8:	e7ee      	b.n	8002098 <__libc_init_array+0xc>
 80020ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80020be:	4798      	blx	r3
 80020c0:	3601      	adds	r6, #1
 80020c2:	e7f2      	b.n	80020aa <__libc_init_array+0x1e>
 80020c4:	08002134 	.word	0x08002134
 80020c8:	08002134 	.word	0x08002134
 80020cc:	08002134 	.word	0x08002134
 80020d0:	08002138 	.word	0x08002138

080020d4 <_init>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr

080020e0 <_fini>:
 80020e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020e2:	bf00      	nop
 80020e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020e6:	bc08      	pop	{r3}
 80020e8:	469e      	mov	lr, r3
 80020ea:	4770      	bx	lr
