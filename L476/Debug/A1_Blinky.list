
A1_Blinky.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000124c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  080013dc  080013dc  000113dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800148c  0800148c  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  0800148c  0800148c  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800148c  0800148c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800148c  0800148c  0001148c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001490  08001490  00011490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000064  080014f8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000200  080014f8  00020200  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00003d1b  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000d75  00000000  00000000  00023df2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003c8  00000000  00000000  00024b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000002aa  00000000  00000000  00024f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024d33  00000000  00000000  000251da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00004bdd  00000000  00000000  00049f0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e131b  00000000  00000000  0004eaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000011b8  00000000  00000000  0012fe08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00130fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000064 	.word	0x20000064
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080013c4 	.word	0x080013c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000068 	.word	0x20000068
 80001cc:	080013c4 	.word	0x080013c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <main>:

char* inputMessage = "Input (ms): ";


int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	af00      	add	r7, sp, #0
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000274:	f000 fabb 	bl	80007ee <HAL_Init>
  USART_init();
 8000278:	f000 f9ba 	bl	80005f0 <USART_init>

  // Enable MCO, select MSI (4 MHz source)
  RCC->CFGR = ((RCC->CFGR & ~(RCC_CFGR_MCOSEL)) | (RCC_CFGR_MCOSEL_0));
 800027c:	4b18      	ldr	r3, [pc, #96]	; (80002e0 <main+0x70>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000284:	4a16      	ldr	r2, [pc, #88]	; (80002e0 <main+0x70>)
 8000286:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800028a:	6093      	str	r3, [r2, #8]

  // Enable GPIOA clock
  RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 800028c:	4b14      	ldr	r3, [pc, #80]	; (80002e0 <main+0x70>)
 800028e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000290:	4a13      	ldr	r2, [pc, #76]	; (80002e0 <main+0x70>)
 8000292:	f043 0301 	orr.w	r3, r3, #1
 8000296:	64d3      	str	r3, [r2, #76]	; 0x4c

  // Set PA5 as output
  GPIOA->MODER &= ~(0x3 << 5*2);
 8000298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002a2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80002a6:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= (0x1 << 5*2);
 80002a8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002b6:	6013      	str	r3, [r2, #0]

  TimerSetup();
 80002b8:	f000 f94c 	bl	8000554 <TimerSetup>


  USART_Print("\x1B[2J"); // clear screen
 80002bc:	4809      	ldr	r0, [pc, #36]	; (80002e4 <main+0x74>)
 80002be:	f000 fa0f 	bl	80006e0 <USART_Print>
  USART_Print("\x1B[0m"); // clear attributes
 80002c2:	4809      	ldr	r0, [pc, #36]	; (80002e8 <main+0x78>)
 80002c4:	f000 fa0c 	bl	80006e0 <USART_Print>
  USART_Print("\x1B[H");  // move cursor to top left
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <main+0x7c>)
 80002ca:	f000 fa09 	bl	80006e0 <USART_Print>
  USART_Print(inputMessage);
 80002ce:	4b08      	ldr	r3, [pc, #32]	; (80002f0 <main+0x80>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4618      	mov	r0, r3
 80002d4:	f000 fa04 	bl	80006e0 <USART_Print>
 80002d8:	2300      	movs	r3, #0
  //  USART_Print("Reference Manual");
  //  USART_Print("\x1B[H");  // move cursor to top left
  //  USART_Print("\x1B[0m"); // clear attributes


}
 80002da:	4618      	mov	r0, r3
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	40021000 	.word	0x40021000
 80002e4:	080013ec 	.word	0x080013ec
 80002e8:	080013f4 	.word	0x080013f4
 80002ec:	080013fc 	.word	0x080013fc
 80002f0:	20000000 	.word	0x20000000

080002f4 <USART2_IRQHandler>:

uint32_t userNumberMS = STARTING_ARR;
static char buffer[11];
char userNumberArr[32];
int userNumPos = 0;
void USART2_IRQHandler(void){
 80002f4:	b580      	push	{r7, lr}
 80002f6:	b082      	sub	sp, #8
 80002f8:	af00      	add	r7, sp, #0
	char r;

	if (USART2->ISR & USART_ISR_RXNE){
 80002fa:	4b3d      	ldr	r3, [pc, #244]	; (80003f0 <USART2_IRQHandler+0xfc>)
 80002fc:	69db      	ldr	r3, [r3, #28]
 80002fe:	f003 0320 	and.w	r3, r3, #32
 8000302:	2b00      	cmp	r3, #0
 8000304:	d070      	beq.n	80003e8 <USART2_IRQHandler+0xf4>
		r = USART2->RDR;			// copy received char
 8000306:	4b3a      	ldr	r3, [pc, #232]	; (80003f0 <USART2_IRQHandler+0xfc>)
 8000308:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800030a:	b29b      	uxth	r3, r3
 800030c:	71fb      	strb	r3, [r7, #7]

//		sprintf(buffer, "0x%X\n", r);
//		USART_Print(buffer);

		if (r == 0xD){
 800030e:	79fb      	ldrb	r3, [r7, #7]
 8000310:	2b0d      	cmp	r3, #13
 8000312:	d140      	bne.n	8000396 <USART2_IRQHandler+0xa2>
			userNumberArr[userNumPos++] = '\0'; //terminate array
 8000314:	4b37      	ldr	r3, [pc, #220]	; (80003f4 <USART2_IRQHandler+0x100>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	1c5a      	adds	r2, r3, #1
 800031a:	4936      	ldr	r1, [pc, #216]	; (80003f4 <USART2_IRQHandler+0x100>)
 800031c:	600a      	str	r2, [r1, #0]
 800031e:	4a36      	ldr	r2, [pc, #216]	; (80003f8 <USART2_IRQHandler+0x104>)
 8000320:	2100      	movs	r1, #0
 8000322:	54d1      	strb	r1, [r2, r3]
			userNumPos = 0;
 8000324:	4b33      	ldr	r3, [pc, #204]	; (80003f4 <USART2_IRQHandler+0x100>)
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
			userNumberMS = convertArrayToInt(userNumberArr);
 800032a:	4833      	ldr	r0, [pc, #204]	; (80003f8 <USART2_IRQHandler+0x104>)
 800032c:	f000 fa00 	bl	8000730 <convertArrayToInt>
 8000330:	4603      	mov	r3, r0
 8000332:	4a32      	ldr	r2, [pc, #200]	; (80003fc <USART2_IRQHandler+0x108>)
 8000334:	6013      	str	r3, [r2, #0]
			USART_Print("\x1B[2J"); // clear screen
 8000336:	4832      	ldr	r0, [pc, #200]	; (8000400 <USART2_IRQHandler+0x10c>)
 8000338:	f000 f9d2 	bl	80006e0 <USART_Print>
			USART_Print("\x1B[0m"); // clear attributes
 800033c:	4831      	ldr	r0, [pc, #196]	; (8000404 <USART2_IRQHandler+0x110>)
 800033e:	f000 f9cf 	bl	80006e0 <USART_Print>
			USART_Print("\x1B[H");  // move cursor to top left
 8000342:	4831      	ldr	r0, [pc, #196]	; (8000408 <USART2_IRQHandler+0x114>)
 8000344:	f000 f9cc 	bl	80006e0 <USART_Print>
			if (userNumberMS == 0){ //error condition
 8000348:	4b2c      	ldr	r3, [pc, #176]	; (80003fc <USART2_IRQHandler+0x108>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	2b00      	cmp	r3, #0
 800034e:	d109      	bne.n	8000364 <USART2_IRQHandler+0x70>
				USART_Print("Error: Please enter only 0-9, number must be at least 1ms");
 8000350:	482e      	ldr	r0, [pc, #184]	; (800040c <USART2_IRQHandler+0x118>)
 8000352:	f000 f9c5 	bl	80006e0 <USART_Print>
				USART_Print("\x1B[H");  // move cursor to top left
 8000356:	482c      	ldr	r0, [pc, #176]	; (8000408 <USART2_IRQHandler+0x114>)
 8000358:	f000 f9c2 	bl	80006e0 <USART_Print>
				USART_Print("\x1B[1B"); // move cursor down 3 lines
 800035c:	482c      	ldr	r0, [pc, #176]	; (8000410 <USART2_IRQHandler+0x11c>)
 800035e:	f000 f9bf 	bl	80006e0 <USART_Print>
 8000362:	e008      	b.n	8000376 <USART2_IRQHandler+0x82>
			} else {
				TIM2->ARR = userNumberMS;
 8000364:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000368:	4b24      	ldr	r3, [pc, #144]	; (80003fc <USART2_IRQHandler+0x108>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	62d3      	str	r3, [r2, #44]	; 0x2c
				TIM2->CNT = 0;
 800036e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000372:	2200      	movs	r2, #0
 8000374:	625a      	str	r2, [r3, #36]	; 0x24
			}

			sprintf(buffer, "0x%X\n", (unsigned int)userNumberMS);
 8000376:	4b21      	ldr	r3, [pc, #132]	; (80003fc <USART2_IRQHandler+0x108>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	461a      	mov	r2, r3
 800037c:	4925      	ldr	r1, [pc, #148]	; (8000414 <USART2_IRQHandler+0x120>)
 800037e:	4826      	ldr	r0, [pc, #152]	; (8000418 <USART2_IRQHandler+0x124>)
 8000380:	f000 fb84 	bl	8000a8c <siprintf>
			USART_Print(buffer);
 8000384:	4824      	ldr	r0, [pc, #144]	; (8000418 <USART2_IRQHandler+0x124>)
 8000386:	f000 f9ab 	bl	80006e0 <USART_Print>

			USART_Print(inputMessage);
 800038a:	4b24      	ldr	r3, [pc, #144]	; (800041c <USART2_IRQHandler+0x128>)
 800038c:	681b      	ldr	r3, [r3, #0]
 800038e:	4618      	mov	r0, r3
 8000390:	f000 f9a6 	bl	80006e0 <USART_Print>
 8000394:	e022      	b.n	80003dc <USART2_IRQHandler+0xe8>

		} else if (r == 0x7F){
 8000396:	79fb      	ldrb	r3, [r7, #7]
 8000398:	2b7f      	cmp	r3, #127	; 0x7f
 800039a:	d113      	bne.n	80003c4 <USART2_IRQHandler+0xd0>
			USART_Print("\x1B[1D"); // move cursor left 1 lines
 800039c:	4820      	ldr	r0, [pc, #128]	; (8000420 <USART2_IRQHandler+0x12c>)
 800039e:	f000 f99f 	bl	80006e0 <USART_Print>
			USART_Print(" ");
 80003a2:	4820      	ldr	r0, [pc, #128]	; (8000424 <USART2_IRQHandler+0x130>)
 80003a4:	f000 f99c 	bl	80006e0 <USART_Print>
			USART_Print("\x1B[1D"); // move cursor left 1 lines
 80003a8:	481d      	ldr	r0, [pc, #116]	; (8000420 <USART2_IRQHandler+0x12c>)
 80003aa:	f000 f999 	bl	80006e0 <USART_Print>

			userNumberArr[--userNumPos] = 0;
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <USART2_IRQHandler+0x100>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b01      	subs	r3, #1
 80003b4:	4a0f      	ldr	r2, [pc, #60]	; (80003f4 <USART2_IRQHandler+0x100>)
 80003b6:	6013      	str	r3, [r2, #0]
 80003b8:	4b0e      	ldr	r3, [pc, #56]	; (80003f4 <USART2_IRQHandler+0x100>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0e      	ldr	r2, [pc, #56]	; (80003f8 <USART2_IRQHandler+0x104>)
 80003be:	2100      	movs	r1, #0
 80003c0:	54d1      	strb	r1, [r2, r3]
 80003c2:	e00b      	b.n	80003dc <USART2_IRQHandler+0xe8>

		} else {
			USART2->TDR = r; //echo received char
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <USART2_IRQHandler+0xfc>)
 80003c6:	79fa      	ldrb	r2, [r7, #7]
 80003c8:	b292      	uxth	r2, r2
 80003ca:	851a      	strh	r2, [r3, #40]	; 0x28
			userNumberArr[userNumPos++] = r;
 80003cc:	4b09      	ldr	r3, [pc, #36]	; (80003f4 <USART2_IRQHandler+0x100>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	1c5a      	adds	r2, r3, #1
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <USART2_IRQHandler+0x100>)
 80003d4:	600a      	str	r2, [r1, #0]
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <USART2_IRQHandler+0x104>)
 80003d8:	79fa      	ldrb	r2, [r7, #7]
 80003da:	54ca      	strb	r2, [r1, r3]

		}

		USART2->ISR &= ~(USART_ISR_RXNE);	// clear the flag
 80003dc:	4b04      	ldr	r3, [pc, #16]	; (80003f0 <USART2_IRQHandler+0xfc>)
 80003de:	69db      	ldr	r3, [r3, #28]
 80003e0:	4a03      	ldr	r2, [pc, #12]	; (80003f0 <USART2_IRQHandler+0xfc>)
 80003e2:	f023 0320 	bic.w	r3, r3, #32
 80003e6:	61d3      	str	r3, [r2, #28]
	}
}
 80003e8:	bf00      	nop
 80003ea:	3708      	adds	r7, #8
 80003ec:	46bd      	mov	sp, r7
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40004400 	.word	0x40004400
 80003f4:	200000ac 	.word	0x200000ac
 80003f8:	2000008c 	.word	0x2000008c
 80003fc:	20000004 	.word	0x20000004
 8000400:	080013ec 	.word	0x080013ec
 8000404:	080013f4 	.word	0x080013f4
 8000408:	080013fc 	.word	0x080013fc
 800040c:	08001400 	.word	0x08001400
 8000410:	0800143c 	.word	0x0800143c
 8000414:	08001444 	.word	0x08001444
 8000418:	20000080 	.word	0x20000080
 800041c:	20000000 	.word	0x20000000
 8000420:	0800144c 	.word	0x0800144c
 8000424:	08001454 	.word	0x08001454

08000428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800042e:	4b0f      	ldr	r3, [pc, #60]	; (800046c <HAL_MspInit+0x44>)
 8000430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000432:	4a0e      	ldr	r2, [pc, #56]	; (800046c <HAL_MspInit+0x44>)
 8000434:	f043 0301 	orr.w	r3, r3, #1
 8000438:	6613      	str	r3, [r2, #96]	; 0x60
 800043a:	4b0c      	ldr	r3, [pc, #48]	; (800046c <HAL_MspInit+0x44>)
 800043c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800043e:	f003 0301 	and.w	r3, r3, #1
 8000442:	607b      	str	r3, [r7, #4]
 8000444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000446:	4b09      	ldr	r3, [pc, #36]	; (800046c <HAL_MspInit+0x44>)
 8000448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <HAL_MspInit+0x44>)
 800044c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000450:	6593      	str	r3, [r2, #88]	; 0x58
 8000452:	4b06      	ldr	r3, [pc, #24]	; (800046c <HAL_MspInit+0x44>)
 8000454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800045a:	603b      	str	r3, [r7, #0]
 800045c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40021000 	.word	0x40021000

08000470 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000474:	e7fe      	b.n	8000474 <NMI_Handler+0x4>

08000476 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000476:	b480      	push	{r7}
 8000478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800047a:	e7fe      	b.n	800047a <HardFault_Handler+0x4>

0800047c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800047c:	b480      	push	{r7}
 800047e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000480:	e7fe      	b.n	8000480 <MemManage_Handler+0x4>

08000482 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000482:	b480      	push	{r7}
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000486:	e7fe      	b.n	8000486 <BusFault_Handler+0x4>

08000488 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800048c:	e7fe      	b.n	800048c <UsageFault_Handler+0x4>

0800048e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800048e:	b480      	push	{r7}
 8000490:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000492:	bf00      	nop
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800049c:	b480      	push	{r7}
 800049e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004a0:	bf00      	nop
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr

080004aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80004aa:	b480      	push	{r7}
 80004ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80004ae:	bf00      	nop
 80004b0:	46bd      	mov	sp, r7
 80004b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b6:	4770      	bx	lr

080004b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80004bc:	f000 f9ec 	bl	8000898 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80004c0:	bf00      	nop
 80004c2:	bd80      	pop	{r7, pc}

080004c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004cc:	4a14      	ldr	r2, [pc, #80]	; (8000520 <_sbrk+0x5c>)
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <_sbrk+0x60>)
 80004d0:	1ad3      	subs	r3, r2, r3
 80004d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004d4:	697b      	ldr	r3, [r7, #20]
 80004d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004d8:	4b13      	ldr	r3, [pc, #76]	; (8000528 <_sbrk+0x64>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	2b00      	cmp	r3, #0
 80004de:	d102      	bne.n	80004e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004e0:	4b11      	ldr	r3, [pc, #68]	; (8000528 <_sbrk+0x64>)
 80004e2:	4a12      	ldr	r2, [pc, #72]	; (800052c <_sbrk+0x68>)
 80004e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004e6:	4b10      	ldr	r3, [pc, #64]	; (8000528 <_sbrk+0x64>)
 80004e8:	681a      	ldr	r2, [r3, #0]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	4413      	add	r3, r2
 80004ee:	693a      	ldr	r2, [r7, #16]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d207      	bcs.n	8000504 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004f4:	f000 faea 	bl	8000acc <__errno>
 80004f8:	4603      	mov	r3, r0
 80004fa:	220c      	movs	r2, #12
 80004fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000502:	e009      	b.n	8000518 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000504:	4b08      	ldr	r3, [pc, #32]	; (8000528 <_sbrk+0x64>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800050a:	4b07      	ldr	r3, [pc, #28]	; (8000528 <_sbrk+0x64>)
 800050c:	681a      	ldr	r2, [r3, #0]
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4413      	add	r3, r2
 8000512:	4a05      	ldr	r2, [pc, #20]	; (8000528 <_sbrk+0x64>)
 8000514:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000516:	68fb      	ldr	r3, [r7, #12]
}
 8000518:	4618      	mov	r0, r3
 800051a:	3718      	adds	r7, #24
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	20018000 	.word	0x20018000
 8000524:	00000400 	.word	0x00000400
 8000528:	200000b0 	.word	0x200000b0
 800052c:	20000200 	.word	0x20000200

08000530 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000530:	b480      	push	{r7}
 8000532:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <SystemInit+0x20>)
 8000536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800053a:	4a05      	ldr	r2, [pc, #20]	; (8000550 <SystemInit+0x20>)
 800053c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000544:	bf00      	nop
 8000546:	46bd      	mov	sp, r7
 8000548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054c:	4770      	bx	lr
 800054e:	bf00      	nop
 8000550:	e000ed00 	.word	0xe000ed00

08000554 <TimerSetup>:
thus, if input is ARR, PSC = s/ms * 4MHz = (1/1,000)*4,000,000
*/
const int prescale = 4000;


void TimerSetup(void){
 8000554:	b480      	push	{r7}
 8000556:	af00      	add	r7, sp, #0
//  TIMER ESSENTIALS
	RCC->APB1ENR1 |= RCC_APB1ENR1_TIM2EN; //Enable Clock input to TIM2
 8000558:	4b17      	ldr	r3, [pc, #92]	; (80005b8 <TimerSetup+0x64>)
 800055a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800055c:	4a16      	ldr	r2, [pc, #88]	; (80005b8 <TimerSetup+0x64>)
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->PSC = prescale; // Set prescaler value
 8000564:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000568:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800056c:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = STARTING_ARR-1;   // Set auto-reload value
 800056e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000572:	22c7      	movs	r2, #199	; 0xc7
 8000574:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN; // Enable TIM2 in config register 1
 8000576:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6013      	str	r3, [r2, #0]
	TIM2->CR1 &= ~(TIM_CR1_DIR);  // Clear DIR bit to set upcount mode (not super essential, cuz it defaults here)
 8000586:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000590:	f023 0310 	bic.w	r3, r3, #16
 8000594:	6013      	str	r3, [r2, #0]

	//// 	Enable TIM2 interrupt in NVIC (THE interrupter for STM32)
	NVIC->ISER[TIM2_IRQn / 32] = (1 << (TIM2_IRQn % 32));
 8000596:	4b09      	ldr	r3, [pc, #36]	; (80005bc <TimerSetup+0x68>)
 8000598:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800059c:	601a      	str	r2, [r3, #0]

//	TIM2->DIER |= 6; // enable interrupt generation for CC channels 1 and 2
//	TIM2->CCR1 = (STARTING_ARR/4)-1; //interrupt at 25%
//	TIM2->CCR2 = 0; // interrupt at 0% (this could also just be the overrun flag, but eh)

	TIM2->DIER |= TIM_DIER_UIE; //enable update interrupts
 800059e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005a2:	68db      	ldr	r3, [r3, #12]
 80005a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005a8:	f043 0301 	orr.w	r3, r3, #1
 80005ac:	60d3      	str	r3, [r2, #12]
}
 80005ae:	bf00      	nop
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	40021000 	.word	0x40021000
 80005bc:	e000e100 	.word	0xe000e100

080005c0 <TIM2_IRQHandler>:

void TIM2_IRQHandler(void) {
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0
	TIM2->SR &= ~TIM_SR_UIF; //clear flag
 80005c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80005c8:	691b      	ldr	r3, [r3, #16]
 80005ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005ce:	f023 0301 	bic.w	r3, r3, #1
 80005d2:	6113      	str	r3, [r2, #16]
	GPIOA->ODR ^= (1<<5); //toggle bit 5
 80005d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005d8:	695b      	ldr	r3, [r3, #20]
 80005da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005de:	f083 0320 	eor.w	r3, r3, #32
 80005e2:	6153      	str	r3, [r2, #20]
//
//	if (TIM2->SR & TIM_SR_CC2IF){
//		TIM2->SR &= ~TIM_SR_CC2IF; //clear flag
//		GPIOA->ODR |= (1 << 5);//set high
//	}
}
 80005e4:	bf00      	nop
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <USART_init>:
#include "main.h"

#define F_CLK 4000000 	// bus clock is 4 MHz


void USART_init(void){
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
	// configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers
	// AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <USART_init+0xe4>)
 80005f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f8:	4a36      	ldr	r2, [pc, #216]	; (80006d4 <USART_init+0xe4>)
 80005fa:	f043 0301 	orr.w	r3, r3, #1
 80005fe:	64d3      	str	r3, [r2, #76]	; 0x4c
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
 8000600:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000604:	6a1b      	ldr	r3, [r3, #32]
 8000606:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800060a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800060e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |				// select USART2 (AF7)
 8000610:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000614:	6a1b      	ldr	r3, [r3, #32]
 8000616:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800061a:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800061e:	6213      	str	r3, [r2, #32]
				   (7 << GPIO_AFRL_AFSEL3_Pos)); 		  	  	// for PA2 and PA3
	GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);		// push-pull output for PA2, PA3
 8000620:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000624:	685b      	ldr	r3, [r3, #4]
 8000626:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800062a:	f023 030c 	bic.w	r3, r3, #12
 800062e:	6053      	str	r3, [r2, #4]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);		// no pull ups on PA2, PA3
 8000630:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000634:	68db      	ldr	r3, [r3, #12]
 8000636:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800063a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800063e:	60d3      	str	r3, [r2, #12]
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED2);	// low speed
 8000640:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800064a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800064e:	6093      	str	r3, [r2, #8]
	GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);		// enable alternate function
 8000650:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800065a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800065e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3
 8000660:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800066a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 800066e:	6013      	str	r3, [r2, #0]

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;			// enable USART by turning on system clock
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <USART_init+0xe4>)
 8000672:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000674:	4a17      	ldr	r2, [pc, #92]	; (80006d4 <USART_init+0xe4>)
 8000676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800067a:	6593      	str	r3, [r2, #88]	; 0x58
	USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);	//set data to 8 bits
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <USART_init+0xe8>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a15      	ldr	r2, [pc, #84]	; (80006d8 <USART_init+0xe8>)
 8000682:	f023 2310 	bic.w	r3, r3, #268439552	; 0x10001000
 8000686:	6013      	str	r3, [r2, #0]
	USART2->BRR = F_CLK / 115200;						// baudrate for 115200
 8000688:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <USART_init+0xe8>)
 800068a:	2222      	movs	r2, #34	; 0x22
 800068c:	60da      	str	r2, [r3, #12]
	USART2->CR1 |= USART_CR1_UE;						// enable USART
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <USART_init+0xe8>)
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <USART_init+0xe8>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6013      	str	r3, [r2, #0]
	USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);		// enable transmit and receive for USART
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <USART_init+0xe8>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a0e      	ldr	r2, [pc, #56]	; (80006d8 <USART_init+0xe8>)
 80006a0:	f043 030c 	orr.w	r3, r3, #12
 80006a4:	6013      	str	r3, [r2, #0]

	// enable interrupts for USART2 receive
	USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <USART_init+0xe8>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a0b      	ldr	r2, [pc, #44]	; (80006d8 <USART_init+0xe8>)
 80006ac:	f043 0320 	orr.w	r3, r3, #32
 80006b0:	6013      	str	r3, [r2, #0]
	USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <USART_init+0xe8>)
 80006b4:	69db      	ldr	r3, [r3, #28]
 80006b6:	4a08      	ldr	r2, [pc, #32]	; (80006d8 <USART_init+0xe8>)
 80006b8:	f023 0320 	bic.w	r3, r3, #32
 80006bc:	61d3      	str	r3, [r2, #28]

	NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <USART_init+0xec>)
 80006c0:	2240      	movs	r2, #64	; 0x40
 80006c2:	605a      	str	r2, [r3, #4]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 80006c4:	b662      	cpsie	i
}
 80006c6:	bf00      	nop
	__enable_irq();
}
 80006c8:	bf00      	nop
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40021000 	.word	0x40021000
 80006d8:	40004400 	.word	0x40004400
 80006dc:	e000e100 	.word	0xe000e100

080006e0 <USART_Print>:

void USART_Print(const char* message) {
 80006e0:	b480      	push	{r7}
 80006e2:	b085      	sub	sp, #20
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 80006e8:	2300      	movs	r3, #0
 80006ea:	73fb      	strb	r3, [r7, #15]
 80006ec:	e010      	b.n	8000710 <USART_Print+0x30>
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
 80006ee:	bf00      	nop
 80006f0:	4b0e      	ldr	r3, [pc, #56]	; (800072c <USART_Print+0x4c>)
 80006f2:	69db      	ldr	r3, [r3, #28]
 80006f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d0f9      	beq.n	80006f0 <USART_Print+0x10>
		USART2->TDR = message[i];				// transmit character to USART
 80006fc:	7bfb      	ldrb	r3, [r7, #15]
 80006fe:	687a      	ldr	r2, [r7, #4]
 8000700:	4413      	add	r3, r2
 8000702:	781a      	ldrb	r2, [r3, #0]
 8000704:	4b09      	ldr	r3, [pc, #36]	; (800072c <USART_Print+0x4c>)
 8000706:	b292      	uxth	r2, r2
 8000708:	851a      	strh	r2, [r3, #40]	; 0x28
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	3301      	adds	r3, #1
 800070e:	73fb      	strb	r3, [r7, #15]
 8000710:	7bfb      	ldrb	r3, [r7, #15]
 8000712:	687a      	ldr	r2, [r7, #4]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d1e8      	bne.n	80006ee <USART_Print+0xe>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3714      	adds	r7, #20
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	40004400 	.word	0x40004400

08000730 <convertArrayToInt>:

uint32_t convertArrayToInt(char* array){
 8000730:	b480      	push	{r7}
 8000732:	b085      	sub	sp, #20
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	int i = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	60fb      	str	r3, [r7, #12]
	uint32_t count = 0;
 800073c:	2300      	movs	r3, #0
 800073e:	60bb      	str	r3, [r7, #8]
	while(array[i] != '\0'){
 8000740:	e01e      	b.n	8000780 <convertArrayToInt+0x50>
		if ((array[i] >= 0x30) && (array[i] <= 0x39)){
 8000742:	68fb      	ldr	r3, [r7, #12]
 8000744:	687a      	ldr	r2, [r7, #4]
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	2b2f      	cmp	r3, #47	; 0x2f
 800074c:	d916      	bls.n	800077c <convertArrayToInt+0x4c>
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	687a      	ldr	r2, [r7, #4]
 8000752:	4413      	add	r3, r2
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	2b39      	cmp	r3, #57	; 0x39
 8000758:	d810      	bhi.n	800077c <convertArrayToInt+0x4c>
			count = (count * 10) + ((uint32_t)array[i] - 0x30);
 800075a:	68ba      	ldr	r2, [r7, #8]
 800075c:	4613      	mov	r3, r2
 800075e:	009b      	lsls	r3, r3, #2
 8000760:	4413      	add	r3, r2
 8000762:	005b      	lsls	r3, r3, #1
 8000764:	4619      	mov	r1, r3
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	687a      	ldr	r2, [r7, #4]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	440b      	add	r3, r1
 8000770:	3b30      	subs	r3, #48	; 0x30
 8000772:	60bb      	str	r3, [r7, #8]
			i++;
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	3301      	adds	r3, #1
 8000778:	60fb      	str	r3, [r7, #12]
 800077a:	e001      	b.n	8000780 <convertArrayToInt+0x50>
		} else {return 0;}
 800077c:	2300      	movs	r3, #0
 800077e:	e006      	b.n	800078e <convertArrayToInt+0x5e>
	while(array[i] != '\0'){
 8000780:	68fb      	ldr	r3, [r7, #12]
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	781b      	ldrb	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d1da      	bne.n	8000742 <convertArrayToInt+0x12>
	}
	return count;
 800078c:	68bb      	ldr	r3, [r7, #8]
}
 800078e:	4618      	mov	r0, r3
 8000790:	3714      	adds	r7, #20
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
	...

0800079c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800079c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80007a0:	f7ff fec6 	bl	8000530 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007a4:	480c      	ldr	r0, [pc, #48]	; (80007d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80007a6:	490d      	ldr	r1, [pc, #52]	; (80007dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80007a8:	4a0d      	ldr	r2, [pc, #52]	; (80007e0 <LoopForever+0xe>)
  movs r3, #0
 80007aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007ac:	e002      	b.n	80007b4 <LoopCopyDataInit>

080007ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007b2:	3304      	adds	r3, #4

080007b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007b8:	d3f9      	bcc.n	80007ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ba:	4a0a      	ldr	r2, [pc, #40]	; (80007e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007bc:	4c0a      	ldr	r4, [pc, #40]	; (80007e8 <LoopForever+0x16>)
  movs r3, #0
 80007be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007c0:	e001      	b.n	80007c6 <LoopFillZerobss>

080007c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007c4:	3204      	adds	r2, #4

080007c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007c8:	d3fb      	bcc.n	80007c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007ca:	f000 f985 	bl	8000ad8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ce:	f7ff fd4f 	bl	8000270 <main>

080007d2 <LoopForever>:

LoopForever:
    b LoopForever
 80007d2:	e7fe      	b.n	80007d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007d4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007dc:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80007e0:	08001494 	.word	0x08001494
  ldr r2, =_sbss
 80007e4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80007e8:	20000200 	.word	0x20000200

080007ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007ec:	e7fe      	b.n	80007ec <ADC1_2_IRQHandler>

080007ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007f4:	2300      	movs	r3, #0
 80007f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007f8:	2003      	movs	r0, #3
 80007fa:	f000 f913 	bl	8000a24 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007fe:	200f      	movs	r0, #15
 8000800:	f000 f80e 	bl	8000820 <HAL_InitTick>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d002      	beq.n	8000810 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	71fb      	strb	r3, [r7, #7]
 800080e:	e001      	b.n	8000814 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000810:	f7ff fe0a 	bl	8000428 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000814:	79fb      	ldrb	r3, [r7, #7]
}
 8000816:	4618      	mov	r0, r3
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}
	...

08000820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b084      	sub	sp, #16
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000828:	2300      	movs	r3, #0
 800082a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <HAL_InitTick+0x6c>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	2b00      	cmp	r3, #0
 8000832:	d023      	beq.n	800087c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000834:	4b16      	ldr	r3, [pc, #88]	; (8000890 <HAL_InitTick+0x70>)
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	4b14      	ldr	r3, [pc, #80]	; (800088c <HAL_InitTick+0x6c>)
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	4619      	mov	r1, r3
 800083e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000842:	fbb3 f3f1 	udiv	r3, r3, r1
 8000846:	fbb2 f3f3 	udiv	r3, r2, r3
 800084a:	4618      	mov	r0, r3
 800084c:	f000 f911 	bl	8000a72 <HAL_SYSTICK_Config>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d10f      	bne.n	8000876 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2b0f      	cmp	r3, #15
 800085a:	d809      	bhi.n	8000870 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800085c:	2200      	movs	r2, #0
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f000 f8e9 	bl	8000a3a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000868:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <HAL_InitTick+0x74>)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	6013      	str	r3, [r2, #0]
 800086e:	e007      	b.n	8000880 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000870:	2301      	movs	r3, #1
 8000872:	73fb      	strb	r3, [r7, #15]
 8000874:	e004      	b.n	8000880 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000876:	2301      	movs	r3, #1
 8000878:	73fb      	strb	r3, [r7, #15]
 800087a:	e001      	b.n	8000880 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800087c:	2301      	movs	r3, #1
 800087e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
}
 8000882:	4618      	mov	r0, r3
 8000884:	3710      	adds	r7, #16
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000010 	.word	0x20000010
 8000890:	20000008 	.word	0x20000008
 8000894:	2000000c 	.word	0x2000000c

08000898 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <HAL_IncTick+0x20>)
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	461a      	mov	r2, r3
 80008a2:	4b06      	ldr	r3, [pc, #24]	; (80008bc <HAL_IncTick+0x24>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4413      	add	r3, r2
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_IncTick+0x24>)
 80008aa:	6013      	str	r3, [r2, #0]
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	20000010 	.word	0x20000010
 80008bc:	200000b4 	.word	0x200000b4

080008c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b085      	sub	sp, #20
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	f003 0307 	and.w	r3, r3, #7
 80008ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008d2:	68db      	ldr	r3, [r3, #12]
 80008d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80008d6:	68ba      	ldr	r2, [r7, #8]
 80008d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80008dc:	4013      	ands	r3, r2
 80008de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008f2:	4a04      	ldr	r2, [pc, #16]	; (8000904 <__NVIC_SetPriorityGrouping+0x44>)
 80008f4:	68bb      	ldr	r3, [r7, #8]
 80008f6:	60d3      	str	r3, [r2, #12]
}
 80008f8:	bf00      	nop
 80008fa:	3714      	adds	r7, #20
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr
 8000904:	e000ed00 	.word	0xe000ed00

08000908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800090c:	4b04      	ldr	r3, [pc, #16]	; (8000920 <__NVIC_GetPriorityGrouping+0x18>)
 800090e:	68db      	ldr	r3, [r3, #12]
 8000910:	0a1b      	lsrs	r3, r3, #8
 8000912:	f003 0307 	and.w	r3, r3, #7
}
 8000916:	4618      	mov	r0, r3
 8000918:	46bd      	mov	sp, r7
 800091a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091e:	4770      	bx	lr
 8000920:	e000ed00 	.word	0xe000ed00

08000924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	6039      	str	r1, [r7, #0]
 800092e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	2b00      	cmp	r3, #0
 8000936:	db0a      	blt.n	800094e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	b2da      	uxtb	r2, r3
 800093c:	490c      	ldr	r1, [pc, #48]	; (8000970 <__NVIC_SetPriority+0x4c>)
 800093e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000942:	0112      	lsls	r2, r2, #4
 8000944:	b2d2      	uxtb	r2, r2
 8000946:	440b      	add	r3, r1
 8000948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800094c:	e00a      	b.n	8000964 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	b2da      	uxtb	r2, r3
 8000952:	4908      	ldr	r1, [pc, #32]	; (8000974 <__NVIC_SetPriority+0x50>)
 8000954:	79fb      	ldrb	r3, [r7, #7]
 8000956:	f003 030f 	and.w	r3, r3, #15
 800095a:	3b04      	subs	r3, #4
 800095c:	0112      	lsls	r2, r2, #4
 800095e:	b2d2      	uxtb	r2, r2
 8000960:	440b      	add	r3, r1
 8000962:	761a      	strb	r2, [r3, #24]
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	e000e100 	.word	0xe000e100
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000978:	b480      	push	{r7}
 800097a:	b089      	sub	sp, #36	; 0x24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f1c3 0307 	rsb	r3, r3, #7
 8000992:	2b04      	cmp	r3, #4
 8000994:	bf28      	it	cs
 8000996:	2304      	movcs	r3, #4
 8000998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3304      	adds	r3, #4
 800099e:	2b06      	cmp	r3, #6
 80009a0:	d902      	bls.n	80009a8 <NVIC_EncodePriority+0x30>
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	3b03      	subs	r3, #3
 80009a6:	e000      	b.n	80009aa <NVIC_EncodePriority+0x32>
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009ac:	f04f 32ff 	mov.w	r2, #4294967295
 80009b0:	69bb      	ldr	r3, [r7, #24]
 80009b2:	fa02 f303 	lsl.w	r3, r2, r3
 80009b6:	43da      	mvns	r2, r3
 80009b8:	68bb      	ldr	r3, [r7, #8]
 80009ba:	401a      	ands	r2, r3
 80009bc:	697b      	ldr	r3, [r7, #20]
 80009be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009c0:	f04f 31ff 	mov.w	r1, #4294967295
 80009c4:	697b      	ldr	r3, [r7, #20]
 80009c6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ca:	43d9      	mvns	r1, r3
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009d0:	4313      	orrs	r3, r2
         );
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3724      	adds	r7, #36	; 0x24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009f0:	d301      	bcc.n	80009f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009f2:	2301      	movs	r3, #1
 80009f4:	e00f      	b.n	8000a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009f6:	4a0a      	ldr	r2, [pc, #40]	; (8000a20 <SysTick_Config+0x40>)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	3b01      	subs	r3, #1
 80009fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009fe:	210f      	movs	r1, #15
 8000a00:	f04f 30ff 	mov.w	r0, #4294967295
 8000a04:	f7ff ff8e 	bl	8000924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <SysTick_Config+0x40>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <SysTick_Config+0x40>)
 8000a10:	2207      	movs	r2, #7
 8000a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3708      	adds	r7, #8
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a2c:	6878      	ldr	r0, [r7, #4]
 8000a2e:	f7ff ff47 	bl	80008c0 <__NVIC_SetPriorityGrouping>
}
 8000a32:	bf00      	nop
 8000a34:	3708      	adds	r7, #8
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}

08000a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b086      	sub	sp, #24
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	4603      	mov	r3, r0
 8000a42:	60b9      	str	r1, [r7, #8]
 8000a44:	607a      	str	r2, [r7, #4]
 8000a46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000a4c:	f7ff ff5c 	bl	8000908 <__NVIC_GetPriorityGrouping>
 8000a50:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	68b9      	ldr	r1, [r7, #8]
 8000a56:	6978      	ldr	r0, [r7, #20]
 8000a58:	f7ff ff8e 	bl	8000978 <NVIC_EncodePriority>
 8000a5c:	4602      	mov	r2, r0
 8000a5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a62:	4611      	mov	r1, r2
 8000a64:	4618      	mov	r0, r3
 8000a66:	f7ff ff5d 	bl	8000924 <__NVIC_SetPriority>
}
 8000a6a:	bf00      	nop
 8000a6c:	3718      	adds	r7, #24
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}

08000a72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	b082      	sub	sp, #8
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a7a:	6878      	ldr	r0, [r7, #4]
 8000a7c:	f7ff ffb0 	bl	80009e0 <SysTick_Config>
 8000a80:	4603      	mov	r3, r0
}
 8000a82:	4618      	mov	r0, r3
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
	...

08000a8c <siprintf>:
 8000a8c:	b40e      	push	{r1, r2, r3}
 8000a8e:	b500      	push	{lr}
 8000a90:	b09c      	sub	sp, #112	; 0x70
 8000a92:	ab1d      	add	r3, sp, #116	; 0x74
 8000a94:	9002      	str	r0, [sp, #8]
 8000a96:	9006      	str	r0, [sp, #24]
 8000a98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000a9c:	4809      	ldr	r0, [pc, #36]	; (8000ac4 <siprintf+0x38>)
 8000a9e:	9107      	str	r1, [sp, #28]
 8000aa0:	9104      	str	r1, [sp, #16]
 8000aa2:	4909      	ldr	r1, [pc, #36]	; (8000ac8 <siprintf+0x3c>)
 8000aa4:	f853 2b04 	ldr.w	r2, [r3], #4
 8000aa8:	9105      	str	r1, [sp, #20]
 8000aaa:	6800      	ldr	r0, [r0, #0]
 8000aac:	9301      	str	r3, [sp, #4]
 8000aae:	a902      	add	r1, sp, #8
 8000ab0:	f000 f98a 	bl	8000dc8 <_svfiprintf_r>
 8000ab4:	9b02      	ldr	r3, [sp, #8]
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]
 8000aba:	b01c      	add	sp, #112	; 0x70
 8000abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000ac0:	b003      	add	sp, #12
 8000ac2:	4770      	bx	lr
 8000ac4:	20000060 	.word	0x20000060
 8000ac8:	ffff0208 	.word	0xffff0208

08000acc <__errno>:
 8000acc:	4b01      	ldr	r3, [pc, #4]	; (8000ad4 <__errno+0x8>)
 8000ace:	6818      	ldr	r0, [r3, #0]
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	20000060 	.word	0x20000060

08000ad8 <__libc_init_array>:
 8000ad8:	b570      	push	{r4, r5, r6, lr}
 8000ada:	4d0d      	ldr	r5, [pc, #52]	; (8000b10 <__libc_init_array+0x38>)
 8000adc:	4c0d      	ldr	r4, [pc, #52]	; (8000b14 <__libc_init_array+0x3c>)
 8000ade:	1b64      	subs	r4, r4, r5
 8000ae0:	10a4      	asrs	r4, r4, #2
 8000ae2:	2600      	movs	r6, #0
 8000ae4:	42a6      	cmp	r6, r4
 8000ae6:	d109      	bne.n	8000afc <__libc_init_array+0x24>
 8000ae8:	4d0b      	ldr	r5, [pc, #44]	; (8000b18 <__libc_init_array+0x40>)
 8000aea:	4c0c      	ldr	r4, [pc, #48]	; (8000b1c <__libc_init_array+0x44>)
 8000aec:	f000 fc6a 	bl	80013c4 <_init>
 8000af0:	1b64      	subs	r4, r4, r5
 8000af2:	10a4      	asrs	r4, r4, #2
 8000af4:	2600      	movs	r6, #0
 8000af6:	42a6      	cmp	r6, r4
 8000af8:	d105      	bne.n	8000b06 <__libc_init_array+0x2e>
 8000afa:	bd70      	pop	{r4, r5, r6, pc}
 8000afc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b00:	4798      	blx	r3
 8000b02:	3601      	adds	r6, #1
 8000b04:	e7ee      	b.n	8000ae4 <__libc_init_array+0xc>
 8000b06:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b0a:	4798      	blx	r3
 8000b0c:	3601      	adds	r6, #1
 8000b0e:	e7f2      	b.n	8000af6 <__libc_init_array+0x1e>
 8000b10:	0800148c 	.word	0x0800148c
 8000b14:	0800148c 	.word	0x0800148c
 8000b18:	0800148c 	.word	0x0800148c
 8000b1c:	08001490 	.word	0x08001490

08000b20 <__retarget_lock_acquire_recursive>:
 8000b20:	4770      	bx	lr

08000b22 <__retarget_lock_release_recursive>:
 8000b22:	4770      	bx	lr

08000b24 <_free_r>:
 8000b24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000b26:	2900      	cmp	r1, #0
 8000b28:	d044      	beq.n	8000bb4 <_free_r+0x90>
 8000b2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b2e:	9001      	str	r0, [sp, #4]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	f1a1 0404 	sub.w	r4, r1, #4
 8000b36:	bfb8      	it	lt
 8000b38:	18e4      	addlt	r4, r4, r3
 8000b3a:	f000 f8df 	bl	8000cfc <__malloc_lock>
 8000b3e:	4a1e      	ldr	r2, [pc, #120]	; (8000bb8 <_free_r+0x94>)
 8000b40:	9801      	ldr	r0, [sp, #4]
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	b933      	cbnz	r3, 8000b54 <_free_r+0x30>
 8000b46:	6063      	str	r3, [r4, #4]
 8000b48:	6014      	str	r4, [r2, #0]
 8000b4a:	b003      	add	sp, #12
 8000b4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000b50:	f000 b8da 	b.w	8000d08 <__malloc_unlock>
 8000b54:	42a3      	cmp	r3, r4
 8000b56:	d908      	bls.n	8000b6a <_free_r+0x46>
 8000b58:	6825      	ldr	r5, [r4, #0]
 8000b5a:	1961      	adds	r1, r4, r5
 8000b5c:	428b      	cmp	r3, r1
 8000b5e:	bf01      	itttt	eq
 8000b60:	6819      	ldreq	r1, [r3, #0]
 8000b62:	685b      	ldreq	r3, [r3, #4]
 8000b64:	1949      	addeq	r1, r1, r5
 8000b66:	6021      	streq	r1, [r4, #0]
 8000b68:	e7ed      	b.n	8000b46 <_free_r+0x22>
 8000b6a:	461a      	mov	r2, r3
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	b10b      	cbz	r3, 8000b74 <_free_r+0x50>
 8000b70:	42a3      	cmp	r3, r4
 8000b72:	d9fa      	bls.n	8000b6a <_free_r+0x46>
 8000b74:	6811      	ldr	r1, [r2, #0]
 8000b76:	1855      	adds	r5, r2, r1
 8000b78:	42a5      	cmp	r5, r4
 8000b7a:	d10b      	bne.n	8000b94 <_free_r+0x70>
 8000b7c:	6824      	ldr	r4, [r4, #0]
 8000b7e:	4421      	add	r1, r4
 8000b80:	1854      	adds	r4, r2, r1
 8000b82:	42a3      	cmp	r3, r4
 8000b84:	6011      	str	r1, [r2, #0]
 8000b86:	d1e0      	bne.n	8000b4a <_free_r+0x26>
 8000b88:	681c      	ldr	r4, [r3, #0]
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	6053      	str	r3, [r2, #4]
 8000b8e:	440c      	add	r4, r1
 8000b90:	6014      	str	r4, [r2, #0]
 8000b92:	e7da      	b.n	8000b4a <_free_r+0x26>
 8000b94:	d902      	bls.n	8000b9c <_free_r+0x78>
 8000b96:	230c      	movs	r3, #12
 8000b98:	6003      	str	r3, [r0, #0]
 8000b9a:	e7d6      	b.n	8000b4a <_free_r+0x26>
 8000b9c:	6825      	ldr	r5, [r4, #0]
 8000b9e:	1961      	adds	r1, r4, r5
 8000ba0:	428b      	cmp	r3, r1
 8000ba2:	bf04      	itt	eq
 8000ba4:	6819      	ldreq	r1, [r3, #0]
 8000ba6:	685b      	ldreq	r3, [r3, #4]
 8000ba8:	6063      	str	r3, [r4, #4]
 8000baa:	bf04      	itt	eq
 8000bac:	1949      	addeq	r1, r1, r5
 8000bae:	6021      	streq	r1, [r4, #0]
 8000bb0:	6054      	str	r4, [r2, #4]
 8000bb2:	e7ca      	b.n	8000b4a <_free_r+0x26>
 8000bb4:	b003      	add	sp, #12
 8000bb6:	bd30      	pop	{r4, r5, pc}
 8000bb8:	200001f8 	.word	0x200001f8

08000bbc <sbrk_aligned>:
 8000bbc:	b570      	push	{r4, r5, r6, lr}
 8000bbe:	4e0e      	ldr	r6, [pc, #56]	; (8000bf8 <sbrk_aligned+0x3c>)
 8000bc0:	460c      	mov	r4, r1
 8000bc2:	6831      	ldr	r1, [r6, #0]
 8000bc4:	4605      	mov	r5, r0
 8000bc6:	b911      	cbnz	r1, 8000bce <sbrk_aligned+0x12>
 8000bc8:	f000 fba6 	bl	8001318 <_sbrk_r>
 8000bcc:	6030      	str	r0, [r6, #0]
 8000bce:	4621      	mov	r1, r4
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	f000 fba1 	bl	8001318 <_sbrk_r>
 8000bd6:	1c43      	adds	r3, r0, #1
 8000bd8:	d00a      	beq.n	8000bf0 <sbrk_aligned+0x34>
 8000bda:	1cc4      	adds	r4, r0, #3
 8000bdc:	f024 0403 	bic.w	r4, r4, #3
 8000be0:	42a0      	cmp	r0, r4
 8000be2:	d007      	beq.n	8000bf4 <sbrk_aligned+0x38>
 8000be4:	1a21      	subs	r1, r4, r0
 8000be6:	4628      	mov	r0, r5
 8000be8:	f000 fb96 	bl	8001318 <_sbrk_r>
 8000bec:	3001      	adds	r0, #1
 8000bee:	d101      	bne.n	8000bf4 <sbrk_aligned+0x38>
 8000bf0:	f04f 34ff 	mov.w	r4, #4294967295
 8000bf4:	4620      	mov	r0, r4
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	200001fc 	.word	0x200001fc

08000bfc <_malloc_r>:
 8000bfc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c00:	1ccd      	adds	r5, r1, #3
 8000c02:	f025 0503 	bic.w	r5, r5, #3
 8000c06:	3508      	adds	r5, #8
 8000c08:	2d0c      	cmp	r5, #12
 8000c0a:	bf38      	it	cc
 8000c0c:	250c      	movcc	r5, #12
 8000c0e:	2d00      	cmp	r5, #0
 8000c10:	4607      	mov	r7, r0
 8000c12:	db01      	blt.n	8000c18 <_malloc_r+0x1c>
 8000c14:	42a9      	cmp	r1, r5
 8000c16:	d905      	bls.n	8000c24 <_malloc_r+0x28>
 8000c18:	230c      	movs	r3, #12
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	4630      	mov	r0, r6
 8000c20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000cf8 <_malloc_r+0xfc>
 8000c28:	f000 f868 	bl	8000cfc <__malloc_lock>
 8000c2c:	f8d8 3000 	ldr.w	r3, [r8]
 8000c30:	461c      	mov	r4, r3
 8000c32:	bb5c      	cbnz	r4, 8000c8c <_malloc_r+0x90>
 8000c34:	4629      	mov	r1, r5
 8000c36:	4638      	mov	r0, r7
 8000c38:	f7ff ffc0 	bl	8000bbc <sbrk_aligned>
 8000c3c:	1c43      	adds	r3, r0, #1
 8000c3e:	4604      	mov	r4, r0
 8000c40:	d155      	bne.n	8000cee <_malloc_r+0xf2>
 8000c42:	f8d8 4000 	ldr.w	r4, [r8]
 8000c46:	4626      	mov	r6, r4
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d145      	bne.n	8000cd8 <_malloc_r+0xdc>
 8000c4c:	2c00      	cmp	r4, #0
 8000c4e:	d048      	beq.n	8000ce2 <_malloc_r+0xe6>
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	4631      	mov	r1, r6
 8000c54:	4638      	mov	r0, r7
 8000c56:	eb04 0903 	add.w	r9, r4, r3
 8000c5a:	f000 fb5d 	bl	8001318 <_sbrk_r>
 8000c5e:	4581      	cmp	r9, r0
 8000c60:	d13f      	bne.n	8000ce2 <_malloc_r+0xe6>
 8000c62:	6821      	ldr	r1, [r4, #0]
 8000c64:	1a6d      	subs	r5, r5, r1
 8000c66:	4629      	mov	r1, r5
 8000c68:	4638      	mov	r0, r7
 8000c6a:	f7ff ffa7 	bl	8000bbc <sbrk_aligned>
 8000c6e:	3001      	adds	r0, #1
 8000c70:	d037      	beq.n	8000ce2 <_malloc_r+0xe6>
 8000c72:	6823      	ldr	r3, [r4, #0]
 8000c74:	442b      	add	r3, r5
 8000c76:	6023      	str	r3, [r4, #0]
 8000c78:	f8d8 3000 	ldr.w	r3, [r8]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d038      	beq.n	8000cf2 <_malloc_r+0xf6>
 8000c80:	685a      	ldr	r2, [r3, #4]
 8000c82:	42a2      	cmp	r2, r4
 8000c84:	d12b      	bne.n	8000cde <_malloc_r+0xe2>
 8000c86:	2200      	movs	r2, #0
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	e00f      	b.n	8000cac <_malloc_r+0xb0>
 8000c8c:	6822      	ldr	r2, [r4, #0]
 8000c8e:	1b52      	subs	r2, r2, r5
 8000c90:	d41f      	bmi.n	8000cd2 <_malloc_r+0xd6>
 8000c92:	2a0b      	cmp	r2, #11
 8000c94:	d917      	bls.n	8000cc6 <_malloc_r+0xca>
 8000c96:	1961      	adds	r1, r4, r5
 8000c98:	42a3      	cmp	r3, r4
 8000c9a:	6025      	str	r5, [r4, #0]
 8000c9c:	bf18      	it	ne
 8000c9e:	6059      	strne	r1, [r3, #4]
 8000ca0:	6863      	ldr	r3, [r4, #4]
 8000ca2:	bf08      	it	eq
 8000ca4:	f8c8 1000 	streq.w	r1, [r8]
 8000ca8:	5162      	str	r2, [r4, r5]
 8000caa:	604b      	str	r3, [r1, #4]
 8000cac:	4638      	mov	r0, r7
 8000cae:	f104 060b 	add.w	r6, r4, #11
 8000cb2:	f000 f829 	bl	8000d08 <__malloc_unlock>
 8000cb6:	f026 0607 	bic.w	r6, r6, #7
 8000cba:	1d23      	adds	r3, r4, #4
 8000cbc:	1af2      	subs	r2, r6, r3
 8000cbe:	d0ae      	beq.n	8000c1e <_malloc_r+0x22>
 8000cc0:	1b9b      	subs	r3, r3, r6
 8000cc2:	50a3      	str	r3, [r4, r2]
 8000cc4:	e7ab      	b.n	8000c1e <_malloc_r+0x22>
 8000cc6:	42a3      	cmp	r3, r4
 8000cc8:	6862      	ldr	r2, [r4, #4]
 8000cca:	d1dd      	bne.n	8000c88 <_malloc_r+0x8c>
 8000ccc:	f8c8 2000 	str.w	r2, [r8]
 8000cd0:	e7ec      	b.n	8000cac <_malloc_r+0xb0>
 8000cd2:	4623      	mov	r3, r4
 8000cd4:	6864      	ldr	r4, [r4, #4]
 8000cd6:	e7ac      	b.n	8000c32 <_malloc_r+0x36>
 8000cd8:	4634      	mov	r4, r6
 8000cda:	6876      	ldr	r6, [r6, #4]
 8000cdc:	e7b4      	b.n	8000c48 <_malloc_r+0x4c>
 8000cde:	4613      	mov	r3, r2
 8000ce0:	e7cc      	b.n	8000c7c <_malloc_r+0x80>
 8000ce2:	230c      	movs	r3, #12
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4638      	mov	r0, r7
 8000ce8:	f000 f80e 	bl	8000d08 <__malloc_unlock>
 8000cec:	e797      	b.n	8000c1e <_malloc_r+0x22>
 8000cee:	6025      	str	r5, [r4, #0]
 8000cf0:	e7dc      	b.n	8000cac <_malloc_r+0xb0>
 8000cf2:	605b      	str	r3, [r3, #4]
 8000cf4:	deff      	udf	#255	; 0xff
 8000cf6:	bf00      	nop
 8000cf8:	200001f8 	.word	0x200001f8

08000cfc <__malloc_lock>:
 8000cfc:	4801      	ldr	r0, [pc, #4]	; (8000d04 <__malloc_lock+0x8>)
 8000cfe:	f7ff bf0f 	b.w	8000b20 <__retarget_lock_acquire_recursive>
 8000d02:	bf00      	nop
 8000d04:	200001f4 	.word	0x200001f4

08000d08 <__malloc_unlock>:
 8000d08:	4801      	ldr	r0, [pc, #4]	; (8000d10 <__malloc_unlock+0x8>)
 8000d0a:	f7ff bf0a 	b.w	8000b22 <__retarget_lock_release_recursive>
 8000d0e:	bf00      	nop
 8000d10:	200001f4 	.word	0x200001f4

08000d14 <__ssputs_r>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	688e      	ldr	r6, [r1, #8]
 8000d1a:	461f      	mov	r7, r3
 8000d1c:	42be      	cmp	r6, r7
 8000d1e:	680b      	ldr	r3, [r1, #0]
 8000d20:	4682      	mov	sl, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	4690      	mov	r8, r2
 8000d26:	d82c      	bhi.n	8000d82 <__ssputs_r+0x6e>
 8000d28:	898a      	ldrh	r2, [r1, #12]
 8000d2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000d2e:	d026      	beq.n	8000d7e <__ssputs_r+0x6a>
 8000d30:	6965      	ldr	r5, [r4, #20]
 8000d32:	6909      	ldr	r1, [r1, #16]
 8000d34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000d38:	eba3 0901 	sub.w	r9, r3, r1
 8000d3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000d40:	1c7b      	adds	r3, r7, #1
 8000d42:	444b      	add	r3, r9
 8000d44:	106d      	asrs	r5, r5, #1
 8000d46:	429d      	cmp	r5, r3
 8000d48:	bf38      	it	cc
 8000d4a:	461d      	movcc	r5, r3
 8000d4c:	0553      	lsls	r3, r2, #21
 8000d4e:	d527      	bpl.n	8000da0 <__ssputs_r+0x8c>
 8000d50:	4629      	mov	r1, r5
 8000d52:	f7ff ff53 	bl	8000bfc <_malloc_r>
 8000d56:	4606      	mov	r6, r0
 8000d58:	b360      	cbz	r0, 8000db4 <__ssputs_r+0xa0>
 8000d5a:	6921      	ldr	r1, [r4, #16]
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	f000 faeb 	bl	8001338 <memcpy>
 8000d62:	89a3      	ldrh	r3, [r4, #12]
 8000d64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d6c:	81a3      	strh	r3, [r4, #12]
 8000d6e:	6126      	str	r6, [r4, #16]
 8000d70:	6165      	str	r5, [r4, #20]
 8000d72:	444e      	add	r6, r9
 8000d74:	eba5 0509 	sub.w	r5, r5, r9
 8000d78:	6026      	str	r6, [r4, #0]
 8000d7a:	60a5      	str	r5, [r4, #8]
 8000d7c:	463e      	mov	r6, r7
 8000d7e:	42be      	cmp	r6, r7
 8000d80:	d900      	bls.n	8000d84 <__ssputs_r+0x70>
 8000d82:	463e      	mov	r6, r7
 8000d84:	6820      	ldr	r0, [r4, #0]
 8000d86:	4632      	mov	r2, r6
 8000d88:	4641      	mov	r1, r8
 8000d8a:	f000 faab 	bl	80012e4 <memmove>
 8000d8e:	68a3      	ldr	r3, [r4, #8]
 8000d90:	1b9b      	subs	r3, r3, r6
 8000d92:	60a3      	str	r3, [r4, #8]
 8000d94:	6823      	ldr	r3, [r4, #0]
 8000d96:	4433      	add	r3, r6
 8000d98:	6023      	str	r3, [r4, #0]
 8000d9a:	2000      	movs	r0, #0
 8000d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da0:	462a      	mov	r2, r5
 8000da2:	f000 fad7 	bl	8001354 <_realloc_r>
 8000da6:	4606      	mov	r6, r0
 8000da8:	2800      	cmp	r0, #0
 8000daa:	d1e0      	bne.n	8000d6e <__ssputs_r+0x5a>
 8000dac:	6921      	ldr	r1, [r4, #16]
 8000dae:	4650      	mov	r0, sl
 8000db0:	f7ff feb8 	bl	8000b24 <_free_r>
 8000db4:	230c      	movs	r3, #12
 8000db6:	f8ca 3000 	str.w	r3, [sl]
 8000dba:	89a3      	ldrh	r3, [r4, #12]
 8000dbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000dc0:	81a3      	strh	r3, [r4, #12]
 8000dc2:	f04f 30ff 	mov.w	r0, #4294967295
 8000dc6:	e7e9      	b.n	8000d9c <__ssputs_r+0x88>

08000dc8 <_svfiprintf_r>:
 8000dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dcc:	4698      	mov	r8, r3
 8000dce:	898b      	ldrh	r3, [r1, #12]
 8000dd0:	061b      	lsls	r3, r3, #24
 8000dd2:	b09d      	sub	sp, #116	; 0x74
 8000dd4:	4607      	mov	r7, r0
 8000dd6:	460d      	mov	r5, r1
 8000dd8:	4614      	mov	r4, r2
 8000dda:	d50e      	bpl.n	8000dfa <_svfiprintf_r+0x32>
 8000ddc:	690b      	ldr	r3, [r1, #16]
 8000dde:	b963      	cbnz	r3, 8000dfa <_svfiprintf_r+0x32>
 8000de0:	2140      	movs	r1, #64	; 0x40
 8000de2:	f7ff ff0b 	bl	8000bfc <_malloc_r>
 8000de6:	6028      	str	r0, [r5, #0]
 8000de8:	6128      	str	r0, [r5, #16]
 8000dea:	b920      	cbnz	r0, 8000df6 <_svfiprintf_r+0x2e>
 8000dec:	230c      	movs	r3, #12
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	f04f 30ff 	mov.w	r0, #4294967295
 8000df4:	e0d0      	b.n	8000f98 <_svfiprintf_r+0x1d0>
 8000df6:	2340      	movs	r3, #64	; 0x40
 8000df8:	616b      	str	r3, [r5, #20]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	9309      	str	r3, [sp, #36]	; 0x24
 8000dfe:	2320      	movs	r3, #32
 8000e00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e04:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e08:	2330      	movs	r3, #48	; 0x30
 8000e0a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8000fb0 <_svfiprintf_r+0x1e8>
 8000e0e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000e12:	f04f 0901 	mov.w	r9, #1
 8000e16:	4623      	mov	r3, r4
 8000e18:	469a      	mov	sl, r3
 8000e1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e1e:	b10a      	cbz	r2, 8000e24 <_svfiprintf_r+0x5c>
 8000e20:	2a25      	cmp	r2, #37	; 0x25
 8000e22:	d1f9      	bne.n	8000e18 <_svfiprintf_r+0x50>
 8000e24:	ebba 0b04 	subs.w	fp, sl, r4
 8000e28:	d00b      	beq.n	8000e42 <_svfiprintf_r+0x7a>
 8000e2a:	465b      	mov	r3, fp
 8000e2c:	4622      	mov	r2, r4
 8000e2e:	4629      	mov	r1, r5
 8000e30:	4638      	mov	r0, r7
 8000e32:	f7ff ff6f 	bl	8000d14 <__ssputs_r>
 8000e36:	3001      	adds	r0, #1
 8000e38:	f000 80a9 	beq.w	8000f8e <_svfiprintf_r+0x1c6>
 8000e3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000e3e:	445a      	add	r2, fp
 8000e40:	9209      	str	r2, [sp, #36]	; 0x24
 8000e42:	f89a 3000 	ldrb.w	r3, [sl]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	f000 80a1 	beq.w	8000f8e <_svfiprintf_r+0x1c6>
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8000e52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e56:	f10a 0a01 	add.w	sl, sl, #1
 8000e5a:	9304      	str	r3, [sp, #16]
 8000e5c:	9307      	str	r3, [sp, #28]
 8000e5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000e62:	931a      	str	r3, [sp, #104]	; 0x68
 8000e64:	4654      	mov	r4, sl
 8000e66:	2205      	movs	r2, #5
 8000e68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e6c:	4850      	ldr	r0, [pc, #320]	; (8000fb0 <_svfiprintf_r+0x1e8>)
 8000e6e:	f7ff f9af 	bl	80001d0 <memchr>
 8000e72:	9a04      	ldr	r2, [sp, #16]
 8000e74:	b9d8      	cbnz	r0, 8000eae <_svfiprintf_r+0xe6>
 8000e76:	06d0      	lsls	r0, r2, #27
 8000e78:	bf44      	itt	mi
 8000e7a:	2320      	movmi	r3, #32
 8000e7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e80:	0711      	lsls	r1, r2, #28
 8000e82:	bf44      	itt	mi
 8000e84:	232b      	movmi	r3, #43	; 0x2b
 8000e86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000e8a:	f89a 3000 	ldrb.w	r3, [sl]
 8000e8e:	2b2a      	cmp	r3, #42	; 0x2a
 8000e90:	d015      	beq.n	8000ebe <_svfiprintf_r+0xf6>
 8000e92:	9a07      	ldr	r2, [sp, #28]
 8000e94:	4654      	mov	r4, sl
 8000e96:	2000      	movs	r0, #0
 8000e98:	f04f 0c0a 	mov.w	ip, #10
 8000e9c:	4621      	mov	r1, r4
 8000e9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ea2:	3b30      	subs	r3, #48	; 0x30
 8000ea4:	2b09      	cmp	r3, #9
 8000ea6:	d94d      	bls.n	8000f44 <_svfiprintf_r+0x17c>
 8000ea8:	b1b0      	cbz	r0, 8000ed8 <_svfiprintf_r+0x110>
 8000eaa:	9207      	str	r2, [sp, #28]
 8000eac:	e014      	b.n	8000ed8 <_svfiprintf_r+0x110>
 8000eae:	eba0 0308 	sub.w	r3, r0, r8
 8000eb2:	fa09 f303 	lsl.w	r3, r9, r3
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	9304      	str	r3, [sp, #16]
 8000eba:	46a2      	mov	sl, r4
 8000ebc:	e7d2      	b.n	8000e64 <_svfiprintf_r+0x9c>
 8000ebe:	9b03      	ldr	r3, [sp, #12]
 8000ec0:	1d19      	adds	r1, r3, #4
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	9103      	str	r1, [sp, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	bfbb      	ittet	lt
 8000eca:	425b      	neglt	r3, r3
 8000ecc:	f042 0202 	orrlt.w	r2, r2, #2
 8000ed0:	9307      	strge	r3, [sp, #28]
 8000ed2:	9307      	strlt	r3, [sp, #28]
 8000ed4:	bfb8      	it	lt
 8000ed6:	9204      	strlt	r2, [sp, #16]
 8000ed8:	7823      	ldrb	r3, [r4, #0]
 8000eda:	2b2e      	cmp	r3, #46	; 0x2e
 8000edc:	d10c      	bne.n	8000ef8 <_svfiprintf_r+0x130>
 8000ede:	7863      	ldrb	r3, [r4, #1]
 8000ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8000ee2:	d134      	bne.n	8000f4e <_svfiprintf_r+0x186>
 8000ee4:	9b03      	ldr	r3, [sp, #12]
 8000ee6:	1d1a      	adds	r2, r3, #4
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	9203      	str	r2, [sp, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	bfb8      	it	lt
 8000ef0:	f04f 33ff 	movlt.w	r3, #4294967295
 8000ef4:	3402      	adds	r4, #2
 8000ef6:	9305      	str	r3, [sp, #20]
 8000ef8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8000fc0 <_svfiprintf_r+0x1f8>
 8000efc:	7821      	ldrb	r1, [r4, #0]
 8000efe:	2203      	movs	r2, #3
 8000f00:	4650      	mov	r0, sl
 8000f02:	f7ff f965 	bl	80001d0 <memchr>
 8000f06:	b138      	cbz	r0, 8000f18 <_svfiprintf_r+0x150>
 8000f08:	9b04      	ldr	r3, [sp, #16]
 8000f0a:	eba0 000a 	sub.w	r0, r0, sl
 8000f0e:	2240      	movs	r2, #64	; 0x40
 8000f10:	4082      	lsls	r2, r0
 8000f12:	4313      	orrs	r3, r2
 8000f14:	3401      	adds	r4, #1
 8000f16:	9304      	str	r3, [sp, #16]
 8000f18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f1c:	4825      	ldr	r0, [pc, #148]	; (8000fb4 <_svfiprintf_r+0x1ec>)
 8000f1e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000f22:	2206      	movs	r2, #6
 8000f24:	f7ff f954 	bl	80001d0 <memchr>
 8000f28:	2800      	cmp	r0, #0
 8000f2a:	d038      	beq.n	8000f9e <_svfiprintf_r+0x1d6>
 8000f2c:	4b22      	ldr	r3, [pc, #136]	; (8000fb8 <_svfiprintf_r+0x1f0>)
 8000f2e:	bb1b      	cbnz	r3, 8000f78 <_svfiprintf_r+0x1b0>
 8000f30:	9b03      	ldr	r3, [sp, #12]
 8000f32:	3307      	adds	r3, #7
 8000f34:	f023 0307 	bic.w	r3, r3, #7
 8000f38:	3308      	adds	r3, #8
 8000f3a:	9303      	str	r3, [sp, #12]
 8000f3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000f3e:	4433      	add	r3, r6
 8000f40:	9309      	str	r3, [sp, #36]	; 0x24
 8000f42:	e768      	b.n	8000e16 <_svfiprintf_r+0x4e>
 8000f44:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f48:	460c      	mov	r4, r1
 8000f4a:	2001      	movs	r0, #1
 8000f4c:	e7a6      	b.n	8000e9c <_svfiprintf_r+0xd4>
 8000f4e:	2300      	movs	r3, #0
 8000f50:	3401      	adds	r4, #1
 8000f52:	9305      	str	r3, [sp, #20]
 8000f54:	4619      	mov	r1, r3
 8000f56:	f04f 0c0a 	mov.w	ip, #10
 8000f5a:	4620      	mov	r0, r4
 8000f5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f60:	3a30      	subs	r2, #48	; 0x30
 8000f62:	2a09      	cmp	r2, #9
 8000f64:	d903      	bls.n	8000f6e <_svfiprintf_r+0x1a6>
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d0c6      	beq.n	8000ef8 <_svfiprintf_r+0x130>
 8000f6a:	9105      	str	r1, [sp, #20]
 8000f6c:	e7c4      	b.n	8000ef8 <_svfiprintf_r+0x130>
 8000f6e:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f72:	4604      	mov	r4, r0
 8000f74:	2301      	movs	r3, #1
 8000f76:	e7f0      	b.n	8000f5a <_svfiprintf_r+0x192>
 8000f78:	ab03      	add	r3, sp, #12
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	462a      	mov	r2, r5
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <_svfiprintf_r+0x1f4>)
 8000f80:	a904      	add	r1, sp, #16
 8000f82:	4638      	mov	r0, r7
 8000f84:	f3af 8000 	nop.w
 8000f88:	1c42      	adds	r2, r0, #1
 8000f8a:	4606      	mov	r6, r0
 8000f8c:	d1d6      	bne.n	8000f3c <_svfiprintf_r+0x174>
 8000f8e:	89ab      	ldrh	r3, [r5, #12]
 8000f90:	065b      	lsls	r3, r3, #25
 8000f92:	f53f af2d 	bmi.w	8000df0 <_svfiprintf_r+0x28>
 8000f96:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000f98:	b01d      	add	sp, #116	; 0x74
 8000f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f9e:	ab03      	add	r3, sp, #12
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	462a      	mov	r2, r5
 8000fa4:	4b05      	ldr	r3, [pc, #20]	; (8000fbc <_svfiprintf_r+0x1f4>)
 8000fa6:	a904      	add	r1, sp, #16
 8000fa8:	4638      	mov	r0, r7
 8000faa:	f000 f879 	bl	80010a0 <_printf_i>
 8000fae:	e7eb      	b.n	8000f88 <_svfiprintf_r+0x1c0>
 8000fb0:	08001456 	.word	0x08001456
 8000fb4:	08001460 	.word	0x08001460
 8000fb8:	00000000 	.word	0x00000000
 8000fbc:	08000d15 	.word	0x08000d15
 8000fc0:	0800145c 	.word	0x0800145c

08000fc4 <_printf_common>:
 8000fc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fc8:	4616      	mov	r6, r2
 8000fca:	4699      	mov	r9, r3
 8000fcc:	688a      	ldr	r2, [r1, #8]
 8000fce:	690b      	ldr	r3, [r1, #16]
 8000fd0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000fd4:	4293      	cmp	r3, r2
 8000fd6:	bfb8      	it	lt
 8000fd8:	4613      	movlt	r3, r2
 8000fda:	6033      	str	r3, [r6, #0]
 8000fdc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000fe0:	4607      	mov	r7, r0
 8000fe2:	460c      	mov	r4, r1
 8000fe4:	b10a      	cbz	r2, 8000fea <_printf_common+0x26>
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	6033      	str	r3, [r6, #0]
 8000fea:	6823      	ldr	r3, [r4, #0]
 8000fec:	0699      	lsls	r1, r3, #26
 8000fee:	bf42      	ittt	mi
 8000ff0:	6833      	ldrmi	r3, [r6, #0]
 8000ff2:	3302      	addmi	r3, #2
 8000ff4:	6033      	strmi	r3, [r6, #0]
 8000ff6:	6825      	ldr	r5, [r4, #0]
 8000ff8:	f015 0506 	ands.w	r5, r5, #6
 8000ffc:	d106      	bne.n	800100c <_printf_common+0x48>
 8000ffe:	f104 0a19 	add.w	sl, r4, #25
 8001002:	68e3      	ldr	r3, [r4, #12]
 8001004:	6832      	ldr	r2, [r6, #0]
 8001006:	1a9b      	subs	r3, r3, r2
 8001008:	42ab      	cmp	r3, r5
 800100a:	dc26      	bgt.n	800105a <_printf_common+0x96>
 800100c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001010:	1e13      	subs	r3, r2, #0
 8001012:	6822      	ldr	r2, [r4, #0]
 8001014:	bf18      	it	ne
 8001016:	2301      	movne	r3, #1
 8001018:	0692      	lsls	r2, r2, #26
 800101a:	d42b      	bmi.n	8001074 <_printf_common+0xb0>
 800101c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001020:	4649      	mov	r1, r9
 8001022:	4638      	mov	r0, r7
 8001024:	47c0      	blx	r8
 8001026:	3001      	adds	r0, #1
 8001028:	d01e      	beq.n	8001068 <_printf_common+0xa4>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	6922      	ldr	r2, [r4, #16]
 800102e:	f003 0306 	and.w	r3, r3, #6
 8001032:	2b04      	cmp	r3, #4
 8001034:	bf02      	ittt	eq
 8001036:	68e5      	ldreq	r5, [r4, #12]
 8001038:	6833      	ldreq	r3, [r6, #0]
 800103a:	1aed      	subeq	r5, r5, r3
 800103c:	68a3      	ldr	r3, [r4, #8]
 800103e:	bf0c      	ite	eq
 8001040:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001044:	2500      	movne	r5, #0
 8001046:	4293      	cmp	r3, r2
 8001048:	bfc4      	itt	gt
 800104a:	1a9b      	subgt	r3, r3, r2
 800104c:	18ed      	addgt	r5, r5, r3
 800104e:	2600      	movs	r6, #0
 8001050:	341a      	adds	r4, #26
 8001052:	42b5      	cmp	r5, r6
 8001054:	d11a      	bne.n	800108c <_printf_common+0xc8>
 8001056:	2000      	movs	r0, #0
 8001058:	e008      	b.n	800106c <_printf_common+0xa8>
 800105a:	2301      	movs	r3, #1
 800105c:	4652      	mov	r2, sl
 800105e:	4649      	mov	r1, r9
 8001060:	4638      	mov	r0, r7
 8001062:	47c0      	blx	r8
 8001064:	3001      	adds	r0, #1
 8001066:	d103      	bne.n	8001070 <_printf_common+0xac>
 8001068:	f04f 30ff 	mov.w	r0, #4294967295
 800106c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001070:	3501      	adds	r5, #1
 8001072:	e7c6      	b.n	8001002 <_printf_common+0x3e>
 8001074:	18e1      	adds	r1, r4, r3
 8001076:	1c5a      	adds	r2, r3, #1
 8001078:	2030      	movs	r0, #48	; 0x30
 800107a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800107e:	4422      	add	r2, r4
 8001080:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001084:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001088:	3302      	adds	r3, #2
 800108a:	e7c7      	b.n	800101c <_printf_common+0x58>
 800108c:	2301      	movs	r3, #1
 800108e:	4622      	mov	r2, r4
 8001090:	4649      	mov	r1, r9
 8001092:	4638      	mov	r0, r7
 8001094:	47c0      	blx	r8
 8001096:	3001      	adds	r0, #1
 8001098:	d0e6      	beq.n	8001068 <_printf_common+0xa4>
 800109a:	3601      	adds	r6, #1
 800109c:	e7d9      	b.n	8001052 <_printf_common+0x8e>
	...

080010a0 <_printf_i>:
 80010a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010a4:	7e0f      	ldrb	r7, [r1, #24]
 80010a6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80010a8:	2f78      	cmp	r7, #120	; 0x78
 80010aa:	4691      	mov	r9, r2
 80010ac:	4680      	mov	r8, r0
 80010ae:	460c      	mov	r4, r1
 80010b0:	469a      	mov	sl, r3
 80010b2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80010b6:	d807      	bhi.n	80010c8 <_printf_i+0x28>
 80010b8:	2f62      	cmp	r7, #98	; 0x62
 80010ba:	d80a      	bhi.n	80010d2 <_printf_i+0x32>
 80010bc:	2f00      	cmp	r7, #0
 80010be:	f000 80d4 	beq.w	800126a <_printf_i+0x1ca>
 80010c2:	2f58      	cmp	r7, #88	; 0x58
 80010c4:	f000 80c0 	beq.w	8001248 <_printf_i+0x1a8>
 80010c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80010cc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80010d0:	e03a      	b.n	8001148 <_printf_i+0xa8>
 80010d2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80010d6:	2b15      	cmp	r3, #21
 80010d8:	d8f6      	bhi.n	80010c8 <_printf_i+0x28>
 80010da:	a101      	add	r1, pc, #4	; (adr r1, 80010e0 <_printf_i+0x40>)
 80010dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80010e0:	08001139 	.word	0x08001139
 80010e4:	0800114d 	.word	0x0800114d
 80010e8:	080010c9 	.word	0x080010c9
 80010ec:	080010c9 	.word	0x080010c9
 80010f0:	080010c9 	.word	0x080010c9
 80010f4:	080010c9 	.word	0x080010c9
 80010f8:	0800114d 	.word	0x0800114d
 80010fc:	080010c9 	.word	0x080010c9
 8001100:	080010c9 	.word	0x080010c9
 8001104:	080010c9 	.word	0x080010c9
 8001108:	080010c9 	.word	0x080010c9
 800110c:	08001251 	.word	0x08001251
 8001110:	08001179 	.word	0x08001179
 8001114:	0800120b 	.word	0x0800120b
 8001118:	080010c9 	.word	0x080010c9
 800111c:	080010c9 	.word	0x080010c9
 8001120:	08001273 	.word	0x08001273
 8001124:	080010c9 	.word	0x080010c9
 8001128:	08001179 	.word	0x08001179
 800112c:	080010c9 	.word	0x080010c9
 8001130:	080010c9 	.word	0x080010c9
 8001134:	08001213 	.word	0x08001213
 8001138:	682b      	ldr	r3, [r5, #0]
 800113a:	1d1a      	adds	r2, r3, #4
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	602a      	str	r2, [r5, #0]
 8001140:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001144:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001148:	2301      	movs	r3, #1
 800114a:	e09f      	b.n	800128c <_printf_i+0x1ec>
 800114c:	6820      	ldr	r0, [r4, #0]
 800114e:	682b      	ldr	r3, [r5, #0]
 8001150:	0607      	lsls	r7, r0, #24
 8001152:	f103 0104 	add.w	r1, r3, #4
 8001156:	6029      	str	r1, [r5, #0]
 8001158:	d501      	bpl.n	800115e <_printf_i+0xbe>
 800115a:	681e      	ldr	r6, [r3, #0]
 800115c:	e003      	b.n	8001166 <_printf_i+0xc6>
 800115e:	0646      	lsls	r6, r0, #25
 8001160:	d5fb      	bpl.n	800115a <_printf_i+0xba>
 8001162:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001166:	2e00      	cmp	r6, #0
 8001168:	da03      	bge.n	8001172 <_printf_i+0xd2>
 800116a:	232d      	movs	r3, #45	; 0x2d
 800116c:	4276      	negs	r6, r6
 800116e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001172:	485a      	ldr	r0, [pc, #360]	; (80012dc <_printf_i+0x23c>)
 8001174:	230a      	movs	r3, #10
 8001176:	e012      	b.n	800119e <_printf_i+0xfe>
 8001178:	682b      	ldr	r3, [r5, #0]
 800117a:	6820      	ldr	r0, [r4, #0]
 800117c:	1d19      	adds	r1, r3, #4
 800117e:	6029      	str	r1, [r5, #0]
 8001180:	0605      	lsls	r5, r0, #24
 8001182:	d501      	bpl.n	8001188 <_printf_i+0xe8>
 8001184:	681e      	ldr	r6, [r3, #0]
 8001186:	e002      	b.n	800118e <_printf_i+0xee>
 8001188:	0641      	lsls	r1, r0, #25
 800118a:	d5fb      	bpl.n	8001184 <_printf_i+0xe4>
 800118c:	881e      	ldrh	r6, [r3, #0]
 800118e:	4853      	ldr	r0, [pc, #332]	; (80012dc <_printf_i+0x23c>)
 8001190:	2f6f      	cmp	r7, #111	; 0x6f
 8001192:	bf0c      	ite	eq
 8001194:	2308      	moveq	r3, #8
 8001196:	230a      	movne	r3, #10
 8001198:	2100      	movs	r1, #0
 800119a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800119e:	6865      	ldr	r5, [r4, #4]
 80011a0:	60a5      	str	r5, [r4, #8]
 80011a2:	2d00      	cmp	r5, #0
 80011a4:	bfa2      	ittt	ge
 80011a6:	6821      	ldrge	r1, [r4, #0]
 80011a8:	f021 0104 	bicge.w	r1, r1, #4
 80011ac:	6021      	strge	r1, [r4, #0]
 80011ae:	b90e      	cbnz	r6, 80011b4 <_printf_i+0x114>
 80011b0:	2d00      	cmp	r5, #0
 80011b2:	d04b      	beq.n	800124c <_printf_i+0x1ac>
 80011b4:	4615      	mov	r5, r2
 80011b6:	fbb6 f1f3 	udiv	r1, r6, r3
 80011ba:	fb03 6711 	mls	r7, r3, r1, r6
 80011be:	5dc7      	ldrb	r7, [r0, r7]
 80011c0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80011c4:	4637      	mov	r7, r6
 80011c6:	42bb      	cmp	r3, r7
 80011c8:	460e      	mov	r6, r1
 80011ca:	d9f4      	bls.n	80011b6 <_printf_i+0x116>
 80011cc:	2b08      	cmp	r3, #8
 80011ce:	d10b      	bne.n	80011e8 <_printf_i+0x148>
 80011d0:	6823      	ldr	r3, [r4, #0]
 80011d2:	07de      	lsls	r6, r3, #31
 80011d4:	d508      	bpl.n	80011e8 <_printf_i+0x148>
 80011d6:	6923      	ldr	r3, [r4, #16]
 80011d8:	6861      	ldr	r1, [r4, #4]
 80011da:	4299      	cmp	r1, r3
 80011dc:	bfde      	ittt	le
 80011de:	2330      	movle	r3, #48	; 0x30
 80011e0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80011e4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80011e8:	1b52      	subs	r2, r2, r5
 80011ea:	6122      	str	r2, [r4, #16]
 80011ec:	f8cd a000 	str.w	sl, [sp]
 80011f0:	464b      	mov	r3, r9
 80011f2:	aa03      	add	r2, sp, #12
 80011f4:	4621      	mov	r1, r4
 80011f6:	4640      	mov	r0, r8
 80011f8:	f7ff fee4 	bl	8000fc4 <_printf_common>
 80011fc:	3001      	adds	r0, #1
 80011fe:	d14a      	bne.n	8001296 <_printf_i+0x1f6>
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	b004      	add	sp, #16
 8001206:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800120a:	6823      	ldr	r3, [r4, #0]
 800120c:	f043 0320 	orr.w	r3, r3, #32
 8001210:	6023      	str	r3, [r4, #0]
 8001212:	4833      	ldr	r0, [pc, #204]	; (80012e0 <_printf_i+0x240>)
 8001214:	2778      	movs	r7, #120	; 0x78
 8001216:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800121a:	6823      	ldr	r3, [r4, #0]
 800121c:	6829      	ldr	r1, [r5, #0]
 800121e:	061f      	lsls	r7, r3, #24
 8001220:	f851 6b04 	ldr.w	r6, [r1], #4
 8001224:	d402      	bmi.n	800122c <_printf_i+0x18c>
 8001226:	065f      	lsls	r7, r3, #25
 8001228:	bf48      	it	mi
 800122a:	b2b6      	uxthmi	r6, r6
 800122c:	07df      	lsls	r7, r3, #31
 800122e:	bf48      	it	mi
 8001230:	f043 0320 	orrmi.w	r3, r3, #32
 8001234:	6029      	str	r1, [r5, #0]
 8001236:	bf48      	it	mi
 8001238:	6023      	strmi	r3, [r4, #0]
 800123a:	b91e      	cbnz	r6, 8001244 <_printf_i+0x1a4>
 800123c:	6823      	ldr	r3, [r4, #0]
 800123e:	f023 0320 	bic.w	r3, r3, #32
 8001242:	6023      	str	r3, [r4, #0]
 8001244:	2310      	movs	r3, #16
 8001246:	e7a7      	b.n	8001198 <_printf_i+0xf8>
 8001248:	4824      	ldr	r0, [pc, #144]	; (80012dc <_printf_i+0x23c>)
 800124a:	e7e4      	b.n	8001216 <_printf_i+0x176>
 800124c:	4615      	mov	r5, r2
 800124e:	e7bd      	b.n	80011cc <_printf_i+0x12c>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	6826      	ldr	r6, [r4, #0]
 8001254:	6961      	ldr	r1, [r4, #20]
 8001256:	1d18      	adds	r0, r3, #4
 8001258:	6028      	str	r0, [r5, #0]
 800125a:	0635      	lsls	r5, r6, #24
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	d501      	bpl.n	8001264 <_printf_i+0x1c4>
 8001260:	6019      	str	r1, [r3, #0]
 8001262:	e002      	b.n	800126a <_printf_i+0x1ca>
 8001264:	0670      	lsls	r0, r6, #25
 8001266:	d5fb      	bpl.n	8001260 <_printf_i+0x1c0>
 8001268:	8019      	strh	r1, [r3, #0]
 800126a:	2300      	movs	r3, #0
 800126c:	6123      	str	r3, [r4, #16]
 800126e:	4615      	mov	r5, r2
 8001270:	e7bc      	b.n	80011ec <_printf_i+0x14c>
 8001272:	682b      	ldr	r3, [r5, #0]
 8001274:	1d1a      	adds	r2, r3, #4
 8001276:	602a      	str	r2, [r5, #0]
 8001278:	681d      	ldr	r5, [r3, #0]
 800127a:	6862      	ldr	r2, [r4, #4]
 800127c:	2100      	movs	r1, #0
 800127e:	4628      	mov	r0, r5
 8001280:	f7fe ffa6 	bl	80001d0 <memchr>
 8001284:	b108      	cbz	r0, 800128a <_printf_i+0x1ea>
 8001286:	1b40      	subs	r0, r0, r5
 8001288:	6060      	str	r0, [r4, #4]
 800128a:	6863      	ldr	r3, [r4, #4]
 800128c:	6123      	str	r3, [r4, #16]
 800128e:	2300      	movs	r3, #0
 8001290:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001294:	e7aa      	b.n	80011ec <_printf_i+0x14c>
 8001296:	6923      	ldr	r3, [r4, #16]
 8001298:	462a      	mov	r2, r5
 800129a:	4649      	mov	r1, r9
 800129c:	4640      	mov	r0, r8
 800129e:	47d0      	blx	sl
 80012a0:	3001      	adds	r0, #1
 80012a2:	d0ad      	beq.n	8001200 <_printf_i+0x160>
 80012a4:	6823      	ldr	r3, [r4, #0]
 80012a6:	079b      	lsls	r3, r3, #30
 80012a8:	d413      	bmi.n	80012d2 <_printf_i+0x232>
 80012aa:	68e0      	ldr	r0, [r4, #12]
 80012ac:	9b03      	ldr	r3, [sp, #12]
 80012ae:	4298      	cmp	r0, r3
 80012b0:	bfb8      	it	lt
 80012b2:	4618      	movlt	r0, r3
 80012b4:	e7a6      	b.n	8001204 <_printf_i+0x164>
 80012b6:	2301      	movs	r3, #1
 80012b8:	4632      	mov	r2, r6
 80012ba:	4649      	mov	r1, r9
 80012bc:	4640      	mov	r0, r8
 80012be:	47d0      	blx	sl
 80012c0:	3001      	adds	r0, #1
 80012c2:	d09d      	beq.n	8001200 <_printf_i+0x160>
 80012c4:	3501      	adds	r5, #1
 80012c6:	68e3      	ldr	r3, [r4, #12]
 80012c8:	9903      	ldr	r1, [sp, #12]
 80012ca:	1a5b      	subs	r3, r3, r1
 80012cc:	42ab      	cmp	r3, r5
 80012ce:	dcf2      	bgt.n	80012b6 <_printf_i+0x216>
 80012d0:	e7eb      	b.n	80012aa <_printf_i+0x20a>
 80012d2:	2500      	movs	r5, #0
 80012d4:	f104 0619 	add.w	r6, r4, #25
 80012d8:	e7f5      	b.n	80012c6 <_printf_i+0x226>
 80012da:	bf00      	nop
 80012dc:	08001467 	.word	0x08001467
 80012e0:	08001478 	.word	0x08001478

080012e4 <memmove>:
 80012e4:	4288      	cmp	r0, r1
 80012e6:	b510      	push	{r4, lr}
 80012e8:	eb01 0402 	add.w	r4, r1, r2
 80012ec:	d902      	bls.n	80012f4 <memmove+0x10>
 80012ee:	4284      	cmp	r4, r0
 80012f0:	4623      	mov	r3, r4
 80012f2:	d807      	bhi.n	8001304 <memmove+0x20>
 80012f4:	1e43      	subs	r3, r0, #1
 80012f6:	42a1      	cmp	r1, r4
 80012f8:	d008      	beq.n	800130c <memmove+0x28>
 80012fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80012fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001302:	e7f8      	b.n	80012f6 <memmove+0x12>
 8001304:	4402      	add	r2, r0
 8001306:	4601      	mov	r1, r0
 8001308:	428a      	cmp	r2, r1
 800130a:	d100      	bne.n	800130e <memmove+0x2a>
 800130c:	bd10      	pop	{r4, pc}
 800130e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001312:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001316:	e7f7      	b.n	8001308 <memmove+0x24>

08001318 <_sbrk_r>:
 8001318:	b538      	push	{r3, r4, r5, lr}
 800131a:	4d06      	ldr	r5, [pc, #24]	; (8001334 <_sbrk_r+0x1c>)
 800131c:	2300      	movs	r3, #0
 800131e:	4604      	mov	r4, r0
 8001320:	4608      	mov	r0, r1
 8001322:	602b      	str	r3, [r5, #0]
 8001324:	f7ff f8ce 	bl	80004c4 <_sbrk>
 8001328:	1c43      	adds	r3, r0, #1
 800132a:	d102      	bne.n	8001332 <_sbrk_r+0x1a>
 800132c:	682b      	ldr	r3, [r5, #0]
 800132e:	b103      	cbz	r3, 8001332 <_sbrk_r+0x1a>
 8001330:	6023      	str	r3, [r4, #0]
 8001332:	bd38      	pop	{r3, r4, r5, pc}
 8001334:	200001f0 	.word	0x200001f0

08001338 <memcpy>:
 8001338:	440a      	add	r2, r1
 800133a:	4291      	cmp	r1, r2
 800133c:	f100 33ff 	add.w	r3, r0, #4294967295
 8001340:	d100      	bne.n	8001344 <memcpy+0xc>
 8001342:	4770      	bx	lr
 8001344:	b510      	push	{r4, lr}
 8001346:	f811 4b01 	ldrb.w	r4, [r1], #1
 800134a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800134e:	4291      	cmp	r1, r2
 8001350:	d1f9      	bne.n	8001346 <memcpy+0xe>
 8001352:	bd10      	pop	{r4, pc}

08001354 <_realloc_r>:
 8001354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001358:	4680      	mov	r8, r0
 800135a:	4614      	mov	r4, r2
 800135c:	460e      	mov	r6, r1
 800135e:	b921      	cbnz	r1, 800136a <_realloc_r+0x16>
 8001360:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001364:	4611      	mov	r1, r2
 8001366:	f7ff bc49 	b.w	8000bfc <_malloc_r>
 800136a:	b92a      	cbnz	r2, 8001378 <_realloc_r+0x24>
 800136c:	f7ff fbda 	bl	8000b24 <_free_r>
 8001370:	4625      	mov	r5, r4
 8001372:	4628      	mov	r0, r5
 8001374:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001378:	f000 f81b 	bl	80013b2 <_malloc_usable_size_r>
 800137c:	4284      	cmp	r4, r0
 800137e:	4607      	mov	r7, r0
 8001380:	d802      	bhi.n	8001388 <_realloc_r+0x34>
 8001382:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001386:	d812      	bhi.n	80013ae <_realloc_r+0x5a>
 8001388:	4621      	mov	r1, r4
 800138a:	4640      	mov	r0, r8
 800138c:	f7ff fc36 	bl	8000bfc <_malloc_r>
 8001390:	4605      	mov	r5, r0
 8001392:	2800      	cmp	r0, #0
 8001394:	d0ed      	beq.n	8001372 <_realloc_r+0x1e>
 8001396:	42bc      	cmp	r4, r7
 8001398:	4622      	mov	r2, r4
 800139a:	4631      	mov	r1, r6
 800139c:	bf28      	it	cs
 800139e:	463a      	movcs	r2, r7
 80013a0:	f7ff ffca 	bl	8001338 <memcpy>
 80013a4:	4631      	mov	r1, r6
 80013a6:	4640      	mov	r0, r8
 80013a8:	f7ff fbbc 	bl	8000b24 <_free_r>
 80013ac:	e7e1      	b.n	8001372 <_realloc_r+0x1e>
 80013ae:	4635      	mov	r5, r6
 80013b0:	e7df      	b.n	8001372 <_realloc_r+0x1e>

080013b2 <_malloc_usable_size_r>:
 80013b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80013b6:	1f18      	subs	r0, r3, #4
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	bfbc      	itt	lt
 80013bc:	580b      	ldrlt	r3, [r1, r0]
 80013be:	18c0      	addlt	r0, r0, r3
 80013c0:	4770      	bx	lr
	...

080013c4 <_init>:
 80013c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013c6:	bf00      	nop
 80013c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013ca:	bc08      	pop	{r3}
 80013cc:	469e      	mov	lr, r3
 80013ce:	4770      	bx	lr

080013d0 <_fini>:
 80013d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013d2:	bf00      	nop
 80013d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013d6:	bc08      	pop	{r3}
 80013d8:	469e      	mov	lr, r3
 80013da:	4770      	bx	lr
