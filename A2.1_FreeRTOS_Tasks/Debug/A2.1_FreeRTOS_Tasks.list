
A2.1_FreeRTOS_Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000044c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046c8  080046c8  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  080046c8  080046c8  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046c8  080046c8  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046c8  080046c8  000146c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046cc  080046cc  000146cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  080046d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b64  20000060  08004730  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bc4  08004730  00021bc4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014caf  00000000  00000000  000200d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002d7d  00000000  00000000  00034d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00037b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebf  00000000  00000000  00038e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002c50  00000000  00000000  00039ce7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013b69  00000000  00000000  0003c937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f6bd6  00000000  00000000  000504a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000052e8  00000000  00000000  00147078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0014c360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004640 	.word	0x08004640

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08004640 	.word	0x08004640

080001d0 <main>:
void Task4(void *argument);


/* main --------------------------------------------------------------------*/
int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af02      	add	r7, sp, #8
  BaseType_t retVal;	// used for checking task creation

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d6:	f000 fa46 	bl	8000666 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80001da:	f000 f8e9 	bl	80003b0 <SystemClock_Config>

  // Initialize GPIO
  PortC_Init();
 80001de:	f000 f84d 	bl	800027c <PortC_Init>

  /* Create the tasks */
  retVal = xTaskCreate(Task1, "task1", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 4, &task1Handler);
 80001e2:	4b10      	ldr	r3, [pc, #64]	; (8000224 <main+0x54>)
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2304      	movs	r3, #4
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2280      	movs	r2, #128	; 0x80
 80001ee:	490e      	ldr	r1, [pc, #56]	; (8000228 <main+0x58>)
 80001f0:	480e      	ldr	r0, [pc, #56]	; (800022c <main+0x5c>)
 80001f2:	f002 fac8 	bl	8002786 <xTaskCreate>
 80001f6:	6078      	str	r0, [r7, #4]
  if (retVal != pdPASS) { while(1);}	// check if task creation failed
 80001f8:	687b      	ldr	r3, [r7, #4]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d000      	beq.n	8000200 <main+0x30>
 80001fe:	e7fe      	b.n	80001fe <main+0x2e>
//  if (retVal != pdPASS) { while(1);}	// check if task creation failed
//
//  retVal = xTaskCreate(Task3, "task3", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 2, &task3Handler);
//  if (retVal != pdPASS) { while(1);}	// check if task creation failed

  retVal = xTaskCreate(Task4, "task4", configMINIMAL_STACK_SIZE, NULL, tskIDLE_PRIORITY + 1, &task4Handler);
 8000200:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <main+0x60>)
 8000202:	9301      	str	r3, [sp, #4]
 8000204:	2301      	movs	r3, #1
 8000206:	9300      	str	r3, [sp, #0]
 8000208:	2300      	movs	r3, #0
 800020a:	2280      	movs	r2, #128	; 0x80
 800020c:	4909      	ldr	r1, [pc, #36]	; (8000234 <main+0x64>)
 800020e:	480a      	ldr	r0, [pc, #40]	; (8000238 <main+0x68>)
 8000210:	f002 fab9 	bl	8002786 <xTaskCreate>
 8000214:	6078      	str	r0, [r7, #4]
  if (retVal != pdPASS) { while(1);}	// check if task creation failed
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	2b01      	cmp	r3, #1
 800021a:	d000      	beq.n	800021e <main+0x4e>
 800021c:	e7fe      	b.n	800021c <main+0x4c>

  /* Start scheduler */
  vTaskStartScheduler();
 800021e:	f002 fc45 	bl	8002aac <vTaskStartScheduler>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  while (1)
 8000222:	e7fe      	b.n	8000222 <main+0x52>
 8000224:	2000007c 	.word	0x2000007c
 8000228:	08004658 	.word	0x08004658
 800022c:	0800023d 	.word	0x0800023d
 8000230:	20000080 	.word	0x20000080
 8000234:	08004660 	.word	0x08004660
 8000238:	0800025d 	.word	0x0800025d

0800023c <Task1>:
  }
}

/* Define Tasks --------------------------------------------------------------*/
void Task1(void *argument)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
 8000242:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		GPIOC->ODR ^= GPIO_ODR_OD0;			// toggle PC0
 8000244:	4b04      	ldr	r3, [pc, #16]	; (8000258 <Task1+0x1c>)
 8000246:	695b      	ldr	r3, [r3, #20]
 8000248:	4a03      	ldr	r2, [pc, #12]	; (8000258 <Task1+0x1c>)
 800024a:	f083 0301 	eor.w	r3, r3, #1
 800024e:	6153      	str	r3, [r2, #20]
		//for(int i=0; i<4000; i++);
		vTaskDelay(2 / portTICK_PERIOD_MS);
 8000250:	2002      	movs	r0, #2
 8000252:	f002 fbf7 	bl	8002a44 <vTaskDelay>
		GPIOC->ODR ^= GPIO_ODR_OD0;			// toggle PC0
 8000256:	e7f5      	b.n	8000244 <Task1+0x8>
 8000258:	48000800 	.word	0x48000800

0800025c <Task4>:
		vTaskDelay(5 / portTICK_PERIOD_MS);
	}
}

void Task4(void *argument)
{
 800025c:	b580      	push	{r7, lr}
 800025e:	b082      	sub	sp, #8
 8000260:	af00      	add	r7, sp, #0
 8000262:	6078      	str	r0, [r7, #4]
	for(;;)
	{
		GPIOC->ODR ^= GPIO_ODR_OD3;			// toggle PC3
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <Task4+0x1c>)
 8000266:	695b      	ldr	r3, [r3, #20]
 8000268:	4a03      	ldr	r2, [pc, #12]	; (8000278 <Task4+0x1c>)
 800026a:	f083 0308 	eor.w	r3, r3, #8
 800026e:	6153      	str	r3, [r2, #20]
		//for(int i=0; i<4000; i++);
		vTaskDelay(15 / portTICK_PERIOD_MS);
 8000270:	200f      	movs	r0, #15
 8000272:	f002 fbe7 	bl	8002a44 <vTaskDelay>
		GPIOC->ODR ^= GPIO_ODR_OD3;			// toggle PC3
 8000276:	e7f5      	b.n	8000264 <Task4+0x8>
 8000278:	48000800 	.word	0x48000800

0800027c <PortC_Init>:
 * Configure PC0-PC3 for GPIO Output
 * push-pull, low speed, no pull-up/pull-down resistors
 * Initialize all to 0s
 */
void PortC_Init(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
	// turn on clock to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000280:	4b19      	ldr	r3, [pc, #100]	; (80002e8 <PortC_Init+0x6c>)
 8000282:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000284:	4a18      	ldr	r2, [pc, #96]	; (80002e8 <PortC_Init+0x6c>)
 8000286:	f043 0304 	orr.w	r3, r3, #4
 800028a:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure PA5 for GPIO output to control LED
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 800028c:	4b17      	ldr	r3, [pc, #92]	; (80002ec <PortC_Init+0x70>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	4a16      	ldr	r2, [pc, #88]	; (80002ec <PortC_Init+0x70>)
 8000292:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000296:	6013      	str	r3, [r2, #0]
					    GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
	GPIOC->MODER   |=  ((1 << GPIO_MODER_MODE0_Pos) |
 8000298:	4b14      	ldr	r3, [pc, #80]	; (80002ec <PortC_Init+0x70>)
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	4a13      	ldr	r2, [pc, #76]	; (80002ec <PortC_Init+0x70>)
 800029e:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 80002a2:	6013      	str	r3, [r2, #0]
					    (1 << GPIO_MODER_MODE1_Pos) |
					    (1 << GPIO_MODER_MODE2_Pos) |
					    (1 << GPIO_MODER_MODE3_Pos));
	GPIOA->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 |
 80002a4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002a8:	685b      	ldr	r3, [r3, #4]
 80002aa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ae:	f023 030f 	bic.w	r3, r3, #15
 80002b2:	6053      	str	r3, [r2, #4]
					    GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1 |
 80002b4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b8:	689b      	ldr	r3, [r3, #8]
 80002ba:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002be:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002c2:	6093      	str	r3, [r2, #8]
					    GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
	GPIOA->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 80002c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002c8:	68db      	ldr	r3, [r3, #12]
 80002ca:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80002ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80002d2:	60d3      	str	r3, [r2, #12]
					    GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
	GPIOA->BSRR    =   (GPIO_BSRR_BR0 | GPIO_BSRR_BR1 |
 80002d4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002d8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 80002dc:	619a      	str	r2, [r3, #24]
					    GPIO_BSRR_BR2 | GPIO_BSRR_BR3);
}
 80002de:	bf00      	nop
 80002e0:	46bd      	mov	sp, r7
 80002e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e6:	4770      	bx	lr
 80002e8:	40021000 	.word	0x40021000
 80002ec:	48000800 	.word	0x48000800

080002f0 <RTOS_Stats_Timer_Init>:

/* Configure Timer to interrupt 100 kHz (100 times every Tick) */
void RTOS_Stats_Timer_Init(void)
{
 80002f0:	b480      	push	{r7}
 80002f2:	af00      	add	r7, sp, #0
	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);	// turn on TIM2
 80002f4:	4b15      	ldr	r3, [pc, #84]	; (800034c <RTOS_Stats_Timer_Init+0x5c>)
 80002f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80002f8:	4a14      	ldr	r2, [pc, #80]	; (800034c <RTOS_Stats_Timer_Init+0x5c>)
 80002fa:	f043 0301 	orr.w	r3, r3, #1
 80002fe:	6593      	str	r3, [r2, #88]	; 0x58
	TIM2->DIER |= (TIM_DIER_UIE);			// enable interrupts
 8000300:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000304:	68db      	ldr	r3, [r3, #12]
 8000306:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800030a:	f043 0301 	orr.w	r3, r3, #1
 800030e:	60d3      	str	r3, [r2, #12]
	TIM2->SR  &= ~(TIM_SR_UIF);				// clear interrupt flag
 8000310:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000314:	691b      	ldr	r3, [r3, #16]
 8000316:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800031a:	f023 0301 	bic.w	r3, r3, #1
 800031e:	6113      	str	r3, [r2, #16]
	TIM2->ARR = 400 - 1;
 8000320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000324:	f240 128f 	movw	r2, #399	; 0x18f
 8000328:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CR1 |= TIM_CR1_CEN;			    // start timer
 800032a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6013      	str	r3, [r2, #0]

	// enable interrupts
	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 800033a:	4b05      	ldr	r3, [pc, #20]	; (8000350 <RTOS_Stats_Timer_Init+0x60>)
 800033c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000340:	601a      	str	r2, [r3, #0]
}
 8000342:	bf00      	nop
 8000344:	46bd      	mov	sp, r7
 8000346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034a:	4770      	bx	lr
 800034c:	40021000 	.word	0x40021000
 8000350:	e000e100 	.word	0xe000e100

08000354 <TIM2_IRQHandler>:

/* Timer 2 is used to collect runtime stats for FreeRTOS tasks*/
void TIM2_IRQHandler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
	TIM2->SR &= ~(TIM_SR_UIF);
 8000358:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035c:	691b      	ldr	r3, [r3, #16]
 800035e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000362:	f023 0301 	bic.w	r3, r3, #1
 8000366:	6113      	str	r3, [r2, #16]
	ulHighFrequencyTimerTicks++;
 8000368:	4b04      	ldr	r3, [pc, #16]	; (800037c <TIM2_IRQHandler+0x28>)
 800036a:	681b      	ldr	r3, [r3, #0]
 800036c:	3301      	adds	r3, #1
 800036e:	4a03      	ldr	r2, [pc, #12]	; (800037c <TIM2_IRQHandler+0x28>)
 8000370:	6013      	str	r3, [r2, #0]
}
 8000372:	bf00      	nop
 8000374:	46bd      	mov	sp, r7
 8000376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037a:	4770      	bx	lr
 800037c:	20000084 	.word	0x20000084

08000380 <configureTimerForRunTimeStats>:

/* Built in functions for using FreeRTOS runtime stats need to be defined*/
void configureTimerForRunTimeStats(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
    ulHighFrequencyTimerTicks = 0;
 8000384:	4b03      	ldr	r3, [pc, #12]	; (8000394 <configureTimerForRunTimeStats+0x14>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
    RTOS_Stats_Timer_Init();
 800038a:	f7ff ffb1 	bl	80002f0 <RTOS_Stats_Timer_Init>
}
 800038e:	bf00      	nop
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	20000084 	.word	0x20000084

08000398 <getRunTimeCounterValue>:

unsigned long getRunTimeCounterValue(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
	return ulHighFrequencyTimerTicks;
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <getRunTimeCounterValue+0x14>)
 800039e:	681b      	ldr	r3, [r3, #0]
}
 80003a0:	4618      	mov	r0, r3
 80003a2:	46bd      	mov	sp, r7
 80003a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a8:	4770      	bx	lr
 80003aa:	bf00      	nop
 80003ac:	20000084 	.word	0x20000084

080003b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	b096      	sub	sp, #88	; 0x58
 80003b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003b6:	f107 0314 	add.w	r3, r7, #20
 80003ba:	2244      	movs	r2, #68	; 0x44
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f004 f854 	bl	800446c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003c4:	463b      	mov	r3, r7
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
 80003ca:	605a      	str	r2, [r3, #4]
 80003cc:	609a      	str	r2, [r3, #8]
 80003ce:	60da      	str	r2, [r3, #12]
 80003d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80003d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80003d6:	f000 fa6f 	bl	80008b8 <HAL_PWREx_ControlVoltageScaling>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d001      	beq.n	80003e4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80003e0:	f000 f84a 	bl	8000478 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80003e4:	2310      	movs	r3, #16
 80003e6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80003e8:	2301      	movs	r3, #1
 80003ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80003ec:	2300      	movs	r3, #0
 80003ee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80003f0:	2360      	movs	r3, #96	; 0x60
 80003f2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80003f4:	2302      	movs	r3, #2
 80003f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80003f8:	2301      	movs	r3, #1
 80003fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80003fc:	2301      	movs	r3, #1
 80003fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000400:	2314      	movs	r3, #20
 8000402:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000404:	2307      	movs	r3, #7
 8000406:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000408:	2302      	movs	r3, #2
 800040a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800040c:	2302      	movs	r3, #2
 800040e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000410:	f107 0314 	add.w	r3, r7, #20
 8000414:	4618      	mov	r0, r3
 8000416:	f000 faa5 	bl	8000964 <HAL_RCC_OscConfig>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d001      	beq.n	8000424 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000420:	f000 f82a 	bl	8000478 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000424:	230f      	movs	r3, #15
 8000426:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000428:	2303      	movs	r3, #3
 800042a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800042c:	2300      	movs	r3, #0
 800042e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000430:	2300      	movs	r3, #0
 8000432:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000434:	2300      	movs	r3, #0
 8000436:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000438:	463b      	mov	r3, r7
 800043a:	2102      	movs	r1, #2
 800043c:	4618      	mov	r0, r3
 800043e:	f000 fe6d 	bl	800111c <HAL_RCC_ClockConfig>
 8000442:	4603      	mov	r3, r0
 8000444:	2b00      	cmp	r3, #0
 8000446:	d001      	beq.n	800044c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000448:	f000 f816 	bl	8000478 <Error_Handler>
  }
}
 800044c:	bf00      	nop
 800044e:	3758      	adds	r7, #88	; 0x58
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	681b      	ldr	r3, [r3, #0]
 8000460:	4a04      	ldr	r2, [pc, #16]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000462:	4293      	cmp	r3, r2
 8000464:	d101      	bne.n	800046a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000466:	f000 f917 	bl	8000698 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800046a:	bf00      	nop
 800046c:	3708      	adds	r7, #8
 800046e:	46bd      	mov	sp, r7
 8000470:	bd80      	pop	{r7, pc}
 8000472:	bf00      	nop
 8000474:	40014400 	.word	0x40014400

08000478 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800047c:	b672      	cpsid	i
}
 800047e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000480:	e7fe      	b.n	8000480 <Error_Handler+0x8>
	...

08000484 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b082      	sub	sp, #8
 8000488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800048a:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <HAL_MspInit+0x4c>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	4a10      	ldr	r2, [pc, #64]	; (80004d0 <HAL_MspInit+0x4c>)
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	6613      	str	r3, [r2, #96]	; 0x60
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <HAL_MspInit+0x4c>)
 8000498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800049a:	f003 0301 	and.w	r3, r3, #1
 800049e:	607b      	str	r3, [r7, #4]
 80004a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004a2:	4b0b      	ldr	r3, [pc, #44]	; (80004d0 <HAL_MspInit+0x4c>)
 80004a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004a6:	4a0a      	ldr	r2, [pc, #40]	; (80004d0 <HAL_MspInit+0x4c>)
 80004a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004ac:	6593      	str	r3, [r2, #88]	; 0x58
 80004ae:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <HAL_MspInit+0x4c>)
 80004b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004b6:	603b      	str	r3, [r7, #0]
 80004b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80004ba:	2200      	movs	r2, #0
 80004bc:	210f      	movs	r1, #15
 80004be:	f06f 0001 	mvn.w	r0, #1
 80004c2:	f000 f9c1 	bl	8000848 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004c6:	bf00      	nop
 80004c8:	3708      	adds	r7, #8
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
 80004ce:	bf00      	nop
 80004d0:	40021000 	.word	0x40021000

080004d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004dc:	2300      	movs	r3, #0
 80004de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 80004e2:	4b2e      	ldr	r3, [pc, #184]	; (800059c <HAL_InitTick+0xc8>)
 80004e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004e6:	4a2d      	ldr	r2, [pc, #180]	; (800059c <HAL_InitTick+0xc8>)
 80004e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004ec:	6613      	str	r3, [r2, #96]	; 0x60
 80004ee:	4b2b      	ldr	r3, [pc, #172]	; (800059c <HAL_InitTick+0xc8>)
 80004f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004f6:	60bb      	str	r3, [r7, #8]
 80004f8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004fa:	f107 020c 	add.w	r2, r7, #12
 80004fe:	f107 0310 	add.w	r3, r7, #16
 8000502:	4611      	mov	r1, r2
 8000504:	4618      	mov	r0, r3
 8000506:	f000 ffb7 	bl	8001478 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 800050a:	f000 ff9f 	bl	800144c <HAL_RCC_GetPCLK2Freq>
 800050e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000512:	4a23      	ldr	r2, [pc, #140]	; (80005a0 <HAL_InitTick+0xcc>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	0c9b      	lsrs	r3, r3, #18
 800051a:	3b01      	subs	r3, #1
 800051c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 800051e:	4b21      	ldr	r3, [pc, #132]	; (80005a4 <HAL_InitTick+0xd0>)
 8000520:	4a21      	ldr	r2, [pc, #132]	; (80005a8 <HAL_InitTick+0xd4>)
 8000522:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8000524:	4b1f      	ldr	r3, [pc, #124]	; (80005a4 <HAL_InitTick+0xd0>)
 8000526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800052a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 800052c:	4a1d      	ldr	r2, [pc, #116]	; (80005a4 <HAL_InitTick+0xd0>)
 800052e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000530:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8000532:	4b1c      	ldr	r3, [pc, #112]	; (80005a4 <HAL_InitTick+0xd0>)
 8000534:	2200      	movs	r2, #0
 8000536:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000538:	4b1a      	ldr	r3, [pc, #104]	; (80005a4 <HAL_InitTick+0xd0>)
 800053a:	2200      	movs	r2, #0
 800053c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800053e:	4b19      	ldr	r3, [pc, #100]	; (80005a4 <HAL_InitTick+0xd0>)
 8000540:	2200      	movs	r2, #0
 8000542:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8000544:	4817      	ldr	r0, [pc, #92]	; (80005a4 <HAL_InitTick+0xd0>)
 8000546:	f001 f829 	bl	800159c <HAL_TIM_Base_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000550:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000554:	2b00      	cmp	r3, #0
 8000556:	d11b      	bne.n	8000590 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8000558:	4812      	ldr	r0, [pc, #72]	; (80005a4 <HAL_InitTick+0xd0>)
 800055a:	f001 f881 	bl	8001660 <HAL_TIM_Base_Start_IT>
 800055e:	4603      	mov	r3, r0
 8000560:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000564:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000568:	2b00      	cmp	r3, #0
 800056a:	d111      	bne.n	8000590 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800056c:	2019      	movs	r0, #25
 800056e:	f000 f987 	bl	8000880 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	2b0f      	cmp	r3, #15
 8000576:	d808      	bhi.n	800058a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8000578:	2200      	movs	r2, #0
 800057a:	6879      	ldr	r1, [r7, #4]
 800057c:	2019      	movs	r0, #25
 800057e:	f000 f963 	bl	8000848 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000582:	4a0a      	ldr	r2, [pc, #40]	; (80005ac <HAL_InitTick+0xd8>)
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	6013      	str	r3, [r2, #0]
 8000588:	e002      	b.n	8000590 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000590:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000594:	4618      	mov	r0, r3
 8000596:	3730      	adds	r7, #48	; 0x30
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}
 800059c:	40021000 	.word	0x40021000
 80005a0:	431bde83 	.word	0x431bde83
 80005a4:	20000088 	.word	0x20000088
 80005a8:	40014400 	.word	0x40014400
 80005ac:	20000004 	.word	0x20000004

080005b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005b4:	e7fe      	b.n	80005b4 <NMI_Handler+0x4>

080005b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b6:	b480      	push	{r7}
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005ba:	e7fe      	b.n	80005ba <HardFault_Handler+0x4>

080005bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005bc:	b480      	push	{r7}
 80005be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005c0:	e7fe      	b.n	80005c0 <MemManage_Handler+0x4>

080005c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005c2:	b480      	push	{r7}
 80005c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005c6:	e7fe      	b.n	80005c6 <BusFault_Handler+0x4>

080005c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005c8:	b480      	push	{r7}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005cc:	e7fe      	b.n	80005cc <UsageFault_Handler+0x4>

080005ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80005e0:	4802      	ldr	r0, [pc, #8]	; (80005ec <TIM1_UP_TIM16_IRQHandler+0x10>)
 80005e2:	f001 f8ad 	bl	8001740 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80005e6:	bf00      	nop
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	20000088 	.word	0x20000088

080005f0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f4:	4b06      	ldr	r3, [pc, #24]	; (8000610 <SystemInit+0x20>)
 80005f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005fa:	4a05      	ldr	r2, [pc, #20]	; (8000610 <SystemInit+0x20>)
 80005fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000600:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000604:	bf00      	nop
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	e000ed00 	.word	0xe000ed00

08000614 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000614:	f8df d034 	ldr.w	sp, [pc, #52]	; 800064c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000618:	f7ff ffea 	bl	80005f0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800061c:	480c      	ldr	r0, [pc, #48]	; (8000650 <LoopForever+0x6>)
  ldr r1, =_edata
 800061e:	490d      	ldr	r1, [pc, #52]	; (8000654 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000620:	4a0d      	ldr	r2, [pc, #52]	; (8000658 <LoopForever+0xe>)
  movs r3, #0
 8000622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000624:	e002      	b.n	800062c <LoopCopyDataInit>

08000626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800062a:	3304      	adds	r3, #4

0800062c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800062c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000630:	d3f9      	bcc.n	8000626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000632:	4a0a      	ldr	r2, [pc, #40]	; (800065c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000634:	4c0a      	ldr	r4, [pc, #40]	; (8000660 <LoopForever+0x16>)
  movs r3, #0
 8000636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000638:	e001      	b.n	800063e <LoopFillZerobss>

0800063a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800063a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800063c:	3204      	adds	r2, #4

0800063e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000640:	d3fb      	bcc.n	800063a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000642:	f003 ff71 	bl	8004528 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000646:	f7ff fdc3 	bl	80001d0 <main>

0800064a <LoopForever>:

LoopForever:
    b LoopForever
 800064a:	e7fe      	b.n	800064a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800064c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000650:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000654:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8000658:	080046d0 	.word	0x080046d0
  ldr r2, =_sbss
 800065c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8000660:	20001bc4 	.word	0x20001bc4

08000664 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000664:	e7fe      	b.n	8000664 <ADC1_2_IRQHandler>

08000666 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000666:	b580      	push	{r7, lr}
 8000668:	b082      	sub	sp, #8
 800066a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800066c:	2300      	movs	r3, #0
 800066e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000670:	2003      	movs	r0, #3
 8000672:	f000 f8de 	bl	8000832 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000676:	200f      	movs	r0, #15
 8000678:	f7ff ff2c 	bl	80004d4 <HAL_InitTick>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d002      	beq.n	8000688 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000682:	2301      	movs	r3, #1
 8000684:	71fb      	strb	r3, [r7, #7]
 8000686:	e001      	b.n	800068c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000688:	f7ff fefc 	bl	8000484 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800068c:	79fb      	ldrb	r3, [r7, #7]
}
 800068e:	4618      	mov	r0, r3
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <HAL_IncTick+0x20>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	4b06      	ldr	r3, [pc, #24]	; (80006bc <HAL_IncTick+0x24>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4413      	add	r3, r2
 80006a8:	4a04      	ldr	r2, [pc, #16]	; (80006bc <HAL_IncTick+0x24>)
 80006aa:	6013      	str	r3, [r2, #0]
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b4:	4770      	bx	lr
 80006b6:	bf00      	nop
 80006b8:	20000008 	.word	0x20000008
 80006bc:	200000d4 	.word	0x200000d4

080006c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006c0:	b480      	push	{r7}
 80006c2:	af00      	add	r7, sp, #0
  return uwTick;
 80006c4:	4b03      	ldr	r3, [pc, #12]	; (80006d4 <HAL_GetTick+0x14>)
 80006c6:	681b      	ldr	r3, [r3, #0]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	200000d4 	.word	0x200000d4

080006d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006d8:	b480      	push	{r7}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	f003 0307 	and.w	r3, r3, #7
 80006e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 80006ea:	68db      	ldr	r3, [r3, #12]
 80006ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ee:	68ba      	ldr	r2, [r7, #8]
 80006f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006f4:	4013      	ands	r3, r2
 80006f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000700:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000708:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800070a:	4a04      	ldr	r2, [pc, #16]	; (800071c <__NVIC_SetPriorityGrouping+0x44>)
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	60d3      	str	r3, [r2, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000724:	4b04      	ldr	r3, [pc, #16]	; (8000738 <__NVIC_GetPriorityGrouping+0x18>)
 8000726:	68db      	ldr	r3, [r3, #12]
 8000728:	0a1b      	lsrs	r3, r3, #8
 800072a:	f003 0307 	and.w	r3, r3, #7
}
 800072e:	4618      	mov	r0, r3
 8000730:	46bd      	mov	sp, r7
 8000732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000736:	4770      	bx	lr
 8000738:	e000ed00 	.word	0xe000ed00

0800073c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800073c:	b480      	push	{r7}
 800073e:	b083      	sub	sp, #12
 8000740:	af00      	add	r7, sp, #0
 8000742:	4603      	mov	r3, r0
 8000744:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800074a:	2b00      	cmp	r3, #0
 800074c:	db0b      	blt.n	8000766 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	f003 021f 	and.w	r2, r3, #31
 8000754:	4907      	ldr	r1, [pc, #28]	; (8000774 <__NVIC_EnableIRQ+0x38>)
 8000756:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075a:	095b      	lsrs	r3, r3, #5
 800075c:	2001      	movs	r0, #1
 800075e:	fa00 f202 	lsl.w	r2, r0, r2
 8000762:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000766:	bf00      	nop
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	e000e100 	.word	0xe000e100

08000778 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000778:	b480      	push	{r7}
 800077a:	b083      	sub	sp, #12
 800077c:	af00      	add	r7, sp, #0
 800077e:	4603      	mov	r3, r0
 8000780:	6039      	str	r1, [r7, #0]
 8000782:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000788:	2b00      	cmp	r3, #0
 800078a:	db0a      	blt.n	80007a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078c:	683b      	ldr	r3, [r7, #0]
 800078e:	b2da      	uxtb	r2, r3
 8000790:	490c      	ldr	r1, [pc, #48]	; (80007c4 <__NVIC_SetPriority+0x4c>)
 8000792:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000796:	0112      	lsls	r2, r2, #4
 8000798:	b2d2      	uxtb	r2, r2
 800079a:	440b      	add	r3, r1
 800079c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007a0:	e00a      	b.n	80007b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a2:	683b      	ldr	r3, [r7, #0]
 80007a4:	b2da      	uxtb	r2, r3
 80007a6:	4908      	ldr	r1, [pc, #32]	; (80007c8 <__NVIC_SetPriority+0x50>)
 80007a8:	79fb      	ldrb	r3, [r7, #7]
 80007aa:	f003 030f 	and.w	r3, r3, #15
 80007ae:	3b04      	subs	r3, #4
 80007b0:	0112      	lsls	r2, r2, #4
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	440b      	add	r3, r1
 80007b6:	761a      	strb	r2, [r3, #24]
}
 80007b8:	bf00      	nop
 80007ba:	370c      	adds	r7, #12
 80007bc:	46bd      	mov	sp, r7
 80007be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c2:	4770      	bx	lr
 80007c4:	e000e100 	.word	0xe000e100
 80007c8:	e000ed00 	.word	0xe000ed00

080007cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b089      	sub	sp, #36	; 0x24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	60f8      	str	r0, [r7, #12]
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007d8:	68fb      	ldr	r3, [r7, #12]
 80007da:	f003 0307 	and.w	r3, r3, #7
 80007de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007e0:	69fb      	ldr	r3, [r7, #28]
 80007e2:	f1c3 0307 	rsb	r3, r3, #7
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	bf28      	it	cs
 80007ea:	2304      	movcs	r3, #4
 80007ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2b06      	cmp	r3, #6
 80007f4:	d902      	bls.n	80007fc <NVIC_EncodePriority+0x30>
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	3b03      	subs	r3, #3
 80007fa:	e000      	b.n	80007fe <NVIC_EncodePriority+0x32>
 80007fc:	2300      	movs	r3, #0
 80007fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000800:	f04f 32ff 	mov.w	r2, #4294967295
 8000804:	69bb      	ldr	r3, [r7, #24]
 8000806:	fa02 f303 	lsl.w	r3, r2, r3
 800080a:	43da      	mvns	r2, r3
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	401a      	ands	r2, r3
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000814:	f04f 31ff 	mov.w	r1, #4294967295
 8000818:	697b      	ldr	r3, [r7, #20]
 800081a:	fa01 f303 	lsl.w	r3, r1, r3
 800081e:	43d9      	mvns	r1, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000824:	4313      	orrs	r3, r2
         );
}
 8000826:	4618      	mov	r0, r3
 8000828:	3724      	adds	r7, #36	; 0x24
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800083a:	6878      	ldr	r0, [r7, #4]
 800083c:	f7ff ff4c 	bl	80006d8 <__NVIC_SetPriorityGrouping>
}
 8000840:	bf00      	nop
 8000842:	3708      	adds	r7, #8
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b086      	sub	sp, #24
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	60b9      	str	r1, [r7, #8]
 8000852:	607a      	str	r2, [r7, #4]
 8000854:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800085a:	f7ff ff61 	bl	8000720 <__NVIC_GetPriorityGrouping>
 800085e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	68b9      	ldr	r1, [r7, #8]
 8000864:	6978      	ldr	r0, [r7, #20]
 8000866:	f7ff ffb1 	bl	80007cc <NVIC_EncodePriority>
 800086a:	4602      	mov	r2, r0
 800086c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000870:	4611      	mov	r1, r2
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff80 	bl	8000778 <__NVIC_SetPriority>
}
 8000878:	bf00      	nop
 800087a:	3718      	adds	r7, #24
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}

08000880 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	4603      	mov	r3, r0
 8000888:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800088a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800088e:	4618      	mov	r0, r3
 8000890:	f7ff ff54 	bl	800073c <__NVIC_EnableIRQ>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80008a0:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <HAL_PWREx_GetVoltageRange+0x18>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	40007000 	.word	0x40007000

080008b8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b085      	sub	sp, #20
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008c6:	d130      	bne.n	800092a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80008c8:	4b23      	ldr	r3, [pc, #140]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80008d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80008d4:	d038      	beq.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d6:	4b20      	ldr	r3, [pc, #128]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80008de:	4a1e      	ldr	r2, [pc, #120]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80008e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008e4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	2232      	movs	r2, #50	; 0x32
 80008ec:	fb02 f303 	mul.w	r3, r2, r3
 80008f0:	4a1b      	ldr	r2, [pc, #108]	; (8000960 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80008f2:	fba2 2303 	umull	r2, r3, r2, r3
 80008f6:	0c9b      	lsrs	r3, r3, #18
 80008f8:	3301      	adds	r3, #1
 80008fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80008fc:	e002      	b.n	8000904 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3b01      	subs	r3, #1
 8000902:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800090c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000910:	d102      	bne.n	8000918 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	2b00      	cmp	r3, #0
 8000916:	d1f2      	bne.n	80008fe <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800091a:	695b      	ldr	r3, [r3, #20]
 800091c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000924:	d110      	bne.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000926:	2303      	movs	r3, #3
 8000928:	e00f      	b.n	800094a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800092a:	4b0b      	ldr	r3, [pc, #44]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000932:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000936:	d007      	beq.n	8000948 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000938:	4b07      	ldr	r3, [pc, #28]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000940:	4a05      	ldr	r2, [pc, #20]	; (8000958 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	3714      	adds	r7, #20
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40007000 	.word	0x40007000
 800095c:	20000000 	.word	0x20000000
 8000960:	431bde83 	.word	0x431bde83

08000964 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b088      	sub	sp, #32
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000972:	2301      	movs	r3, #1
 8000974:	e3ca      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000976:	4b97      	ldr	r3, [pc, #604]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000978:	689b      	ldr	r3, [r3, #8]
 800097a:	f003 030c 	and.w	r3, r3, #12
 800097e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000980:	4b94      	ldr	r3, [pc, #592]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000982:	68db      	ldr	r3, [r3, #12]
 8000984:	f003 0303 	and.w	r3, r3, #3
 8000988:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f003 0310 	and.w	r3, r3, #16
 8000992:	2b00      	cmp	r3, #0
 8000994:	f000 80e4 	beq.w	8000b60 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d007      	beq.n	80009ae <HAL_RCC_OscConfig+0x4a>
 800099e:	69bb      	ldr	r3, [r7, #24]
 80009a0:	2b0c      	cmp	r3, #12
 80009a2:	f040 808b 	bne.w	8000abc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80009a6:	697b      	ldr	r3, [r7, #20]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	f040 8087 	bne.w	8000abc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80009ae:	4b89      	ldr	r3, [pc, #548]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	f003 0302 	and.w	r3, r3, #2
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d005      	beq.n	80009c6 <HAL_RCC_OscConfig+0x62>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	699b      	ldr	r3, [r3, #24]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d101      	bne.n	80009c6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	e3a2      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	6a1a      	ldr	r2, [r3, #32]
 80009ca:	4b82      	ldr	r3, [pc, #520]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <HAL_RCC_OscConfig+0x7c>
 80009d6:	4b7f      	ldr	r3, [pc, #508]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009de:	e005      	b.n	80009ec <HAL_RCC_OscConfig+0x88>
 80009e0:	4b7c      	ldr	r3, [pc, #496]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 80009e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80009ec:	4293      	cmp	r3, r2
 80009ee:	d223      	bcs.n	8000a38 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a1b      	ldr	r3, [r3, #32]
 80009f4:	4618      	mov	r0, r3
 80009f6:	f000 fd71 	bl	80014dc <RCC_SetFlashLatencyFromMSIRange>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000a00:	2301      	movs	r3, #1
 8000a02:	e383      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a04:	4b73      	ldr	r3, [pc, #460]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a72      	ldr	r2, [pc, #456]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6013      	str	r3, [r2, #0]
 8000a10:	4b70      	ldr	r3, [pc, #448]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	6a1b      	ldr	r3, [r3, #32]
 8000a1c:	496d      	ldr	r1, [pc, #436]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a22:	4b6c      	ldr	r3, [pc, #432]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	69db      	ldr	r3, [r3, #28]
 8000a2e:	021b      	lsls	r3, r3, #8
 8000a30:	4968      	ldr	r1, [pc, #416]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a32:	4313      	orrs	r3, r2
 8000a34:	604b      	str	r3, [r1, #4]
 8000a36:	e025      	b.n	8000a84 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a38:	4b66      	ldr	r3, [pc, #408]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a65      	ldr	r2, [pc, #404]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a3e:	f043 0308 	orr.w	r3, r3, #8
 8000a42:	6013      	str	r3, [r2, #0]
 8000a44:	4b63      	ldr	r3, [pc, #396]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6a1b      	ldr	r3, [r3, #32]
 8000a50:	4960      	ldr	r1, [pc, #384]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a52:	4313      	orrs	r3, r2
 8000a54:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a56:	4b5f      	ldr	r3, [pc, #380]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	021b      	lsls	r3, r3, #8
 8000a64:	495b      	ldr	r1, [pc, #364]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a66:	4313      	orrs	r3, r2
 8000a68:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d109      	bne.n	8000a84 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6a1b      	ldr	r3, [r3, #32]
 8000a74:	4618      	mov	r0, r3
 8000a76:	f000 fd31 	bl	80014dc <RCC_SetFlashLatencyFromMSIRange>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e343      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000a84:	f000 fc4a 	bl	800131c <HAL_RCC_GetSysClockFreq>
 8000a88:	4602      	mov	r2, r0
 8000a8a:	4b52      	ldr	r3, [pc, #328]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000a8c:	689b      	ldr	r3, [r3, #8]
 8000a8e:	091b      	lsrs	r3, r3, #4
 8000a90:	f003 030f 	and.w	r3, r3, #15
 8000a94:	4950      	ldr	r1, [pc, #320]	; (8000bd8 <HAL_RCC_OscConfig+0x274>)
 8000a96:	5ccb      	ldrb	r3, [r1, r3]
 8000a98:	f003 031f 	and.w	r3, r3, #31
 8000a9c:	fa22 f303 	lsr.w	r3, r2, r3
 8000aa0:	4a4e      	ldr	r2, [pc, #312]	; (8000bdc <HAL_RCC_OscConfig+0x278>)
 8000aa2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000aa4:	4b4e      	ldr	r3, [pc, #312]	; (8000be0 <HAL_RCC_OscConfig+0x27c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f7ff fd13 	bl	80004d4 <HAL_InitTick>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ab2:	7bfb      	ldrb	r3, [r7, #15]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d052      	beq.n	8000b5e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000ab8:	7bfb      	ldrb	r3, [r7, #15]
 8000aba:	e327      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d032      	beq.n	8000b2a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000ac4:	4b43      	ldr	r3, [pc, #268]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	4a42      	ldr	r2, [pc, #264]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000aca:	f043 0301 	orr.w	r3, r3, #1
 8000ace:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000ad0:	f7ff fdf6 	bl	80006c0 <HAL_GetTick>
 8000ad4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000ad6:	e008      	b.n	8000aea <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000ad8:	f7ff fdf2 	bl	80006c0 <HAL_GetTick>
 8000adc:	4602      	mov	r2, r0
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	1ad3      	subs	r3, r2, r3
 8000ae2:	2b02      	cmp	r3, #2
 8000ae4:	d901      	bls.n	8000aea <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000ae6:	2303      	movs	r3, #3
 8000ae8:	e310      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000aea:	4b3a      	ldr	r3, [pc, #232]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d0f0      	beq.n	8000ad8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000af6:	4b37      	ldr	r3, [pc, #220]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a36      	ldr	r2, [pc, #216]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6013      	str	r3, [r2, #0]
 8000b02:	4b34      	ldr	r3, [pc, #208]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6a1b      	ldr	r3, [r3, #32]
 8000b0e:	4931      	ldr	r1, [pc, #196]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b10:	4313      	orrs	r3, r2
 8000b12:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000b14:	4b2f      	ldr	r3, [pc, #188]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b16:	685b      	ldr	r3, [r3, #4]
 8000b18:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	69db      	ldr	r3, [r3, #28]
 8000b20:	021b      	lsls	r3, r3, #8
 8000b22:	492c      	ldr	r1, [pc, #176]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b24:	4313      	orrs	r3, r2
 8000b26:	604b      	str	r3, [r1, #4]
 8000b28:	e01a      	b.n	8000b60 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000b2a:	4b2a      	ldr	r3, [pc, #168]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a29      	ldr	r2, [pc, #164]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b30:	f023 0301 	bic.w	r3, r3, #1
 8000b34:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000b36:	f7ff fdc3 	bl	80006c0 <HAL_GetTick>
 8000b3a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b3c:	e008      	b.n	8000b50 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000b3e:	f7ff fdbf 	bl	80006c0 <HAL_GetTick>
 8000b42:	4602      	mov	r2, r0
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	1ad3      	subs	r3, r2, r3
 8000b48:	2b02      	cmp	r3, #2
 8000b4a:	d901      	bls.n	8000b50 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000b4c:	2303      	movs	r3, #3
 8000b4e:	e2dd      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000b50:	4b20      	ldr	r3, [pc, #128]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f003 0302 	and.w	r3, r3, #2
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d1f0      	bne.n	8000b3e <HAL_RCC_OscConfig+0x1da>
 8000b5c:	e000      	b.n	8000b60 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000b5e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f003 0301 	and.w	r3, r3, #1
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d074      	beq.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	2b08      	cmp	r3, #8
 8000b70:	d005      	beq.n	8000b7e <HAL_RCC_OscConfig+0x21a>
 8000b72:	69bb      	ldr	r3, [r7, #24]
 8000b74:	2b0c      	cmp	r3, #12
 8000b76:	d10e      	bne.n	8000b96 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	2b03      	cmp	r3, #3
 8000b7c:	d10b      	bne.n	8000b96 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d064      	beq.n	8000c54 <HAL_RCC_OscConfig+0x2f0>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d160      	bne.n	8000c54 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e2ba      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	685b      	ldr	r3, [r3, #4]
 8000b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000b9e:	d106      	bne.n	8000bae <HAL_RCC_OscConfig+0x24a>
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0b      	ldr	r2, [pc, #44]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000baa:	6013      	str	r3, [r2, #0]
 8000bac:	e026      	b.n	8000bfc <HAL_RCC_OscConfig+0x298>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bb6:	d115      	bne.n	8000be4 <HAL_RCC_OscConfig+0x280>
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bbe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	4b03      	ldr	r3, [pc, #12]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a02      	ldr	r2, [pc, #8]	; (8000bd4 <HAL_RCC_OscConfig+0x270>)
 8000bca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000bce:	6013      	str	r3, [r2, #0]
 8000bd0:	e014      	b.n	8000bfc <HAL_RCC_OscConfig+0x298>
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	08004680 	.word	0x08004680
 8000bdc:	20000000 	.word	0x20000000
 8000be0:	20000004 	.word	0x20000004
 8000be4:	4ba0      	ldr	r3, [pc, #640]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a9f      	ldr	r2, [pc, #636]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bee:	6013      	str	r3, [r2, #0]
 8000bf0:	4b9d      	ldr	r3, [pc, #628]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a9c      	ldr	r2, [pc, #624]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000bf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d013      	beq.n	8000c2c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c04:	f7ff fd5c 	bl	80006c0 <HAL_GetTick>
 8000c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c0a:	e008      	b.n	8000c1e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c0c:	f7ff fd58 	bl	80006c0 <HAL_GetTick>
 8000c10:	4602      	mov	r2, r0
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	1ad3      	subs	r3, r2, r3
 8000c16:	2b64      	cmp	r3, #100	; 0x64
 8000c18:	d901      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000c1a:	2303      	movs	r3, #3
 8000c1c:	e276      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000c1e:	4b92      	ldr	r3, [pc, #584]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d0f0      	beq.n	8000c0c <HAL_RCC_OscConfig+0x2a8>
 8000c2a:	e014      	b.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c2c:	f7ff fd48 	bl	80006c0 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff fd44 	bl	80006c0 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e262      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000c46:	4b88      	ldr	r3, [pc, #544]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d1f0      	bne.n	8000c34 <HAL_RCC_OscConfig+0x2d0>
 8000c52:	e000      	b.n	8000c56 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	f003 0302 	and.w	r3, r3, #2
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d060      	beq.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000c62:	69bb      	ldr	r3, [r7, #24]
 8000c64:	2b04      	cmp	r3, #4
 8000c66:	d005      	beq.n	8000c74 <HAL_RCC_OscConfig+0x310>
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	2b0c      	cmp	r3, #12
 8000c6c:	d119      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000c6e:	697b      	ldr	r3, [r7, #20]
 8000c70:	2b02      	cmp	r3, #2
 8000c72:	d116      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000c74:	4b7c      	ldr	r3, [pc, #496]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d005      	beq.n	8000c8c <HAL_RCC_OscConfig+0x328>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d101      	bne.n	8000c8c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	e23f      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c8c:	4b76      	ldr	r3, [pc, #472]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	691b      	ldr	r3, [r3, #16]
 8000c98:	061b      	lsls	r3, r3, #24
 8000c9a:	4973      	ldr	r1, [pc, #460]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000c9c:	4313      	orrs	r3, r2
 8000c9e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000ca0:	e040      	b.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	68db      	ldr	r3, [r3, #12]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d023      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000caa:	4b6f      	ldr	r3, [pc, #444]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a6e      	ldr	r2, [pc, #440]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cb6:	f7ff fd03 	bl	80006c0 <HAL_GetTick>
 8000cba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cbc:	e008      	b.n	8000cd0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000cbe:	f7ff fcff 	bl	80006c0 <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	d901      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000ccc:	2303      	movs	r3, #3
 8000cce:	e21d      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000cd0:	4b65      	ldr	r3, [pc, #404]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d0f0      	beq.n	8000cbe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cdc:	4b62      	ldr	r3, [pc, #392]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	691b      	ldr	r3, [r3, #16]
 8000ce8:	061b      	lsls	r3, r3, #24
 8000cea:	495f      	ldr	r1, [pc, #380]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cec:	4313      	orrs	r3, r2
 8000cee:	604b      	str	r3, [r1, #4]
 8000cf0:	e018      	b.n	8000d24 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000cf2:	4b5d      	ldr	r3, [pc, #372]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a5c      	ldr	r2, [pc, #368]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000cfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cfe:	f7ff fcdf 	bl	80006c0 <HAL_GetTick>
 8000d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d04:	e008      	b.n	8000d18 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d06:	f7ff fcdb 	bl	80006c0 <HAL_GetTick>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d901      	bls.n	8000d18 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000d14:	2303      	movs	r3, #3
 8000d16:	e1f9      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000d18:	4b53      	ldr	r3, [pc, #332]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d1f0      	bne.n	8000d06 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f003 0308 	and.w	r3, r3, #8
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d03c      	beq.n	8000daa <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d01c      	beq.n	8000d72 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d38:	4b4b      	ldr	r3, [pc, #300]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d3e:	4a4a      	ldr	r2, [pc, #296]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d48:	f7ff fcba 	bl	80006c0 <HAL_GetTick>
 8000d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d4e:	e008      	b.n	8000d62 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d50:	f7ff fcb6 	bl	80006c0 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	693b      	ldr	r3, [r7, #16]
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d901      	bls.n	8000d62 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000d5e:	2303      	movs	r3, #3
 8000d60:	e1d4      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000d62:	4b41      	ldr	r3, [pc, #260]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d68:	f003 0302 	and.w	r3, r3, #2
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d0ef      	beq.n	8000d50 <HAL_RCC_OscConfig+0x3ec>
 8000d70:	e01b      	b.n	8000daa <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d72:	4b3d      	ldr	r3, [pc, #244]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000d78:	4a3b      	ldr	r2, [pc, #236]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d7a:	f023 0301 	bic.w	r3, r3, #1
 8000d7e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d82:	f7ff fc9d 	bl	80006c0 <HAL_GetTick>
 8000d86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d88:	e008      	b.n	8000d9c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000d8a:	f7ff fc99 	bl	80006c0 <HAL_GetTick>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	693b      	ldr	r3, [r7, #16]
 8000d92:	1ad3      	subs	r3, r2, r3
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d901      	bls.n	8000d9c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000d98:	2303      	movs	r3, #3
 8000d9a:	e1b7      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000d9c:	4b32      	ldr	r3, [pc, #200]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000d9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000da2:	f003 0302 	and.w	r3, r3, #2
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1ef      	bne.n	8000d8a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f003 0304 	and.w	r3, r3, #4
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	f000 80a6 	beq.w	8000f04 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000db8:	2300      	movs	r3, #0
 8000dba:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000dbc:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d10d      	bne.n	8000de4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dc8:	4b27      	ldr	r3, [pc, #156]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dcc:	4a26      	ldr	r2, [pc, #152]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dd2:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd4:	4b24      	ldr	r3, [pc, #144]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000dd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ddc:	60bb      	str	r3, [r7, #8]
 8000dde:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000de0:	2301      	movs	r3, #1
 8000de2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000de4:	4b21      	ldr	r3, [pc, #132]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d118      	bne.n	8000e22 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000df0:	4b1e      	ldr	r3, [pc, #120]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a1d      	ldr	r2, [pc, #116]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000df6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000dfc:	f7ff fc60 	bl	80006c0 <HAL_GetTick>
 8000e00:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e02:	e008      	b.n	8000e16 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e04:	f7ff fc5c 	bl	80006c0 <HAL_GetTick>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	1ad3      	subs	r3, r2, r3
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d901      	bls.n	8000e16 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000e12:	2303      	movs	r3, #3
 8000e14:	e17a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000e16:	4b15      	ldr	r3, [pc, #84]	; (8000e6c <HAL_RCC_OscConfig+0x508>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d0f0      	beq.n	8000e04 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	689b      	ldr	r3, [r3, #8]
 8000e26:	2b01      	cmp	r3, #1
 8000e28:	d108      	bne.n	8000e3c <HAL_RCC_OscConfig+0x4d8>
 8000e2a:	4b0f      	ldr	r3, [pc, #60]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e30:	4a0d      	ldr	r2, [pc, #52]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e3a:	e029      	b.n	8000e90 <HAL_RCC_OscConfig+0x52c>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d115      	bne.n	8000e70 <HAL_RCC_OscConfig+0x50c>
 8000e44:	4b08      	ldr	r3, [pc, #32]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e4a:	4a07      	ldr	r2, [pc, #28]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e54:	4b04      	ldr	r3, [pc, #16]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e5a:	4a03      	ldr	r2, [pc, #12]	; (8000e68 <HAL_RCC_OscConfig+0x504>)
 8000e5c:	f043 0301 	orr.w	r3, r3, #1
 8000e60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e64:	e014      	b.n	8000e90 <HAL_RCC_OscConfig+0x52c>
 8000e66:	bf00      	nop
 8000e68:	40021000 	.word	0x40021000
 8000e6c:	40007000 	.word	0x40007000
 8000e70:	4b9c      	ldr	r3, [pc, #624]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e76:	4a9b      	ldr	r2, [pc, #620]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e78:	f023 0301 	bic.w	r3, r3, #1
 8000e7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000e80:	4b98      	ldr	r3, [pc, #608]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e86:	4a97      	ldr	r2, [pc, #604]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000e88:	f023 0304 	bic.w	r3, r3, #4
 8000e8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	689b      	ldr	r3, [r3, #8]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d016      	beq.n	8000ec6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e98:	f7ff fc12 	bl	80006c0 <HAL_GetTick>
 8000e9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e9e:	e00a      	b.n	8000eb6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ea0:	f7ff fc0e 	bl	80006c0 <HAL_GetTick>
 8000ea4:	4602      	mov	r2, r0
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	1ad3      	subs	r3, r2, r3
 8000eaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d901      	bls.n	8000eb6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8000eb2:	2303      	movs	r3, #3
 8000eb4:	e12a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000eb6:	4b8b      	ldr	r3, [pc, #556]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000ebc:	f003 0302 	and.w	r3, r3, #2
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d0ed      	beq.n	8000ea0 <HAL_RCC_OscConfig+0x53c>
 8000ec4:	e015      	b.n	8000ef2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ec6:	f7ff fbfb 	bl	80006c0 <HAL_GetTick>
 8000eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ecc:	e00a      	b.n	8000ee4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000ece:	f7ff fbf7 	bl	80006c0 <HAL_GetTick>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	1ad3      	subs	r3, r2, r3
 8000ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8000edc:	4293      	cmp	r3, r2
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e113      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000ee4:	4b7f      	ldr	r3, [pc, #508]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000ee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000eea:	f003 0302 	and.w	r3, r3, #2
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1ed      	bne.n	8000ece <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef2:	7ffb      	ldrb	r3, [r7, #31]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d105      	bne.n	8000f04 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ef8:	4b7a      	ldr	r3, [pc, #488]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efc:	4a79      	ldr	r2, [pc, #484]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000efe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f02:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	f000 80fe 	beq.w	800110a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	f040 80d0 	bne.w	80010b8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000f18:	4b72      	ldr	r3, [pc, #456]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	f003 0203 	and.w	r2, r3, #3
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d130      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	3b01      	subs	r3, #1
 8000f38:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d127      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f48:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d11f      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f58:	2a07      	cmp	r2, #7
 8000f5a:	bf14      	ite	ne
 8000f5c:	2201      	movne	r2, #1
 8000f5e:	2200      	moveq	r2, #0
 8000f60:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d113      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f70:	085b      	lsrs	r3, r3, #1
 8000f72:	3b01      	subs	r3, #1
 8000f74:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d109      	bne.n	8000f8e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	3b01      	subs	r3, #1
 8000f88:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d06e      	beq.n	800106c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2b0c      	cmp	r3, #12
 8000f92:	d069      	beq.n	8001068 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000f94:	4b53      	ldr	r3, [pc, #332]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d105      	bne.n	8000fac <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000fa0:	4b50      	ldr	r3, [pc, #320]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000fac:	2301      	movs	r3, #1
 8000fae:	e0ad      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000fb0:	4b4c      	ldr	r3, [pc, #304]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a4b      	ldr	r2, [pc, #300]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fb6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fba:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000fbc:	f7ff fb80 	bl	80006c0 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fc4:	f7ff fb7c 	bl	80006c0 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e09a      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000fd6:	4b43      	ldr	r3, [pc, #268]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000fe2:	4b40      	ldr	r3, [pc, #256]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8000fe4:	68da      	ldr	r2, [r3, #12]
 8000fe6:	4b40      	ldr	r3, [pc, #256]	; (80010e8 <HAL_RCC_OscConfig+0x784>)
 8000fe8:	4013      	ands	r3, r2
 8000fea:	687a      	ldr	r2, [r7, #4]
 8000fec:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000fee:	687a      	ldr	r2, [r7, #4]
 8000ff0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000ff2:	3a01      	subs	r2, #1
 8000ff4:	0112      	lsls	r2, r2, #4
 8000ff6:	4311      	orrs	r1, r2
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000ffc:	0212      	lsls	r2, r2, #8
 8000ffe:	4311      	orrs	r1, r2
 8001000:	687a      	ldr	r2, [r7, #4]
 8001002:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001004:	0852      	lsrs	r2, r2, #1
 8001006:	3a01      	subs	r2, #1
 8001008:	0552      	lsls	r2, r2, #21
 800100a:	4311      	orrs	r1, r2
 800100c:	687a      	ldr	r2, [r7, #4]
 800100e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001010:	0852      	lsrs	r2, r2, #1
 8001012:	3a01      	subs	r2, #1
 8001014:	0652      	lsls	r2, r2, #25
 8001016:	4311      	orrs	r1, r2
 8001018:	687a      	ldr	r2, [r7, #4]
 800101a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800101c:	0912      	lsrs	r2, r2, #4
 800101e:	0452      	lsls	r2, r2, #17
 8001020:	430a      	orrs	r2, r1
 8001022:	4930      	ldr	r1, [pc, #192]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001024:	4313      	orrs	r3, r2
 8001026:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001028:	4b2e      	ldr	r3, [pc, #184]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a2d      	ldr	r2, [pc, #180]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800102e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001032:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001034:	4b2b      	ldr	r3, [pc, #172]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800103a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800103e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001040:	f7ff fb3e 	bl	80006c0 <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001048:	f7ff fb3a 	bl	80006c0 <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e058      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800105a:	4b22      	ldr	r3, [pc, #136]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d0f0      	beq.n	8001048 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001066:	e050      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e04f      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800106c:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d148      	bne.n	800110a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001078:	4b1a      	ldr	r3, [pc, #104]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4a19      	ldr	r2, [pc, #100]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800107e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001082:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001084:	4b17      	ldr	r3, [pc, #92]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 800108a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800108e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001090:	f7ff fb16 	bl	80006c0 <HAL_GetTick>
 8001094:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001096:	e008      	b.n	80010aa <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001098:	f7ff fb12 	bl	80006c0 <HAL_GetTick>
 800109c:	4602      	mov	r2, r0
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	1ad3      	subs	r3, r2, r3
 80010a2:	2b02      	cmp	r3, #2
 80010a4:	d901      	bls.n	80010aa <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e030      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010aa:	4b0e      	ldr	r3, [pc, #56]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d0f0      	beq.n	8001098 <HAL_RCC_OscConfig+0x734>
 80010b6:	e028      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80010b8:	69bb      	ldr	r3, [r7, #24]
 80010ba:	2b0c      	cmp	r3, #12
 80010bc:	d023      	beq.n	8001106 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a08      	ldr	r2, [pc, #32]	; (80010e4 <HAL_RCC_OscConfig+0x780>)
 80010c4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80010c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010ca:	f7ff faf9 	bl	80006c0 <HAL_GetTick>
 80010ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010d0:	e00c      	b.n	80010ec <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010d2:	f7ff faf5 	bl	80006c0 <HAL_GetTick>
 80010d6:	4602      	mov	r2, r0
 80010d8:	693b      	ldr	r3, [r7, #16]
 80010da:	1ad3      	subs	r3, r2, r3
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d905      	bls.n	80010ec <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80010e0:	2303      	movs	r3, #3
 80010e2:	e013      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
 80010e4:	40021000 	.word	0x40021000
 80010e8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80010ec:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d1ec      	bne.n	80010d2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80010f8:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010fa:	68da      	ldr	r2, [r3, #12]
 80010fc:	4905      	ldr	r1, [pc, #20]	; (8001114 <HAL_RCC_OscConfig+0x7b0>)
 80010fe:	4b06      	ldr	r3, [pc, #24]	; (8001118 <HAL_RCC_OscConfig+0x7b4>)
 8001100:	4013      	ands	r3, r2
 8001102:	60cb      	str	r3, [r1, #12]
 8001104:	e001      	b.n	800110a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e000      	b.n	800110c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
}
 800110c:	4618      	mov	r0, r3
 800110e:	3720      	adds	r7, #32
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	40021000 	.word	0x40021000
 8001118:	feeefffc 	.word	0xfeeefffc

0800111c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
 8001124:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2b00      	cmp	r3, #0
 800112a:	d101      	bne.n	8001130 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e0e7      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001130:	4b75      	ldr	r3, [pc, #468]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0307 	and.w	r3, r3, #7
 8001138:	683a      	ldr	r2, [r7, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d910      	bls.n	8001160 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f023 0207 	bic.w	r2, r3, #7
 8001146:	4970      	ldr	r1, [pc, #448]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	4313      	orrs	r3, r2
 800114c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800114e:	4b6e      	ldr	r3, [pc, #440]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0307 	and.w	r3, r3, #7
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d001      	beq.n	8001160 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e0cf      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	2b00      	cmp	r3, #0
 800116a:	d010      	beq.n	800118e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	689a      	ldr	r2, [r3, #8]
 8001170:	4b66      	ldr	r3, [pc, #408]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001172:	689b      	ldr	r3, [r3, #8]
 8001174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001178:	429a      	cmp	r2, r3
 800117a:	d908      	bls.n	800118e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117c:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	4960      	ldr	r1, [pc, #384]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800118a:	4313      	orrs	r3, r2
 800118c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0301 	and.w	r3, r3, #1
 8001196:	2b00      	cmp	r3, #0
 8001198:	d04c      	beq.n	8001234 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d107      	bne.n	80011b2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80011a2:	4b5a      	ldr	r3, [pc, #360]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d121      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80011ae:	2301      	movs	r3, #1
 80011b0:	e0a6      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	2b02      	cmp	r3, #2
 80011b8:	d107      	bne.n	80011ca <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80011ba:	4b54      	ldr	r3, [pc, #336]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d115      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e09a      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	685b      	ldr	r3, [r3, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011d2:	4b4e      	ldr	r3, [pc, #312]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f003 0302 	and.w	r3, r3, #2
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d109      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e08e      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011e2:	4b4a      	ldr	r3, [pc, #296]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e086      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80011f2:	4b46      	ldr	r3, [pc, #280]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	f023 0203 	bic.w	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	4943      	ldr	r1, [pc, #268]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001200:	4313      	orrs	r3, r2
 8001202:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001204:	f7ff fa5c 	bl	80006c0 <HAL_GetTick>
 8001208:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800120a:	e00a      	b.n	8001222 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800120c:	f7ff fa58 	bl	80006c0 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	f241 3288 	movw	r2, #5000	; 0x1388
 800121a:	4293      	cmp	r3, r2
 800121c:	d901      	bls.n	8001222 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800121e:	2303      	movs	r3, #3
 8001220:	e06e      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001222:	4b3a      	ldr	r3, [pc, #232]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001224:	689b      	ldr	r3, [r3, #8]
 8001226:	f003 020c 	and.w	r2, r3, #12
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	685b      	ldr	r3, [r3, #4]
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	429a      	cmp	r2, r3
 8001232:	d1eb      	bne.n	800120c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d010      	beq.n	8001262 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	4b31      	ldr	r3, [pc, #196]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800124c:	429a      	cmp	r2, r3
 800124e:	d208      	bcs.n	8001262 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001250:	4b2e      	ldr	r3, [pc, #184]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	689b      	ldr	r3, [r3, #8]
 800125c:	492b      	ldr	r1, [pc, #172]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 800125e:	4313      	orrs	r3, r2
 8001260:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001262:	4b29      	ldr	r3, [pc, #164]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0307 	and.w	r3, r3, #7
 800126a:	683a      	ldr	r2, [r7, #0]
 800126c:	429a      	cmp	r2, r3
 800126e:	d210      	bcs.n	8001292 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001270:	4b25      	ldr	r3, [pc, #148]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f023 0207 	bic.w	r2, r3, #7
 8001278:	4923      	ldr	r1, [pc, #140]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	4313      	orrs	r3, r2
 800127e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001280:	4b21      	ldr	r3, [pc, #132]	; (8001308 <HAL_RCC_ClockConfig+0x1ec>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0307 	and.w	r3, r3, #7
 8001288:	683a      	ldr	r2, [r7, #0]
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e036      	b.n	8001300 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0304 	and.w	r3, r3, #4
 800129a:	2b00      	cmp	r3, #0
 800129c:	d008      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800129e:	4b1b      	ldr	r3, [pc, #108]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	68db      	ldr	r3, [r3, #12]
 80012aa:	4918      	ldr	r1, [pc, #96]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012ac:	4313      	orrs	r3, r2
 80012ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d009      	beq.n	80012d0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012bc:	4b13      	ldr	r3, [pc, #76]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012be:	689b      	ldr	r3, [r3, #8]
 80012c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	691b      	ldr	r3, [r3, #16]
 80012c8:	00db      	lsls	r3, r3, #3
 80012ca:	4910      	ldr	r1, [pc, #64]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012cc:	4313      	orrs	r3, r2
 80012ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80012d0:	f000 f824 	bl	800131c <HAL_RCC_GetSysClockFreq>
 80012d4:	4602      	mov	r2, r0
 80012d6:	4b0d      	ldr	r3, [pc, #52]	; (800130c <HAL_RCC_ClockConfig+0x1f0>)
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	f003 030f 	and.w	r3, r3, #15
 80012e0:	490b      	ldr	r1, [pc, #44]	; (8001310 <HAL_RCC_ClockConfig+0x1f4>)
 80012e2:	5ccb      	ldrb	r3, [r1, r3]
 80012e4:	f003 031f 	and.w	r3, r3, #31
 80012e8:	fa22 f303 	lsr.w	r3, r2, r3
 80012ec:	4a09      	ldr	r2, [pc, #36]	; (8001314 <HAL_RCC_ClockConfig+0x1f8>)
 80012ee:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1fc>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f8ed 	bl	80004d4 <HAL_InitTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	72fb      	strb	r3, [r7, #11]

  return status;
 80012fe:	7afb      	ldrb	r3, [r7, #11]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40022000 	.word	0x40022000
 800130c:	40021000 	.word	0x40021000
 8001310:	08004680 	.word	0x08004680
 8001314:	20000000 	.word	0x20000000
 8001318:	20000004 	.word	0x20000004

0800131c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	; 0x24
 8001320:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
 8001326:	2300      	movs	r3, #0
 8001328:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800132a:	4b3e      	ldr	r3, [pc, #248]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001334:	4b3b      	ldr	r3, [pc, #236]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 8001336:	68db      	ldr	r3, [r3, #12]
 8001338:	f003 0303 	and.w	r3, r3, #3
 800133c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d005      	beq.n	8001350 <HAL_RCC_GetSysClockFreq+0x34>
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d121      	bne.n	800138e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	2b01      	cmp	r3, #1
 800134e:	d11e      	bne.n	800138e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001350:	4b34      	ldr	r3, [pc, #208]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f003 0308 	and.w	r3, r3, #8
 8001358:	2b00      	cmp	r3, #0
 800135a:	d107      	bne.n	800136c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800135c:	4b31      	ldr	r3, [pc, #196]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800135e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001362:	0a1b      	lsrs	r3, r3, #8
 8001364:	f003 030f 	and.w	r3, r3, #15
 8001368:	61fb      	str	r3, [r7, #28]
 800136a:	e005      	b.n	8001378 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	091b      	lsrs	r3, r3, #4
 8001372:	f003 030f 	and.w	r3, r3, #15
 8001376:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001378:	4a2b      	ldr	r2, [pc, #172]	; (8001428 <HAL_RCC_GetSysClockFreq+0x10c>)
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001380:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d10d      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800138c:	e00a      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	2b04      	cmp	r3, #4
 8001392:	d102      	bne.n	800139a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001394:	4b25      	ldr	r3, [pc, #148]	; (800142c <HAL_RCC_GetSysClockFreq+0x110>)
 8001396:	61bb      	str	r3, [r7, #24]
 8001398:	e004      	b.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800139a:	693b      	ldr	r3, [r7, #16]
 800139c:	2b08      	cmp	r3, #8
 800139e:	d101      	bne.n	80013a4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013a0:	4b23      	ldr	r3, [pc, #140]	; (8001430 <HAL_RCC_GetSysClockFreq+0x114>)
 80013a2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	2b0c      	cmp	r3, #12
 80013a8:	d134      	bne.n	8001414 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80013aa:	4b1e      	ldr	r3, [pc, #120]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013ac:	68db      	ldr	r3, [r3, #12]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d003      	beq.n	80013c2 <HAL_RCC_GetSysClockFreq+0xa6>
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	2b03      	cmp	r3, #3
 80013be:	d003      	beq.n	80013c8 <HAL_RCC_GetSysClockFreq+0xac>
 80013c0:	e005      	b.n	80013ce <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80013c2:	4b1a      	ldr	r3, [pc, #104]	; (800142c <HAL_RCC_GetSysClockFreq+0x110>)
 80013c4:	617b      	str	r3, [r7, #20]
      break;
 80013c6:	e005      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80013c8:	4b19      	ldr	r3, [pc, #100]	; (8001430 <HAL_RCC_GetSysClockFreq+0x114>)
 80013ca:	617b      	str	r3, [r7, #20]
      break;
 80013cc:	e002      	b.n	80013d4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	617b      	str	r3, [r7, #20]
      break;
 80013d2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80013d4:	4b13      	ldr	r3, [pc, #76]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	091b      	lsrs	r3, r3, #4
 80013da:	f003 0307 	and.w	r3, r3, #7
 80013de:	3301      	adds	r3, #1
 80013e0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80013e2:	4b10      	ldr	r3, [pc, #64]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013e4:	68db      	ldr	r3, [r3, #12]
 80013e6:	0a1b      	lsrs	r3, r3, #8
 80013e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80013ec:	697a      	ldr	r2, [r7, #20]
 80013ee:	fb03 f202 	mul.w	r2, r3, r2
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80013fa:	4b0a      	ldr	r3, [pc, #40]	; (8001424 <HAL_RCC_GetSysClockFreq+0x108>)
 80013fc:	68db      	ldr	r3, [r3, #12]
 80013fe:	0e5b      	lsrs	r3, r3, #25
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	3301      	adds	r3, #1
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001412:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001414:	69bb      	ldr	r3, [r7, #24]
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40021000 	.word	0x40021000
 8001428:	08004698 	.word	0x08004698
 800142c:	00f42400 	.word	0x00f42400
 8001430:	007a1200 	.word	0x007a1200

08001434 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_RCC_GetHCLKFreq+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000

0800144c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001450:	f7ff fff0 	bl	8001434 <HAL_RCC_GetHCLKFreq>
 8001454:	4602      	mov	r2, r0
 8001456:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	0adb      	lsrs	r3, r3, #11
 800145c:	f003 0307 	and.w	r3, r3, #7
 8001460:	4904      	ldr	r1, [pc, #16]	; (8001474 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001462:	5ccb      	ldrb	r3, [r1, r3]
 8001464:	f003 031f 	and.w	r3, r3, #31
 8001468:	fa22 f303 	lsr.w	r3, r2, r3
}
 800146c:	4618      	mov	r0, r3
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40021000 	.word	0x40021000
 8001474:	08004690 	.word	0x08004690

08001478 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	220f      	movs	r2, #15
 8001486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001488:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0203 	and.w	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001494:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 8001496:	689b      	ldr	r3, [r3, #8]
 8001498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80014ac:	4b09      	ldr	r3, [pc, #36]	; (80014d4 <HAL_RCC_GetClockConfig+0x5c>)
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	08db      	lsrs	r3, r3, #3
 80014b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80014ba:	4b07      	ldr	r3, [pc, #28]	; (80014d8 <HAL_RCC_GetClockConfig+0x60>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0207 	and.w	r2, r3, #7
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40022000 	.word	0x40022000

080014dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80014e4:	2300      	movs	r3, #0
 80014e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80014e8:	4b2a      	ldr	r3, [pc, #168]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d003      	beq.n	80014fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80014f4:	f7ff f9d2 	bl	800089c <HAL_PWREx_GetVoltageRange>
 80014f8:	6178      	str	r0, [r7, #20]
 80014fa:	e014      	b.n	8001526 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80014fc:	4b25      	ldr	r3, [pc, #148]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80014fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001500:	4a24      	ldr	r2, [pc, #144]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001506:	6593      	str	r3, [r2, #88]	; 0x58
 8001508:	4b22      	ldr	r3, [pc, #136]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001514:	f7ff f9c2 	bl	800089c <HAL_PWREx_GetVoltageRange>
 8001518:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800151c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800151e:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001520:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001524:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800152c:	d10b      	bne.n	8001546 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b80      	cmp	r3, #128	; 0x80
 8001532:	d919      	bls.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2ba0      	cmp	r3, #160	; 0xa0
 8001538:	d902      	bls.n	8001540 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800153a:	2302      	movs	r3, #2
 800153c:	613b      	str	r3, [r7, #16]
 800153e:	e013      	b.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001540:	2301      	movs	r3, #1
 8001542:	613b      	str	r3, [r7, #16]
 8001544:	e010      	b.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b80      	cmp	r3, #128	; 0x80
 800154a:	d902      	bls.n	8001552 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800154c:	2303      	movs	r3, #3
 800154e:	613b      	str	r3, [r7, #16]
 8001550:	e00a      	b.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	2b80      	cmp	r3, #128	; 0x80
 8001556:	d102      	bne.n	800155e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001558:	2302      	movs	r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	e004      	b.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b70      	cmp	r3, #112	; 0x70
 8001562:	d101      	bne.n	8001568 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001564:	2301      	movs	r3, #1
 8001566:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001568:	4b0b      	ldr	r3, [pc, #44]	; (8001598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 0207 	bic.w	r2, r3, #7
 8001570:	4909      	ldr	r1, [pc, #36]	; (8001598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	4313      	orrs	r3, r2
 8001576:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001578:	4b07      	ldr	r3, [pc, #28]	; (8001598 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	429a      	cmp	r2, r3
 8001584:	d001      	beq.n	800158a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800158a:	2300      	movs	r3, #0
}
 800158c:	4618      	mov	r0, r3
 800158e:	3718      	adds	r7, #24
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40021000 	.word	0x40021000
 8001598:	40022000 	.word	0x40022000

0800159c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d101      	bne.n	80015ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e049      	b.n	8001642 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d106      	bne.n	80015c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2200      	movs	r2, #0
 80015be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	f000 f841 	bl	800164a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2202      	movs	r2, #2
 80015cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3304      	adds	r3, #4
 80015d8:	4619      	mov	r1, r3
 80015da:	4610      	mov	r0, r2
 80015dc:	f000 f9da 	bl	8001994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	2201      	movs	r2, #1
 800162c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2201      	movs	r2, #1
 8001634:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2201      	movs	r2, #1
 800163c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001640:	2300      	movs	r3, #0
}
 8001642:	4618      	mov	r0, r3
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800164a:	b480      	push	{r7}
 800164c:	b083      	sub	sp, #12
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001652:	bf00      	nop
 8001654:	370c      	adds	r7, #12
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001660:	b480      	push	{r7}
 8001662:	b085      	sub	sp, #20
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800166e:	b2db      	uxtb	r3, r3
 8001670:	2b01      	cmp	r3, #1
 8001672:	d001      	beq.n	8001678 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e04f      	b.n	8001718 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2202      	movs	r2, #2
 800167c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	68da      	ldr	r2, [r3, #12]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 0201 	orr.w	r2, r2, #1
 800168e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a23      	ldr	r2, [pc, #140]	; (8001724 <HAL_TIM_Base_Start_IT+0xc4>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d01d      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016a2:	d018      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a1f      	ldr	r2, [pc, #124]	; (8001728 <HAL_TIM_Base_Start_IT+0xc8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d013      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	4a1e      	ldr	r2, [pc, #120]	; (800172c <HAL_TIM_Base_Start_IT+0xcc>)
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d00e      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <HAL_TIM_Base_Start_IT+0xd0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d009      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	4a1b      	ldr	r2, [pc, #108]	; (8001734 <HAL_TIM_Base_Start_IT+0xd4>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d004      	beq.n	80016d6 <HAL_TIM_Base_Start_IT+0x76>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a19      	ldr	r2, [pc, #100]	; (8001738 <HAL_TIM_Base_Start_IT+0xd8>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d115      	bne.n	8001702 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	4b17      	ldr	r3, [pc, #92]	; (800173c <HAL_TIM_Base_Start_IT+0xdc>)
 80016de:	4013      	ands	r3, r2
 80016e0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2b06      	cmp	r3, #6
 80016e6:	d015      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0xb4>
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016ee:	d011      	beq.n	8001714 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f042 0201 	orr.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001700:	e008      	b.n	8001714 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f042 0201 	orr.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e000      	b.n	8001716 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001714:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	40012c00 	.word	0x40012c00
 8001728:	40000400 	.word	0x40000400
 800172c:	40000800 	.word	0x40000800
 8001730:	40000c00 	.word	0x40000c00
 8001734:	40013400 	.word	0x40013400
 8001738:	40014000 	.word	0x40014000
 800173c:	00010007 	.word	0x00010007

08001740 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d020      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d01b      	beq.n	80017a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0202 	mvn.w	r2, #2
 8001774:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2201      	movs	r2, #1
 800177a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	699b      	ldr	r3, [r3, #24]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8e4 	bl	8001958 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f8d6 	bl	8001944 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f8e7 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d020      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f003 0304 	and.w	r3, r3, #4
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d01b      	beq.n	80017f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f06f 0204 	mvn.w	r2, #4
 80017c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2202      	movs	r2, #2
 80017c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d003      	beq.n	80017de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017d6:	6878      	ldr	r0, [r7, #4]
 80017d8:	f000 f8be 	bl	8001958 <HAL_TIM_IC_CaptureCallback>
 80017dc:	e005      	b.n	80017ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f8b0 	bl	8001944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017e4:	6878      	ldr	r0, [r7, #4]
 80017e6:	f000 f8c1 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d020      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f003 0308 	and.w	r3, r3, #8
 8001800:	2b00      	cmp	r3, #0
 8001802:	d01b      	beq.n	800183c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f06f 0208 	mvn.w	r2, #8
 800180c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2204      	movs	r2, #4
 8001812:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	f003 0303 	and.w	r3, r3, #3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d003      	beq.n	800182a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001822:	6878      	ldr	r0, [r7, #4]
 8001824:	f000 f898 	bl	8001958 <HAL_TIM_IC_CaptureCallback>
 8001828:	e005      	b.n	8001836 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800182a:	6878      	ldr	r0, [r7, #4]
 800182c:	f000 f88a 	bl	8001944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001830:	6878      	ldr	r0, [r7, #4]
 8001832:	f000 f89b 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	f003 0310 	and.w	r3, r3, #16
 8001842:	2b00      	cmp	r3, #0
 8001844:	d020      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f003 0310 	and.w	r3, r3, #16
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01b      	beq.n	8001888 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f06f 0210 	mvn.w	r2, #16
 8001858:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2208      	movs	r2, #8
 800185e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	69db      	ldr	r3, [r3, #28]
 8001866:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800186a:	2b00      	cmp	r3, #0
 800186c:	d003      	beq.n	8001876 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 f872 	bl	8001958 <HAL_TIM_IC_CaptureCallback>
 8001874:	e005      	b.n	8001882 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f864 	bl	8001944 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f875 	bl	800196c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2200      	movs	r2, #0
 8001886:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	f003 0301 	and.w	r3, r3, #1
 800188e:	2b00      	cmp	r3, #0
 8001890:	d00c      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f003 0301 	and.w	r3, r3, #1
 8001898:	2b00      	cmp	r3, #0
 800189a:	d007      	beq.n	80018ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f06f 0201 	mvn.w	r2, #1
 80018a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7fe fdd4 	bl	8000454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d00c      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d007      	beq.n	80018d0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f906 	bl	8001adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d007      	beq.n	80018f4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80018ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	f000 f8fe 	bl	8001af0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d00c      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001904:	2b00      	cmp	r3, #0
 8001906:	d007      	beq.n	8001918 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f000 f834 	bl	8001980 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001918:	68bb      	ldr	r3, [r7, #8]
 800191a:	f003 0320 	and.w	r3, r3, #32
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00c      	beq.n	800193c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f003 0320 	and.w	r3, r3, #32
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f06f 0220 	mvn.w	r2, #32
 8001934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001936:	6878      	ldr	r0, [r7, #4]
 8001938:	f000 f8c6 	bl	8001ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800193c:	bf00      	nop
 800193e:	3710      	adds	r7, #16
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}

08001944 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001994:	b480      	push	{r7}
 8001996:	b085      	sub	sp, #20
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
 800199c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	4a40      	ldr	r2, [pc, #256]	; (8001aa8 <TIM_Base_SetConfig+0x114>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d013      	beq.n	80019d4 <TIM_Base_SetConfig+0x40>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019b2:	d00f      	beq.n	80019d4 <TIM_Base_SetConfig+0x40>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3d      	ldr	r2, [pc, #244]	; (8001aac <TIM_Base_SetConfig+0x118>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00b      	beq.n	80019d4 <TIM_Base_SetConfig+0x40>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <TIM_Base_SetConfig+0x11c>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <TIM_Base_SetConfig+0x40>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <TIM_Base_SetConfig+0x120>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d003      	beq.n	80019d4 <TIM_Base_SetConfig+0x40>
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a3a      	ldr	r2, [pc, #232]	; (8001ab8 <TIM_Base_SetConfig+0x124>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d108      	bne.n	80019e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	4a2f      	ldr	r2, [pc, #188]	; (8001aa8 <TIM_Base_SetConfig+0x114>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01f      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019f4:	d01b      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	4a2c      	ldr	r2, [pc, #176]	; (8001aac <TIM_Base_SetConfig+0x118>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d017      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	4a2b      	ldr	r2, [pc, #172]	; (8001ab0 <TIM_Base_SetConfig+0x11c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d013      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a2a      	ldr	r2, [pc, #168]	; (8001ab4 <TIM_Base_SetConfig+0x120>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d00f      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a29      	ldr	r2, [pc, #164]	; (8001ab8 <TIM_Base_SetConfig+0x124>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d00b      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a28      	ldr	r2, [pc, #160]	; (8001abc <TIM_Base_SetConfig+0x128>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d007      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a27      	ldr	r2, [pc, #156]	; (8001ac0 <TIM_Base_SetConfig+0x12c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d003      	beq.n	8001a2e <TIM_Base_SetConfig+0x9a>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a26      	ldr	r2, [pc, #152]	; (8001ac4 <TIM_Base_SetConfig+0x130>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d108      	bne.n	8001a40 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	68fa      	ldr	r2, [r7, #12]
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	68fa      	ldr	r2, [r7, #12]
 8001a52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	4a10      	ldr	r2, [pc, #64]	; (8001aa8 <TIM_Base_SetConfig+0x114>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d00f      	beq.n	8001a8c <TIM_Base_SetConfig+0xf8>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <TIM_Base_SetConfig+0x124>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d00b      	beq.n	8001a8c <TIM_Base_SetConfig+0xf8>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	4a11      	ldr	r2, [pc, #68]	; (8001abc <TIM_Base_SetConfig+0x128>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d007      	beq.n	8001a8c <TIM_Base_SetConfig+0xf8>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a10      	ldr	r2, [pc, #64]	; (8001ac0 <TIM_Base_SetConfig+0x12c>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d003      	beq.n	8001a8c <TIM_Base_SetConfig+0xf8>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0f      	ldr	r2, [pc, #60]	; (8001ac4 <TIM_Base_SetConfig+0x130>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d103      	bne.n	8001a94 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	691a      	ldr	r2, [r3, #16]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	615a      	str	r2, [r3, #20]
}
 8001a9a:	bf00      	nop
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40012c00 	.word	0x40012c00
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	40013400 	.word	0x40013400
 8001abc:	40014000 	.word	0x40014000
 8001ac0:	40014400 	.word	0x40014400
 8001ac4:	40014800 	.word	0x40014800

08001ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Handler+0x1c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001b0c:	f001 fc48 	bl	80033a0 <xTaskGetSchedulerState>
 8001b10:	4603      	mov	r3, r0
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d001      	beq.n	8001b1a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001b16:	f002 fa2f 	bl	8003f78 <xPortSysTickHandler>
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001b24:	b480      	push	{r7}
 8001b26:	b085      	sub	sp, #20
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	4a07      	ldr	r2, [pc, #28]	; (8001b50 <vApplicationGetIdleTaskMemory+0x2c>)
 8001b34:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	4a06      	ldr	r2, [pc, #24]	; (8001b54 <vApplicationGetIdleTaskMemory+0x30>)
 8001b3a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2280      	movs	r2, #128	; 0x80
 8001b40:	601a      	str	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	3714      	adds	r7, #20
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr
 8001b4e:	bf00      	nop
 8001b50:	200000d8 	.word	0x200000d8
 8001b54:	20000184 	.word	0x20000184

08001b58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	4a07      	ldr	r2, [pc, #28]	; (8001b84 <vApplicationGetTimerTaskMemory+0x2c>)
 8001b68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	4a06      	ldr	r2, [pc, #24]	; (8001b88 <vApplicationGetTimerTaskMemory+0x30>)
 8001b6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b76:	601a      	str	r2, [r3, #0]
}
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b82:	4770      	bx	lr
 8001b84:	20000384 	.word	0x20000384
 8001b88:	20000430 	.word	0x20000430

08001b8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f103 0208 	add.w	r2, r3, #8
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f103 0208 	add.w	r2, r3, #8
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f103 0208 	add.w	r2, r3, #8
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr

08001bcc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b083      	sub	sp, #12
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001be6:	b480      	push	{r7}
 8001be8:	b085      	sub	sp, #20
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
 8001bee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68fa      	ldr	r2, [r7, #12]
 8001bfa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	683a      	ldr	r2, [r7, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	683a      	ldr	r2, [r7, #0]
 8001c10:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	1c5a      	adds	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b085      	sub	sp, #20
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c44:	d103      	bne.n	8001c4e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e00c      	b.n	8001c68 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	3308      	adds	r3, #8
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	e002      	b.n	8001c5c <vListInsert+0x2e>
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d2f6      	bcs.n	8001c56 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	685a      	ldr	r2, [r3, #4]
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	1c5a      	adds	r2, r3, #1
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	601a      	str	r2, [r3, #0]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6892      	ldr	r2, [r2, #8]
 8001cb6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	687a      	ldr	r2, [r7, #4]
 8001cbe:	6852      	ldr	r2, [r2, #4]
 8001cc0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d103      	bne.n	8001cd4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	1e5a      	subs	r2, r3, #1
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d0c:	f383 8811 	msr	BASEPRI, r3
 8001d10:	f3bf 8f6f 	isb	sy
 8001d14:	f3bf 8f4f 	dsb	sy
 8001d18:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001d1a:	bf00      	nop
 8001d1c:	e7fe      	b.n	8001d1c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001d1e:	f002 f899 	bl	8003e54 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2a:	68f9      	ldr	r1, [r7, #12]
 8001d2c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	441a      	add	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d4e:	3b01      	subs	r3, #1
 8001d50:	68f9      	ldr	r1, [r7, #12]
 8001d52:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001d54:	fb01 f303 	mul.w	r3, r1, r3
 8001d58:	441a      	add	r2, r3
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	22ff      	movs	r2, #255	; 0xff
 8001d62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	22ff      	movs	r2, #255	; 0xff
 8001d6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d114      	bne.n	8001d9e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d01a      	beq.n	8001db2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	3310      	adds	r3, #16
 8001d80:	4618      	mov	r0, r3
 8001d82:	f001 f94b 	bl	800301c <xTaskRemoveFromEventList>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d012      	beq.n	8001db2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001d8c:	4b0c      	ldr	r3, [pc, #48]	; (8001dc0 <xQueueGenericReset+0xcc>)
 8001d8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	f3bf 8f4f 	dsb	sy
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	e009      	b.n	8001db2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	3310      	adds	r3, #16
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff fef2 	bl	8001b8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	3324      	adds	r3, #36	; 0x24
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff feed 	bl	8001b8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001db2:	f002 f87f 	bl	8003eb4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001db6:	2301      	movs	r3, #1
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	3710      	adds	r7, #16
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}
 8001dc0:	e000ed04 	.word	0xe000ed04

08001dc4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b08e      	sub	sp, #56	; 0x38
 8001dc8:	af02      	add	r7, sp, #8
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d10a      	bne.n	8001dee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ddc:	f383 8811 	msr	BASEPRI, r3
 8001de0:	f3bf 8f6f 	isb	sy
 8001de4:	f3bf 8f4f 	dsb	sy
 8001de8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001dea:	bf00      	nop
 8001dec:	e7fe      	b.n	8001dec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d10a      	bne.n	8001e0a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001df8:	f383 8811 	msr	BASEPRI, r3
 8001dfc:	f3bf 8f6f 	isb	sy
 8001e00:	f3bf 8f4f 	dsb	sy
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001e06:	bf00      	nop
 8001e08:	e7fe      	b.n	8001e08 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d002      	beq.n	8001e16 <xQueueGenericCreateStatic+0x52>
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <xQueueGenericCreateStatic+0x56>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <xQueueGenericCreateStatic+0x58>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d10a      	bne.n	8001e36 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e24:	f383 8811 	msr	BASEPRI, r3
 8001e28:	f3bf 8f6f 	isb	sy
 8001e2c:	f3bf 8f4f 	dsb	sy
 8001e30:	623b      	str	r3, [r7, #32]
}
 8001e32:	bf00      	nop
 8001e34:	e7fe      	b.n	8001e34 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d102      	bne.n	8001e42 <xQueueGenericCreateStatic+0x7e>
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <xQueueGenericCreateStatic+0x82>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <xQueueGenericCreateStatic+0x84>
 8001e46:	2300      	movs	r3, #0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d10a      	bne.n	8001e62 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8001e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e50:	f383 8811 	msr	BASEPRI, r3
 8001e54:	f3bf 8f6f 	isb	sy
 8001e58:	f3bf 8f4f 	dsb	sy
 8001e5c:	61fb      	str	r3, [r7, #28]
}
 8001e5e:	bf00      	nop
 8001e60:	e7fe      	b.n	8001e60 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001e62:	2350      	movs	r3, #80	; 0x50
 8001e64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2b50      	cmp	r3, #80	; 0x50
 8001e6a:	d00a      	beq.n	8001e82 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8001e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e70:	f383 8811 	msr	BASEPRI, r3
 8001e74:	f3bf 8f6f 	isb	sy
 8001e78:	f3bf 8f4f 	dsb	sy
 8001e7c:	61bb      	str	r3, [r7, #24]
}
 8001e7e:	bf00      	nop
 8001e80:	e7fe      	b.n	8001e80 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001e82:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8001e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d00d      	beq.n	8001eaa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	2201      	movs	r2, #1
 8001e92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001e96:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8001e9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	4613      	mov	r3, r2
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	68b9      	ldr	r1, [r7, #8]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f805 	bl	8001eb4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3730      	adds	r7, #48	; 0x30
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d103      	bne.n	8001ed0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001ec8:	69bb      	ldr	r3, [r7, #24]
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	601a      	str	r2, [r3, #0]
 8001ece:	e002      	b.n	8001ed6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001ed0:	69bb      	ldr	r3, [r7, #24]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001edc:	69bb      	ldr	r3, [r7, #24]
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	69b8      	ldr	r0, [r7, #24]
 8001ee6:	f7ff ff05 	bl	8001cf4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	78fa      	ldrb	r2, [r7, #3]
 8001eee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08e      	sub	sp, #56	; 0x38
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	607a      	str	r2, [r7, #4]
 8001f08:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8001f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10a      	bne.n	8001f2e <xQueueGenericSend+0x32>
	__asm volatile
 8001f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f1c:	f383 8811 	msr	BASEPRI, r3
 8001f20:	f3bf 8f6f 	isb	sy
 8001f24:	f3bf 8f4f 	dsb	sy
 8001f28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001f2a:	bf00      	nop
 8001f2c:	e7fe      	b.n	8001f2c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <xQueueGenericSend+0x40>
 8001f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d101      	bne.n	8001f40 <xQueueGenericSend+0x44>
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e000      	b.n	8001f42 <xQueueGenericSend+0x46>
 8001f40:	2300      	movs	r3, #0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10a      	bne.n	8001f5c <xQueueGenericSend+0x60>
	__asm volatile
 8001f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4a:	f383 8811 	msr	BASEPRI, r3
 8001f4e:	f3bf 8f6f 	isb	sy
 8001f52:	f3bf 8f4f 	dsb	sy
 8001f56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001f58:	bf00      	nop
 8001f5a:	e7fe      	b.n	8001f5a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d103      	bne.n	8001f6a <xQueueGenericSend+0x6e>
 8001f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d101      	bne.n	8001f6e <xQueueGenericSend+0x72>
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	e000      	b.n	8001f70 <xQueueGenericSend+0x74>
 8001f6e:	2300      	movs	r3, #0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d10a      	bne.n	8001f8a <xQueueGenericSend+0x8e>
	__asm volatile
 8001f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f78:	f383 8811 	msr	BASEPRI, r3
 8001f7c:	f3bf 8f6f 	isb	sy
 8001f80:	f3bf 8f4f 	dsb	sy
 8001f84:	623b      	str	r3, [r7, #32]
}
 8001f86:	bf00      	nop
 8001f88:	e7fe      	b.n	8001f88 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8001f8a:	f001 fa09 	bl	80033a0 <xTaskGetSchedulerState>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <xQueueGenericSend+0x9e>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d101      	bne.n	8001f9e <xQueueGenericSend+0xa2>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <xQueueGenericSend+0xa4>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d10a      	bne.n	8001fba <xQueueGenericSend+0xbe>
	__asm volatile
 8001fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fa8:	f383 8811 	msr	BASEPRI, r3
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	f3bf 8f4f 	dsb	sy
 8001fb4:	61fb      	str	r3, [r7, #28]
}
 8001fb6:	bf00      	nop
 8001fb8:	e7fe      	b.n	8001fb8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8001fba:	f001 ff4b 	bl	8003e54 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8001fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d302      	bcc.n	8001fd0 <xQueueGenericSend+0xd4>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d129      	bne.n	8002024 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8001fd0:	683a      	ldr	r2, [r7, #0]
 8001fd2:	68b9      	ldr	r1, [r7, #8]
 8001fd4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001fd6:	f000 fa0b 	bl	80023f0 <prvCopyDataToQueue>
 8001fda:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d010      	beq.n	8002006 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8001fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fe6:	3324      	adds	r3, #36	; 0x24
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f001 f817 	bl	800301c <xTaskRemoveFromEventList>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d013      	beq.n	800201c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8001ff4:	4b3f      	ldr	r3, [pc, #252]	; (80020f4 <xQueueGenericSend+0x1f8>)
 8001ff6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	f3bf 8f4f 	dsb	sy
 8002000:	f3bf 8f6f 	isb	sy
 8002004:	e00a      	b.n	800201c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800200c:	4b39      	ldr	r3, [pc, #228]	; (80020f4 <xQueueGenericSend+0x1f8>)
 800200e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002012:	601a      	str	r2, [r3, #0]
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800201c:	f001 ff4a 	bl	8003eb4 <vPortExitCritical>
				return pdPASS;
 8002020:	2301      	movs	r3, #1
 8002022:	e063      	b.n	80020ec <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d103      	bne.n	8002032 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800202a:	f001 ff43 	bl	8003eb4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800202e:	2300      	movs	r3, #0
 8002030:	e05c      	b.n	80020ec <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002034:	2b00      	cmp	r3, #0
 8002036:	d106      	bne.n	8002046 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	4618      	mov	r0, r3
 800203e:	f001 f851 	bl	80030e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002042:	2301      	movs	r3, #1
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002046:	f001 ff35 	bl	8003eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800204a:	f000 fda1 	bl	8002b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800204e:	f001 ff01 	bl	8003e54 <vPortEnterCritical>
 8002052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002054:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002058:	b25b      	sxtb	r3, r3
 800205a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800205e:	d103      	bne.n	8002068 <xQueueGenericSend+0x16c>
 8002060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002062:	2200      	movs	r2, #0
 8002064:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800206a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800206e:	b25b      	sxtb	r3, r3
 8002070:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002074:	d103      	bne.n	800207e <xQueueGenericSend+0x182>
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800207e:	f001 ff19 	bl	8003eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002082:	1d3a      	adds	r2, r7, #4
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	4611      	mov	r1, r2
 800208a:	4618      	mov	r0, r3
 800208c:	f001 f840 	bl	8003110 <xTaskCheckForTimeOut>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d124      	bne.n	80020e0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002098:	f000 faa2 	bl	80025e0 <prvIsQueueFull>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d018      	beq.n	80020d4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80020a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a4:	3310      	adds	r3, #16
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	4611      	mov	r1, r2
 80020aa:	4618      	mov	r0, r3
 80020ac:	f000 ff66 	bl	8002f7c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80020b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020b2:	f000 fa2d 	bl	8002510 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80020b6:	f000 fd79 	bl	8002bac <xTaskResumeAll>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	f47f af7c 	bne.w	8001fba <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80020c2:	4b0c      	ldr	r3, [pc, #48]	; (80020f4 <xQueueGenericSend+0x1f8>)
 80020c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020c8:	601a      	str	r2, [r3, #0]
 80020ca:	f3bf 8f4f 	dsb	sy
 80020ce:	f3bf 8f6f 	isb	sy
 80020d2:	e772      	b.n	8001fba <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80020d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020d6:	f000 fa1b 	bl	8002510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80020da:	f000 fd67 	bl	8002bac <xTaskResumeAll>
 80020de:	e76c      	b.n	8001fba <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80020e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80020e2:	f000 fa15 	bl	8002510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80020e6:	f000 fd61 	bl	8002bac <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80020ea:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	e000ed04 	.word	0xe000ed04

080020f8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b090      	sub	sp, #64	; 0x40
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800210a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800210c:	2b00      	cmp	r3, #0
 800210e:	d10a      	bne.n	8002126 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002114:	f383 8811 	msr	BASEPRI, r3
 8002118:	f3bf 8f6f 	isb	sy
 800211c:	f3bf 8f4f 	dsb	sy
 8002120:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002122:	bf00      	nop
 8002124:	e7fe      	b.n	8002124 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d103      	bne.n	8002134 <xQueueGenericSendFromISR+0x3c>
 800212c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d101      	bne.n	8002138 <xQueueGenericSendFromISR+0x40>
 8002134:	2301      	movs	r3, #1
 8002136:	e000      	b.n	800213a <xQueueGenericSendFromISR+0x42>
 8002138:	2300      	movs	r3, #0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800213e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002142:	f383 8811 	msr	BASEPRI, r3
 8002146:	f3bf 8f6f 	isb	sy
 800214a:	f3bf 8f4f 	dsb	sy
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002150:	bf00      	nop
 8002152:	e7fe      	b.n	8002152 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d103      	bne.n	8002162 <xQueueGenericSendFromISR+0x6a>
 800215a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800215c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215e:	2b01      	cmp	r3, #1
 8002160:	d101      	bne.n	8002166 <xQueueGenericSendFromISR+0x6e>
 8002162:	2301      	movs	r3, #1
 8002164:	e000      	b.n	8002168 <xQueueGenericSendFromISR+0x70>
 8002166:	2300      	movs	r3, #0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800216c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002170:	f383 8811 	msr	BASEPRI, r3
 8002174:	f3bf 8f6f 	isb	sy
 8002178:	f3bf 8f4f 	dsb	sy
 800217c:	623b      	str	r3, [r7, #32]
}
 800217e:	bf00      	nop
 8002180:	e7fe      	b.n	8002180 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002182:	f001 ff49 	bl	8004018 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002186:	f3ef 8211 	mrs	r2, BASEPRI
 800218a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218e:	f383 8811 	msr	BASEPRI, r3
 8002192:	f3bf 8f6f 	isb	sy
 8002196:	f3bf 8f4f 	dsb	sy
 800219a:	61fa      	str	r2, [r7, #28]
 800219c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800219e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80021a0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d302      	bcc.n	80021b4 <xQueueGenericSendFromISR+0xbc>
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d12f      	bne.n	8002214 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80021b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80021ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80021be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021c4:	683a      	ldr	r2, [r7, #0]
 80021c6:	68b9      	ldr	r1, [r7, #8]
 80021c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80021ca:	f000 f911 	bl	80023f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80021ce:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80021d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d6:	d112      	bne.n	80021fe <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d016      	beq.n	800220e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021e2:	3324      	adds	r3, #36	; 0x24
 80021e4:	4618      	mov	r0, r3
 80021e6:	f000 ff19 	bl	800301c <xTaskRemoveFromEventList>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00e      	beq.n	800220e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2201      	movs	r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	e007      	b.n	800220e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80021fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002202:	3301      	adds	r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	b25a      	sxtb	r2, r3
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800220e:	2301      	movs	r3, #1
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002212:	e001      	b.n	8002218 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002214:	2300      	movs	r3, #0
 8002216:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002222:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002224:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002226:	4618      	mov	r0, r3
 8002228:	3740      	adds	r7, #64	; 0x40
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
	...

08002230 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b08c      	sub	sp, #48	; 0x30
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800223c:	2300      	movs	r3, #0
 800223e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002246:	2b00      	cmp	r3, #0
 8002248:	d10a      	bne.n	8002260 <xQueueReceive+0x30>
	__asm volatile
 800224a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800224e:	f383 8811 	msr	BASEPRI, r3
 8002252:	f3bf 8f6f 	isb	sy
 8002256:	f3bf 8f4f 	dsb	sy
 800225a:	623b      	str	r3, [r7, #32]
}
 800225c:	bf00      	nop
 800225e:	e7fe      	b.n	800225e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <xQueueReceive+0x3e>
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	2b00      	cmp	r3, #0
 800226c:	d101      	bne.n	8002272 <xQueueReceive+0x42>
 800226e:	2301      	movs	r3, #1
 8002270:	e000      	b.n	8002274 <xQueueReceive+0x44>
 8002272:	2300      	movs	r3, #0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10a      	bne.n	800228e <xQueueReceive+0x5e>
	__asm volatile
 8002278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800227c:	f383 8811 	msr	BASEPRI, r3
 8002280:	f3bf 8f6f 	isb	sy
 8002284:	f3bf 8f4f 	dsb	sy
 8002288:	61fb      	str	r3, [r7, #28]
}
 800228a:	bf00      	nop
 800228c:	e7fe      	b.n	800228c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800228e:	f001 f887 	bl	80033a0 <xTaskGetSchedulerState>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <xQueueReceive+0x6e>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <xQueueReceive+0x72>
 800229e:	2301      	movs	r3, #1
 80022a0:	e000      	b.n	80022a4 <xQueueReceive+0x74>
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d10a      	bne.n	80022be <xQueueReceive+0x8e>
	__asm volatile
 80022a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ac:	f383 8811 	msr	BASEPRI, r3
 80022b0:	f3bf 8f6f 	isb	sy
 80022b4:	f3bf 8f4f 	dsb	sy
 80022b8:	61bb      	str	r3, [r7, #24]
}
 80022ba:	bf00      	nop
 80022bc:	e7fe      	b.n	80022bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80022be:	f001 fdc9 	bl	8003e54 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01f      	beq.n	800230e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80022ce:	68b9      	ldr	r1, [r7, #8]
 80022d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80022d2:	f000 f8f7 	bl	80024c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80022d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d8:	1e5a      	subs	r2, r3, #1
 80022da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80022de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e0:	691b      	ldr	r3, [r3, #16]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00f      	beq.n	8002306 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80022e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022e8:	3310      	adds	r3, #16
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fe96 	bl	800301c <xTaskRemoveFromEventList>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d007      	beq.n	8002306 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80022f6:	4b3d      	ldr	r3, [pc, #244]	; (80023ec <xQueueReceive+0x1bc>)
 80022f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	f3bf 8f4f 	dsb	sy
 8002302:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002306:	f001 fdd5 	bl	8003eb4 <vPortExitCritical>
				return pdPASS;
 800230a:	2301      	movs	r3, #1
 800230c:	e069      	b.n	80023e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d103      	bne.n	800231c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002314:	f001 fdce 	bl	8003eb4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002318:	2300      	movs	r3, #0
 800231a:	e062      	b.n	80023e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800231c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d106      	bne.n	8002330 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002322:	f107 0310 	add.w	r3, r7, #16
 8002326:	4618      	mov	r0, r3
 8002328:	f000 fedc 	bl	80030e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800232c:	2301      	movs	r3, #1
 800232e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002330:	f001 fdc0 	bl	8003eb4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002334:	f000 fc2c 	bl	8002b90 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002338:	f001 fd8c 	bl	8003e54 <vPortEnterCritical>
 800233c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800233e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002342:	b25b      	sxtb	r3, r3
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d103      	bne.n	8002352 <xQueueReceive+0x122>
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	2200      	movs	r2, #0
 800234e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002354:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002358:	b25b      	sxtb	r3, r3
 800235a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800235e:	d103      	bne.n	8002368 <xQueueReceive+0x138>
 8002360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002362:	2200      	movs	r2, #0
 8002364:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002368:	f001 fda4 	bl	8003eb4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800236c:	1d3a      	adds	r2, r7, #4
 800236e:	f107 0310 	add.w	r3, r7, #16
 8002372:	4611      	mov	r1, r2
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fecb 	bl	8003110 <xTaskCheckForTimeOut>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d123      	bne.n	80023c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002380:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002382:	f000 f917 	bl	80025b4 <prvIsQueueEmpty>
 8002386:	4603      	mov	r3, r0
 8002388:	2b00      	cmp	r3, #0
 800238a:	d017      	beq.n	80023bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800238c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800238e:	3324      	adds	r3, #36	; 0x24
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4611      	mov	r1, r2
 8002394:	4618      	mov	r0, r3
 8002396:	f000 fdf1 	bl	8002f7c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800239a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800239c:	f000 f8b8 	bl	8002510 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80023a0:	f000 fc04 	bl	8002bac <xTaskResumeAll>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d189      	bne.n	80022be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80023aa:	4b10      	ldr	r3, [pc, #64]	; (80023ec <xQueueReceive+0x1bc>)
 80023ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80023b0:	601a      	str	r2, [r3, #0]
 80023b2:	f3bf 8f4f 	dsb	sy
 80023b6:	f3bf 8f6f 	isb	sy
 80023ba:	e780      	b.n	80022be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80023bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023be:	f000 f8a7 	bl	8002510 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80023c2:	f000 fbf3 	bl	8002bac <xTaskResumeAll>
 80023c6:	e77a      	b.n	80022be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80023c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023ca:	f000 f8a1 	bl	8002510 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80023ce:	f000 fbed 	bl	8002bac <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80023d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80023d4:	f000 f8ee 	bl	80025b4 <prvIsQueueEmpty>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	f43f af6f 	beq.w	80022be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80023e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3730      	adds	r7, #48	; 0x30
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	e000ed04 	.word	0xe000ed04

080023f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002404:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10d      	bne.n	800242a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d14d      	bne.n	80024b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4618      	mov	r0, r3
 800241c:	f000 ffde 	bl	80033dc <xTaskPriorityDisinherit>
 8002420:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	e043      	b.n	80024b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d119      	bne.n	8002464 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6858      	ldr	r0, [r3, #4]
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002438:	461a      	mov	r2, r3
 800243a:	68b9      	ldr	r1, [r7, #8]
 800243c:	f002 f89a 	bl	8004574 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	441a      	add	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	429a      	cmp	r2, r3
 8002458:	d32b      	bcc.n	80024b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
 8002462:	e026      	b.n	80024b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68d8      	ldr	r0, [r3, #12]
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246c:	461a      	mov	r2, r3
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	f002 f880 	bl	8004574 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	68da      	ldr	r2, [r3, #12]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247c:	425b      	negs	r3, r3
 800247e:	441a      	add	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	68da      	ldr	r2, [r3, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	689a      	ldr	r2, [r3, #8]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	425b      	negs	r3, r3
 800249a:	441a      	add	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d105      	bne.n	80024b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80024ba:	697b      	ldr	r3, [r7, #20]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
 80024cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d018      	beq.n	8002508 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	441a      	add	r2, r3
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68da      	ldr	r2, [r3, #12]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	d303      	bcc.n	80024f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	68d9      	ldr	r1, [r3, #12]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002500:	461a      	mov	r2, r3
 8002502:	6838      	ldr	r0, [r7, #0]
 8002504:	f002 f836 	bl	8004574 <memcpy>
	}
}
 8002508:	bf00      	nop
 800250a:	3708      	adds	r7, #8
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}

08002510 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002518:	f001 fc9c 	bl	8003e54 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002522:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002524:	e011      	b.n	800254a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2b00      	cmp	r3, #0
 800252c:	d012      	beq.n	8002554 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	3324      	adds	r3, #36	; 0x24
 8002532:	4618      	mov	r0, r3
 8002534:	f000 fd72 	bl	800301c <xTaskRemoveFromEventList>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d001      	beq.n	8002542 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800253e:	f000 fe49 	bl	80031d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	3b01      	subs	r3, #1
 8002546:	b2db      	uxtb	r3, r3
 8002548:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800254a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254e:	2b00      	cmp	r3, #0
 8002550:	dce9      	bgt.n	8002526 <prvUnlockQueue+0x16>
 8002552:	e000      	b.n	8002556 <prvUnlockQueue+0x46>
					break;
 8002554:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	22ff      	movs	r2, #255	; 0xff
 800255a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800255e:	f001 fca9 	bl	8003eb4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002562:	f001 fc77 	bl	8003e54 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800256c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800256e:	e011      	b.n	8002594 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	691b      	ldr	r3, [r3, #16]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d012      	beq.n	800259e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	3310      	adds	r3, #16
 800257c:	4618      	mov	r0, r3
 800257e:	f000 fd4d 	bl	800301c <xTaskRemoveFromEventList>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d001      	beq.n	800258c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002588:	f000 fe24 	bl	80031d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800258c:	7bbb      	ldrb	r3, [r7, #14]
 800258e:	3b01      	subs	r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002594:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002598:	2b00      	cmp	r3, #0
 800259a:	dce9      	bgt.n	8002570 <prvUnlockQueue+0x60>
 800259c:	e000      	b.n	80025a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800259e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	22ff      	movs	r2, #255	; 0xff
 80025a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80025a8:	f001 fc84 	bl	8003eb4 <vPortExitCritical>
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025bc:	f001 fc4a 	bl	8003e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d102      	bne.n	80025ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e001      	b.n	80025d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80025d2:	f001 fc6f 	bl	8003eb4 <vPortExitCritical>

	return xReturn;
 80025d6:	68fb      	ldr	r3, [r7, #12]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80025e8:	f001 fc34 	bl	8003e54 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d102      	bne.n	80025fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80025f8:	2301      	movs	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	e001      	b.n	8002602 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002602:	f001 fc57 	bl	8003eb4 <vPortExitCritical>

	return xReturn;
 8002606:	68fb      	ldr	r3, [r7, #12]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3710      	adds	r7, #16
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800261a:	2300      	movs	r3, #0
 800261c:	60fb      	str	r3, [r7, #12]
 800261e:	e014      	b.n	800264a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002620:	4a0f      	ldr	r2, [pc, #60]	; (8002660 <vQueueAddToRegistry+0x50>)
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10b      	bne.n	8002644 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800262c:	490c      	ldr	r1, [pc, #48]	; (8002660 <vQueueAddToRegistry+0x50>)
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002636:	4a0a      	ldr	r2, [pc, #40]	; (8002660 <vQueueAddToRegistry+0x50>)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002642:	e006      	b.n	8002652 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	3301      	adds	r3, #1
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	2b07      	cmp	r3, #7
 800264e:	d9e7      	bls.n	8002620 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002650:	bf00      	nop
 8002652:	bf00      	nop
 8002654:	3714      	adds	r7, #20
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	20000830 	.word	0x20000830

08002664 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002664:	b580      	push	{r7, lr}
 8002666:	b086      	sub	sp, #24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002674:	f001 fbee 	bl	8003e54 <vPortEnterCritical>
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800267e:	b25b      	sxtb	r3, r3
 8002680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002684:	d103      	bne.n	800268e <vQueueWaitForMessageRestricted+0x2a>
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	2200      	movs	r2, #0
 800268a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002694:	b25b      	sxtb	r3, r3
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d103      	bne.n	80026a4 <vQueueWaitForMessageRestricted+0x40>
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80026a4:	f001 fc06 	bl	8003eb4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d106      	bne.n	80026be <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	3324      	adds	r3, #36	; 0x24
 80026b4:	687a      	ldr	r2, [r7, #4]
 80026b6:	68b9      	ldr	r1, [r7, #8]
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 fc83 	bl	8002fc4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80026be:	6978      	ldr	r0, [r7, #20]
 80026c0:	f7ff ff26 	bl	8002510 <prvUnlockQueue>
	}
 80026c4:	bf00      	nop
 80026c6:	3718      	adds	r7, #24
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b08e      	sub	sp, #56	; 0x38
 80026d0:	af04      	add	r7, sp, #16
 80026d2:	60f8      	str	r0, [r7, #12]
 80026d4:	60b9      	str	r1, [r7, #8]
 80026d6:	607a      	str	r2, [r7, #4]
 80026d8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80026da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d10a      	bne.n	80026f6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80026e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026e4:	f383 8811 	msr	BASEPRI, r3
 80026e8:	f3bf 8f6f 	isb	sy
 80026ec:	f3bf 8f4f 	dsb	sy
 80026f0:	623b      	str	r3, [r7, #32]
}
 80026f2:	bf00      	nop
 80026f4:	e7fe      	b.n	80026f4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80026f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10a      	bne.n	8002712 <xTaskCreateStatic+0x46>
	__asm volatile
 80026fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002700:	f383 8811 	msr	BASEPRI, r3
 8002704:	f3bf 8f6f 	isb	sy
 8002708:	f3bf 8f4f 	dsb	sy
 800270c:	61fb      	str	r3, [r7, #28]
}
 800270e:	bf00      	nop
 8002710:	e7fe      	b.n	8002710 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002712:	23ac      	movs	r3, #172	; 0xac
 8002714:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	2bac      	cmp	r3, #172	; 0xac
 800271a:	d00a      	beq.n	8002732 <xTaskCreateStatic+0x66>
	__asm volatile
 800271c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002720:	f383 8811 	msr	BASEPRI, r3
 8002724:	f3bf 8f6f 	isb	sy
 8002728:	f3bf 8f4f 	dsb	sy
 800272c:	61bb      	str	r3, [r7, #24]
}
 800272e:	bf00      	nop
 8002730:	e7fe      	b.n	8002730 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002732:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002734:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002736:	2b00      	cmp	r3, #0
 8002738:	d01e      	beq.n	8002778 <xTaskCreateStatic+0xac>
 800273a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800273c:	2b00      	cmp	r3, #0
 800273e:	d01b      	beq.n	8002778 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002748:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	2202      	movs	r2, #2
 800274e:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002752:	2300      	movs	r3, #0
 8002754:	9303      	str	r3, [sp, #12]
 8002756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002758:	9302      	str	r3, [sp, #8]
 800275a:	f107 0314 	add.w	r3, r7, #20
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	687a      	ldr	r2, [r7, #4]
 8002768:	68b9      	ldr	r1, [r7, #8]
 800276a:	68f8      	ldr	r0, [r7, #12]
 800276c:	f000 f850 	bl	8002810 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002770:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002772:	f000 f8f7 	bl	8002964 <prvAddNewTaskToReadyList>
 8002776:	e001      	b.n	800277c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002778:	2300      	movs	r3, #0
 800277a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800277c:	697b      	ldr	r3, [r7, #20]
	}
 800277e:	4618      	mov	r0, r3
 8002780:	3728      	adds	r7, #40	; 0x28
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}

08002786 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002786:	b580      	push	{r7, lr}
 8002788:	b08c      	sub	sp, #48	; 0x30
 800278a:	af04      	add	r7, sp, #16
 800278c:	60f8      	str	r0, [r7, #12]
 800278e:	60b9      	str	r1, [r7, #8]
 8002790:	603b      	str	r3, [r7, #0]
 8002792:	4613      	mov	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002796:	88fb      	ldrh	r3, [r7, #6]
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4618      	mov	r0, r3
 800279c:	f001 fc7c 	bl	8004098 <pvPortMalloc>
 80027a0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d00e      	beq.n	80027c6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80027a8:	20ac      	movs	r0, #172	; 0xac
 80027aa:	f001 fc75 	bl	8004098 <pvPortMalloc>
 80027ae:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	697a      	ldr	r2, [r7, #20]
 80027ba:	631a      	str	r2, [r3, #48]	; 0x30
 80027bc:	e005      	b.n	80027ca <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80027be:	6978      	ldr	r0, [r7, #20]
 80027c0:	f001 fd36 	bl	8004230 <vPortFree>
 80027c4:	e001      	b.n	80027ca <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d017      	beq.n	8002800 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 20a9 	strb.w	r2, [r3, #169]	; 0xa9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80027d8:	88fa      	ldrh	r2, [r7, #6]
 80027da:	2300      	movs	r3, #0
 80027dc:	9303      	str	r3, [sp, #12]
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027e4:	9301      	str	r3, [sp, #4]
 80027e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68b9      	ldr	r1, [r7, #8]
 80027ee:	68f8      	ldr	r0, [r7, #12]
 80027f0:	f000 f80e 	bl	8002810 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027f4:	69f8      	ldr	r0, [r7, #28]
 80027f6:	f000 f8b5 	bl	8002964 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80027fa:	2301      	movs	r3, #1
 80027fc:	61bb      	str	r3, [r7, #24]
 80027fe:	e002      	b.n	8002806 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002800:	f04f 33ff 	mov.w	r3, #4294967295
 8002804:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002806:	69bb      	ldr	r3, [r7, #24]
	}
 8002808:	4618      	mov	r0, r3
 800280a:	3720      	adds	r7, #32
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b088      	sub	sp, #32
 8002814:	af00      	add	r7, sp, #0
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	607a      	str	r2, [r7, #4]
 800281c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800281e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002820:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	461a      	mov	r2, r3
 8002828:	21a5      	movs	r1, #165	; 0xa5
 800282a:	f001 fe1f 	bl	800446c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002838:	3b01      	subs	r3, #1
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4413      	add	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f023 0307 	bic.w	r3, r3, #7
 8002846:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	f003 0307 	and.w	r3, r3, #7
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002852:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002856:	f383 8811 	msr	BASEPRI, r3
 800285a:	f3bf 8f6f 	isb	sy
 800285e:	f3bf 8f4f 	dsb	sy
 8002862:	617b      	str	r3, [r7, #20]
}
 8002864:	bf00      	nop
 8002866:	e7fe      	b.n	8002866 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d01f      	beq.n	80028ae <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800286e:	2300      	movs	r3, #0
 8002870:	61fb      	str	r3, [r7, #28]
 8002872:	e012      	b.n	800289a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	4413      	add	r3, r2
 800287a:	7819      	ldrb	r1, [r3, #0]
 800287c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	4413      	add	r3, r2
 8002882:	3334      	adds	r3, #52	; 0x34
 8002884:	460a      	mov	r2, r1
 8002886:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	4413      	add	r3, r2
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d006      	beq.n	80028a2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	3301      	adds	r3, #1
 8002898:	61fb      	str	r3, [r7, #28]
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	2b0f      	cmp	r3, #15
 800289e:	d9e9      	bls.n	8002874 <prvInitialiseNewTask+0x64>
 80028a0:	e000      	b.n	80028a4 <prvInitialiseNewTask+0x94>
			{
				break;
 80028a2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80028a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028ac:	e003      	b.n	80028b6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80028ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b0:	2200      	movs	r2, #0
 80028b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80028b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028b8:	2b37      	cmp	r3, #55	; 0x37
 80028ba:	d901      	bls.n	80028c0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80028bc:	2337      	movs	r3, #55	; 0x37
 80028be:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80028c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028ca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80028cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ce:	2200      	movs	r2, #0
 80028d0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80028d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d4:	3304      	adds	r3, #4
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f978 	bl	8001bcc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	3318      	adds	r3, #24
 80028e0:	4618      	mov	r0, r3
 80028e2:	f7ff f973 	bl	8001bcc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80028e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028ea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80028f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80028f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* configUSE_APPLICATION_TASK_TAG */

	#if ( configGENERATE_RUN_TIME_STATS == 1 )
	{
		pxNewTCB->ulRunTimeCounter = 0UL;
 80028fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fe:	2200      	movs	r2, #0
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002904:	2200      	movs	r2, #0
 8002906:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800290a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800290c:	2200      	movs	r2, #0
 800290e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002914:	3358      	adds	r3, #88	; 0x58
 8002916:	224c      	movs	r2, #76	; 0x4c
 8002918:	2100      	movs	r1, #0
 800291a:	4618      	mov	r0, r3
 800291c:	f001 fda6 	bl	800446c <memset>
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	4a0d      	ldr	r2, [pc, #52]	; (8002958 <prvInitialiseNewTask+0x148>)
 8002924:	65da      	str	r2, [r3, #92]	; 0x5c
 8002926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002928:	4a0c      	ldr	r2, [pc, #48]	; (800295c <prvInitialiseNewTask+0x14c>)
 800292a:	661a      	str	r2, [r3, #96]	; 0x60
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	4a0c      	ldr	r2, [pc, #48]	; (8002960 <prvInitialiseNewTask+0x150>)
 8002930:	665a      	str	r2, [r3, #100]	; 0x64
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002932:	683a      	ldr	r2, [r7, #0]
 8002934:	68f9      	ldr	r1, [r7, #12]
 8002936:	69b8      	ldr	r0, [r7, #24]
 8002938:	f001 f960 	bl	8003bfc <pxPortInitialiseStack>
 800293c:	4602      	mov	r2, r0
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	2b00      	cmp	r3, #0
 8002946:	d002      	beq.n	800294e <prvInitialiseNewTask+0x13e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800294a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800294c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20001a84 	.word	0x20001a84
 800295c:	20001aec 	.word	0x20001aec
 8002960:	20001b54 	.word	0x20001b54

08002964 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800296c:	f001 fa72 	bl	8003e54 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002970:	4b2d      	ldr	r3, [pc, #180]	; (8002a28 <prvAddNewTaskToReadyList+0xc4>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	3301      	adds	r3, #1
 8002976:	4a2c      	ldr	r2, [pc, #176]	; (8002a28 <prvAddNewTaskToReadyList+0xc4>)
 8002978:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d109      	bne.n	8002996 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002982:	4a2a      	ldr	r2, [pc, #168]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002988:	4b27      	ldr	r3, [pc, #156]	; (8002a28 <prvAddNewTaskToReadyList+0xc4>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d110      	bne.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002990:	f000 fc44 	bl	800321c <prvInitialiseTaskLists>
 8002994:	e00d      	b.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002996:	4b26      	ldr	r3, [pc, #152]	; (8002a30 <prvAddNewTaskToReadyList+0xcc>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d802      	bhi.n	80029b2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029ac:	4a1f      	ldr	r2, [pc, #124]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80029b2:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <prvAddNewTaskToReadyList+0xd0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	3301      	adds	r3, #1
 80029b8:	4a1e      	ldr	r2, [pc, #120]	; (8002a34 <prvAddNewTaskToReadyList+0xd0>)
 80029ba:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80029bc:	4b1d      	ldr	r3, [pc, #116]	; (8002a34 <prvAddNewTaskToReadyList+0xd0>)
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029c8:	4b1b      	ldr	r3, [pc, #108]	; (8002a38 <prvAddNewTaskToReadyList+0xd4>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d903      	bls.n	80029d8 <prvAddNewTaskToReadyList+0x74>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <prvAddNewTaskToReadyList+0xd4>)
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029dc:	4613      	mov	r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4413      	add	r3, r2
 80029e2:	009b      	lsls	r3, r3, #2
 80029e4:	4a15      	ldr	r2, [pc, #84]	; (8002a3c <prvAddNewTaskToReadyList+0xd8>)
 80029e6:	441a      	add	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	3304      	adds	r3, #4
 80029ec:	4619      	mov	r1, r3
 80029ee:	4610      	mov	r0, r2
 80029f0:	f7ff f8f9 	bl	8001be6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80029f4:	f001 fa5e 	bl	8003eb4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80029f8:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <prvAddNewTaskToReadyList+0xcc>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a00:	4b0a      	ldr	r3, [pc, #40]	; (8002a2c <prvAddNewTaskToReadyList+0xc8>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d207      	bcs.n	8002a1e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	; (8002a40 <prvAddNewTaskToReadyList+0xdc>)
 8002a10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f3bf 8f4f 	dsb	sy
 8002a1a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	20000d44 	.word	0x20000d44
 8002a2c:	20000870 	.word	0x20000870
 8002a30:	20000d50 	.word	0x20000d50
 8002a34:	20000d60 	.word	0x20000d60
 8002a38:	20000d4c 	.word	0x20000d4c
 8002a3c:	20000874 	.word	0x20000874
 8002a40:	e000ed04 	.word	0xe000ed04

08002a44 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d017      	beq.n	8002a86 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a56:	4b13      	ldr	r3, [pc, #76]	; (8002aa4 <vTaskDelay+0x60>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d00a      	beq.n	8002a74 <vTaskDelay+0x30>
	__asm volatile
 8002a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a62:	f383 8811 	msr	BASEPRI, r3
 8002a66:	f3bf 8f6f 	isb	sy
 8002a6a:	f3bf 8f4f 	dsb	sy
 8002a6e:	60bb      	str	r3, [r7, #8]
}
 8002a70:	bf00      	nop
 8002a72:	e7fe      	b.n	8002a72 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002a74:	f000 f88c 	bl	8002b90 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002a78:	2100      	movs	r1, #0
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 fd1c 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002a80:	f000 f894 	bl	8002bac <xTaskResumeAll>
 8002a84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d107      	bne.n	8002a9c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <vTaskDelay+0x64>)
 8002a8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002a9c:	bf00      	nop
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	20000d6c 	.word	0x20000d6c
 8002aa8:	e000ed04 	.word	0xe000ed04

08002aac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b08a      	sub	sp, #40	; 0x28
 8002ab0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002aba:	463a      	mov	r2, r7
 8002abc:	1d39      	adds	r1, r7, #4
 8002abe:	f107 0308 	add.w	r3, r7, #8
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7ff f82e 	bl	8001b24 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ac8:	6839      	ldr	r1, [r7, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	68ba      	ldr	r2, [r7, #8]
 8002ace:	9202      	str	r2, [sp, #8]
 8002ad0:	9301      	str	r3, [sp, #4]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	9300      	str	r3, [sp, #0]
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	460a      	mov	r2, r1
 8002ada:	4925      	ldr	r1, [pc, #148]	; (8002b70 <vTaskStartScheduler+0xc4>)
 8002adc:	4825      	ldr	r0, [pc, #148]	; (8002b74 <vTaskStartScheduler+0xc8>)
 8002ade:	f7ff fdf5 	bl	80026cc <xTaskCreateStatic>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4a24      	ldr	r2, [pc, #144]	; (8002b78 <vTaskStartScheduler+0xcc>)
 8002ae6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002ae8:	4b23      	ldr	r3, [pc, #140]	; (8002b78 <vTaskStartScheduler+0xcc>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d002      	beq.n	8002af6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002af0:	2301      	movs	r3, #1
 8002af2:	617b      	str	r3, [r7, #20]
 8002af4:	e001      	b.n	8002afa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d102      	bne.n	8002b06 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002b00:	f000 fd2e 	bl	8003560 <xTimerCreateTimerTask>
 8002b04:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	2b01      	cmp	r3, #1
 8002b0a:	d11d      	bne.n	8002b48 <vTaskStartScheduler+0x9c>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	f383 8811 	msr	BASEPRI, r3
 8002b14:	f3bf 8f6f 	isb	sy
 8002b18:	f3bf 8f4f 	dsb	sy
 8002b1c:	613b      	str	r3, [r7, #16]
}
 8002b1e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002b20:	4b16      	ldr	r3, [pc, #88]	; (8002b7c <vTaskStartScheduler+0xd0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	3358      	adds	r3, #88	; 0x58
 8002b26:	4a16      	ldr	r2, [pc, #88]	; (8002b80 <vTaskStartScheduler+0xd4>)
 8002b28:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <vTaskStartScheduler+0xd8>)
 8002b2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b30:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b32:	4b15      	ldr	r3, [pc, #84]	; (8002b88 <vTaskStartScheduler+0xdc>)
 8002b34:	2201      	movs	r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b38:	4b14      	ldr	r3, [pc, #80]	; (8002b8c <vTaskStartScheduler+0xe0>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
		macro must be defined to configure the timer/counter used to generate
		the run time counter time base.   NOTE:  If configGENERATE_RUN_TIME_STATS
		is set to 0 and the following line fails to build then ensure you do not
		have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();
 8002b3e:	f7fd fc1f 	bl	8000380 <configureTimerForRunTimeStats>

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b42:	f001 f8e5 	bl	8003d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b46:	e00e      	b.n	8002b66 <vTaskStartScheduler+0xba>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b4e:	d10a      	bne.n	8002b66 <vTaskStartScheduler+0xba>
	__asm volatile
 8002b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b54:	f383 8811 	msr	BASEPRI, r3
 8002b58:	f3bf 8f6f 	isb	sy
 8002b5c:	f3bf 8f4f 	dsb	sy
 8002b60:	60fb      	str	r3, [r7, #12]
}
 8002b62:	bf00      	nop
 8002b64:	e7fe      	b.n	8002b64 <vTaskStartScheduler+0xb8>
}
 8002b66:	bf00      	nop
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	08004668 	.word	0x08004668
 8002b74:	080031ed 	.word	0x080031ed
 8002b78:	20000d68 	.word	0x20000d68
 8002b7c:	20000870 	.word	0x20000870
 8002b80:	2000005c 	.word	0x2000005c
 8002b84:	20000d64 	.word	0x20000d64
 8002b88:	20000d50 	.word	0x20000d50
 8002b8c:	20000d48 	.word	0x20000d48

08002b90 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002b90:	b480      	push	{r7}
 8002b92:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <vTaskSuspendAll+0x18>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	4a03      	ldr	r2, [pc, #12]	; (8002ba8 <vTaskSuspendAll+0x18>)
 8002b9c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002b9e:	bf00      	nop
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr
 8002ba8:	20000d6c 	.word	0x20000d6c

08002bac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bba:	4b42      	ldr	r3, [pc, #264]	; (8002cc4 <xTaskResumeAll+0x118>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	603b      	str	r3, [r7, #0]
}
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bd8:	f001 f93c 	bl	8003e54 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bdc:	4b39      	ldr	r3, [pc, #228]	; (8002cc4 <xTaskResumeAll+0x118>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	4a38      	ldr	r2, [pc, #224]	; (8002cc4 <xTaskResumeAll+0x118>)
 8002be4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002be6:	4b37      	ldr	r3, [pc, #220]	; (8002cc4 <xTaskResumeAll+0x118>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d162      	bne.n	8002cb4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002bee:	4b36      	ldr	r3, [pc, #216]	; (8002cc8 <xTaskResumeAll+0x11c>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d05e      	beq.n	8002cb4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002bf6:	e02f      	b.n	8002c58 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002bf8:	4b34      	ldr	r3, [pc, #208]	; (8002ccc <xTaskResumeAll+0x120>)
 8002bfa:	68db      	ldr	r3, [r3, #12]
 8002bfc:	68db      	ldr	r3, [r3, #12]
 8002bfe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	3318      	adds	r3, #24
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff f84b 	bl	8001ca0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	3304      	adds	r3, #4
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f7ff f846 	bl	8001ca0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c18:	4b2d      	ldr	r3, [pc, #180]	; (8002cd0 <xTaskResumeAll+0x124>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d903      	bls.n	8002c28 <xTaskResumeAll+0x7c>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c24:	4a2a      	ldr	r2, [pc, #168]	; (8002cd0 <xTaskResumeAll+0x124>)
 8002c26:	6013      	str	r3, [r2, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4413      	add	r3, r2
 8002c32:	009b      	lsls	r3, r3, #2
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <xTaskResumeAll+0x128>)
 8002c36:	441a      	add	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	3304      	adds	r3, #4
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	4610      	mov	r0, r2
 8002c40:	f7fe ffd1 	bl	8001be6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c48:	4b23      	ldr	r3, [pc, #140]	; (8002cd8 <xTaskResumeAll+0x12c>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d302      	bcc.n	8002c58 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002c52:	4b22      	ldr	r3, [pc, #136]	; (8002cdc <xTaskResumeAll+0x130>)
 8002c54:	2201      	movs	r2, #1
 8002c56:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c58:	4b1c      	ldr	r3, [pc, #112]	; (8002ccc <xTaskResumeAll+0x120>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d1cb      	bne.n	8002bf8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d001      	beq.n	8002c6a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c66:	f000 fb7b 	bl	8003360 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <xTaskResumeAll+0x134>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d010      	beq.n	8002c98 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c76:	f000 f847 	bl	8002d08 <xTaskIncrementTick>
 8002c7a:	4603      	mov	r3, r0
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002c80:	4b16      	ldr	r3, [pc, #88]	; (8002cdc <xTaskResumeAll+0x130>)
 8002c82:	2201      	movs	r2, #1
 8002c84:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	3b01      	subs	r3, #1
 8002c8a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1f1      	bne.n	8002c76 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <xTaskResumeAll+0x134>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002c98:	4b10      	ldr	r3, [pc, #64]	; (8002cdc <xTaskResumeAll+0x130>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d009      	beq.n	8002cb4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002ca4:	4b0f      	ldr	r3, [pc, #60]	; (8002ce4 <xTaskResumeAll+0x138>)
 8002ca6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002caa:	601a      	str	r2, [r3, #0]
 8002cac:	f3bf 8f4f 	dsb	sy
 8002cb0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cb4:	f001 f8fe 	bl	8003eb4 <vPortExitCritical>

	return xAlreadyYielded;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	20000d6c 	.word	0x20000d6c
 8002cc8:	20000d44 	.word	0x20000d44
 8002ccc:	20000d04 	.word	0x20000d04
 8002cd0:	20000d4c 	.word	0x20000d4c
 8002cd4:	20000874 	.word	0x20000874
 8002cd8:	20000870 	.word	0x20000870
 8002cdc:	20000d58 	.word	0x20000d58
 8002ce0:	20000d54 	.word	0x20000d54
 8002ce4:	e000ed04 	.word	0xe000ed04

08002ce8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002cee:	4b05      	ldr	r3, [pc, #20]	; (8002d04 <xTaskGetTickCount+0x1c>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002cf4:	687b      	ldr	r3, [r7, #4]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	20000d48 	.word	0x20000d48

08002d08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d12:	4b4f      	ldr	r3, [pc, #316]	; (8002e50 <xTaskIncrementTick+0x148>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 808f 	bne.w	8002e3a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d1c:	4b4d      	ldr	r3, [pc, #308]	; (8002e54 <xTaskIncrementTick+0x14c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	3301      	adds	r3, #1
 8002d22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d24:	4a4b      	ldr	r2, [pc, #300]	; (8002e54 <xTaskIncrementTick+0x14c>)
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d120      	bne.n	8002d72 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d30:	4b49      	ldr	r3, [pc, #292]	; (8002e58 <xTaskIncrementTick+0x150>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <xTaskIncrementTick+0x48>
	__asm volatile
 8002d3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3e:	f383 8811 	msr	BASEPRI, r3
 8002d42:	f3bf 8f6f 	isb	sy
 8002d46:	f3bf 8f4f 	dsb	sy
 8002d4a:	603b      	str	r3, [r7, #0]
}
 8002d4c:	bf00      	nop
 8002d4e:	e7fe      	b.n	8002d4e <xTaskIncrementTick+0x46>
 8002d50:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <xTaskIncrementTick+0x150>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	60fb      	str	r3, [r7, #12]
 8002d56:	4b41      	ldr	r3, [pc, #260]	; (8002e5c <xTaskIncrementTick+0x154>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a3f      	ldr	r2, [pc, #252]	; (8002e58 <xTaskIncrementTick+0x150>)
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4a3f      	ldr	r2, [pc, #252]	; (8002e5c <xTaskIncrementTick+0x154>)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6013      	str	r3, [r2, #0]
 8002d64:	4b3e      	ldr	r3, [pc, #248]	; (8002e60 <xTaskIncrementTick+0x158>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	3301      	adds	r3, #1
 8002d6a:	4a3d      	ldr	r2, [pc, #244]	; (8002e60 <xTaskIncrementTick+0x158>)
 8002d6c:	6013      	str	r3, [r2, #0]
 8002d6e:	f000 faf7 	bl	8003360 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d72:	4b3c      	ldr	r3, [pc, #240]	; (8002e64 <xTaskIncrementTick+0x15c>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d349      	bcc.n	8002e10 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d7c:	4b36      	ldr	r3, [pc, #216]	; (8002e58 <xTaskIncrementTick+0x150>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d86:	4b37      	ldr	r3, [pc, #220]	; (8002e64 <xTaskIncrementTick+0x15c>)
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	601a      	str	r2, [r3, #0]
					break;
 8002d8e:	e03f      	b.n	8002e10 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d90:	4b31      	ldr	r3, [pc, #196]	; (8002e58 <xTaskIncrementTick+0x150>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d203      	bcs.n	8002db0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002da8:	4a2e      	ldr	r2, [pc, #184]	; (8002e64 <xTaskIncrementTick+0x15c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002dae:	e02f      	b.n	8002e10 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	3304      	adds	r3, #4
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7fe ff73 	bl	8001ca0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d004      	beq.n	8002dcc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	3318      	adds	r3, #24
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f7fe ff6a 	bl	8001ca0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd0:	4b25      	ldr	r3, [pc, #148]	; (8002e68 <xTaskIncrementTick+0x160>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d903      	bls.n	8002de0 <xTaskIncrementTick+0xd8>
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ddc:	4a22      	ldr	r2, [pc, #136]	; (8002e68 <xTaskIncrementTick+0x160>)
 8002dde:	6013      	str	r3, [r2, #0]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de4:	4613      	mov	r3, r2
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4a1f      	ldr	r2, [pc, #124]	; (8002e6c <xTaskIncrementTick+0x164>)
 8002dee:	441a      	add	r2, r3
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	3304      	adds	r3, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4610      	mov	r0, r2
 8002df8:	f7fe fef5 	bl	8001be6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e00:	4b1b      	ldr	r3, [pc, #108]	; (8002e70 <xTaskIncrementTick+0x168>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d3b8      	bcc.n	8002d7c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e0e:	e7b5      	b.n	8002d7c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <xTaskIncrementTick+0x168>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e16:	4915      	ldr	r1, [pc, #84]	; (8002e6c <xTaskIncrementTick+0x164>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	009b      	lsls	r3, r3, #2
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d901      	bls.n	8002e2c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e2c:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <xTaskIncrementTick+0x16c>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d007      	beq.n	8002e44 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002e34:	2301      	movs	r3, #1
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e004      	b.n	8002e44 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e3a:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <xTaskIncrementTick+0x170>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	4a0d      	ldr	r2, [pc, #52]	; (8002e78 <xTaskIncrementTick+0x170>)
 8002e42:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e44:	697b      	ldr	r3, [r7, #20]
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3718      	adds	r7, #24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	20000d6c 	.word	0x20000d6c
 8002e54:	20000d48 	.word	0x20000d48
 8002e58:	20000cfc 	.word	0x20000cfc
 8002e5c:	20000d00 	.word	0x20000d00
 8002e60:	20000d5c 	.word	0x20000d5c
 8002e64:	20000d64 	.word	0x20000d64
 8002e68:	20000d4c 	.word	0x20000d4c
 8002e6c:	20000874 	.word	0x20000874
 8002e70:	20000870 	.word	0x20000870
 8002e74:	20000d58 	.word	0x20000d58
 8002e78:	20000d54 	.word	0x20000d54

08002e7c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b084      	sub	sp, #16
 8002e80:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e82:	4b36      	ldr	r3, [pc, #216]	; (8002f5c <vTaskSwitchContext+0xe0>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e8a:	4b35      	ldr	r3, [pc, #212]	; (8002f60 <vTaskSwitchContext+0xe4>)
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e90:	e05f      	b.n	8002f52 <vTaskSwitchContext+0xd6>
		xYieldPending = pdFALSE;
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <vTaskSwitchContext+0xe4>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
				ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
 8002e98:	f7fd fa7e 	bl	8000398 <getRunTimeCounterValue>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	4a31      	ldr	r2, [pc, #196]	; (8002f64 <vTaskSwitchContext+0xe8>)
 8002ea0:	6013      	str	r3, [r2, #0]
			if( ulTotalRunTime > ulTaskSwitchedInTime )
 8002ea2:	4b30      	ldr	r3, [pc, #192]	; (8002f64 <vTaskSwitchContext+0xe8>)
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	4b30      	ldr	r3, [pc, #192]	; (8002f68 <vTaskSwitchContext+0xec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d909      	bls.n	8002ec2 <vTaskSwitchContext+0x46>
				pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
 8002eae:	4b2f      	ldr	r3, [pc, #188]	; (8002f6c <vTaskSwitchContext+0xf0>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002eb4:	4a2b      	ldr	r2, [pc, #172]	; (8002f64 <vTaskSwitchContext+0xe8>)
 8002eb6:	6810      	ldr	r0, [r2, #0]
 8002eb8:	4a2b      	ldr	r2, [pc, #172]	; (8002f68 <vTaskSwitchContext+0xec>)
 8002eba:	6812      	ldr	r2, [r2, #0]
 8002ebc:	1a82      	subs	r2, r0, r2
 8002ebe:	440a      	add	r2, r1
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
			ulTaskSwitchedInTime = ulTotalRunTime;
 8002ec2:	4b28      	ldr	r3, [pc, #160]	; (8002f64 <vTaskSwitchContext+0xe8>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a28      	ldr	r2, [pc, #160]	; (8002f68 <vTaskSwitchContext+0xec>)
 8002ec8:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002eca:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <vTaskSwitchContext+0xf4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	e010      	b.n	8002ef4 <vTaskSwitchContext+0x78>
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d10a      	bne.n	8002eee <vTaskSwitchContext+0x72>
	__asm volatile
 8002ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002edc:	f383 8811 	msr	BASEPRI, r3
 8002ee0:	f3bf 8f6f 	isb	sy
 8002ee4:	f3bf 8f4f 	dsb	sy
 8002ee8:	607b      	str	r3, [r7, #4]
}
 8002eea:	bf00      	nop
 8002eec:	e7fe      	b.n	8002eec <vTaskSwitchContext+0x70>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	491f      	ldr	r1, [pc, #124]	; (8002f74 <vTaskSwitchContext+0xf8>)
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0e4      	beq.n	8002ed2 <vTaskSwitchContext+0x56>
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <vTaskSwitchContext+0xf8>)
 8002f14:	4413      	add	r3, r2
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	605a      	str	r2, [r3, #4]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	3308      	adds	r3, #8
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d104      	bne.n	8002f38 <vTaskSwitchContext+0xbc>
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	4a0b      	ldr	r2, [pc, #44]	; (8002f6c <vTaskSwitchContext+0xf0>)
 8002f40:	6013      	str	r3, [r2, #0]
 8002f42:	4a0b      	ldr	r2, [pc, #44]	; (8002f70 <vTaskSwitchContext+0xf4>)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002f48:	4b08      	ldr	r3, [pc, #32]	; (8002f6c <vTaskSwitchContext+0xf0>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	3358      	adds	r3, #88	; 0x58
 8002f4e:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <vTaskSwitchContext+0xfc>)
 8002f50:	6013      	str	r3, [r2, #0]
}
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000d6c 	.word	0x20000d6c
 8002f60:	20000d58 	.word	0x20000d58
 8002f64:	20000d74 	.word	0x20000d74
 8002f68:	20000d70 	.word	0x20000d70
 8002f6c:	20000870 	.word	0x20000870
 8002f70:	20000d4c 	.word	0x20000d4c
 8002f74:	20000874 	.word	0x20000874
 8002f78:	2000005c 	.word	0x2000005c

08002f7c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b084      	sub	sp, #16
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
 8002f84:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d10a      	bne.n	8002fa2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	60fb      	str	r3, [r7, #12]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fa2:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <vTaskPlaceOnEventList+0x44>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	3318      	adds	r3, #24
 8002fa8:	4619      	mov	r1, r3
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fe3f 	bl	8001c2e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	6838      	ldr	r0, [r7, #0]
 8002fb4:	f000 fa80 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
}
 8002fb8:	bf00      	nop
 8002fba:	3710      	adds	r7, #16
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	bd80      	pop	{r7, pc}
 8002fc0:	20000870 	.word	0x20000870

08002fc4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d10a      	bne.n	8002fec <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8002fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fda:	f383 8811 	msr	BASEPRI, r3
 8002fde:	f3bf 8f6f 	isb	sy
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	617b      	str	r3, [r7, #20]
}
 8002fe8:	bf00      	nop
 8002fea:	e7fe      	b.n	8002fea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <vTaskPlaceOnEventListRestricted+0x54>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	3318      	adds	r3, #24
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f7fe fdf6 	bl	8001be6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003000:	f04f 33ff 	mov.w	r3, #4294967295
 8003004:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003006:	6879      	ldr	r1, [r7, #4]
 8003008:	68b8      	ldr	r0, [r7, #8]
 800300a:	f000 fa55 	bl	80034b8 <prvAddCurrentTaskToDelayedList>
	}
 800300e:	bf00      	nop
 8003010:	3718      	adds	r7, #24
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20000870 	.word	0x20000870

0800301c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d10a      	bne.n	8003048 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003036:	f383 8811 	msr	BASEPRI, r3
 800303a:	f3bf 8f6f 	isb	sy
 800303e:	f3bf 8f4f 	dsb	sy
 8003042:	60fb      	str	r3, [r7, #12]
}
 8003044:	bf00      	nop
 8003046:	e7fe      	b.n	8003046 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	3318      	adds	r3, #24
 800304c:	4618      	mov	r0, r3
 800304e:	f7fe fe27 	bl	8001ca0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003052:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <xTaskRemoveFromEventList+0xb0>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d11d      	bne.n	8003096 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	3304      	adds	r3, #4
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fe1e 	bl	8001ca0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003068:	4b19      	ldr	r3, [pc, #100]	; (80030d0 <xTaskRemoveFromEventList+0xb4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	429a      	cmp	r2, r3
 800306e:	d903      	bls.n	8003078 <xTaskRemoveFromEventList+0x5c>
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003074:	4a16      	ldr	r2, [pc, #88]	; (80030d0 <xTaskRemoveFromEventList+0xb4>)
 8003076:	6013      	str	r3, [r2, #0]
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800307c:	4613      	mov	r3, r2
 800307e:	009b      	lsls	r3, r3, #2
 8003080:	4413      	add	r3, r2
 8003082:	009b      	lsls	r3, r3, #2
 8003084:	4a13      	ldr	r2, [pc, #76]	; (80030d4 <xTaskRemoveFromEventList+0xb8>)
 8003086:	441a      	add	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	3304      	adds	r3, #4
 800308c:	4619      	mov	r1, r3
 800308e:	4610      	mov	r0, r2
 8003090:	f7fe fda9 	bl	8001be6 <vListInsertEnd>
 8003094:	e005      	b.n	80030a2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	3318      	adds	r3, #24
 800309a:	4619      	mov	r1, r3
 800309c:	480e      	ldr	r0, [pc, #56]	; (80030d8 <xTaskRemoveFromEventList+0xbc>)
 800309e:	f7fe fda2 	bl	8001be6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <xTaskRemoveFromEventList+0xc0>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d905      	bls.n	80030bc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80030b0:	2301      	movs	r3, #1
 80030b2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80030b4:	4b0a      	ldr	r3, [pc, #40]	; (80030e0 <xTaskRemoveFromEventList+0xc4>)
 80030b6:	2201      	movs	r2, #1
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	e001      	b.n	80030c0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80030bc:	2300      	movs	r3, #0
 80030be:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80030c0:	697b      	ldr	r3, [r7, #20]
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3718      	adds	r7, #24
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	20000d6c 	.word	0x20000d6c
 80030d0:	20000d4c 	.word	0x20000d4c
 80030d4:	20000874 	.word	0x20000874
 80030d8:	20000d04 	.word	0x20000d04
 80030dc:	20000870 	.word	0x20000870
 80030e0:	20000d58 	.word	0x20000d58

080030e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80030ec:	4b06      	ldr	r3, [pc, #24]	; (8003108 <vTaskInternalSetTimeOutState+0x24>)
 80030ee:	681a      	ldr	r2, [r3, #0]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <vTaskInternalSetTimeOutState+0x28>)
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	605a      	str	r2, [r3, #4]
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	20000d5c 	.word	0x20000d5c
 800310c:	20000d48 	.word	0x20000d48

08003110 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003124:	f383 8811 	msr	BASEPRI, r3
 8003128:	f3bf 8f6f 	isb	sy
 800312c:	f3bf 8f4f 	dsb	sy
 8003130:	613b      	str	r3, [r7, #16]
}
 8003132:	bf00      	nop
 8003134:	e7fe      	b.n	8003134 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d10a      	bne.n	8003152 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800313c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003140:	f383 8811 	msr	BASEPRI, r3
 8003144:	f3bf 8f6f 	isb	sy
 8003148:	f3bf 8f4f 	dsb	sy
 800314c:	60fb      	str	r3, [r7, #12]
}
 800314e:	bf00      	nop
 8003150:	e7fe      	b.n	8003150 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003152:	f000 fe7f 	bl	8003e54 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003156:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <xTaskCheckForTimeOut+0xbc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800316e:	d102      	bne.n	8003176 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003170:	2300      	movs	r3, #0
 8003172:	61fb      	str	r3, [r7, #28]
 8003174:	e023      	b.n	80031be <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4b15      	ldr	r3, [pc, #84]	; (80031d0 <xTaskCheckForTimeOut+0xc0>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	429a      	cmp	r2, r3
 8003180:	d007      	beq.n	8003192 <xTaskCheckForTimeOut+0x82>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	429a      	cmp	r2, r3
 800318a:	d302      	bcc.n	8003192 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800318c:	2301      	movs	r3, #1
 800318e:	61fb      	str	r3, [r7, #28]
 8003190:	e015      	b.n	80031be <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	697a      	ldr	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d20b      	bcs.n	80031b4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff9b 	bl	80030e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e004      	b.n	80031be <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80031ba:	2301      	movs	r3, #1
 80031bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80031be:	f000 fe79 	bl	8003eb4 <vPortExitCritical>

	return xReturn;
 80031c2:	69fb      	ldr	r3, [r7, #28]
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3720      	adds	r7, #32
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	20000d48 	.word	0x20000d48
 80031d0:	20000d5c 	.word	0x20000d5c

080031d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <vTaskMissedYield+0x14>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]
}
 80031de:	bf00      	nop
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	20000d58 	.word	0x20000d58

080031ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80031f4:	f000 f852 	bl	800329c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80031f8:	4b06      	ldr	r3, [pc, #24]	; (8003214 <prvIdleTask+0x28>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d9f9      	bls.n	80031f4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003200:	4b05      	ldr	r3, [pc, #20]	; (8003218 <prvIdleTask+0x2c>)
 8003202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003206:	601a      	str	r2, [r3, #0]
 8003208:	f3bf 8f4f 	dsb	sy
 800320c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003210:	e7f0      	b.n	80031f4 <prvIdleTask+0x8>
 8003212:	bf00      	nop
 8003214:	20000874 	.word	0x20000874
 8003218:	e000ed04 	.word	0xe000ed04

0800321c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003222:	2300      	movs	r3, #0
 8003224:	607b      	str	r3, [r7, #4]
 8003226:	e00c      	b.n	8003242 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	4a12      	ldr	r2, [pc, #72]	; (800327c <prvInitialiseTaskLists+0x60>)
 8003234:	4413      	add	r3, r2
 8003236:	4618      	mov	r0, r3
 8003238:	f7fe fca8 	bl	8001b8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3301      	adds	r3, #1
 8003240:	607b      	str	r3, [r7, #4]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2b37      	cmp	r3, #55	; 0x37
 8003246:	d9ef      	bls.n	8003228 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003248:	480d      	ldr	r0, [pc, #52]	; (8003280 <prvInitialiseTaskLists+0x64>)
 800324a:	f7fe fc9f 	bl	8001b8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800324e:	480d      	ldr	r0, [pc, #52]	; (8003284 <prvInitialiseTaskLists+0x68>)
 8003250:	f7fe fc9c 	bl	8001b8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003254:	480c      	ldr	r0, [pc, #48]	; (8003288 <prvInitialiseTaskLists+0x6c>)
 8003256:	f7fe fc99 	bl	8001b8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800325a:	480c      	ldr	r0, [pc, #48]	; (800328c <prvInitialiseTaskLists+0x70>)
 800325c:	f7fe fc96 	bl	8001b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003260:	480b      	ldr	r0, [pc, #44]	; (8003290 <prvInitialiseTaskLists+0x74>)
 8003262:	f7fe fc93 	bl	8001b8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003266:	4b0b      	ldr	r3, [pc, #44]	; (8003294 <prvInitialiseTaskLists+0x78>)
 8003268:	4a05      	ldr	r2, [pc, #20]	; (8003280 <prvInitialiseTaskLists+0x64>)
 800326a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800326c:	4b0a      	ldr	r3, [pc, #40]	; (8003298 <prvInitialiseTaskLists+0x7c>)
 800326e:	4a05      	ldr	r2, [pc, #20]	; (8003284 <prvInitialiseTaskLists+0x68>)
 8003270:	601a      	str	r2, [r3, #0]
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20000874 	.word	0x20000874
 8003280:	20000cd4 	.word	0x20000cd4
 8003284:	20000ce8 	.word	0x20000ce8
 8003288:	20000d04 	.word	0x20000d04
 800328c:	20000d18 	.word	0x20000d18
 8003290:	20000d30 	.word	0x20000d30
 8003294:	20000cfc 	.word	0x20000cfc
 8003298:	20000d00 	.word	0x20000d00

0800329c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032a2:	e019      	b.n	80032d8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80032a4:	f000 fdd6 	bl	8003e54 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032a8:	4b10      	ldr	r3, [pc, #64]	; (80032ec <prvCheckTasksWaitingTermination+0x50>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	3304      	adds	r3, #4
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fe fcf3 	bl	8001ca0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80032ba:	4b0d      	ldr	r3, [pc, #52]	; (80032f0 <prvCheckTasksWaitingTermination+0x54>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	3b01      	subs	r3, #1
 80032c0:	4a0b      	ldr	r2, [pc, #44]	; (80032f0 <prvCheckTasksWaitingTermination+0x54>)
 80032c2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80032c4:	4b0b      	ldr	r3, [pc, #44]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3b01      	subs	r3, #1
 80032ca:	4a0a      	ldr	r2, [pc, #40]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032cc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80032ce:	f000 fdf1 	bl	8003eb4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 f810 	bl	80032f8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80032d8:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <prvCheckTasksWaitingTermination+0x58>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1e1      	bne.n	80032a4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80032e0:	bf00      	nop
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	20000d18 	.word	0x20000d18
 80032f0:	20000d44 	.word	0x20000d44
 80032f4:	20000d2c 	.word	0x20000d2c

080032f8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	3358      	adds	r3, #88	; 0x58
 8003304:	4618      	mov	r0, r3
 8003306:	f001 f8b9 	bl	800447c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	4618      	mov	r0, r3
 800331a:	f000 ff89 	bl	8004230 <vPortFree>
				vPortFree( pxTCB );
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 ff86 	bl	8004230 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003324:	e018      	b.n	8003358 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800332c:	2b01      	cmp	r3, #1
 800332e:	d103      	bne.n	8003338 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 ff7d 	bl	8004230 <vPortFree>
	}
 8003336:	e00f      	b.n	8003358 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	f893 30a9 	ldrb.w	r3, [r3, #169]	; 0xa9
 800333e:	2b02      	cmp	r3, #2
 8003340:	d00a      	beq.n	8003358 <prvDeleteTCB+0x60>
	__asm volatile
 8003342:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003346:	f383 8811 	msr	BASEPRI, r3
 800334a:	f3bf 8f6f 	isb	sy
 800334e:	f3bf 8f4f 	dsb	sy
 8003352:	60fb      	str	r3, [r7, #12]
}
 8003354:	bf00      	nop
 8003356:	e7fe      	b.n	8003356 <prvDeleteTCB+0x5e>
	}
 8003358:	bf00      	nop
 800335a:	3710      	adds	r7, #16
 800335c:	46bd      	mov	sp, r7
 800335e:	bd80      	pop	{r7, pc}

08003360 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003366:	4b0c      	ldr	r3, [pc, #48]	; (8003398 <prvResetNextTaskUnblockTime+0x38>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d104      	bne.n	800337a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003370:	4b0a      	ldr	r3, [pc, #40]	; (800339c <prvResetNextTaskUnblockTime+0x3c>)
 8003372:	f04f 32ff 	mov.w	r2, #4294967295
 8003376:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003378:	e008      	b.n	800338c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800337a:	4b07      	ldr	r3, [pc, #28]	; (8003398 <prvResetNextTaskUnblockTime+0x38>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	4a04      	ldr	r2, [pc, #16]	; (800339c <prvResetNextTaskUnblockTime+0x3c>)
 800338a:	6013      	str	r3, [r2, #0]
}
 800338c:	bf00      	nop
 800338e:	370c      	adds	r7, #12
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr
 8003398:	20000cfc 	.word	0x20000cfc
 800339c:	20000d64 	.word	0x20000d64

080033a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80033a6:	4b0b      	ldr	r3, [pc, #44]	; (80033d4 <xTaskGetSchedulerState+0x34>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d102      	bne.n	80033b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80033ae:	2301      	movs	r3, #1
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	e008      	b.n	80033c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033b4:	4b08      	ldr	r3, [pc, #32]	; (80033d8 <xTaskGetSchedulerState+0x38>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d102      	bne.n	80033c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80033bc:	2302      	movs	r3, #2
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	e001      	b.n	80033c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80033c2:	2300      	movs	r3, #0
 80033c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80033c6:	687b      	ldr	r3, [r7, #4]
	}
 80033c8:	4618      	mov	r0, r3
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	20000d50 	.word	0x20000d50
 80033d8:	20000d6c 	.word	0x20000d6c

080033dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d056      	beq.n	80034a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80033f2:	4b2e      	ldr	r3, [pc, #184]	; (80034ac <xTaskPriorityDisinherit+0xd0>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d00a      	beq.n	8003412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80033fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003400:	f383 8811 	msr	BASEPRI, r3
 8003404:	f3bf 8f6f 	isb	sy
 8003408:	f3bf 8f4f 	dsb	sy
 800340c:	60fb      	str	r3, [r7, #12]
}
 800340e:	bf00      	nop
 8003410:	e7fe      	b.n	8003410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	2b00      	cmp	r3, #0
 8003418:	d10a      	bne.n	8003430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800341a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800341e:	f383 8811 	msr	BASEPRI, r3
 8003422:	f3bf 8f6f 	isb	sy
 8003426:	f3bf 8f4f 	dsb	sy
 800342a:	60bb      	str	r3, [r7, #8]
}
 800342c:	bf00      	nop
 800342e:	e7fe      	b.n	800342e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003430:	693b      	ldr	r3, [r7, #16]
 8003432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003434:	1e5a      	subs	r2, r3, #1
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003442:	429a      	cmp	r2, r3
 8003444:	d02c      	beq.n	80034a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800344a:	2b00      	cmp	r3, #0
 800344c:	d128      	bne.n	80034a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	3304      	adds	r3, #4
 8003452:	4618      	mov	r0, r3
 8003454:	f7fe fc24 	bl	8001ca0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003458:	693b      	ldr	r3, [r7, #16]
 800345a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003470:	4b0f      	ldr	r3, [pc, #60]	; (80034b0 <xTaskPriorityDisinherit+0xd4>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	429a      	cmp	r2, r3
 8003476:	d903      	bls.n	8003480 <xTaskPriorityDisinherit+0xa4>
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	4a0c      	ldr	r2, [pc, #48]	; (80034b0 <xTaskPriorityDisinherit+0xd4>)
 800347e:	6013      	str	r3, [r2, #0]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003484:	4613      	mov	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4a09      	ldr	r2, [pc, #36]	; (80034b4 <xTaskPriorityDisinherit+0xd8>)
 800348e:	441a      	add	r2, r3
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	3304      	adds	r3, #4
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f7fe fba5 	bl	8001be6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800349c:	2301      	movs	r3, #1
 800349e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80034a0:	697b      	ldr	r3, [r7, #20]
	}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3718      	adds	r7, #24
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000870 	.word	0x20000870
 80034b0:	20000d4c 	.word	0x20000d4c
 80034b4:	20000874 	.word	0x20000874

080034b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b084      	sub	sp, #16
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80034c2:	4b21      	ldr	r3, [pc, #132]	; (8003548 <prvAddCurrentTaskToDelayedList+0x90>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034c8:	4b20      	ldr	r3, [pc, #128]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	3304      	adds	r3, #4
 80034ce:	4618      	mov	r0, r3
 80034d0:	f7fe fbe6 	bl	8001ca0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034da:	d10a      	bne.n	80034f2 <prvAddCurrentTaskToDelayedList+0x3a>
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80034e2:	4b1a      	ldr	r3, [pc, #104]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	3304      	adds	r3, #4
 80034e8:	4619      	mov	r1, r3
 80034ea:	4819      	ldr	r0, [pc, #100]	; (8003550 <prvAddCurrentTaskToDelayedList+0x98>)
 80034ec:	f7fe fb7b 	bl	8001be6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80034f0:	e026      	b.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4413      	add	r3, r2
 80034f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80034fa:	4b14      	ldr	r3, [pc, #80]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003502:	68ba      	ldr	r2, [r7, #8]
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	429a      	cmp	r2, r3
 8003508:	d209      	bcs.n	800351e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800350a:	4b12      	ldr	r3, [pc, #72]	; (8003554 <prvAddCurrentTaskToDelayedList+0x9c>)
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	4b0f      	ldr	r3, [pc, #60]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3304      	adds	r3, #4
 8003514:	4619      	mov	r1, r3
 8003516:	4610      	mov	r0, r2
 8003518:	f7fe fb89 	bl	8001c2e <vListInsert>
}
 800351c:	e010      	b.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800351e:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <prvAddCurrentTaskToDelayedList+0x94>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7fe fb7f 	bl	8001c2e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003530:	4b0a      	ldr	r3, [pc, #40]	; (800355c <prvAddCurrentTaskToDelayedList+0xa4>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	429a      	cmp	r2, r3
 8003538:	d202      	bcs.n	8003540 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800353a:	4a08      	ldr	r2, [pc, #32]	; (800355c <prvAddCurrentTaskToDelayedList+0xa4>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	6013      	str	r3, [r2, #0]
}
 8003540:	bf00      	nop
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000d48 	.word	0x20000d48
 800354c:	20000870 	.word	0x20000870
 8003550:	20000d30 	.word	0x20000d30
 8003554:	20000d00 	.word	0x20000d00
 8003558:	20000cfc 	.word	0x20000cfc
 800355c:	20000d64 	.word	0x20000d64

08003560 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b08a      	sub	sp, #40	; 0x28
 8003564:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003566:	2300      	movs	r3, #0
 8003568:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800356a:	f000 fb07 	bl	8003b7c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800356e:	4b1c      	ldr	r3, [pc, #112]	; (80035e0 <xTimerCreateTimerTask+0x80>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d021      	beq.n	80035ba <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003576:	2300      	movs	r3, #0
 8003578:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800357a:	2300      	movs	r3, #0
 800357c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800357e:	1d3a      	adds	r2, r7, #4
 8003580:	f107 0108 	add.w	r1, r7, #8
 8003584:	f107 030c 	add.w	r3, r7, #12
 8003588:	4618      	mov	r0, r3
 800358a:	f7fe fae5 	bl	8001b58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	9202      	str	r2, [sp, #8]
 8003596:	9301      	str	r3, [sp, #4]
 8003598:	2302      	movs	r3, #2
 800359a:	9300      	str	r3, [sp, #0]
 800359c:	2300      	movs	r3, #0
 800359e:	460a      	mov	r2, r1
 80035a0:	4910      	ldr	r1, [pc, #64]	; (80035e4 <xTimerCreateTimerTask+0x84>)
 80035a2:	4811      	ldr	r0, [pc, #68]	; (80035e8 <xTimerCreateTimerTask+0x88>)
 80035a4:	f7ff f892 	bl	80026cc <xTaskCreateStatic>
 80035a8:	4603      	mov	r3, r0
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <xTimerCreateTimerTask+0x8c>)
 80035ac:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80035ae:	4b0f      	ldr	r3, [pc, #60]	; (80035ec <xTimerCreateTimerTask+0x8c>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80035b6:	2301      	movs	r3, #1
 80035b8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d10a      	bne.n	80035d6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80035c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035c4:	f383 8811 	msr	BASEPRI, r3
 80035c8:	f3bf 8f6f 	isb	sy
 80035cc:	f3bf 8f4f 	dsb	sy
 80035d0:	613b      	str	r3, [r7, #16]
}
 80035d2:	bf00      	nop
 80035d4:	e7fe      	b.n	80035d4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80035d6:	697b      	ldr	r3, [r7, #20]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3718      	adds	r7, #24
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	20000da8 	.word	0x20000da8
 80035e4:	08004670 	.word	0x08004670
 80035e8:	08003725 	.word	0x08003725
 80035ec:	20000dac 	.word	0x20000dac

080035f0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b08a      	sub	sp, #40	; 0x28
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
 80035fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80035fe:	2300      	movs	r3, #0
 8003600:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTimerGenericCommand+0x2e>
	__asm volatile
 8003608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800360c:	f383 8811 	msr	BASEPRI, r3
 8003610:	f3bf 8f6f 	isb	sy
 8003614:	f3bf 8f4f 	dsb	sy
 8003618:	623b      	str	r3, [r7, #32]
}
 800361a:	bf00      	nop
 800361c:	e7fe      	b.n	800361c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800361e:	4b1a      	ldr	r3, [pc, #104]	; (8003688 <xTimerGenericCommand+0x98>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d02a      	beq.n	800367c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	2b05      	cmp	r3, #5
 8003636:	dc18      	bgt.n	800366a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003638:	f7ff feb2 	bl	80033a0 <xTaskGetSchedulerState>
 800363c:	4603      	mov	r3, r0
 800363e:	2b02      	cmp	r3, #2
 8003640:	d109      	bne.n	8003656 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003642:	4b11      	ldr	r3, [pc, #68]	; (8003688 <xTimerGenericCommand+0x98>)
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	f107 0110 	add.w	r1, r7, #16
 800364a:	2300      	movs	r3, #0
 800364c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800364e:	f7fe fc55 	bl	8001efc <xQueueGenericSend>
 8003652:	6278      	str	r0, [r7, #36]	; 0x24
 8003654:	e012      	b.n	800367c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8003656:	4b0c      	ldr	r3, [pc, #48]	; (8003688 <xTimerGenericCommand+0x98>)
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	f107 0110 	add.w	r1, r7, #16
 800365e:	2300      	movs	r3, #0
 8003660:	2200      	movs	r2, #0
 8003662:	f7fe fc4b 	bl	8001efc <xQueueGenericSend>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24
 8003668:	e008      	b.n	800367c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800366a:	4b07      	ldr	r3, [pc, #28]	; (8003688 <xTimerGenericCommand+0x98>)
 800366c:	6818      	ldr	r0, [r3, #0]
 800366e:	f107 0110 	add.w	r1, r7, #16
 8003672:	2300      	movs	r3, #0
 8003674:	683a      	ldr	r2, [r7, #0]
 8003676:	f7fe fd3f 	bl	80020f8 <xQueueGenericSendFromISR>
 800367a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800367e:	4618      	mov	r0, r3
 8003680:	3728      	adds	r7, #40	; 0x28
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	20000da8 	.word	0x20000da8

0800368c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af02      	add	r7, sp, #8
 8003692:	6078      	str	r0, [r7, #4]
 8003694:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003696:	4b22      	ldr	r3, [pc, #136]	; (8003720 <prvProcessExpiredTimer+0x94>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	68db      	ldr	r3, [r3, #12]
 800369e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	3304      	adds	r3, #4
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fe fafb 	bl	8001ca0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80036b0:	f003 0304 	and.w	r3, r3, #4
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d022      	beq.n	80036fe <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	699a      	ldr	r2, [r3, #24]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	18d1      	adds	r1, r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	683a      	ldr	r2, [r7, #0]
 80036c4:	6978      	ldr	r0, [r7, #20]
 80036c6:	f000 f8d1 	bl	800386c <prvInsertTimerInActiveList>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d01f      	beq.n	8003710 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80036d0:	2300      	movs	r3, #0
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	2300      	movs	r3, #0
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	2100      	movs	r1, #0
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff88 	bl	80035f0 <xTimerGenericCommand>
 80036e0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d113      	bne.n	8003710 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60fb      	str	r3, [r7, #12]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003704:	f023 0301 	bic.w	r3, r3, #1
 8003708:	b2da      	uxtb	r2, r3
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	6a1b      	ldr	r3, [r3, #32]
 8003714:	6978      	ldr	r0, [r7, #20]
 8003716:	4798      	blx	r3
}
 8003718:	bf00      	nop
 800371a:	3718      	adds	r7, #24
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}
 8003720:	20000da0 	.word	0x20000da0

08003724 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b084      	sub	sp, #16
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800372c:	f107 0308 	add.w	r3, r7, #8
 8003730:	4618      	mov	r0, r3
 8003732:	f000 f857 	bl	80037e4 <prvGetNextExpireTime>
 8003736:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4619      	mov	r1, r3
 800373c:	68f8      	ldr	r0, [r7, #12]
 800373e:	f000 f803 	bl	8003748 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003742:	f000 f8d5 	bl	80038f0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003746:	e7f1      	b.n	800372c <prvTimerTask+0x8>

08003748 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003752:	f7ff fa1d 	bl	8002b90 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003756:	f107 0308 	add.w	r3, r7, #8
 800375a:	4618      	mov	r0, r3
 800375c:	f000 f866 	bl	800382c <prvSampleTimeNow>
 8003760:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003762:	68bb      	ldr	r3, [r7, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d130      	bne.n	80037ca <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d10a      	bne.n	8003784 <prvProcessTimerOrBlockTask+0x3c>
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	429a      	cmp	r2, r3
 8003774:	d806      	bhi.n	8003784 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003776:	f7ff fa19 	bl	8002bac <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800377a:	68f9      	ldr	r1, [r7, #12]
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f7ff ff85 	bl	800368c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003782:	e024      	b.n	80037ce <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d008      	beq.n	800379c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800378a:	4b13      	ldr	r3, [pc, #76]	; (80037d8 <prvProcessTimerOrBlockTask+0x90>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d101      	bne.n	8003798 <prvProcessTimerOrBlockTask+0x50>
 8003794:	2301      	movs	r3, #1
 8003796:	e000      	b.n	800379a <prvProcessTimerOrBlockTask+0x52>
 8003798:	2300      	movs	r3, #0
 800379a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800379c:	4b0f      	ldr	r3, [pc, #60]	; (80037dc <prvProcessTimerOrBlockTask+0x94>)
 800379e:	6818      	ldr	r0, [r3, #0]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	683a      	ldr	r2, [r7, #0]
 80037a8:	4619      	mov	r1, r3
 80037aa:	f7fe ff5b 	bl	8002664 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80037ae:	f7ff f9fd 	bl	8002bac <xTaskResumeAll>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80037b8:	4b09      	ldr	r3, [pc, #36]	; (80037e0 <prvProcessTimerOrBlockTask+0x98>)
 80037ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	f3bf 8f4f 	dsb	sy
 80037c4:	f3bf 8f6f 	isb	sy
}
 80037c8:	e001      	b.n	80037ce <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80037ca:	f7ff f9ef 	bl	8002bac <xTaskResumeAll>
}
 80037ce:	bf00      	nop
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000da4 	.word	0x20000da4
 80037dc:	20000da8 	.word	0x20000da8
 80037e0:	e000ed04 	.word	0xe000ed04

080037e4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80037e4:	b480      	push	{r7}
 80037e6:	b085      	sub	sp, #20
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80037ec:	4b0e      	ldr	r3, [pc, #56]	; (8003828 <prvGetNextExpireTime+0x44>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d101      	bne.n	80037fa <prvGetNextExpireTime+0x16>
 80037f6:	2201      	movs	r2, #1
 80037f8:	e000      	b.n	80037fc <prvGetNextExpireTime+0x18>
 80037fa:	2200      	movs	r2, #0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d105      	bne.n	8003814 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003808:	4b07      	ldr	r3, [pc, #28]	; (8003828 <prvGetNextExpireTime+0x44>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	e001      	b.n	8003818 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003818:	68fb      	ldr	r3, [r7, #12]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	20000da0 	.word	0x20000da0

0800382c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003834:	f7ff fa58 	bl	8002ce8 <xTaskGetTickCount>
 8003838:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800383a:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <prvSampleTimeNow+0x3c>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	429a      	cmp	r2, r3
 8003842:	d205      	bcs.n	8003850 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003844:	f000 f936 	bl	8003ab4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2201      	movs	r2, #1
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	e002      	b.n	8003856 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003856:	4a04      	ldr	r2, [pc, #16]	; (8003868 <prvSampleTimeNow+0x3c>)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800385c:	68fb      	ldr	r3, [r7, #12]
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}
 8003866:	bf00      	nop
 8003868:	20000db0 	.word	0x20000db0

0800386c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800387a:	2300      	movs	r3, #0
 800387c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	68ba      	ldr	r2, [r7, #8]
 8003882:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800388a:	68ba      	ldr	r2, [r7, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	429a      	cmp	r2, r3
 8003890:	d812      	bhi.n	80038b8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	1ad2      	subs	r2, r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	429a      	cmp	r2, r3
 800389e:	d302      	bcc.n	80038a6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80038a0:	2301      	movs	r3, #1
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	e01b      	b.n	80038de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80038a6:	4b10      	ldr	r3, [pc, #64]	; (80038e8 <prvInsertTimerInActiveList+0x7c>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3304      	adds	r3, #4
 80038ae:	4619      	mov	r1, r3
 80038b0:	4610      	mov	r0, r2
 80038b2:	f7fe f9bc 	bl	8001c2e <vListInsert>
 80038b6:	e012      	b.n	80038de <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d206      	bcs.n	80038ce <prvInsertTimerInActiveList+0x62>
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d302      	bcc.n	80038ce <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e007      	b.n	80038de <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80038ce:	4b07      	ldr	r3, [pc, #28]	; (80038ec <prvInsertTimerInActiveList+0x80>)
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3304      	adds	r3, #4
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f7fe f9a8 	bl	8001c2e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80038de:	697b      	ldr	r3, [r7, #20]
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3718      	adds	r7, #24
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	20000da4 	.word	0x20000da4
 80038ec:	20000da0 	.word	0x20000da0

080038f0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b08e      	sub	sp, #56	; 0x38
 80038f4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80038f6:	e0ca      	b.n	8003a8e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	da18      	bge.n	8003930 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80038fe:	1d3b      	adds	r3, r7, #4
 8003900:	3304      	adds	r3, #4
 8003902:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	61fb      	str	r3, [r7, #28]
}
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003926:	6850      	ldr	r0, [r2, #4]
 8003928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392a:	6892      	ldr	r2, [r2, #8]
 800392c:	4611      	mov	r1, r2
 800392e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f2c0 80ab 	blt.w	8003a8e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800393c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800393e:	695b      	ldr	r3, [r3, #20]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d004      	beq.n	800394e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f7fe f9a9 	bl	8001ca0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800394e:	463b      	mov	r3, r7
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff ff6b 	bl	800382c <prvSampleTimeNow>
 8003956:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2b09      	cmp	r3, #9
 800395c:	f200 8096 	bhi.w	8003a8c <prvProcessReceivedCommands+0x19c>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <prvProcessReceivedCommands+0x78>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	08003991 	.word	0x08003991
 800396c:	08003991 	.word	0x08003991
 8003970:	08003991 	.word	0x08003991
 8003974:	08003a05 	.word	0x08003a05
 8003978:	08003a19 	.word	0x08003a19
 800397c:	08003a63 	.word	0x08003a63
 8003980:	08003991 	.word	0x08003991
 8003984:	08003991 	.word	0x08003991
 8003988:	08003a05 	.word	0x08003a05
 800398c:	08003a19 	.word	0x08003a19
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003992:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003996:	f043 0301 	orr.w	r3, r3, #1
 800399a:	b2da      	uxtb	r2, r3
 800399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800399e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80039a2:	68ba      	ldr	r2, [r7, #8]
 80039a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039a6:	699b      	ldr	r3, [r3, #24]
 80039a8:	18d1      	adds	r1, r2, r3
 80039aa:	68bb      	ldr	r3, [r7, #8]
 80039ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039b0:	f7ff ff5c 	bl	800386c <prvInsertTimerInActiveList>
 80039b4:	4603      	mov	r3, r0
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d069      	beq.n	8003a8e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039c0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039c8:	f003 0304 	and.w	r3, r3, #4
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d05e      	beq.n	8003a8e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80039d0:	68ba      	ldr	r2, [r7, #8]
 80039d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d4:	699b      	ldr	r3, [r3, #24]
 80039d6:	441a      	add	r2, r3
 80039d8:	2300      	movs	r3, #0
 80039da:	9300      	str	r3, [sp, #0]
 80039dc:	2300      	movs	r3, #0
 80039de:	2100      	movs	r1, #0
 80039e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80039e2:	f7ff fe05 	bl	80035f0 <xTimerGenericCommand>
 80039e6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80039e8:	6a3b      	ldr	r3, [r7, #32]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d14f      	bne.n	8003a8e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80039ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f2:	f383 8811 	msr	BASEPRI, r3
 80039f6:	f3bf 8f6f 	isb	sy
 80039fa:	f3bf 8f4f 	dsb	sy
 80039fe:	61bb      	str	r3, [r7, #24]
}
 8003a00:	bf00      	nop
 8003a02:	e7fe      	b.n	8003a02 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a0a:	f023 0301 	bic.w	r3, r3, #1
 8003a0e:	b2da      	uxtb	r2, r3
 8003a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003a16:	e03a      	b.n	8003a8e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a1e:	f043 0301 	orr.w	r3, r3, #1
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a2e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003a30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d10a      	bne.n	8003a4e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003a38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a3c:	f383 8811 	msr	BASEPRI, r3
 8003a40:	f3bf 8f6f 	isb	sy
 8003a44:	f3bf 8f4f 	dsb	sy
 8003a48:	617b      	str	r3, [r7, #20]
}
 8003a4a:	bf00      	nop
 8003a4c:	e7fe      	b.n	8003a4c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a50:	699a      	ldr	r2, [r3, #24]
 8003a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a54:	18d1      	adds	r1, r2, r3
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a5c:	f7ff ff06 	bl	800386c <prvInsertTimerInActiveList>
					break;
 8003a60:	e015      	b.n	8003a8e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d103      	bne.n	8003a78 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003a70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a72:	f000 fbdd 	bl	8004230 <vPortFree>
 8003a76:	e00a      	b.n	8003a8e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a7a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003a7e:	f023 0301 	bic.w	r3, r3, #1
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003a8a:	e000      	b.n	8003a8e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8003a8c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <prvProcessReceivedCommands+0x1c0>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1d39      	adds	r1, r7, #4
 8003a94:	2200      	movs	r2, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7fe fbca 	bl	8002230 <xQueueReceive>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f47f af2a 	bne.w	80038f8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003aa4:	bf00      	nop
 8003aa6:	bf00      	nop
 8003aa8:	3730      	adds	r7, #48	; 0x30
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000da8 	.word	0x20000da8

08003ab4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b088      	sub	sp, #32
 8003ab8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003aba:	e048      	b.n	8003b4e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003abc:	4b2d      	ldr	r3, [pc, #180]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ac6:	4b2b      	ldr	r3, [pc, #172]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe f8e3 	bl	8001ca0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d02e      	beq.n	8003b4e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	699b      	ldr	r3, [r3, #24]
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	4413      	add	r3, r2
 8003af8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d90e      	bls.n	8003b20 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	68ba      	ldr	r2, [r7, #8]
 8003b06:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003b0e:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	3304      	adds	r3, #4
 8003b16:	4619      	mov	r1, r3
 8003b18:	4610      	mov	r0, r2
 8003b1a:	f7fe f888 	bl	8001c2e <vListInsert>
 8003b1e:	e016      	b.n	8003b4e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003b20:	2300      	movs	r3, #0
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	2100      	movs	r1, #0
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f7ff fd60 	bl	80035f0 <xTimerGenericCommand>
 8003b30:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d10a      	bne.n	8003b4e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3c:	f383 8811 	msr	BASEPRI, r3
 8003b40:	f3bf 8f6f 	isb	sy
 8003b44:	f3bf 8f4f 	dsb	sy
 8003b48:	603b      	str	r3, [r7, #0]
}
 8003b4a:	bf00      	nop
 8003b4c:	e7fe      	b.n	8003b4c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003b4e:	4b09      	ldr	r3, [pc, #36]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d1b1      	bne.n	8003abc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003b58:	4b06      	ldr	r3, [pc, #24]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003b5e:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <prvSwitchTimerLists+0xc4>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a04      	ldr	r2, [pc, #16]	; (8003b74 <prvSwitchTimerLists+0xc0>)
 8003b64:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003b66:	4a04      	ldr	r2, [pc, #16]	; (8003b78 <prvSwitchTimerLists+0xc4>)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	6013      	str	r3, [r2, #0]
}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000da0 	.word	0x20000da0
 8003b78:	20000da4 	.word	0x20000da4

08003b7c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003b82:	f000 f967 	bl	8003e54 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003b86:	4b15      	ldr	r3, [pc, #84]	; (8003bdc <prvCheckForValidListAndQueue+0x60>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d120      	bne.n	8003bd0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003b8e:	4814      	ldr	r0, [pc, #80]	; (8003be0 <prvCheckForValidListAndQueue+0x64>)
 8003b90:	f7fd fffc 	bl	8001b8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003b94:	4813      	ldr	r0, [pc, #76]	; (8003be4 <prvCheckForValidListAndQueue+0x68>)
 8003b96:	f7fd fff9 	bl	8001b8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003b9a:	4b13      	ldr	r3, [pc, #76]	; (8003be8 <prvCheckForValidListAndQueue+0x6c>)
 8003b9c:	4a10      	ldr	r2, [pc, #64]	; (8003be0 <prvCheckForValidListAndQueue+0x64>)
 8003b9e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003ba0:	4b12      	ldr	r3, [pc, #72]	; (8003bec <prvCheckForValidListAndQueue+0x70>)
 8003ba2:	4a10      	ldr	r2, [pc, #64]	; (8003be4 <prvCheckForValidListAndQueue+0x68>)
 8003ba4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4b11      	ldr	r3, [pc, #68]	; (8003bf0 <prvCheckForValidListAndQueue+0x74>)
 8003bac:	4a11      	ldr	r2, [pc, #68]	; (8003bf4 <prvCheckForValidListAndQueue+0x78>)
 8003bae:	2110      	movs	r1, #16
 8003bb0:	200a      	movs	r0, #10
 8003bb2:	f7fe f907 	bl	8001dc4 <xQueueGenericCreateStatic>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	4a08      	ldr	r2, [pc, #32]	; (8003bdc <prvCheckForValidListAndQueue+0x60>)
 8003bba:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003bbc:	4b07      	ldr	r3, [pc, #28]	; (8003bdc <prvCheckForValidListAndQueue+0x60>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003bc4:	4b05      	ldr	r3, [pc, #20]	; (8003bdc <prvCheckForValidListAndQueue+0x60>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	490b      	ldr	r1, [pc, #44]	; (8003bf8 <prvCheckForValidListAndQueue+0x7c>)
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fd20 	bl	8002610 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003bd0:	f000 f970 	bl	8003eb4 <vPortExitCritical>
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}
 8003bda:	bf00      	nop
 8003bdc:	20000da8 	.word	0x20000da8
 8003be0:	20000d78 	.word	0x20000d78
 8003be4:	20000d8c 	.word	0x20000d8c
 8003be8:	20000da0 	.word	0x20000da0
 8003bec:	20000da4 	.word	0x20000da4
 8003bf0:	20000e54 	.word	0x20000e54
 8003bf4:	20000db4 	.word	0x20000db4
 8003bf8:	08004678 	.word	0x08004678

08003bfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	60f8      	str	r0, [r7, #12]
 8003c04:	60b9      	str	r1, [r7, #8]
 8003c06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	3b04      	subs	r3, #4
 8003c0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	3b04      	subs	r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	f023 0201 	bic.w	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	3b04      	subs	r3, #4
 8003c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c2c:	4a0c      	ldr	r2, [pc, #48]	; (8003c60 <pxPortInitialiseStack+0x64>)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3b14      	subs	r3, #20
 8003c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	3b04      	subs	r3, #4
 8003c42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	f06f 0202 	mvn.w	r2, #2
 8003c4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	3b20      	subs	r3, #32
 8003c50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c52:	68fb      	ldr	r3, [r7, #12]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	08003c65 	.word	0x08003c65

08003c64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <prvTaskExitError+0x54>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d00a      	beq.n	8003c8e <prvTaskExitError+0x2a>
	__asm volatile
 8003c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c7c:	f383 8811 	msr	BASEPRI, r3
 8003c80:	f3bf 8f6f 	isb	sy
 8003c84:	f3bf 8f4f 	dsb	sy
 8003c88:	60fb      	str	r3, [r7, #12]
}
 8003c8a:	bf00      	nop
 8003c8c:	e7fe      	b.n	8003c8c <prvTaskExitError+0x28>
	__asm volatile
 8003c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c92:	f383 8811 	msr	BASEPRI, r3
 8003c96:	f3bf 8f6f 	isb	sy
 8003c9a:	f3bf 8f4f 	dsb	sy
 8003c9e:	60bb      	str	r3, [r7, #8]
}
 8003ca0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003ca2:	bf00      	nop
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d0fc      	beq.n	8003ca4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003caa:	bf00      	nop
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr
 8003cb8:	2000000c 	.word	0x2000000c
 8003cbc:	00000000 	.word	0x00000000

08003cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cc0:	4b07      	ldr	r3, [pc, #28]	; (8003ce0 <pxCurrentTCBConst2>)
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	6808      	ldr	r0, [r1, #0]
 8003cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cca:	f380 8809 	msr	PSP, r0
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f380 8811 	msr	BASEPRI, r0
 8003cda:	4770      	bx	lr
 8003cdc:	f3af 8000 	nop.w

08003ce0 <pxCurrentTCBConst2>:
 8003ce0:	20000870 	.word	0x20000870
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ce4:	bf00      	nop
 8003ce6:	bf00      	nop

08003ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003ce8:	4808      	ldr	r0, [pc, #32]	; (8003d0c <prvPortStartFirstTask+0x24>)
 8003cea:	6800      	ldr	r0, [r0, #0]
 8003cec:	6800      	ldr	r0, [r0, #0]
 8003cee:	f380 8808 	msr	MSP, r0
 8003cf2:	f04f 0000 	mov.w	r0, #0
 8003cf6:	f380 8814 	msr	CONTROL, r0
 8003cfa:	b662      	cpsie	i
 8003cfc:	b661      	cpsie	f
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	f3bf 8f6f 	isb	sy
 8003d06:	df00      	svc	0
 8003d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d0a:	bf00      	nop
 8003d0c:	e000ed08 	.word	0xe000ed08

08003d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d16:	4b46      	ldr	r3, [pc, #280]	; (8003e30 <xPortStartScheduler+0x120>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a46      	ldr	r2, [pc, #280]	; (8003e34 <xPortStartScheduler+0x124>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d10a      	bne.n	8003d36 <xPortStartScheduler+0x26>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	613b      	str	r3, [r7, #16]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d36:	4b3e      	ldr	r3, [pc, #248]	; (8003e30 <xPortStartScheduler+0x120>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a3f      	ldr	r2, [pc, #252]	; (8003e38 <xPortStartScheduler+0x128>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d10a      	bne.n	8003d56 <xPortStartScheduler+0x46>
	__asm volatile
 8003d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d44:	f383 8811 	msr	BASEPRI, r3
 8003d48:	f3bf 8f6f 	isb	sy
 8003d4c:	f3bf 8f4f 	dsb	sy
 8003d50:	60fb      	str	r3, [r7, #12]
}
 8003d52:	bf00      	nop
 8003d54:	e7fe      	b.n	8003d54 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d56:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <xPortStartScheduler+0x12c>)
 8003d58:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	22ff      	movs	r2, #255	; 0xff
 8003d66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	b2db      	uxtb	r3, r3
 8003d74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b31      	ldr	r3, [pc, #196]	; (8003e40 <xPortStartScheduler+0x130>)
 8003d7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003d7e:	4b31      	ldr	r3, [pc, #196]	; (8003e44 <xPortStartScheduler+0x134>)
 8003d80:	2207      	movs	r2, #7
 8003d82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d84:	e009      	b.n	8003d9a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003d86:	4b2f      	ldr	r3, [pc, #188]	; (8003e44 <xPortStartScheduler+0x134>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	3b01      	subs	r3, #1
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	; (8003e44 <xPortStartScheduler+0x134>)
 8003d8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003d90:	78fb      	ldrb	r3, [r7, #3]
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003d9a:	78fb      	ldrb	r3, [r7, #3]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da2:	2b80      	cmp	r3, #128	; 0x80
 8003da4:	d0ef      	beq.n	8003d86 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <xPortStartScheduler+0x134>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d00a      	beq.n	8003dc8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003db6:	f383 8811 	msr	BASEPRI, r3
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	f3bf 8f4f 	dsb	sy
 8003dc2:	60bb      	str	r3, [r7, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	e7fe      	b.n	8003dc6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003dc8:	4b1e      	ldr	r3, [pc, #120]	; (8003e44 <xPortStartScheduler+0x134>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	021b      	lsls	r3, r3, #8
 8003dce:	4a1d      	ldr	r2, [pc, #116]	; (8003e44 <xPortStartScheduler+0x134>)
 8003dd0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003dd2:	4b1c      	ldr	r3, [pc, #112]	; (8003e44 <xPortStartScheduler+0x134>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003dda:	4a1a      	ldr	r2, [pc, #104]	; (8003e44 <xPortStartScheduler+0x134>)
 8003ddc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003de6:	4b18      	ldr	r3, [pc, #96]	; (8003e48 <xPortStartScheduler+0x138>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <xPortStartScheduler+0x138>)
 8003dec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003df0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003df2:	4b15      	ldr	r3, [pc, #84]	; (8003e48 <xPortStartScheduler+0x138>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a14      	ldr	r2, [pc, #80]	; (8003e48 <xPortStartScheduler+0x138>)
 8003df8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003dfc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003dfe:	f000 f8dd 	bl	8003fbc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e02:	4b12      	ldr	r3, [pc, #72]	; (8003e4c <xPortStartScheduler+0x13c>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e08:	f000 f8fc 	bl	8004004 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	; (8003e50 <xPortStartScheduler+0x140>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a0f      	ldr	r2, [pc, #60]	; (8003e50 <xPortStartScheduler+0x140>)
 8003e12:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e16:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e18:	f7ff ff66 	bl	8003ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e1c:	f7ff f82e 	bl	8002e7c <vTaskSwitchContext>
	prvTaskExitError();
 8003e20:	f7ff ff20 	bl	8003c64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e24:	2300      	movs	r3, #0
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3718      	adds	r7, #24
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000ed00 	.word	0xe000ed00
 8003e34:	410fc271 	.word	0x410fc271
 8003e38:	410fc270 	.word	0x410fc270
 8003e3c:	e000e400 	.word	0xe000e400
 8003e40:	20000ea4 	.word	0x20000ea4
 8003e44:	20000ea8 	.word	0x20000ea8
 8003e48:	e000ed20 	.word	0xe000ed20
 8003e4c:	2000000c 	.word	0x2000000c
 8003e50:	e000ef34 	.word	0xe000ef34

08003e54 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	607b      	str	r3, [r7, #4]
}
 8003e6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e6e:	4b0f      	ldr	r3, [pc, #60]	; (8003eac <vPortEnterCritical+0x58>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3301      	adds	r3, #1
 8003e74:	4a0d      	ldr	r2, [pc, #52]	; (8003eac <vPortEnterCritical+0x58>)
 8003e76:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003e78:	4b0c      	ldr	r3, [pc, #48]	; (8003eac <vPortEnterCritical+0x58>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d10f      	bne.n	8003ea0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003e80:	4b0b      	ldr	r3, [pc, #44]	; (8003eb0 <vPortEnterCritical+0x5c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d00a      	beq.n	8003ea0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	603b      	str	r3, [r7, #0]
}
 8003e9c:	bf00      	nop
 8003e9e:	e7fe      	b.n	8003e9e <vPortEnterCritical+0x4a>
	}
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	e000ed04 	.word	0xe000ed04

08003eb4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	b083      	sub	sp, #12
 8003eb8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eba:	4b12      	ldr	r3, [pc, #72]	; (8003f04 <vPortExitCritical+0x50>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d10a      	bne.n	8003ed8 <vPortExitCritical+0x24>
	__asm volatile
 8003ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ec6:	f383 8811 	msr	BASEPRI, r3
 8003eca:	f3bf 8f6f 	isb	sy
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	607b      	str	r3, [r7, #4]
}
 8003ed4:	bf00      	nop
 8003ed6:	e7fe      	b.n	8003ed6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003ed8:	4b0a      	ldr	r3, [pc, #40]	; (8003f04 <vPortExitCritical+0x50>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	4a09      	ldr	r2, [pc, #36]	; (8003f04 <vPortExitCritical+0x50>)
 8003ee0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003ee2:	4b08      	ldr	r3, [pc, #32]	; (8003f04 <vPortExitCritical+0x50>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d105      	bne.n	8003ef6 <vPortExitCritical+0x42>
 8003eea:	2300      	movs	r3, #0
 8003eec:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	f383 8811 	msr	BASEPRI, r3
}
 8003ef4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003ef6:	bf00      	nop
 8003ef8:	370c      	adds	r7, #12
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	2000000c 	.word	0x2000000c
	...

08003f10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f10:	f3ef 8009 	mrs	r0, PSP
 8003f14:	f3bf 8f6f 	isb	sy
 8003f18:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <pxCurrentTCBConst>)
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	f01e 0f10 	tst.w	lr, #16
 8003f20:	bf08      	it	eq
 8003f22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f2a:	6010      	str	r0, [r2, #0]
 8003f2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f34:	f380 8811 	msr	BASEPRI, r0
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	f3bf 8f6f 	isb	sy
 8003f40:	f7fe ff9c 	bl	8002e7c <vTaskSwitchContext>
 8003f44:	f04f 0000 	mov.w	r0, #0
 8003f48:	f380 8811 	msr	BASEPRI, r0
 8003f4c:	bc09      	pop	{r0, r3}
 8003f4e:	6819      	ldr	r1, [r3, #0]
 8003f50:	6808      	ldr	r0, [r1, #0]
 8003f52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f56:	f01e 0f10 	tst.w	lr, #16
 8003f5a:	bf08      	it	eq
 8003f5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f60:	f380 8809 	msr	PSP, r0
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	f3af 8000 	nop.w

08003f70 <pxCurrentTCBConst>:
 8003f70:	20000870 	.word	0x20000870
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003f74:	bf00      	nop
 8003f76:	bf00      	nop

08003f78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b082      	sub	sp, #8
 8003f7c:	af00      	add	r7, sp, #0
	__asm volatile
 8003f7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f82:	f383 8811 	msr	BASEPRI, r3
 8003f86:	f3bf 8f6f 	isb	sy
 8003f8a:	f3bf 8f4f 	dsb	sy
 8003f8e:	607b      	str	r3, [r7, #4]
}
 8003f90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003f92:	f7fe feb9 	bl	8002d08 <xTaskIncrementTick>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d003      	beq.n	8003fa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003f9c:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <xPortSysTickHandler+0x40>)
 8003f9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fa2:	601a      	str	r2, [r3, #0]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f383 8811 	msr	BASEPRI, r3
}
 8003fae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	e000ed04 	.word	0xe000ed04

08003fbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <vPortSetupTimerInterrupt+0x38>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003fcc:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <vPortSetupTimerInterrupt+0x3c>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a0a      	ldr	r2, [pc, #40]	; (8003ffc <vPortSetupTimerInterrupt+0x40>)
 8003fd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003fd6:	099b      	lsrs	r3, r3, #6
 8003fd8:	4a09      	ldr	r2, [pc, #36]	; (8004000 <vPortSetupTimerInterrupt+0x44>)
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003fde:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <vPortSetupTimerInterrupt+0x34>)
 8003fe0:	2207      	movs	r2, #7
 8003fe2:	601a      	str	r2, [r3, #0]
}
 8003fe4:	bf00      	nop
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	e000e010 	.word	0xe000e010
 8003ff4:	e000e018 	.word	0xe000e018
 8003ff8:	20000000 	.word	0x20000000
 8003ffc:	10624dd3 	.word	0x10624dd3
 8004000:	e000e014 	.word	0xe000e014

08004004 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004004:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004014 <vPortEnableVFP+0x10>
 8004008:	6801      	ldr	r1, [r0, #0]
 800400a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800400e:	6001      	str	r1, [r0, #0]
 8004010:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004012:	bf00      	nop
 8004014:	e000ed88 	.word	0xe000ed88

08004018 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004018:	b480      	push	{r7}
 800401a:	b085      	sub	sp, #20
 800401c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800401e:	f3ef 8305 	mrs	r3, IPSR
 8004022:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b0f      	cmp	r3, #15
 8004028:	d914      	bls.n	8004054 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800402a:	4a17      	ldr	r2, [pc, #92]	; (8004088 <vPortValidateInterruptPriority+0x70>)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4413      	add	r3, r2
 8004030:	781b      	ldrb	r3, [r3, #0]
 8004032:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004034:	4b15      	ldr	r3, [pc, #84]	; (800408c <vPortValidateInterruptPriority+0x74>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	7afa      	ldrb	r2, [r7, #11]
 800403a:	429a      	cmp	r2, r3
 800403c:	d20a      	bcs.n	8004054 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	607b      	str	r3, [r7, #4]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004054:	4b0e      	ldr	r3, [pc, #56]	; (8004090 <vPortValidateInterruptPriority+0x78>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800405c:	4b0d      	ldr	r3, [pc, #52]	; (8004094 <vPortValidateInterruptPriority+0x7c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d90a      	bls.n	800407a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004068:	f383 8811 	msr	BASEPRI, r3
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f3bf 8f4f 	dsb	sy
 8004074:	603b      	str	r3, [r7, #0]
}
 8004076:	bf00      	nop
 8004078:	e7fe      	b.n	8004078 <vPortValidateInterruptPriority+0x60>
	}
 800407a:	bf00      	nop
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	e000e3f0 	.word	0xe000e3f0
 800408c:	20000ea4 	.word	0x20000ea4
 8004090:	e000ed0c 	.word	0xe000ed0c
 8004094:	20000ea8 	.word	0x20000ea8

08004098 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b08a      	sub	sp, #40	; 0x28
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040a0:	2300      	movs	r3, #0
 80040a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040a4:	f7fe fd74 	bl	8002b90 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040a8:	4b5b      	ldr	r3, [pc, #364]	; (8004218 <pvPortMalloc+0x180>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d101      	bne.n	80040b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040b0:	f000 f920 	bl	80042f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <pvPortMalloc+0x184>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	4013      	ands	r3, r2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f040 8093 	bne.w	80041e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d01d      	beq.n	8004104 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040c8:	2208      	movs	r2, #8
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4413      	add	r3, r2
 80040ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f003 0307 	and.w	r3, r3, #7
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d014      	beq.n	8004104 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f023 0307 	bic.w	r3, r3, #7
 80040e0:	3308      	adds	r3, #8
 80040e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d00a      	beq.n	8004104 <pvPortMalloc+0x6c>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	617b      	str	r3, [r7, #20]
}
 8004100:	bf00      	nop
 8004102:	e7fe      	b.n	8004102 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d06e      	beq.n	80041e8 <pvPortMalloc+0x150>
 800410a:	4b45      	ldr	r3, [pc, #276]	; (8004220 <pvPortMalloc+0x188>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	429a      	cmp	r2, r3
 8004112:	d869      	bhi.n	80041e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004114:	4b43      	ldr	r3, [pc, #268]	; (8004224 <pvPortMalloc+0x18c>)
 8004116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004118:	4b42      	ldr	r3, [pc, #264]	; (8004224 <pvPortMalloc+0x18c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800411e:	e004      	b.n	800412a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	429a      	cmp	r2, r3
 8004132:	d903      	bls.n	800413c <pvPortMalloc+0xa4>
 8004134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1f1      	bne.n	8004120 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800413c:	4b36      	ldr	r3, [pc, #216]	; (8004218 <pvPortMalloc+0x180>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004142:	429a      	cmp	r2, r3
 8004144:	d050      	beq.n	80041e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004146:	6a3b      	ldr	r3, [r7, #32]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	2208      	movs	r2, #8
 800414c:	4413      	add	r3, r2
 800414e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	6a3b      	ldr	r3, [r7, #32]
 8004156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	685a      	ldr	r2, [r3, #4]
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	1ad2      	subs	r2, r2, r3
 8004160:	2308      	movs	r3, #8
 8004162:	005b      	lsls	r3, r3, #1
 8004164:	429a      	cmp	r2, r3
 8004166:	d91f      	bls.n	80041a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4413      	add	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	f003 0307 	and.w	r3, r3, #7
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <pvPortMalloc+0xf8>
	__asm volatile
 800417a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800417e:	f383 8811 	msr	BASEPRI, r3
 8004182:	f3bf 8f6f 	isb	sy
 8004186:	f3bf 8f4f 	dsb	sy
 800418a:	613b      	str	r3, [r7, #16]
}
 800418c:	bf00      	nop
 800418e:	e7fe      	b.n	800418e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004192:	685a      	ldr	r2, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	1ad2      	subs	r2, r2, r3
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041a2:	69b8      	ldr	r0, [r7, #24]
 80041a4:	f000 f908 	bl	80043b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041a8:	4b1d      	ldr	r3, [pc, #116]	; (8004220 <pvPortMalloc+0x188>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	4a1b      	ldr	r2, [pc, #108]	; (8004220 <pvPortMalloc+0x188>)
 80041b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041b6:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <pvPortMalloc+0x188>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b1b      	ldr	r3, [pc, #108]	; (8004228 <pvPortMalloc+0x190>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d203      	bcs.n	80041ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <pvPortMalloc+0x188>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a18      	ldr	r2, [pc, #96]	; (8004228 <pvPortMalloc+0x190>)
 80041c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	4b13      	ldr	r3, [pc, #76]	; (800421c <pvPortMalloc+0x184>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	431a      	orrs	r2, r3
 80041d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	2200      	movs	r2, #0
 80041dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80041de:	4b13      	ldr	r3, [pc, #76]	; (800422c <pvPortMalloc+0x194>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	3301      	adds	r3, #1
 80041e4:	4a11      	ldr	r2, [pc, #68]	; (800422c <pvPortMalloc+0x194>)
 80041e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80041e8:	f7fe fce0 	bl	8002bac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 0307 	and.w	r3, r3, #7
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00a      	beq.n	800420c <pvPortMalloc+0x174>
	__asm volatile
 80041f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fa:	f383 8811 	msr	BASEPRI, r3
 80041fe:	f3bf 8f6f 	isb	sy
 8004202:	f3bf 8f4f 	dsb	sy
 8004206:	60fb      	str	r3, [r7, #12]
}
 8004208:	bf00      	nop
 800420a:	e7fe      	b.n	800420a <pvPortMalloc+0x172>
	return pvReturn;
 800420c:	69fb      	ldr	r3, [r7, #28]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3728      	adds	r7, #40	; 0x28
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	20001a6c 	.word	0x20001a6c
 800421c:	20001a80 	.word	0x20001a80
 8004220:	20001a70 	.word	0x20001a70
 8004224:	20001a64 	.word	0x20001a64
 8004228:	20001a74 	.word	0x20001a74
 800422c:	20001a78 	.word	0x20001a78

08004230 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d04d      	beq.n	80042de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004242:	2308      	movs	r3, #8
 8004244:	425b      	negs	r3, r3
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	4413      	add	r3, r2
 800424a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	4b24      	ldr	r3, [pc, #144]	; (80042e8 <vPortFree+0xb8>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4013      	ands	r3, r2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <vPortFree+0x44>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	60fb      	str	r3, [r7, #12]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d00a      	beq.n	8004292 <vPortFree+0x62>
	__asm volatile
 800427c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004280:	f383 8811 	msr	BASEPRI, r3
 8004284:	f3bf 8f6f 	isb	sy
 8004288:	f3bf 8f4f 	dsb	sy
 800428c:	60bb      	str	r3, [r7, #8]
}
 800428e:	bf00      	nop
 8004290:	e7fe      	b.n	8004290 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <vPortFree+0xb8>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4013      	ands	r3, r2
 800429c:	2b00      	cmp	r3, #0
 800429e:	d01e      	beq.n	80042de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d11a      	bne.n	80042de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042a8:	693b      	ldr	r3, [r7, #16]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	4b0e      	ldr	r3, [pc, #56]	; (80042e8 <vPortFree+0xb8>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	43db      	mvns	r3, r3
 80042b2:	401a      	ands	r2, r3
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042b8:	f7fe fc6a 	bl	8002b90 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	685a      	ldr	r2, [r3, #4]
 80042c0:	4b0a      	ldr	r3, [pc, #40]	; (80042ec <vPortFree+0xbc>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4413      	add	r3, r2
 80042c6:	4a09      	ldr	r2, [pc, #36]	; (80042ec <vPortFree+0xbc>)
 80042c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042ca:	6938      	ldr	r0, [r7, #16]
 80042cc:	f000 f874 	bl	80043b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80042d0:	4b07      	ldr	r3, [pc, #28]	; (80042f0 <vPortFree+0xc0>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3301      	adds	r3, #1
 80042d6:	4a06      	ldr	r2, [pc, #24]	; (80042f0 <vPortFree+0xc0>)
 80042d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80042da:	f7fe fc67 	bl	8002bac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80042de:	bf00      	nop
 80042e0:	3718      	adds	r7, #24
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	20001a80 	.word	0x20001a80
 80042ec:	20001a70 	.word	0x20001a70
 80042f0:	20001a7c 	.word	0x20001a7c

080042f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80042fa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80042fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004300:	4b27      	ldr	r3, [pc, #156]	; (80043a0 <prvHeapInit+0xac>)
 8004302:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f003 0307 	and.w	r3, r3, #7
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00c      	beq.n	8004328 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	3307      	adds	r3, #7
 8004312:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0307 	bic.w	r3, r3, #7
 800431a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	4a1f      	ldr	r2, [pc, #124]	; (80043a0 <prvHeapInit+0xac>)
 8004324:	4413      	add	r3, r2
 8004326:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800432c:	4a1d      	ldr	r2, [pc, #116]	; (80043a4 <prvHeapInit+0xb0>)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004332:	4b1c      	ldr	r3, [pc, #112]	; (80043a4 <prvHeapInit+0xb0>)
 8004334:	2200      	movs	r2, #0
 8004336:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4413      	add	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004340:	2208      	movs	r2, #8
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <prvHeapInit+0xb4>)
 8004354:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004356:	4b14      	ldr	r3, [pc, #80]	; (80043a8 <prvHeapInit+0xb4>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800435e:	4b12      	ldr	r3, [pc, #72]	; (80043a8 <prvHeapInit+0xb4>)
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	1ad2      	subs	r2, r2, r3
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004374:	4b0c      	ldr	r3, [pc, #48]	; (80043a8 <prvHeapInit+0xb4>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <prvHeapInit+0xb8>)
 8004382:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	4a09      	ldr	r2, [pc, #36]	; (80043b0 <prvHeapInit+0xbc>)
 800438a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800438c:	4b09      	ldr	r3, [pc, #36]	; (80043b4 <prvHeapInit+0xc0>)
 800438e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004392:	601a      	str	r2, [r3, #0]
}
 8004394:	bf00      	nop
 8004396:	3714      	adds	r7, #20
 8004398:	46bd      	mov	sp, r7
 800439a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439e:	4770      	bx	lr
 80043a0:	20000eac 	.word	0x20000eac
 80043a4:	20001a64 	.word	0x20001a64
 80043a8:	20001a6c 	.word	0x20001a6c
 80043ac:	20001a74 	.word	0x20001a74
 80043b0:	20001a70 	.word	0x20001a70
 80043b4:	20001a80 	.word	0x20001a80

080043b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043c0:	4b28      	ldr	r3, [pc, #160]	; (8004464 <prvInsertBlockIntoFreeList+0xac>)
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	e002      	b.n	80043cc <prvInsertBlockIntoFreeList+0x14>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d8f7      	bhi.n	80043c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	68ba      	ldr	r2, [r7, #8]
 80043e0:	4413      	add	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d108      	bne.n	80043fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	441a      	add	r2, r3
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	441a      	add	r2, r3
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	429a      	cmp	r2, r3
 800440c:	d118      	bne.n	8004440 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	4b15      	ldr	r3, [pc, #84]	; (8004468 <prvInsertBlockIntoFreeList+0xb0>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	429a      	cmp	r2, r3
 8004418:	d00d      	beq.n	8004436 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	441a      	add	r2, r3
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e008      	b.n	8004448 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004436:	4b0c      	ldr	r3, [pc, #48]	; (8004468 <prvInsertBlockIntoFreeList+0xb0>)
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	e003      	b.n	8004448 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	429a      	cmp	r2, r3
 800444e:	d002      	beq.n	8004456 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	20001a64 	.word	0x20001a64
 8004468:	20001a6c 	.word	0x20001a6c

0800446c <memset>:
 800446c:	4402      	add	r2, r0
 800446e:	4603      	mov	r3, r0
 8004470:	4293      	cmp	r3, r2
 8004472:	d100      	bne.n	8004476 <memset+0xa>
 8004474:	4770      	bx	lr
 8004476:	f803 1b01 	strb.w	r1, [r3], #1
 800447a:	e7f9      	b.n	8004470 <memset+0x4>

0800447c <_reclaim_reent>:
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <_reclaim_reent+0xa8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4283      	cmp	r3, r0
 8004482:	b570      	push	{r4, r5, r6, lr}
 8004484:	4604      	mov	r4, r0
 8004486:	d04b      	beq.n	8004520 <_reclaim_reent+0xa4>
 8004488:	69c3      	ldr	r3, [r0, #28]
 800448a:	b143      	cbz	r3, 800449e <_reclaim_reent+0x22>
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d144      	bne.n	800451c <_reclaim_reent+0xa0>
 8004492:	69e3      	ldr	r3, [r4, #28]
 8004494:	6819      	ldr	r1, [r3, #0]
 8004496:	b111      	cbz	r1, 800449e <_reclaim_reent+0x22>
 8004498:	4620      	mov	r0, r4
 800449a:	f000 f879 	bl	8004590 <_free_r>
 800449e:	6961      	ldr	r1, [r4, #20]
 80044a0:	b111      	cbz	r1, 80044a8 <_reclaim_reent+0x2c>
 80044a2:	4620      	mov	r0, r4
 80044a4:	f000 f874 	bl	8004590 <_free_r>
 80044a8:	69e1      	ldr	r1, [r4, #28]
 80044aa:	b111      	cbz	r1, 80044b2 <_reclaim_reent+0x36>
 80044ac:	4620      	mov	r0, r4
 80044ae:	f000 f86f 	bl	8004590 <_free_r>
 80044b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80044b4:	b111      	cbz	r1, 80044bc <_reclaim_reent+0x40>
 80044b6:	4620      	mov	r0, r4
 80044b8:	f000 f86a 	bl	8004590 <_free_r>
 80044bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80044be:	b111      	cbz	r1, 80044c6 <_reclaim_reent+0x4a>
 80044c0:	4620      	mov	r0, r4
 80044c2:	f000 f865 	bl	8004590 <_free_r>
 80044c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80044c8:	b111      	cbz	r1, 80044d0 <_reclaim_reent+0x54>
 80044ca:	4620      	mov	r0, r4
 80044cc:	f000 f860 	bl	8004590 <_free_r>
 80044d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80044d2:	b111      	cbz	r1, 80044da <_reclaim_reent+0x5e>
 80044d4:	4620      	mov	r0, r4
 80044d6:	f000 f85b 	bl	8004590 <_free_r>
 80044da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80044dc:	b111      	cbz	r1, 80044e4 <_reclaim_reent+0x68>
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 f856 	bl	8004590 <_free_r>
 80044e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80044e6:	b111      	cbz	r1, 80044ee <_reclaim_reent+0x72>
 80044e8:	4620      	mov	r0, r4
 80044ea:	f000 f851 	bl	8004590 <_free_r>
 80044ee:	6a23      	ldr	r3, [r4, #32]
 80044f0:	b1b3      	cbz	r3, 8004520 <_reclaim_reent+0xa4>
 80044f2:	4620      	mov	r0, r4
 80044f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80044f8:	4718      	bx	r3
 80044fa:	5949      	ldr	r1, [r1, r5]
 80044fc:	b941      	cbnz	r1, 8004510 <_reclaim_reent+0x94>
 80044fe:	3504      	adds	r5, #4
 8004500:	69e3      	ldr	r3, [r4, #28]
 8004502:	2d80      	cmp	r5, #128	; 0x80
 8004504:	68d9      	ldr	r1, [r3, #12]
 8004506:	d1f8      	bne.n	80044fa <_reclaim_reent+0x7e>
 8004508:	4620      	mov	r0, r4
 800450a:	f000 f841 	bl	8004590 <_free_r>
 800450e:	e7c0      	b.n	8004492 <_reclaim_reent+0x16>
 8004510:	680e      	ldr	r6, [r1, #0]
 8004512:	4620      	mov	r0, r4
 8004514:	f000 f83c 	bl	8004590 <_free_r>
 8004518:	4631      	mov	r1, r6
 800451a:	e7ef      	b.n	80044fc <_reclaim_reent+0x80>
 800451c:	2500      	movs	r5, #0
 800451e:	e7ef      	b.n	8004500 <_reclaim_reent+0x84>
 8004520:	bd70      	pop	{r4, r5, r6, pc}
 8004522:	bf00      	nop
 8004524:	2000005c 	.word	0x2000005c

08004528 <__libc_init_array>:
 8004528:	b570      	push	{r4, r5, r6, lr}
 800452a:	4d0d      	ldr	r5, [pc, #52]	; (8004560 <__libc_init_array+0x38>)
 800452c:	4c0d      	ldr	r4, [pc, #52]	; (8004564 <__libc_init_array+0x3c>)
 800452e:	1b64      	subs	r4, r4, r5
 8004530:	10a4      	asrs	r4, r4, #2
 8004532:	2600      	movs	r6, #0
 8004534:	42a6      	cmp	r6, r4
 8004536:	d109      	bne.n	800454c <__libc_init_array+0x24>
 8004538:	4d0b      	ldr	r5, [pc, #44]	; (8004568 <__libc_init_array+0x40>)
 800453a:	4c0c      	ldr	r4, [pc, #48]	; (800456c <__libc_init_array+0x44>)
 800453c:	f000 f880 	bl	8004640 <_init>
 8004540:	1b64      	subs	r4, r4, r5
 8004542:	10a4      	asrs	r4, r4, #2
 8004544:	2600      	movs	r6, #0
 8004546:	42a6      	cmp	r6, r4
 8004548:	d105      	bne.n	8004556 <__libc_init_array+0x2e>
 800454a:	bd70      	pop	{r4, r5, r6, pc}
 800454c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004550:	4798      	blx	r3
 8004552:	3601      	adds	r6, #1
 8004554:	e7ee      	b.n	8004534 <__libc_init_array+0xc>
 8004556:	f855 3b04 	ldr.w	r3, [r5], #4
 800455a:	4798      	blx	r3
 800455c:	3601      	adds	r6, #1
 800455e:	e7f2      	b.n	8004546 <__libc_init_array+0x1e>
 8004560:	080046c8 	.word	0x080046c8
 8004564:	080046c8 	.word	0x080046c8
 8004568:	080046c8 	.word	0x080046c8
 800456c:	080046cc 	.word	0x080046cc

08004570 <__retarget_lock_acquire_recursive>:
 8004570:	4770      	bx	lr

08004572 <__retarget_lock_release_recursive>:
 8004572:	4770      	bx	lr

08004574 <memcpy>:
 8004574:	440a      	add	r2, r1
 8004576:	4291      	cmp	r1, r2
 8004578:	f100 33ff 	add.w	r3, r0, #4294967295
 800457c:	d100      	bne.n	8004580 <memcpy+0xc>
 800457e:	4770      	bx	lr
 8004580:	b510      	push	{r4, lr}
 8004582:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004586:	f803 4f01 	strb.w	r4, [r3, #1]!
 800458a:	4291      	cmp	r1, r2
 800458c:	d1f9      	bne.n	8004582 <memcpy+0xe>
 800458e:	bd10      	pop	{r4, pc}

08004590 <_free_r>:
 8004590:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004592:	2900      	cmp	r1, #0
 8004594:	d044      	beq.n	8004620 <_free_r+0x90>
 8004596:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800459a:	9001      	str	r0, [sp, #4]
 800459c:	2b00      	cmp	r3, #0
 800459e:	f1a1 0404 	sub.w	r4, r1, #4
 80045a2:	bfb8      	it	lt
 80045a4:	18e4      	addlt	r4, r4, r3
 80045a6:	f000 f83f 	bl	8004628 <__malloc_lock>
 80045aa:	4a1e      	ldr	r2, [pc, #120]	; (8004624 <_free_r+0x94>)
 80045ac:	9801      	ldr	r0, [sp, #4]
 80045ae:	6813      	ldr	r3, [r2, #0]
 80045b0:	b933      	cbnz	r3, 80045c0 <_free_r+0x30>
 80045b2:	6063      	str	r3, [r4, #4]
 80045b4:	6014      	str	r4, [r2, #0]
 80045b6:	b003      	add	sp, #12
 80045b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045bc:	f000 b83a 	b.w	8004634 <__malloc_unlock>
 80045c0:	42a3      	cmp	r3, r4
 80045c2:	d908      	bls.n	80045d6 <_free_r+0x46>
 80045c4:	6825      	ldr	r5, [r4, #0]
 80045c6:	1961      	adds	r1, r4, r5
 80045c8:	428b      	cmp	r3, r1
 80045ca:	bf01      	itttt	eq
 80045cc:	6819      	ldreq	r1, [r3, #0]
 80045ce:	685b      	ldreq	r3, [r3, #4]
 80045d0:	1949      	addeq	r1, r1, r5
 80045d2:	6021      	streq	r1, [r4, #0]
 80045d4:	e7ed      	b.n	80045b2 <_free_r+0x22>
 80045d6:	461a      	mov	r2, r3
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	b10b      	cbz	r3, 80045e0 <_free_r+0x50>
 80045dc:	42a3      	cmp	r3, r4
 80045de:	d9fa      	bls.n	80045d6 <_free_r+0x46>
 80045e0:	6811      	ldr	r1, [r2, #0]
 80045e2:	1855      	adds	r5, r2, r1
 80045e4:	42a5      	cmp	r5, r4
 80045e6:	d10b      	bne.n	8004600 <_free_r+0x70>
 80045e8:	6824      	ldr	r4, [r4, #0]
 80045ea:	4421      	add	r1, r4
 80045ec:	1854      	adds	r4, r2, r1
 80045ee:	42a3      	cmp	r3, r4
 80045f0:	6011      	str	r1, [r2, #0]
 80045f2:	d1e0      	bne.n	80045b6 <_free_r+0x26>
 80045f4:	681c      	ldr	r4, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	6053      	str	r3, [r2, #4]
 80045fa:	440c      	add	r4, r1
 80045fc:	6014      	str	r4, [r2, #0]
 80045fe:	e7da      	b.n	80045b6 <_free_r+0x26>
 8004600:	d902      	bls.n	8004608 <_free_r+0x78>
 8004602:	230c      	movs	r3, #12
 8004604:	6003      	str	r3, [r0, #0]
 8004606:	e7d6      	b.n	80045b6 <_free_r+0x26>
 8004608:	6825      	ldr	r5, [r4, #0]
 800460a:	1961      	adds	r1, r4, r5
 800460c:	428b      	cmp	r3, r1
 800460e:	bf04      	itt	eq
 8004610:	6819      	ldreq	r1, [r3, #0]
 8004612:	685b      	ldreq	r3, [r3, #4]
 8004614:	6063      	str	r3, [r4, #4]
 8004616:	bf04      	itt	eq
 8004618:	1949      	addeq	r1, r1, r5
 800461a:	6021      	streq	r1, [r4, #0]
 800461c:	6054      	str	r4, [r2, #4]
 800461e:	e7ca      	b.n	80045b6 <_free_r+0x26>
 8004620:	b003      	add	sp, #12
 8004622:	bd30      	pop	{r4, r5, pc}
 8004624:	20001bc0 	.word	0x20001bc0

08004628 <__malloc_lock>:
 8004628:	4801      	ldr	r0, [pc, #4]	; (8004630 <__malloc_lock+0x8>)
 800462a:	f7ff bfa1 	b.w	8004570 <__retarget_lock_acquire_recursive>
 800462e:	bf00      	nop
 8004630:	20001bbc 	.word	0x20001bbc

08004634 <__malloc_unlock>:
 8004634:	4801      	ldr	r0, [pc, #4]	; (800463c <__malloc_unlock+0x8>)
 8004636:	f7ff bf9c 	b.w	8004572 <__retarget_lock_release_recursive>
 800463a:	bf00      	nop
 800463c:	20001bbc 	.word	0x20001bbc

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	bf00      	nop
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	bf00      	nop
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
