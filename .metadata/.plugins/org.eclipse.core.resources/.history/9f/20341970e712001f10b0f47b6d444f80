/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "cmsis_os.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"


/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "SPIRIT_Config.h" // API code for the expansion board
#include "spsgrf.h" //init code for the wireless module
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <stdarg.h>



#include "semphr.h"                     // ARM.FreeRTOS::RTOS:Core


/* FREERTOS Tasks, Semaphores, and Variables  ------------------------------------*/
void Task_TX(void *argument);
void Task_printUsers(void *argument);
void Task_RX(void *argument);



TaskHandle_t Task_TXHandler, Task_printUsersHandler, Task_RXHandler;
SemaphoreHandle_t FLAG_SPIRIT;

void RTOS_ISR_setPriority(uint32_t IRQn){
	HAL_NVIC_SetPriorityGrouping(0);
	uint32_t lowPriority = NVIC_EncodePriority(0, 10, 0);
	//DMA1_Channel3_IRQn
	NVIC_SetPriority(IRQn, lowPriority);
}


typedef struct User{
	char username[20];
	unsigned int address;
	long timeLastSeen;
} User;


char myUsername[] = "kwiksckoped";

struct User usersOnline[256];

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void myHAL_UART_printf(const char* format, ...) {
	va_list args;
	va_start(args, format);

	// Allocate temporary buffer for formatted string
	static char buffer[1024]; // Adjust buffer size as needed
	int formatted_length = vsnprintf(buffer, sizeof(buffer), format, args);

	// Check for potential buffer overflow (optional)
	if (formatted_length >= sizeof(buffer)) {
		// Handle buffer overflow (e.g., print error message)
		while(1);
	} else {
		// Print the formatted string
		HAL_UART_Transmit(&huart2, buffer, formatted_length, HAL_MAX_DELAY);
	}

	va_end(args);
}

void myHAL_UART_clear(){
	char clear[] = "\x1B[2J\x1B[0m\x1B[H"; // clear
	HAL_UART_Transmit(&huart2, clear, strlen(clear), 100);

}

void printUsersOnline(){
	TickType_t currentTime = xTaskGetTickCount;
	myHAL_UART_printf("Users Online:\r\n");
	for (int i = 0; i < 256; i++){
		if (usersOnline[i].address != 0){
			myHAL_UART_printf("%d seen %d s ago\r\n", usersOnline[i].address, (currentTime - usersOnline[i].timeLastSeen)/1000);
		}
	}
}






volatile SpiritFlagStatus xTxDoneFlag;
volatile SpiritFlagStatus xRxDoneFlag;

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  SpiritIrqs xIrqStatus;
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;

  if (GPIO_Pin != SPIRIT1_GPIO3_Pin){return;}

  SpiritIrqGetStatus(&xIrqStatus);
  if (xIrqStatus.IRQ_TX_DATA_SENT)
  {
    xTxDoneFlag = S_SET;
  }
  if (xIrqStatus.IRQ_RX_DATA_READY)
  {
    xRxDoneFlag = S_SET;
  }
  if (xIrqStatus.IRQ_RX_DATA_DISC)
  {
	xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
    SpiritCmdStrobeRx();
    SpiritIrqClearStatus();
  }

  if (xIrqStatus.IRQ_RX_TIMEOUT){
	xSemaphoreGiveFromISR(FLAG_SPIRIT, &xHigherPriorityTaskWoken);
	SpiritCmdStrobeRx();
	SpiritIrqClearStatus();
  }
}


void receive(){
	  char payload[] = "Hello World!\r\n";
	  uint8_t rxLen;

//	  char clear[] = "\x1B[2J\x1B[0m"; // clear
//
//		HAL_UART_Transmit(&huart2, clear, 9, 100);
	//	HAL_UART_Transmit(&huart2, payload, 20, 100);

	  xRxDoneFlag = S_RESET;
	  SPSGRF_StartRx();


	  while (!xRxDoneFlag);


	  uint8_t sadd;
	  sadd = SpiritPktStackGetReceivedSourceAddress();

	  usersOnline[sadd].timeLastSeen = xTaskGetTickCount();
	  usersOnline[sadd].address = sadd;

	  rxLen = SPSGRF_GetRxData(&payload);

	  myHAL_UART_clear();
	  HAL_UART_Transmit(&huart2, "Received: ", 10, HAL_MAX_DELAY);
	  HAL_UART_Transmit(&huart2, payload, rxLen, HAL_MAX_DELAY);
	  printUsersOnline();
}


void transmit(){
	char payload[] = "Beep beep bloop bloop\r\n";

	// Send the payload
    xTxDoneFlag = S_RESET;
    SPSGRF_StartTx(payload, strlen(payload));
    while(!xTxDoneFlag);

    myHAL_UART_clear();
    myHAL_UART_printf("payload sent: %s", payload);
}


void Task_TX(void *argument){
	  while (1)
	  {
		  if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
			  transmit();
			  xSemaphoreGive(FLAG_SPIRIT);
			  vTaskDelay(2000);
		  }
	  }
}

void Task_printUsers(void *argument){
	while (1){
	  printUsersOnline();
	  vTaskDelay(1000);

	}
}

void Task_RX(void *argument){
	while(1){
		if(xSemaphoreTake(FLAG_SPIRIT, 10) == 1){
		  receive();
		  xSemaphoreGive(FLAG_SPIRIT);
		}
	}
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */



  RTOS_ISR_setPriority(EXTI9_5_IRQn);


  /* Create the tasks */
  BaseType_t retVal = xTaskCreate(Task_TX, "Task_TX", configMINIMAL_STACK_SIZE,
  		NULL, tskIDLE_PRIORITY + 4, &Task_TXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed

  retVal = xTaskCreate(Task_printUsers, "Task_printUsers", configMINIMAL_STACK_SIZE,
  		NULL, tskIDLE_PRIORITY + 2, &Task_printUsersHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed

  retVal = xTaskCreate(Task_RX, "Task_RX", configMINIMAL_STACK_SIZE,
  		NULL, tskIDLE_PRIORITY + 3, &Task_RXHandler);
  if (retVal != 1) { while(1);}	// check if task creation failed


  // Create Semaphores for task2 and task3
  FLAG_SPIRIT = xSemaphoreCreateBinary();
  if (FLAG_SPIRIT == NULL) { while(1); }





  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  MX_USART2_UART_Init();


  /* USER CODE BEGIN 2 */
  myHAL_UART_clear();
  myHAL_UART_printf("let's goooo");

  SPSGRF_Init();

  SpiritPktBasicSetDestinationAddress(0xFF);

  /* USER CODE END 2 */

  /* Init scheduler */
//  osKernelInitialize();

  /* Call init function for freertos objects (in freertos.c) */
//  MX_FREERTOS_Init();

  /* Start scheduler */
//  osKernelStart();

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


//
//  while (1)
//  {
//	  transmit();
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//  }

  vTaskStartScheduler();

  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  Period elapsed callback in non blocking mode
  * @note   This function is called  when TIM16 interrupt took place, inside
  * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
    HAL_IncTick();
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
