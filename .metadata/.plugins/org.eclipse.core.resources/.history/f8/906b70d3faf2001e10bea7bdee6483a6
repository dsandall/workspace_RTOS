#include "main.h"
UART_HandleTypeDef huart2;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);


/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void USART_Print(const char* message) {
    uint8_t i;
    for(i=0; message[i] != 0; i++){                // check for terminating NULL character
        while(!(USART2->ISR & USART_ISR_TXE));    // wait for transmit buffer to be empty
        USART2->TDR = message[i];                // transmit character to USART
    }
}

void USART2_IRQHandler(void){

    int inList = 0;
    char color;
    if (USART2->ISR & USART_ISR_RXNE){
        for(int i = 0; i < 4; i++){
                if (USART2->RDR == charList[i]){
                    inList = 1;
                    color = charList[i];
                }
        }

        if (inList){
            switch (color) {
                case 'R':
                    USART_Print("\x1B[31m"); // change text color to red
                    break;
                case 'G':
                    USART_Print("\x1B[32m"); // change text color to green
                    break;
                case 'B':
                    USART_Print("\x1B[34m"); // change text color to blue
                    break;
                case 'W':
                    USART_Print("\x1B[37m"); // change text color to white
                    break;
                default:
                    break;
            }
        }
        else{
            USART2->TDR = USART2->RDR;            // copy received char to transmit buffer to echo

        }
        USART2->ISR &= ~(USART_ISR_RXNE);    // clear the flag

    }
}

/* USER CODE END 0 */



int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  //MX_USART2_UART_Init();




  /* USER CODE BEGIN 2 */
  //PB7(blue LED)
  // turns on clock to GPIO bank B
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);

  //set PB7 to GPIO
  GPIOB->MODER &= ~(0b11 << 14);
  GPIOB->MODER |= (0b01 << 14);




  ////////////////////////UART STUFFS
  // configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers

  // AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin

    RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
    GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);   // mask AF selection
    GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |             // select USART2 (AF7)
                           (7 << GPIO_AFRL_AFSEL3_Pos));                     // for PA2 and PA3
    GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);  // push-pull output for PA2, PA3
    GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);        // no pull ups on PA2, PA3
    GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED2);    // low speed
    GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3); // enable alternate function
    GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3

    // Configure USART2 connected to the debugger virtual COM port
    RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;            // enable USART by turning on system clock
    USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);    //set data to 8 bits
    USART2->BRR = F_CLK / 115200;                        // baudrate for 115200
    USART2->CR1 |= USART_CR1_UE;                      // enable USART
    USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);        // enable transmit and receive for USART

    // enable interrupts for USART2 receive
    USART2->CR1 |= USART_CR1_RXNEIE;                // enable RXNE interrupt on USART2
    USART2->ISR &= ~(USART_ISR_RXNE);               // clear interrupt flagwhile (message[i] != 0)

    NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));        // enable USART2 ISR
    __enable_irq();

    USART_Print("\x1B[0m"); // clear attributes
    USART_Print("\x1B[3B"); // move cursor down 3 lines
    USART_Print("\x1B[5C"); // move cursor right 5 spaces
    USART_Print("All good students read the");
    USART_Print("\x1B[1B");  // move cursor down 1 lines
    USART_Print("\x1B[21D"); // move cursor left 21 lines
    USART_Print("\x1B[5m");  // turn on blinking mode
    USART_Print("Reference Manual");
    USART_Print("\x1B[H");  // move cursor to top left
    USART_Print("\x1B[0m"); // clear attributes
    USART_Print("Input: ");

    ////////////////////////////END OF UART STUFFS

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  HAL_Delay(1000);
	  GPIOB->BSRR = 0b1<<7;
	  HAL_Delay(1000);
	  GPIOB->BRR = 0b1<<7;



    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart2) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
