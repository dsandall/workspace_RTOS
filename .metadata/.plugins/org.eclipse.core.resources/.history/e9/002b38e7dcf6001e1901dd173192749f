/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
//UART_HandleTypeDef hlpuart1;

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
//static void MX_LPUART1_UART_Init(void);

/* USER CODE BEGIN PFP */
////////////////////UART STUFF
#define F_CLK 4000000     // bus clock is 4 MHz (Default speed)
char charList[] = {'R', 'G', 'B', 'W'};


void LPUART_Print(const char* message) {
    uint8_t i;
    for(i=0; message[i] != 0; i++){                // check for terminating NULL character
        while(!(LPUART1->ISR & USART_ISR_TXE));    // wait for transmit buffer to be empty
        LPUART1->TDR = message[i];                // transmit character to USART
    }
}

void LPUART2_IRQHandler(void){
	if (LPUART1->ISR & USART_ISR_RXNE){
		LPUART1->TDR = LPUART1->RDR;			// copy received char to transmit buffer to echo
		LPUART1->ISR &= ~(USART_ISR_RXNE);	// clear the flag
	}
}


/*
void LPUART1_IRQHandler(void){

	GPIOB->BSRR = 0b1<<7;


    int inList = 0;
    char color;
    if (LPUART1->ISR & USART_ISR_RXNE){

        LPUART1->TDR = LPUART1->RDR;            // copy received char to transmit buffer to echo

//        for(int i = 0; i < 4; i++){
//                if (LPUART1->RDR == charList[i]){
//                    inList = 1;
//                    color = charList[i];
//                }
//        }
//
//        if (inList){
//            switch (color) {
//                case 'R':
//                    LPUART_Print("\x1B[31m"); // change text color to red
//                    break;
//                case 'G':
//                    LPUART_Print("\x1B[32m"); // change text color to green
//                    break;
//                case 'B':
//                    LPUART_Print("\x1B[34m"); // change text color to blue
//                    break;
//                case 'W':
//                    LPUART_Print("\x1B[37m"); // change text color to white
//                    break;
//                default:
//                    break;
//            }
//        }
    }
    LPUART1->ISR &= ~(USART_ISR_RXNE | USART_ISR_ORE);    // clear the flag
    LPUART1->ICR |= 0b1 << 3; //clear the ORE interrupt flag


    GPIOB->BRR = 0b1<<7;
}
*/
////////////////////////END UART STUFF
/* USER CODE END PFP */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
  /* Configure the system clock */
  SystemClock_Config();
  /* Initialize all configured peripherals */



  /* USER CODE BEGIN 2 */

  //PB7(blue LED)
  // turns on clock to GPIO bank B
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN);

  //set PB7 to GPIO
  GPIOB->MODER &= ~(0b11 << 14);
  GPIOB->MODER |= (0b01 << 14);




  ////////////////////////UART STUFFS
  // configure GPIO pins for LPUART1 (PG7, PG8) follow order of configuring registers

  // AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin

  PWR->CR2 |= PWR_CR2_IOSV; //enable power for Port G[2:15]

	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOGEN); //enable Port G clock

	GPIOG->AFR[0] &= ~(GPIO_AFRL_AFSEL7);   // mask AF selection
	GPIOG->AFR[1] &= ~(GPIO_AFRH_AFSEL8);   // mask AF selection
	GPIOG->AFR[0] |= (8 << GPIO_AFRL_AFSEL7_Pos );  // select LPUART1 (AF8) for PG7 and PG8
	GPIOG->AFR[1] |= (8 << GPIO_AFRH_AFSEL8_Pos );  // select LPUART1 (AF8) for PG7 and PG8

	GPIOG->OTYPER &= ~(GPIO_OTYPER_OT7 | GPIO_OTYPER_OT8);  // push-pull output for PG7 PG8
	GPIOG->PUPDR &= ~(GPIO_PUPDR_PUPD7 | GPIO_PUPDR_PUPD8);        // no pull ups on PG7 PG8
	GPIOG->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED7 | GPIO_OSPEEDR_OSPEED8);    // low speed
	GPIOG->MODER &= ~(GPIO_MODER_MODE7 | GPIO_MODER_MODE8); // enable alternate function
	GPIOG->MODER |= (GPIO_MODER_MODE7_1 | GPIO_MODER_MODE8_1);    // for PA2 and PA3

	// Configure USART2 connected to the debugger virtual COM port
	RCC->APB1ENR2 |= RCC_APB1ENR2_LPUART1EN;            // enable LPUART1 by turning on system clock
	LPUART1->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);    //set data to 8 bits
	//    LPUART1->BRR = F_CLK / 115200;                        // baudrate for 115200
	LPUART1->BRR = (F_CLK * 256) / 115200;                        // baudrate for 115200

	LPUART1->CR1 |= USART_CR1_UE;                      // enable LPUART1

	LPUART1->CR1 |= (USART_CR1_TE | USART_CR1_RE);        // enable transmit and receive for LPUART1
//	LPUART1->CR1 |= (USART_CR1_TE);        // enable transmit and receive for LPUART1


	// enable interrupts for LPUART1 receive
	LPUART1->CR1 |= USART_CR1_RXNEIE;                // enable RXNE interrupt on LPUART1
	LPUART1->ISR &= ~(USART_ISR_RXNE);               // clear interrupt flag while (message[i] != 0)

	NVIC->ISER[LPUART1_IRQn / 32] = (1 << (LPUART1_IRQn & 0x1F));        // enable LPUART1 ISR

	//__enable_irq();

	LPUART_Print("\x1B[2J"); // clear screen
    LPUART_Print("\x1B[0m"); // clear attributes
    LPUART_Print("\x1B[H");  // move cursor to top left
    LPUART_Print("\x1B[3B"); // move cursor down 3 lines
    LPUART_Print("\x1B[5C"); // move cursor right 5 spaces
    LPUART_Print("All good students read the");
    LPUART_Print("\x1B[1B");  // move cursor down 1 lines
    LPUART_Print("\x1B[21D"); // move cursor left 21 lines
    LPUART_Print("\x1B[5m");  // turn on blinking mode
    LPUART_Print("Referencedddd Manual");
    LPUART_Print("\x1B[H");  // move cursor to top left
    LPUART_Print("\x1B[0m"); // clear attributes
    LPUART_Print("Input: ");




    ////////////////////////////END OF UART STUFFS
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

//	  HAL_Delay(1000);
//	  GPIOB->BSRR = 0b1<<7;
//	  HAL_Delay(1000);
//	  GPIOB->BRR = 0b1<<7;



    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
//  */
//static void MX_LPUART1_UART_Init(void)
//{
//
//  /* USER CODE BEGIN LPUART1_Init 0 */
//
//  /* USER CODE END LPUART1_Init 0 */
//
//  /* USER CODE BEGIN LPUART1_Init 1 */
//
//  /* USER CODE END LPUART1_Init 1 */
//  hlpuart1.Instance = LPUART1;
//  hlpuart1.Init.BaudRate = 209700;
//  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
//  hlpuart1.Init.StopBits = UART_STOPBITS_1;
//  hlpuart1.Init.Parity = UART_PARITY_NONE;
//  hlpuart1.Init.Mode = UART_MODE_TX_RX;
//  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
//  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
//  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
//  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
//  {
//    Error_Handler();
//  }
//  /* USER CODE BEGIN LPUART1_Init 2 */
//
//  /* USER CODE END LPUART1_Init 2 */
//
//}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
