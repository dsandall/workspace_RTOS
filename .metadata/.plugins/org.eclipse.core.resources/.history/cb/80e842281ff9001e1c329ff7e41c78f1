
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#define F_CLK 4000000 	// bus clock is 4 MHz


/* Private function prototypes -----------------------------------------------*/
void USART_Print(const char* message);

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  // configure GPIO pins for USART2 (PA2, PA3) follow order of configuring registers
  // AFR, OTYPER, PUPDR, OSPEEDR, MODDER otherwise a glitch is created on the output pin
  RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN);
  GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL2 | GPIO_AFRL_AFSEL3);		// mask AF selection
  GPIOA->AFR[0] |= ((7 << GPIO_AFRL_AFSEL2_Pos ) |				// select USART2 (AF7)
  		  	  	   (7 << GPIO_AFRL_AFSEL3_Pos)); 		  	  	// for PA2 and PA3
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);		// push-pull output for PA2, PA3
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);		// no pull ups on PA2, PA3
  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED2);	// low speed
  GPIOA->MODER &= ~(GPIO_MODER_MODE2 | GPIO_MODER_MODE3);		// enable alternate function
  GPIOA->MODER |= (GPIO_MODER_MODE2_1 | GPIO_MODER_MODE3_1);    // for PA2 and PA3

  // Configure USART2 connected to the debugger virtual COM port
  RCC->APB1ENR1 |= RCC_APB1ENR1_USART2EN;			// enable USART by turning on system clock
  USART2->CR1 &= ~(USART_CR1_M1 | USART_CR1_M0);	//set data to 8 bits
  USART2->BRR = F_CLK / 115200;						// baudrate for 115200

  USART2->CR1 |= USART_CR1_UE;						// enable USART





  //  USART2->CR1 |= (USART_CR1_TE | USART_CR1_RE);		// enable transmit and receive for USART
  USART2->CR1 |= (USART_CR1_TE);		// enable transmit and receive for USART


  // enable interrupts for USART2 receive
  USART2->CR1 |= USART_CR1_RXNEIE;					// enable RXNE interrupt on USART2
  USART2->ISR &= ~(USART_ISR_RXNE);					// clear interrupt flagwhile (message[i] != 0)

  NVIC->ISER[1] = (1 << (USART2_IRQn & 0x1F));		// enable USART2 ISR

  __enable_irq();
  USART_Print("Hello World:\r\n");


  while (1);
}

void USART_Print(const char* message) {
	uint8_t i;
	for(i=0; message[i] != 0; i++){				// check for terminating NULL character
		while(!(USART2->ISR & USART_ISR_TXE));	// wait for transmit buffer to be empty
		USART2->TDR = message[i];				// transmit character to USART
	}
}

void USART2_IRQHandler(void){
	if (USART2->ISR & USART_ISR_RXNE){
		USART2->TDR = USART2->RDR;			// copy received char to transmit buffer to echo
		USART2->ISR &= ~(USART_ISR_RXNE);	// clear the flag
	}
}
