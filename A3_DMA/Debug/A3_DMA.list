
A3_DMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000970  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000af8  08000af8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000af8  08000af8  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08000af8  08000af8  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000af8  08000af8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000af8  08000af8  00010af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000afc  08000afc  00010afc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08000b00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  08000b5c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  08000b5c  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000325f  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000c42  00000000  00000000  0002332e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000003b0  00000000  00000000  00023f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000029c  00000000  00000000  00024320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024c4e  00000000  00000000  000245bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000044b7  00000000  00000000  0004920a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0c03  00000000  00000000  0004d6c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000f9c  00000000  00000000  0012e2c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  0012f260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000005c 	.word	0x2000005c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ae0 	.word	0x08000ae0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000060 	.word	0x20000060
 80001c4:	08000ae0 	.word	0x08000ae0

080001c8 <DMA1C3_16bADC2M_init>:

	DMA1_Channel1->CCR |= DMA_CCR_EN; //must be enabled after configuration

}

void DMA1C3_16bADC2M_init(uint16_t* destAddress){
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |= RCC_AHB1ENR_DMA1EN; //Enable Clock input to DMA1
 80001d0:	4b1f      	ldr	r3, [pc, #124]	; (8000250 <DMA1C3_16bADC2M_init+0x88>)
 80001d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80001d4:	4a1e      	ldr	r2, [pc, #120]	; (8000250 <DMA1C3_16bADC2M_init+0x88>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	6493      	str	r3, [r2, #72]	; 0x48

	DMA1_Channel3->CNDTR = 1000; //number of transfers before resetting the address(es)
 80001dc:	4b1d      	ldr	r3, [pc, #116]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80001e2:	605a      	str	r2, [r3, #4]

	DMA1_Channel3->CPAR = (uint32_t)&(ADC3->DR); //Peripheral Address (DIR=0: Source address)
 80001e4:	4b1b      	ldr	r3, [pc, #108]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001e6:	4a1c      	ldr	r2, [pc, #112]	; (8000258 <DMA1C3_16bADC2M_init+0x90>)
 80001e8:	609a      	str	r2, [r3, #8]
	DMA1_Channel3->CMAR = (uint32_t)destAddress; //Memory Address(DIR=0: Destination address)
 80001ea:	4a1a      	ldr	r2, [pc, #104]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001ec:	687b      	ldr	r3, [r7, #4]
 80001ee:	60d3      	str	r3, [r2, #12]

	DMA1_Channel3->CCR = 0x0; //clear entire register
 80001f0:	4b18      	ldr	r3, [pc, #96]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	601a      	str	r2, [r3, #0]
	DMA1_Channel3->CCR |= DMA_CCR_TCIE | DMA_CCR_TEIE | DMA_CCR_HTIE | DMA_CCR_CIRC | (0b10<<12); //Priority high
 80001f6:	4b17      	ldr	r3, [pc, #92]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a16      	ldr	r2, [pc, #88]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 80001fc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000200:	f043 032e 	orr.w	r3, r3, #46	; 0x2e
 8000204:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= ((0b01<<8) | (0b01<<10)); //sets PSIZE and MSIZE to 16 bit chunks (S and D for dir=0)
 8000206:	4b13      	ldr	r3, [pc, #76]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a12      	ldr	r2, [pc, #72]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 800020c:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8000210:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR &= ~(DMA_CCR_PINC); //disable incrementation for source
 8000212:	4b10      	ldr	r3, [pc, #64]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	4a0f      	ldr	r2, [pc, #60]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 8000218:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800021c:	6013      	str	r3, [r2, #0]
	DMA1_Channel3->CCR |= (DMA_CCR_MINC); //enable incrementation for destination
 800021e:	4b0d      	ldr	r3, [pc, #52]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	4a0c      	ldr	r2, [pc, #48]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 8000224:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000228:	6013      	str	r3, [r2, #0]

	//enabling/disabling DMA_CCR_DIR merely flips direction of the transfer (DIR=0: P2M)

	DMA1_CSELR->CSELR = (0b0000<<8); //set channel 3 interrupt triggering to ADC3
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <DMA1C3_16bADC2M_init+0x94>)
 800022c:	2200      	movs	r2, #0
 800022e:	601a      	str	r2, [r3, #0]

	NVIC->ISER[DMA1_Channel3_IRQn / 32] = (1 << (DMA1_Channel3_IRQn % 32));
 8000230:	4b0b      	ldr	r3, [pc, #44]	; (8000260 <DMA1C3_16bADC2M_init+0x98>)
 8000232:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000236:	601a      	str	r2, [r3, #0]
	//TODO: Ensure that ISR is in place, handling TCIF1, THIF1, and TEIF1

	DMA1_Channel3->CCR |= DMA_CCR_EN; //must be enabled after configuration
 8000238:	4b06      	ldr	r3, [pc, #24]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a05      	ldr	r2, [pc, #20]	; (8000254 <DMA1C3_16bADC2M_init+0x8c>)
 800023e:	f043 0301 	orr.w	r3, r3, #1
 8000242:	6013      	str	r3, [r2, #0]

}
 8000244:	bf00      	nop
 8000246:	370c      	adds	r7, #12
 8000248:	46bd      	mov	sp, r7
 800024a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024e:	4770      	bx	lr
 8000250:	40021000 	.word	0x40021000
 8000254:	40020030 	.word	0x40020030
 8000258:	50040240 	.word	0x50040240
 800025c:	400200a8 	.word	0x400200a8
 8000260:	e000e100 	.word	0xe000e100

08000264 <ADC_init_wDMA>:
	  RCC->AHB2ENR |= (1<<13);  // enable ADC clock
	  ADC123_COMMON->CCR |= 0x0;
	  ADC3->CFGR |= 0x0;
}

void ADC_init_wDMA(){
 8000264:	b480      	push	{r7}
 8000266:	b085      	sub	sp, #20
 8000268:	af00      	add	r7, sp, #0
	  //Enable ADC and GPIO clock, set up PC0
	  RCC->AHB2ENR |= (1<<13);  // enable ADC clock
 800026a:	4b4c      	ldr	r3, [pc, #304]	; (800039c <ADC_init_wDMA+0x138>)
 800026c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800026e:	4a4b      	ldr	r2, [pc, #300]	; (800039c <ADC_init_wDMA+0x138>)
 8000270:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000274:	64d3      	str	r3, [r2, #76]	; 0x4c
	  RCC->AHB2ENR |= (1<<2);  // enable GPIOC clock
 8000276:	4b49      	ldr	r3, [pc, #292]	; (800039c <ADC_init_wDMA+0x138>)
 8000278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800027a:	4a48      	ldr	r2, [pc, #288]	; (800039c <ADC_init_wDMA+0x138>)
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	64d3      	str	r3, [r2, #76]	; 0x4c

	  ADC123_COMMON->CCR |= ADC_CCR_CKMODE; //alternative clock mode (HCLK/4)
 8000282:	4b47      	ldr	r3, [pc, #284]	; (80003a0 <ADC_init_wDMA+0x13c>)
 8000284:	689b      	ldr	r3, [r3, #8]
 8000286:	4a46      	ldr	r2, [pc, #280]	; (80003a0 <ADC_init_wDMA+0x13c>)
 8000288:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800028c:	6093      	str	r3, [r2, #8]


	  int pinCx = 0; //pinC0
 800028e:	2300      	movs	r3, #0
 8000290:	60bb      	str	r3, [r7, #8]
	  GPIOC->MODER |= (0b11 << (pinCx*2)); //set C0 to analog mode
 8000292:	4b44      	ldr	r3, [pc, #272]	; (80003a4 <ADC_init_wDMA+0x140>)
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	68ba      	ldr	r2, [r7, #8]
 8000298:	0052      	lsls	r2, r2, #1
 800029a:	2103      	movs	r1, #3
 800029c:	fa01 f202 	lsl.w	r2, r1, r2
 80002a0:	4611      	mov	r1, r2
 80002a2:	4a40      	ldr	r2, [pc, #256]	; (80003a4 <ADC_init_wDMA+0x140>)
 80002a4:	430b      	orrs	r3, r1
 80002a6:	6013      	str	r3, [r2, #0]
	  GPIOC->ASCR |= GPIO_ASCR_ASC0;
 80002a8:	4b3e      	ldr	r3, [pc, #248]	; (80003a4 <ADC_init_wDMA+0x140>)
 80002aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80002ac:	4a3d      	ldr	r2, [pc, #244]	; (80003a4 <ADC_init_wDMA+0x140>)
 80002ae:	f043 0301 	orr.w	r3, r3, #1
 80002b2:	62d3      	str	r3, [r2, #44]	; 0x2c

	  ADC3->DIFSEL = 0x0; //single ended mode for all channels
 80002b4:	4b3c      	ldr	r3, [pc, #240]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

	  //initialize ADC
	  ADC3->CR &= ~ADC_CR_DEEPPWD; //disable DeepPowerDown mode (defaults to on)
 80002bc:	4b3a      	ldr	r3, [pc, #232]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a39      	ldr	r2, [pc, #228]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002c2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80002c6:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= ADC_CR_ADVREGEN; //enable ADC voltage regulator (required)
 80002c8:	4b37      	ldr	r3, [pc, #220]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a36      	ldr	r2, [pc, #216]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002d2:	6093      	str	r3, [r2, #8]
	  for(int i = 20; i > 0; i--){asm("NOP");} //required delay is 20us, one clock period @4MHz is .25us
 80002d4:	2314      	movs	r3, #20
 80002d6:	60fb      	str	r3, [r7, #12]
 80002d8:	e003      	b.n	80002e2 <ADC_init_wDMA+0x7e>
 80002da:	bf00      	nop
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	3b01      	subs	r3, #1
 80002e0:	60fb      	str	r3, [r7, #12]
 80002e2:	68fb      	ldr	r3, [r7, #12]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	dcf8      	bgt.n	80002da <ADC_init_wDMA+0x76>

	  //calibrate ADC
	  ADC3->CR &= ~(ADC_CR_ADEN | ADC_CR_ADCALDIF);
 80002e8:	4b2f      	ldr	r3, [pc, #188]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002ea:	689b      	ldr	r3, [r3, #8]
 80002ec:	4a2e      	ldr	r2, [pc, #184]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80002f2:	f023 0301 	bic.w	r3, r3, #1
 80002f6:	6093      	str	r3, [r2, #8]
	  ADC3->CR |= ADC_CR_ADCAL;
 80002f8:	4b2b      	ldr	r3, [pc, #172]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002fa:	689b      	ldr	r3, [r3, #8]
 80002fc:	4a2a      	ldr	r2, [pc, #168]	; (80003a8 <ADC_init_wDMA+0x144>)
 80002fe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000302:	6093      	str	r3, [r2, #8]
	  while ((ADC3->CR & ADC_CR_ADCAL)){}; //wait for calibration
 8000304:	bf00      	nop
 8000306:	4b28      	ldr	r3, [pc, #160]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000308:	689b      	ldr	r3, [r3, #8]
 800030a:	2b00      	cmp	r3, #0
 800030c:	dbfb      	blt.n	8000306 <ADC_init_wDMA+0xa2>

	  ADC3->ISR &= ~ADC_ISR_ADRDY; //clear RDY
 800030e:	4b26      	ldr	r3, [pc, #152]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	4a25      	ldr	r2, [pc, #148]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000314:	f023 0301 	bic.w	r3, r3, #1
 8000318:	6013      	str	r3, [r2, #0]
	  ADC3->CR |= ADC_CR_ADEN; //enable ADC after regulator startup
 800031a:	4b23      	ldr	r3, [pc, #140]	; (80003a8 <ADC_init_wDMA+0x144>)
 800031c:	689b      	ldr	r3, [r3, #8]
 800031e:	4a22      	ldr	r2, [pc, #136]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000320:	f043 0301 	orr.w	r3, r3, #1
 8000324:	6093      	str	r3, [r2, #8]
	  while(!(ADC3->ISR & ADC_ISR_ADRDY)){}; //wait for ready
 8000326:	bf00      	nop
 8000328:	4b1f      	ldr	r3, [pc, #124]	; (80003a8 <ADC_init_wDMA+0x144>)
 800032a:	681b      	ldr	r3, [r3, #0]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f9      	beq.n	8000328 <ADC_init_wDMA+0xc4>
	  ADC3->ISR &= ~ADC_ISR_ADRDY; //clear RDY
 8000334:	4b1c      	ldr	r3, [pc, #112]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	4a1b      	ldr	r2, [pc, #108]	; (80003a8 <ADC_init_wDMA+0x144>)
 800033a:	f023 0301 	bic.w	r3, r3, #1
 800033e:	6013      	str	r3, [r2, #0]




	  //set up ADC (DMA, continuous mode, resolution)
	  ADC3->CFGR |= ADC_CFGR_DMAEN | ADC_CFGR_CONT | ADC_CFGR_DMACFG; //enable DMA triggering, DMA circular mode, and ADC continuous conversions
 8000340:	4b19      	ldr	r3, [pc, #100]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000342:	68db      	ldr	r3, [r3, #12]
 8000344:	4a18      	ldr	r2, [pc, #96]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000346:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800034a:	f043 0303 	orr.w	r3, r3, #3
 800034e:	60d3      	str	r3, [r2, #12]
	  ADC3->CFGR &= ~ADC_CFGR_RES; //set resolution to 12b
 8000350:	4b15      	ldr	r3, [pc, #84]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000352:	68db      	ldr	r3, [r3, #12]
 8000354:	4a14      	ldr	r2, [pc, #80]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000356:	f023 0318 	bic.w	r3, r3, #24
 800035a:	60d3      	str	r3, [r2, #12]
	  ADC3->CFGR &= ~ADC_CFGR_EXTEN; //software triggering of conversions (not hardware)
 800035c:	4b12      	ldr	r3, [pc, #72]	; (80003a8 <ADC_init_wDMA+0x144>)
 800035e:	68db      	ldr	r3, [r3, #12]
 8000360:	4a11      	ldr	r2, [pc, #68]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000362:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000366:	60d3      	str	r3, [r2, #12]



	  //set sample time for channel 1
	  int channel = 1; //channel 1
 8000368:	2301      	movs	r3, #1
 800036a:	607b      	str	r3, [r7, #4]
	  ADC3->SMPR1 = 0b100<<(3*channel); //set sample time (47.5 ADC clock cycles = some frequency)
 800036c:	687a      	ldr	r2, [r7, #4]
 800036e:	4613      	mov	r3, r2
 8000370:	005b      	lsls	r3, r3, #1
 8000372:	4413      	add	r3, r2
 8000374:	2204      	movs	r2, #4
 8000376:	409a      	lsls	r2, r3
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <ADC_init_wDMA+0x144>)
 800037a:	615a      	str	r2, [r3, #20]

	  //set conversion sequence
	  ADC3->SQR1 = (0b1<<6) | (0b0<<0); //set first conversion in sequence to channel 1, set conversion sequence length to 1 conversion (just convert channel 1 over and over)
 800037c:	4b0a      	ldr	r3, [pc, #40]	; (80003a8 <ADC_init_wDMA+0x144>)
 800037e:	2240      	movs	r2, #64	; 0x40
 8000380:	631a      	str	r2, [r3, #48]	; 0x30





	  ADC3->CR |= ADC_CR_ADSTART; //start ADC conversions
 8000382:	4b09      	ldr	r3, [pc, #36]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	4a08      	ldr	r2, [pc, #32]	; (80003a8 <ADC_init_wDMA+0x144>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6093      	str	r3, [r2, #8]

	  //myData = ADC3->DR; //read ADC3



}
 800038e:	bf00      	nop
 8000390:	3714      	adds	r7, #20
 8000392:	46bd      	mov	sp, r7
 8000394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000398:	4770      	bx	lr
 800039a:	bf00      	nop
 800039c:	40021000 	.word	0x40021000
 80003a0:	50040300 	.word	0x50040300
 80003a4:	48000800 	.word	0x48000800
 80003a8:	50040200 	.word	0x50040200

080003ac <DMA1_Channel3_IRQHandler>:
#include "main.h"
#include "DMA.h"

uint8_t DMA_Flag = 0;

void DMA1_Channel3_IRQHandler(){
 80003ac:	b480      	push	{r7}
 80003ae:	af00      	add	r7, sp, #0

	if(DMA1->ISR & DMA_ISR_TEIF3){
 80003b0:	4b18      	ldr	r3, [pc, #96]	; (8000414 <DMA1_Channel3_IRQHandler+0x68>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d002      	beq.n	80003c2 <DMA1_Channel3_IRQHandler+0x16>
		//Transfer Error
		DMA_Flag = 2;
 80003bc:	4b16      	ldr	r3, [pc, #88]	; (8000418 <DMA1_Channel3_IRQHandler+0x6c>)
 80003be:	2202      	movs	r2, #2
 80003c0:	701a      	strb	r2, [r3, #0]
		//DMA1->IFCR |= DMA_IFCR_CTEIF3;
	}

	if(DMA1->ISR & DMA_ISR_TCIF3){
 80003c2:	4b14      	ldr	r3, [pc, #80]	; (8000414 <DMA1_Channel3_IRQHandler+0x68>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d008      	beq.n	80003e0 <DMA1_Channel3_IRQHandler+0x34>
		//Transfer Complete
		//DMA1->IFCR |= DMA_IFCR_CTCIF3;
		GPIOC->ODR ^= (1<<1); //Toggle PC1
 80003ce:	4b13      	ldr	r3, [pc, #76]	; (800041c <DMA1_Channel3_IRQHandler+0x70>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a12      	ldr	r2, [pc, #72]	; (800041c <DMA1_Channel3_IRQHandler+0x70>)
 80003d4:	f083 0302 	eor.w	r3, r3, #2
 80003d8:	6153      	str	r3, [r2, #20]
		DMA_Flag = 1;
 80003da:	4b0f      	ldr	r3, [pc, #60]	; (8000418 <DMA1_Channel3_IRQHandler+0x6c>)
 80003dc:	2201      	movs	r2, #1
 80003de:	701a      	strb	r2, [r3, #0]
	}

	if(DMA1->ISR & DMA_ISR_HTIF3){
 80003e0:	4b0c      	ldr	r3, [pc, #48]	; (8000414 <DMA1_Channel3_IRQHandler+0x68>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d008      	beq.n	80003fe <DMA1_Channel3_IRQHandler+0x52>
		//Transfer Half Complete
		//DMA1->IFCR |= DMA_IFCR_CHTIF3;
		GPIOC->ODR ^= (1<<2); //Toggle PC2
 80003ec:	4b0b      	ldr	r3, [pc, #44]	; (800041c <DMA1_Channel3_IRQHandler+0x70>)
 80003ee:	695b      	ldr	r3, [r3, #20]
 80003f0:	4a0a      	ldr	r2, [pc, #40]	; (800041c <DMA1_Channel3_IRQHandler+0x70>)
 80003f2:	f083 0304 	eor.w	r3, r3, #4
 80003f6:	6153      	str	r3, [r2, #20]
		DMA_Flag = 3;
 80003f8:	4b07      	ldr	r3, [pc, #28]	; (8000418 <DMA1_Channel3_IRQHandler+0x6c>)
 80003fa:	2203      	movs	r2, #3
 80003fc:	701a      	strb	r2, [r3, #0]
	}

	DMA1->IFCR |= DMA_IFCR_CGIF3; //clear glbl interrupt flag
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <DMA1_Channel3_IRQHandler+0x68>)
 8000400:	685b      	ldr	r3, [r3, #4]
 8000402:	4a04      	ldr	r2, [pc, #16]	; (8000414 <DMA1_Channel3_IRQHandler+0x68>)
 8000404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000408:	6053      	str	r3, [r2, #4]



}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40020000 	.word	0x40020000
 8000418:	20000078 	.word	0x20000078
 800041c:	48000800 	.word	0x48000800

08000420 <PortC_Init>:

void PortC_Init(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
	// turn on clock to GPIOC
	RCC->AHB2ENR |= RCC_AHB2ENR_GPIOCEN;
 8000424:	4b16      	ldr	r3, [pc, #88]	; (8000480 <PortC_Init+0x60>)
 8000426:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000428:	4a15      	ldr	r2, [pc, #84]	; (8000480 <PortC_Init+0x60>)
 800042a:	f043 0304 	orr.w	r3, r3, #4
 800042e:	64d3      	str	r3, [r2, #76]	; 0x4c

	// Configure PC5 for GPIO output to control LED
	GPIOC->MODER   &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 |
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <PortC_Init+0x64>)
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	4a13      	ldr	r2, [pc, #76]	; (8000484 <PortC_Init+0x64>)
 8000436:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800043a:	6013      	str	r3, [r2, #0]
					    GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
	GPIOC->MODER   |=  ((1 << GPIO_MODER_MODE0_Pos) |
 800043c:	4b11      	ldr	r3, [pc, #68]	; (8000484 <PortC_Init+0x64>)
 800043e:	681b      	ldr	r3, [r3, #0]
 8000440:	4a10      	ldr	r2, [pc, #64]	; (8000484 <PortC_Init+0x64>)
 8000442:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000446:	6013      	str	r3, [r2, #0]
					    (1 << GPIO_MODER_MODE1_Pos) |
					    (1 << GPIO_MODER_MODE2_Pos) |
					    (1 << GPIO_MODER_MODE3_Pos));

	GPIOC->OTYPER  &= ~(GPIO_OTYPER_OT0 | GPIO_OTYPER_OT1 |
 8000448:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <PortC_Init+0x64>)
 800044a:	685b      	ldr	r3, [r3, #4]
 800044c:	4a0d      	ldr	r2, [pc, #52]	; (8000484 <PortC_Init+0x64>)
 800044e:	f023 030f 	bic.w	r3, r3, #15
 8000452:	6053      	str	r3, [r2, #4]
					    GPIO_OTYPER_OT2 | GPIO_OTYPER_OT3);
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 | GPIO_OSPEEDR_OSPEED1 |
 8000454:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <PortC_Init+0x64>)
 8000456:	689b      	ldr	r3, [r3, #8]
 8000458:	4a0a      	ldr	r2, [pc, #40]	; (8000484 <PortC_Init+0x64>)
 800045a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800045e:	6093      	str	r3, [r2, #8]
					    GPIO_OSPEEDR_OSPEED2 | GPIO_OSPEEDR_OSPEED3);
	GPIOC->PUPDR   &= ~(GPIO_PUPDR_PUPD0 | GPIO_PUPDR_PUPD1 |
 8000460:	4b08      	ldr	r3, [pc, #32]	; (8000484 <PortC_Init+0x64>)
 8000462:	68db      	ldr	r3, [r3, #12]
 8000464:	4a07      	ldr	r2, [pc, #28]	; (8000484 <PortC_Init+0x64>)
 8000466:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800046a:	60d3      	str	r3, [r2, #12]
					    GPIO_PUPDR_PUPD2 | GPIO_PUPDR_PUPD3);
	GPIOC->BSRR    =   (GPIO_BSRR_BR0 | GPIO_BSRR_BR1 |
 800046c:	4b05      	ldr	r3, [pc, #20]	; (8000484 <PortC_Init+0x64>)
 800046e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
 8000472:	619a      	str	r2, [r3, #24]
					    GPIO_BSRR_BR2 | GPIO_BSRR_BR3);
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr
 800047e:	bf00      	nop
 8000480:	40021000 	.word	0x40021000
 8000484:	48000800 	.word	0x48000800

08000488 <main>:


int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b084      	sub	sp, #16
 800048c:	af00      	add	r7, sp, #0

	HAL_Init();
 800048e:	f000 f8e8 	bl	8000662 <HAL_Init>
	PortC_Init();
 8000492:	f7ff ffc5 	bl	8000420 <PortC_Init>

	uint16_t arraySize = 1000;
 8000496:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800049a:	817b      	strh	r3, [r7, #10]
	uint16_t *destMem = (uint16_t*)malloc(arraySize * sizeof(uint16_t));
 800049c:	897b      	ldrh	r3, [r7, #10]
 800049e:	005b      	lsls	r3, r3, #1
 80004a0:	4618      	mov	r0, r3
 80004a2:	f000 fa2d 	bl	8000900 <malloc>
 80004a6:	4603      	mov	r3, r0
 80004a8:	607b      	str	r3, [r7, #4]
	while (destMem == NULL); //loop if malloc failed
 80004aa:	bf00      	nop
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	2b00      	cmp	r3, #0
 80004b0:	d0fc      	beq.n	80004ac <main+0x24>

	*destMem = 0;
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	2200      	movs	r2, #0
 80004b6:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i <arraySize; i++){
 80004b8:	2300      	movs	r3, #0
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	e008      	b.n	80004d0 <main+0x48>
		destMem[i] = 0;
 80004be:	68fb      	ldr	r3, [r7, #12]
 80004c0:	005b      	lsls	r3, r3, #1
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	2200      	movs	r2, #0
 80004c8:	801a      	strh	r2, [r3, #0]
	for (int i = 0; i <arraySize; i++){
 80004ca:	68fb      	ldr	r3, [r7, #12]
 80004cc:	3301      	adds	r3, #1
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	897b      	ldrh	r3, [r7, #10]
 80004d2:	68fa      	ldr	r2, [r7, #12]
 80004d4:	429a      	cmp	r2, r3
 80004d6:	dbf2      	blt.n	80004be <main+0x36>
	}



	DMA1C3_16bADC2M_init(destMem);
 80004d8:	6878      	ldr	r0, [r7, #4]
 80004da:	f7ff fe75 	bl	80001c8 <DMA1C3_16bADC2M_init>
	ADC_init_wDMA();
 80004de:	f7ff fec1 	bl	8000264 <ADC_init_wDMA>


	while (1)
 80004e2:	e7fe      	b.n	80004e2 <main+0x5a>

080004e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ea:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <HAL_MspInit+0x44>)
 80004ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004ee:	4a0e      	ldr	r2, [pc, #56]	; (8000528 <HAL_MspInit+0x44>)
 80004f0:	f043 0301 	orr.w	r3, r3, #1
 80004f4:	6613      	str	r3, [r2, #96]	; 0x60
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_MspInit+0x44>)
 80004f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004fa:	f003 0301 	and.w	r3, r3, #1
 80004fe:	607b      	str	r3, [r7, #4]
 8000500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_MspInit+0x44>)
 8000504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000506:	4a08      	ldr	r2, [pc, #32]	; (8000528 <HAL_MspInit+0x44>)
 8000508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800050c:	6593      	str	r3, [r2, #88]	; 0x58
 800050e:	4b06      	ldr	r3, [pc, #24]	; (8000528 <HAL_MspInit+0x44>)
 8000510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000516:	603b      	str	r3, [r7, #0]
 8000518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000530:	e7fe      	b.n	8000530 <NMI_Handler+0x4>

08000532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000532:	b480      	push	{r7}
 8000534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000536:	e7fe      	b.n	8000536 <HardFault_Handler+0x4>

08000538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800053c:	e7fe      	b.n	800053c <MemManage_Handler+0x4>

0800053e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800053e:	b480      	push	{r7}
 8000540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000542:	e7fe      	b.n	8000542 <BusFault_Handler+0x4>

08000544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <UsageFault_Handler+0x4>

0800054a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800054e:	bf00      	nop
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr

08000558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr

08000566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000566:	b480      	push	{r7}
 8000568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800056a:	bf00      	nop
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr

08000574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000578:	f000 f8c8 	bl	800070c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	bd80      	pop	{r7, pc}

08000580 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000588:	4a14      	ldr	r2, [pc, #80]	; (80005dc <_sbrk+0x5c>)
 800058a:	4b15      	ldr	r3, [pc, #84]	; (80005e0 <_sbrk+0x60>)
 800058c:	1ad3      	subs	r3, r2, r3
 800058e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000590:	697b      	ldr	r3, [r7, #20]
 8000592:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000594:	4b13      	ldr	r3, [pc, #76]	; (80005e4 <_sbrk+0x64>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d102      	bne.n	80005a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800059c:	4b11      	ldr	r3, [pc, #68]	; (80005e4 <_sbrk+0x64>)
 800059e:	4a12      	ldr	r2, [pc, #72]	; (80005e8 <_sbrk+0x68>)
 80005a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <_sbrk+0x64>)
 80005a4:	681a      	ldr	r2, [r3, #0]
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4413      	add	r3, r2
 80005aa:	693a      	ldr	r2, [r7, #16]
 80005ac:	429a      	cmp	r2, r3
 80005ae:	d207      	bcs.n	80005c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005b0:	f000 fa6a 	bl	8000a88 <__errno>
 80005b4:	4603      	mov	r3, r0
 80005b6:	220c      	movs	r2, #12
 80005b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005ba:	f04f 33ff 	mov.w	r3, #4294967295
 80005be:	e009      	b.n	80005d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005c0:	4b08      	ldr	r3, [pc, #32]	; (80005e4 <_sbrk+0x64>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005c6:	4b07      	ldr	r3, [pc, #28]	; (80005e4 <_sbrk+0x64>)
 80005c8:	681a      	ldr	r2, [r3, #0]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	4413      	add	r3, r2
 80005ce:	4a05      	ldr	r2, [pc, #20]	; (80005e4 <_sbrk+0x64>)
 80005d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005d2:	68fb      	ldr	r3, [r7, #12]
}
 80005d4:	4618      	mov	r0, r3
 80005d6:	3718      	adds	r7, #24
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	20018000 	.word	0x20018000
 80005e0:	00000400 	.word	0x00000400
 80005e4:	2000007c 	.word	0x2000007c
 80005e8:	200001d0 	.word	0x200001d0

080005ec <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <SystemInit+0x20>)
 80005f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005f6:	4a05      	ldr	r2, [pc, #20]	; (800060c <SystemInit+0x20>)
 80005f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	e000ed00 	.word	0xe000ed00

08000610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000648 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000614:	f7ff ffea 	bl	80005ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000618:	480c      	ldr	r0, [pc, #48]	; (800064c <LoopForever+0x6>)
  ldr r1, =_edata
 800061a:	490d      	ldr	r1, [pc, #52]	; (8000650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LoopForever+0xe>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000620:	e002      	b.n	8000628 <LoopCopyDataInit>

08000622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000626:	3304      	adds	r3, #4

08000628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800062a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800062c:	d3f9      	bcc.n	8000622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800062e:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000630:	4c0a      	ldr	r4, [pc, #40]	; (800065c <LoopForever+0x16>)
  movs r3, #0
 8000632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000634:	e001      	b.n	800063a <LoopFillZerobss>

08000636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000638:	3204      	adds	r2, #4

0800063a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800063a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800063c:	d3fb      	bcc.n	8000636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800063e:	f000 fa29 	bl	8000a94 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000642:	f7ff ff21 	bl	8000488 <main>

08000646 <LoopForever>:

LoopForever:
    b LoopForever
 8000646:	e7fe      	b.n	8000646 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000648:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800064c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000650:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000654:	08000b00 	.word	0x08000b00
  ldr r2, =_sbss
 8000658:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 800065c:	200001cc 	.word	0x200001cc

08000660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000660:	e7fe      	b.n	8000660 <ADC1_2_IRQHandler>

08000662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000662:	b580      	push	{r7, lr}
 8000664:	b082      	sub	sp, #8
 8000666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000668:	2300      	movs	r3, #0
 800066a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800066c:	2003      	movs	r0, #3
 800066e:	f000 f913 	bl	8000898 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000672:	200f      	movs	r0, #15
 8000674:	f000 f80e 	bl	8000694 <HAL_InitTick>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800067e:	2301      	movs	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	e001      	b.n	8000688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000684:	f7ff ff2e 	bl	80004e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000688:	79fb      	ldrb	r3, [r7, #7]
}
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800069c:	2300      	movs	r3, #0
 800069e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <HAL_InitTick+0x6c>)
 80006a2:	781b      	ldrb	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d023      	beq.n	80006f0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <HAL_InitTick+0x70>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <HAL_InitTick+0x6c>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f911 	bl	80008e6 <HAL_SYSTICK_Config>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d10f      	bne.n	80006ea <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	2b0f      	cmp	r3, #15
 80006ce:	d809      	bhi.n	80006e4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d0:	2200      	movs	r2, #0
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	f04f 30ff 	mov.w	r0, #4294967295
 80006d8:	f000 f8e9 	bl	80008ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006dc:	4a0a      	ldr	r2, [pc, #40]	; (8000708 <HAL_InitTick+0x74>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6013      	str	r3, [r2, #0]
 80006e2:	e007      	b.n	80006f4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80006e4:	2301      	movs	r3, #1
 80006e6:	73fb      	strb	r3, [r7, #15]
 80006e8:	e004      	b.n	80006f4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
 80006ec:	73fb      	strb	r3, [r7, #15]
 80006ee:	e001      	b.n	80006f4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006f0:	2301      	movs	r3, #1
 80006f2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80006f6:	4618      	mov	r0, r3
 80006f8:	3710      	adds	r7, #16
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000008 	.word	0x20000008
 8000704:	20000000 	.word	0x20000000
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <HAL_IncTick+0x20>)
 8000712:	781b      	ldrb	r3, [r3, #0]
 8000714:	461a      	mov	r2, r3
 8000716:	4b06      	ldr	r3, [pc, #24]	; (8000730 <HAL_IncTick+0x24>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4413      	add	r3, r2
 800071c:	4a04      	ldr	r2, [pc, #16]	; (8000730 <HAL_IncTick+0x24>)
 800071e:	6013      	str	r3, [r2, #0]
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	20000008 	.word	0x20000008
 8000730:	20000080 	.word	0x20000080

08000734 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000734:	b480      	push	{r7}
 8000736:	b085      	sub	sp, #20
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	f003 0307 	and.w	r3, r3, #7
 8000742:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000744:	4b0c      	ldr	r3, [pc, #48]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000746:	68db      	ldr	r3, [r3, #12]
 8000748:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074a:	68ba      	ldr	r2, [r7, #8]
 800074c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000750:	4013      	ands	r3, r2
 8000752:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000758:	68bb      	ldr	r3, [r7, #8]
 800075a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800075c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000760:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000764:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000766:	4a04      	ldr	r2, [pc, #16]	; (8000778 <__NVIC_SetPriorityGrouping+0x44>)
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	60d3      	str	r3, [r2, #12]
}
 800076c:	bf00      	nop
 800076e:	3714      	adds	r7, #20
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000780:	4b04      	ldr	r3, [pc, #16]	; (8000794 <__NVIC_GetPriorityGrouping+0x18>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	0a1b      	lsrs	r3, r3, #8
 8000786:	f003 0307 	and.w	r3, r3, #7
}
 800078a:	4618      	mov	r0, r3
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	e000ed00 	.word	0xe000ed00

08000798 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000798:	b480      	push	{r7}
 800079a:	b083      	sub	sp, #12
 800079c:	af00      	add	r7, sp, #0
 800079e:	4603      	mov	r3, r0
 80007a0:	6039      	str	r1, [r7, #0]
 80007a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	db0a      	blt.n	80007c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ac:	683b      	ldr	r3, [r7, #0]
 80007ae:	b2da      	uxtb	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	; (80007e4 <__NVIC_SetPriority+0x4c>)
 80007b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b6:	0112      	lsls	r2, r2, #4
 80007b8:	b2d2      	uxtb	r2, r2
 80007ba:	440b      	add	r3, r1
 80007bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007c0:	e00a      	b.n	80007d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	b2da      	uxtb	r2, r3
 80007c6:	4908      	ldr	r1, [pc, #32]	; (80007e8 <__NVIC_SetPriority+0x50>)
 80007c8:	79fb      	ldrb	r3, [r7, #7]
 80007ca:	f003 030f 	and.w	r3, r3, #15
 80007ce:	3b04      	subs	r3, #4
 80007d0:	0112      	lsls	r2, r2, #4
 80007d2:	b2d2      	uxtb	r2, r2
 80007d4:	440b      	add	r3, r1
 80007d6:	761a      	strb	r2, [r3, #24]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	e000e100 	.word	0xe000e100
 80007e8:	e000ed00 	.word	0xe000ed00

080007ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b089      	sub	sp, #36	; 0x24
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	f003 0307 	and.w	r3, r3, #7
 80007fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000800:	69fb      	ldr	r3, [r7, #28]
 8000802:	f1c3 0307 	rsb	r3, r3, #7
 8000806:	2b04      	cmp	r3, #4
 8000808:	bf28      	it	cs
 800080a:	2304      	movcs	r3, #4
 800080c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800080e:	69fb      	ldr	r3, [r7, #28]
 8000810:	3304      	adds	r3, #4
 8000812:	2b06      	cmp	r3, #6
 8000814:	d902      	bls.n	800081c <NVIC_EncodePriority+0x30>
 8000816:	69fb      	ldr	r3, [r7, #28]
 8000818:	3b03      	subs	r3, #3
 800081a:	e000      	b.n	800081e <NVIC_EncodePriority+0x32>
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000820:	f04f 32ff 	mov.w	r2, #4294967295
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	fa02 f303 	lsl.w	r3, r2, r3
 800082a:	43da      	mvns	r2, r3
 800082c:	68bb      	ldr	r3, [r7, #8]
 800082e:	401a      	ands	r2, r3
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000834:	f04f 31ff 	mov.w	r1, #4294967295
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	fa01 f303 	lsl.w	r3, r1, r3
 800083e:	43d9      	mvns	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	4313      	orrs	r3, r2
         );
}
 8000846:	4618      	mov	r0, r3
 8000848:	3724      	adds	r7, #36	; 0x24
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr
	...

08000854 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	3b01      	subs	r3, #1
 8000860:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000864:	d301      	bcc.n	800086a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000866:	2301      	movs	r3, #1
 8000868:	e00f      	b.n	800088a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800086a:	4a0a      	ldr	r2, [pc, #40]	; (8000894 <SysTick_Config+0x40>)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	3b01      	subs	r3, #1
 8000870:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000872:	210f      	movs	r1, #15
 8000874:	f04f 30ff 	mov.w	r0, #4294967295
 8000878:	f7ff ff8e 	bl	8000798 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <SysTick_Config+0x40>)
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000882:	4b04      	ldr	r3, [pc, #16]	; (8000894 <SysTick_Config+0x40>)
 8000884:	2207      	movs	r2, #7
 8000886:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	e000e010 	.word	0xe000e010

08000898 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff ff47 	bl	8000734 <__NVIC_SetPriorityGrouping>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}

080008ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ae:	b580      	push	{r7, lr}
 80008b0:	b086      	sub	sp, #24
 80008b2:	af00      	add	r7, sp, #0
 80008b4:	4603      	mov	r3, r0
 80008b6:	60b9      	str	r1, [r7, #8]
 80008b8:	607a      	str	r2, [r7, #4]
 80008ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008c0:	f7ff ff5c 	bl	800077c <__NVIC_GetPriorityGrouping>
 80008c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008c6:	687a      	ldr	r2, [r7, #4]
 80008c8:	68b9      	ldr	r1, [r7, #8]
 80008ca:	6978      	ldr	r0, [r7, #20]
 80008cc:	f7ff ff8e 	bl	80007ec <NVIC_EncodePriority>
 80008d0:	4602      	mov	r2, r0
 80008d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008d6:	4611      	mov	r1, r2
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ff5d 	bl	8000798 <__NVIC_SetPriority>
}
 80008de:	bf00      	nop
 80008e0:	3718      	adds	r7, #24
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b082      	sub	sp, #8
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff ffb0 	bl	8000854 <SysTick_Config>
 80008f4:	4603      	mov	r3, r0
}
 80008f6:	4618      	mov	r0, r3
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <malloc>:
 8000900:	4b02      	ldr	r3, [pc, #8]	; (800090c <malloc+0xc>)
 8000902:	4601      	mov	r1, r0
 8000904:	6818      	ldr	r0, [r3, #0]
 8000906:	f000 b823 	b.w	8000950 <_malloc_r>
 800090a:	bf00      	nop
 800090c:	20000058 	.word	0x20000058

08000910 <sbrk_aligned>:
 8000910:	b570      	push	{r4, r5, r6, lr}
 8000912:	4e0e      	ldr	r6, [pc, #56]	; (800094c <sbrk_aligned+0x3c>)
 8000914:	460c      	mov	r4, r1
 8000916:	6831      	ldr	r1, [r6, #0]
 8000918:	4605      	mov	r5, r0
 800091a:	b911      	cbnz	r1, 8000922 <sbrk_aligned+0x12>
 800091c:	f000 f8a4 	bl	8000a68 <_sbrk_r>
 8000920:	6030      	str	r0, [r6, #0]
 8000922:	4621      	mov	r1, r4
 8000924:	4628      	mov	r0, r5
 8000926:	f000 f89f 	bl	8000a68 <_sbrk_r>
 800092a:	1c43      	adds	r3, r0, #1
 800092c:	d00a      	beq.n	8000944 <sbrk_aligned+0x34>
 800092e:	1cc4      	adds	r4, r0, #3
 8000930:	f024 0403 	bic.w	r4, r4, #3
 8000934:	42a0      	cmp	r0, r4
 8000936:	d007      	beq.n	8000948 <sbrk_aligned+0x38>
 8000938:	1a21      	subs	r1, r4, r0
 800093a:	4628      	mov	r0, r5
 800093c:	f000 f894 	bl	8000a68 <_sbrk_r>
 8000940:	3001      	adds	r0, #1
 8000942:	d101      	bne.n	8000948 <sbrk_aligned+0x38>
 8000944:	f04f 34ff 	mov.w	r4, #4294967295
 8000948:	4620      	mov	r0, r4
 800094a:	bd70      	pop	{r4, r5, r6, pc}
 800094c:	20000088 	.word	0x20000088

08000950 <_malloc_r>:
 8000950:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000954:	1ccd      	adds	r5, r1, #3
 8000956:	f025 0503 	bic.w	r5, r5, #3
 800095a:	3508      	adds	r5, #8
 800095c:	2d0c      	cmp	r5, #12
 800095e:	bf38      	it	cc
 8000960:	250c      	movcc	r5, #12
 8000962:	2d00      	cmp	r5, #0
 8000964:	4607      	mov	r7, r0
 8000966:	db01      	blt.n	800096c <_malloc_r+0x1c>
 8000968:	42a9      	cmp	r1, r5
 800096a:	d905      	bls.n	8000978 <_malloc_r+0x28>
 800096c:	230c      	movs	r3, #12
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	2600      	movs	r6, #0
 8000972:	4630      	mov	r0, r6
 8000974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000978:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000a4c <_malloc_r+0xfc>
 800097c:	f000 f868 	bl	8000a50 <__malloc_lock>
 8000980:	f8d8 3000 	ldr.w	r3, [r8]
 8000984:	461c      	mov	r4, r3
 8000986:	bb5c      	cbnz	r4, 80009e0 <_malloc_r+0x90>
 8000988:	4629      	mov	r1, r5
 800098a:	4638      	mov	r0, r7
 800098c:	f7ff ffc0 	bl	8000910 <sbrk_aligned>
 8000990:	1c43      	adds	r3, r0, #1
 8000992:	4604      	mov	r4, r0
 8000994:	d155      	bne.n	8000a42 <_malloc_r+0xf2>
 8000996:	f8d8 4000 	ldr.w	r4, [r8]
 800099a:	4626      	mov	r6, r4
 800099c:	2e00      	cmp	r6, #0
 800099e:	d145      	bne.n	8000a2c <_malloc_r+0xdc>
 80009a0:	2c00      	cmp	r4, #0
 80009a2:	d048      	beq.n	8000a36 <_malloc_r+0xe6>
 80009a4:	6823      	ldr	r3, [r4, #0]
 80009a6:	4631      	mov	r1, r6
 80009a8:	4638      	mov	r0, r7
 80009aa:	eb04 0903 	add.w	r9, r4, r3
 80009ae:	f000 f85b 	bl	8000a68 <_sbrk_r>
 80009b2:	4581      	cmp	r9, r0
 80009b4:	d13f      	bne.n	8000a36 <_malloc_r+0xe6>
 80009b6:	6821      	ldr	r1, [r4, #0]
 80009b8:	1a6d      	subs	r5, r5, r1
 80009ba:	4629      	mov	r1, r5
 80009bc:	4638      	mov	r0, r7
 80009be:	f7ff ffa7 	bl	8000910 <sbrk_aligned>
 80009c2:	3001      	adds	r0, #1
 80009c4:	d037      	beq.n	8000a36 <_malloc_r+0xe6>
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	442b      	add	r3, r5
 80009ca:	6023      	str	r3, [r4, #0]
 80009cc:	f8d8 3000 	ldr.w	r3, [r8]
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d038      	beq.n	8000a46 <_malloc_r+0xf6>
 80009d4:	685a      	ldr	r2, [r3, #4]
 80009d6:	42a2      	cmp	r2, r4
 80009d8:	d12b      	bne.n	8000a32 <_malloc_r+0xe2>
 80009da:	2200      	movs	r2, #0
 80009dc:	605a      	str	r2, [r3, #4]
 80009de:	e00f      	b.n	8000a00 <_malloc_r+0xb0>
 80009e0:	6822      	ldr	r2, [r4, #0]
 80009e2:	1b52      	subs	r2, r2, r5
 80009e4:	d41f      	bmi.n	8000a26 <_malloc_r+0xd6>
 80009e6:	2a0b      	cmp	r2, #11
 80009e8:	d917      	bls.n	8000a1a <_malloc_r+0xca>
 80009ea:	1961      	adds	r1, r4, r5
 80009ec:	42a3      	cmp	r3, r4
 80009ee:	6025      	str	r5, [r4, #0]
 80009f0:	bf18      	it	ne
 80009f2:	6059      	strne	r1, [r3, #4]
 80009f4:	6863      	ldr	r3, [r4, #4]
 80009f6:	bf08      	it	eq
 80009f8:	f8c8 1000 	streq.w	r1, [r8]
 80009fc:	5162      	str	r2, [r4, r5]
 80009fe:	604b      	str	r3, [r1, #4]
 8000a00:	4638      	mov	r0, r7
 8000a02:	f104 060b 	add.w	r6, r4, #11
 8000a06:	f000 f829 	bl	8000a5c <__malloc_unlock>
 8000a0a:	f026 0607 	bic.w	r6, r6, #7
 8000a0e:	1d23      	adds	r3, r4, #4
 8000a10:	1af2      	subs	r2, r6, r3
 8000a12:	d0ae      	beq.n	8000972 <_malloc_r+0x22>
 8000a14:	1b9b      	subs	r3, r3, r6
 8000a16:	50a3      	str	r3, [r4, r2]
 8000a18:	e7ab      	b.n	8000972 <_malloc_r+0x22>
 8000a1a:	42a3      	cmp	r3, r4
 8000a1c:	6862      	ldr	r2, [r4, #4]
 8000a1e:	d1dd      	bne.n	80009dc <_malloc_r+0x8c>
 8000a20:	f8c8 2000 	str.w	r2, [r8]
 8000a24:	e7ec      	b.n	8000a00 <_malloc_r+0xb0>
 8000a26:	4623      	mov	r3, r4
 8000a28:	6864      	ldr	r4, [r4, #4]
 8000a2a:	e7ac      	b.n	8000986 <_malloc_r+0x36>
 8000a2c:	4634      	mov	r4, r6
 8000a2e:	6876      	ldr	r6, [r6, #4]
 8000a30:	e7b4      	b.n	800099c <_malloc_r+0x4c>
 8000a32:	4613      	mov	r3, r2
 8000a34:	e7cc      	b.n	80009d0 <_malloc_r+0x80>
 8000a36:	230c      	movs	r3, #12
 8000a38:	603b      	str	r3, [r7, #0]
 8000a3a:	4638      	mov	r0, r7
 8000a3c:	f000 f80e 	bl	8000a5c <__malloc_unlock>
 8000a40:	e797      	b.n	8000972 <_malloc_r+0x22>
 8000a42:	6025      	str	r5, [r4, #0]
 8000a44:	e7dc      	b.n	8000a00 <_malloc_r+0xb0>
 8000a46:	605b      	str	r3, [r3, #4]
 8000a48:	deff      	udf	#255	; 0xff
 8000a4a:	bf00      	nop
 8000a4c:	20000084 	.word	0x20000084

08000a50 <__malloc_lock>:
 8000a50:	4801      	ldr	r0, [pc, #4]	; (8000a58 <__malloc_lock+0x8>)
 8000a52:	f000 b843 	b.w	8000adc <__retarget_lock_acquire_recursive>
 8000a56:	bf00      	nop
 8000a58:	200001c8 	.word	0x200001c8

08000a5c <__malloc_unlock>:
 8000a5c:	4801      	ldr	r0, [pc, #4]	; (8000a64 <__malloc_unlock+0x8>)
 8000a5e:	f000 b83e 	b.w	8000ade <__retarget_lock_release_recursive>
 8000a62:	bf00      	nop
 8000a64:	200001c8 	.word	0x200001c8

08000a68 <_sbrk_r>:
 8000a68:	b538      	push	{r3, r4, r5, lr}
 8000a6a:	4d06      	ldr	r5, [pc, #24]	; (8000a84 <_sbrk_r+0x1c>)
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	4604      	mov	r4, r0
 8000a70:	4608      	mov	r0, r1
 8000a72:	602b      	str	r3, [r5, #0]
 8000a74:	f7ff fd84 	bl	8000580 <_sbrk>
 8000a78:	1c43      	adds	r3, r0, #1
 8000a7a:	d102      	bne.n	8000a82 <_sbrk_r+0x1a>
 8000a7c:	682b      	ldr	r3, [r5, #0]
 8000a7e:	b103      	cbz	r3, 8000a82 <_sbrk_r+0x1a>
 8000a80:	6023      	str	r3, [r4, #0]
 8000a82:	bd38      	pop	{r3, r4, r5, pc}
 8000a84:	200001c4 	.word	0x200001c4

08000a88 <__errno>:
 8000a88:	4b01      	ldr	r3, [pc, #4]	; (8000a90 <__errno+0x8>)
 8000a8a:	6818      	ldr	r0, [r3, #0]
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000058 	.word	0x20000058

08000a94 <__libc_init_array>:
 8000a94:	b570      	push	{r4, r5, r6, lr}
 8000a96:	4d0d      	ldr	r5, [pc, #52]	; (8000acc <__libc_init_array+0x38>)
 8000a98:	4c0d      	ldr	r4, [pc, #52]	; (8000ad0 <__libc_init_array+0x3c>)
 8000a9a:	1b64      	subs	r4, r4, r5
 8000a9c:	10a4      	asrs	r4, r4, #2
 8000a9e:	2600      	movs	r6, #0
 8000aa0:	42a6      	cmp	r6, r4
 8000aa2:	d109      	bne.n	8000ab8 <__libc_init_array+0x24>
 8000aa4:	4d0b      	ldr	r5, [pc, #44]	; (8000ad4 <__libc_init_array+0x40>)
 8000aa6:	4c0c      	ldr	r4, [pc, #48]	; (8000ad8 <__libc_init_array+0x44>)
 8000aa8:	f000 f81a 	bl	8000ae0 <_init>
 8000aac:	1b64      	subs	r4, r4, r5
 8000aae:	10a4      	asrs	r4, r4, #2
 8000ab0:	2600      	movs	r6, #0
 8000ab2:	42a6      	cmp	r6, r4
 8000ab4:	d105      	bne.n	8000ac2 <__libc_init_array+0x2e>
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
 8000ab8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000abc:	4798      	blx	r3
 8000abe:	3601      	adds	r6, #1
 8000ac0:	e7ee      	b.n	8000aa0 <__libc_init_array+0xc>
 8000ac2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac6:	4798      	blx	r3
 8000ac8:	3601      	adds	r6, #1
 8000aca:	e7f2      	b.n	8000ab2 <__libc_init_array+0x1e>
 8000acc:	08000af8 	.word	0x08000af8
 8000ad0:	08000af8 	.word	0x08000af8
 8000ad4:	08000af8 	.word	0x08000af8
 8000ad8:	08000afc 	.word	0x08000afc

08000adc <__retarget_lock_acquire_recursive>:
 8000adc:	4770      	bx	lr

08000ade <__retarget_lock_release_recursive>:
 8000ade:	4770      	bx	lr

08000ae0 <_init>:
 8000ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae2:	bf00      	nop
 8000ae4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ae6:	bc08      	pop	{r3}
 8000ae8:	469e      	mov	lr, r3
 8000aea:	4770      	bx	lr

08000aec <_fini>:
 8000aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000aee:	bf00      	nop
 8000af0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af2:	bc08      	pop	{r3}
 8000af4:	469e      	mov	lr, r3
 8000af6:	4770      	bx	lr
